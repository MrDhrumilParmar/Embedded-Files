
ADC_Cube_Mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009afc  08009afc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b04  08009b04  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000958  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009e8  200009e8  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c57b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c1  00000000  00000000  0003c63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  00040700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001660  00000000  00000000  00041f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f9b  00000000  00000000  00043570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f479  00000000  00000000  0006950b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0810  00000000  00000000  00088984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00169194  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006868  00000000  00000000  001691e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009ac0 	.word	0x08009ac0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009ac0 	.word	0x08009ac0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 ff06 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f828 	bl	8000528 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 faf4 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 fabc 	bl	8000a58 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e0:	f000 f99a 	bl	8000818 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e4:	f000 f9c6 	bl	8000874 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e8:	f000 f9f4 	bl	80008d4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ec:	f008 fea0 	bl	8009230 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004f0:	f000 f88c 	bl	800060c <MX_ADC1_Init>
  MX_TIM4_Init();
 80004f4:	f000 fa24 	bl	8000940 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f008 fec0 	bl	800927c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004fc:	2104      	movs	r1, #4
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <main+0x58>)
 8000500:	f005 f8e4 	bl	80056cc <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000504:	2108      	movs	r1, #8
 8000506:	4807      	ldr	r0, [pc, #28]	; (8000524 <main+0x58>)
 8000508:	f005 f8e0 	bl	80056cc <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);
 800050c:	4b05      	ldr	r3, [pc, #20]	; (8000524 <main+0x58>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000514:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 100);
 8000516:	4b03      	ldr	r3, [pc, #12]	; (8000524 <main+0x58>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2264      	movs	r2, #100	; 0x64
 800051c:	63da      	str	r2, [r3, #60]	; 0x3c
 800051e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8000520:	4618      	mov	r0, r3
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000248 	.word	0x20000248

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f009 f9bc 	bl	80098b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <SystemClock_Config+0xdc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <SystemClock_Config+0xdc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <SystemClock_Config+0xdc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b26      	ldr	r3, [pc, #152]	; (8000608 <SystemClock_Config+0xe0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a25      	ldr	r2, [pc, #148]	; (8000608 <SystemClock_Config+0xe0>)
 8000572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SystemClock_Config+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000584:	2303      	movs	r3, #3
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	2301      	movs	r3, #1
 8000590:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000592:	2310      	movs	r3, #16
 8000594:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005a4:	2348      	movs	r3, #72	; 0x48
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005ac:	2303      	movs	r3, #3
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 f92b 	bl	8004810 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 fb8e 	bl	8000ce0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fb8c 	bl	8004d00 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005ee:	f000 fb77 	bl	8000ce0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f004 fc68 	bl	8004ecc <HAL_RCC_MCOConfig>
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800061e:	4b7b      	ldr	r3, [pc, #492]	; (800080c <MX_ADC1_Init+0x200>)
 8000620:	4a7b      	ldr	r2, [pc, #492]	; (8000810 <MX_ADC1_Init+0x204>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000624:	4b79      	ldr	r3, [pc, #484]	; (800080c <MX_ADC1_Init+0x200>)
 8000626:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800062a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b77      	ldr	r3, [pc, #476]	; (800080c <MX_ADC1_Init+0x200>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000632:	4b76      	ldr	r3, [pc, #472]	; (800080c <MX_ADC1_Init+0x200>)
 8000634:	2201      	movs	r2, #1
 8000636:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000638:	4b74      	ldr	r3, [pc, #464]	; (800080c <MX_ADC1_Init+0x200>)
 800063a:	2201      	movs	r2, #1
 800063c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b73      	ldr	r3, [pc, #460]	; (800080c <MX_ADC1_Init+0x200>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b71      	ldr	r3, [pc, #452]	; (800080c <MX_ADC1_Init+0x200>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b6f      	ldr	r3, [pc, #444]	; (800080c <MX_ADC1_Init+0x200>)
 800064e:	4a71      	ldr	r2, [pc, #452]	; (8000814 <MX_ADC1_Init+0x208>)
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b6e      	ldr	r3, [pc, #440]	; (800080c <MX_ADC1_Init+0x200>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8000658:	4b6c      	ldr	r3, [pc, #432]	; (800080c <MX_ADC1_Init+0x200>)
 800065a:	2210      	movs	r2, #16
 800065c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800065e:	4b6b      	ldr	r3, [pc, #428]	; (800080c <MX_ADC1_Init+0x200>)
 8000660:	2201      	movs	r2, #1
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b69      	ldr	r3, [pc, #420]	; (800080c <MX_ADC1_Init+0x200>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066c:	4867      	ldr	r0, [pc, #412]	; (800080c <MX_ADC1_Init+0x200>)
 800066e:	f000 fecd 	bl	800140c <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 fb32 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800067c:	2301      	movs	r3, #1
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	485f      	ldr	r0, [pc, #380]	; (800080c <MX_ADC1_Init+0x200>)
 800068e:	f000 ff01 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 fb22 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4859      	ldr	r0, [pc, #356]	; (800080c <MX_ADC1_Init+0x200>)
 80006a6:	f000 fef5 	bl	8001494 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80006b0:	f000 fb16 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80006b4:	2303      	movs	r3, #3
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4853      	ldr	r0, [pc, #332]	; (800080c <MX_ADC1_Init+0x200>)
 80006be:	f000 fee9 	bl	8001494 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80006c8:	f000 fb0a 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	484d      	ldr	r0, [pc, #308]	; (800080c <MX_ADC1_Init+0x200>)
 80006d6:	f000 fedd 	bl	8001494 <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006e0:	f000 fafe 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80006e4:	2305      	movs	r3, #5
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4847      	ldr	r0, [pc, #284]	; (800080c <MX_ADC1_Init+0x200>)
 80006ee:	f000 fed1 	bl	8001494 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80006f8:	f000 faf2 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 80006fc:	2306      	movs	r3, #6
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4841      	ldr	r0, [pc, #260]	; (800080c <MX_ADC1_Init+0x200>)
 8000706:	f000 fec5 	bl	8001494 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000710:	f000 fae6 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000714:	2307      	movs	r3, #7
 8000716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	483b      	ldr	r0, [pc, #236]	; (800080c <MX_ADC1_Init+0x200>)
 800071e:	f000 feb9 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000728:	f000 fada 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4835      	ldr	r0, [pc, #212]	; (800080c <MX_ADC1_Init+0x200>)
 8000736:	f000 fead 	bl	8001494 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000740:	f000 face 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 8000744:	2309      	movs	r3, #9
 8000746:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	482f      	ldr	r0, [pc, #188]	; (800080c <MX_ADC1_Init+0x200>)
 800074e:	f000 fea1 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000758:	f000 fac2 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 800075c:	230a      	movs	r3, #10
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	4829      	ldr	r0, [pc, #164]	; (800080c <MX_ADC1_Init+0x200>)
 8000766:	f000 fe95 	bl	8001494 <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8000770:	f000 fab6 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 8000774:	230b      	movs	r3, #11
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4823      	ldr	r0, [pc, #140]	; (800080c <MX_ADC1_Init+0x200>)
 800077e:	f000 fe89 	bl	8001494 <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 8000788:	f000 faaa 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 800078c:	230c      	movs	r3, #12
 800078e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	481d      	ldr	r0, [pc, #116]	; (800080c <MX_ADC1_Init+0x200>)
 8000796:	f000 fe7d 	bl	8001494 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 80007a0:	f000 fa9e 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 13;
 80007a4:	230d      	movs	r3, #13
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <MX_ADC1_Init+0x200>)
 80007ae:	f000 fe71 	bl	8001494 <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 80007b8:	f000 fa92 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 14;
 80007bc:	230e      	movs	r3, #14
 80007be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <MX_ADC1_Init+0x200>)
 80007c6:	f000 fe65 	bl	8001494 <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80007d0:	f000 fa86 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 15;
 80007d4:	230f      	movs	r3, #15
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_ADC1_Init+0x200>)
 80007de:	f000 fe59 	bl	8001494 <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 80007e8:	f000 fa7a 	bl	8000ce0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 16;
 80007ec:	2310      	movs	r3, #16
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_ADC1_Init+0x200>)
 80007f6:	f000 fe4d 	bl	8001494 <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x1f8>
  {
    Error_Handler();
 8000800:	f000 fa6e 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200000ac 	.word	0x200000ac
 8000810:	40012000 	.word	0x40012000
 8000814:	0f000001 	.word	0x0f000001

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_I2C1_Init+0x50>)
 800081e:	4a13      	ldr	r2, [pc, #76]	; (800086c <MX_I2C1_Init+0x54>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_I2C1_Init+0x50>)
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_I2C1_Init+0x58>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_I2C1_Init+0x50>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_I2C1_Init+0x50>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_I2C1_Init+0x50>)
 8000836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_I2C1_Init+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_I2C1_Init+0x50>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_I2C1_Init+0x50>)
 8000856:	f003 f9f7 	bl	8003c48 <HAL_I2C_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000860:	f000 fa3e 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000154 	.word	0x20000154
 800086c:	40005400 	.word	0x40005400
 8000870:	000186a0 	.word	0x000186a0

08000874 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S3_Init 0 */
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */
  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_I2S3_Init+0x54>)
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <MX_I2S3_Init+0x58>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2S3_Init+0x54>)
 8000880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000884:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_I2S3_Init+0x54>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_I2S3_Init+0x54>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000892:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_I2S3_Init+0x54>)
 8000894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000898:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_I2S3_Init+0x54>)
 800089c:	4a0c      	ldr	r2, [pc, #48]	; (80008d0 <MX_I2S3_Init+0x5c>)
 800089e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_I2S3_Init+0x54>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_I2S3_Init+0x54>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_I2S3_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_I2S3_Init+0x54>)
 80008b4:	f003 fb0c 	bl	8003ed0 <HAL_I2S_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008be:	f000 fa0f 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */
  /* USER CODE END I2S3_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200001a8 	.word	0x200001a8
 80008cc:	40003c00 	.word	0x40003c00
 80008d0:	00017700 	.word	0x00017700

080008d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <MX_SPI1_Init+0x64>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <MX_SPI1_Init+0x68>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b14      	ldr	r3, [pc, #80]	; (8000938 <MX_SPI1_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_SPI1_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_SPI1_Init+0x64>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_SPI1_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_SPI1_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_SPI1_Init+0x64>)
 8000920:	220a      	movs	r2, #10
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	; (8000938 <MX_SPI1_Init+0x64>)
 8000926:	f004 fd9f 	bl	8005468 <HAL_SPI_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000930:	f000 f9d6 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	200001f0 	.word	0x200001f0
 800093c:	40013000 	.word	0x40013000

08000940 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	; 0x38
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000970:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000972:	4a38      	ldr	r2, [pc, #224]	; (8000a54 <MX_TIM4_Init+0x114>)
 8000974:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31;
 8000976:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000978:	221f      	movs	r2, #31
 800097a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <MX_TIM4_Init+0x110>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000984:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000988:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <MX_TIM4_Init+0x110>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000990:	4b2f      	ldr	r3, [pc, #188]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000996:	482e      	ldr	r0, [pc, #184]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000998:	f004 fdef 	bl	800557a <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009a2:	f000 f99d 	bl	8000ce0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4827      	ldr	r0, [pc, #156]	; (8000a50 <MX_TIM4_Init+0x110>)
 80009b4:	f005 f814 	bl	80059e0 <HAL_TIM_ConfigClockSource>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80009be:	f000 f98f 	bl	8000ce0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009c2:	4823      	ldr	r0, [pc, #140]	; (8000a50 <MX_TIM4_Init+0x110>)
 80009c4:	f004 fe28 	bl	8005618 <HAL_TIM_PWM_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009ce:	f000 f987 	bl	8000ce0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009da:	f107 0320 	add.w	r3, r7, #32
 80009de:	4619      	mov	r1, r3
 80009e0:	481b      	ldr	r0, [pc, #108]	; (8000a50 <MX_TIM4_Init+0x110>)
 80009e2:	f005 fbd5 	bl	8006190 <HAL_TIMEx_MasterConfigSynchronization>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80009ec:	f000 f978 	bl	8000ce0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f0:	2360      	movs	r3, #96	; 0x60
 80009f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80009f4:	2364      	movs	r3, #100	; 0x64
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2204      	movs	r2, #4
 8000a04:	4619      	mov	r1, r3
 8000a06:	4812      	ldr	r0, [pc, #72]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000a08:	f004 ff28 	bl	800585c <HAL_TIM_PWM_ConfigChannel>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a12:	f000 f965 	bl	8000ce0 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_2);
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	699a      	ldr	r2, [r3, #24]
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a24:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2208      	movs	r2, #8
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4807      	ldr	r0, [pc, #28]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000a32:	f004 ff13 	bl	800585c <HAL_TIM_PWM_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000a3c:	f000 f950 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <MX_TIM4_Init+0x110>)
 8000a42:	f000 fb59 	bl	80010f8 <HAL_TIM_MspPostInit>

}
 8000a46:	bf00      	nop
 8000a48:	3738      	adds	r7, #56	; 0x38
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000248 	.word	0x20000248
 8000a54:	40000800 	.word	0x40000800

08000a58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_DMA_Init+0x68>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <MX_DMA_Init+0x68>)
 8000a68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_DMA_Init+0x68>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_DMA_Init+0x68>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <MX_DMA_Init+0x68>)
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_DMA_Init+0x68>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	200e      	movs	r0, #14
 8000a9c:	f000 fff3 	bl	8001a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000aa0:	200e      	movs	r0, #14
 8000aa2:	f001 f80c 	bl	8001abe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2038      	movs	r0, #56	; 0x38
 8000aac:	f000 ffeb 	bl	8001a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ab0:	2038      	movs	r0, #56	; 0x38
 8000ab2:	f001 f804 	bl	8001abe <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	4b7a      	ldr	r3, [pc, #488]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a79      	ldr	r2, [pc, #484]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000ae4:	f043 0310 	orr.w	r3, r3, #16
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b77      	ldr	r3, [pc, #476]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	61bb      	str	r3, [r7, #24]
 8000af4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	4b73      	ldr	r3, [pc, #460]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a72      	ldr	r2, [pc, #456]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b70      	ldr	r3, [pc, #448]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b6c      	ldr	r3, [pc, #432]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a6b      	ldr	r2, [pc, #428]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b69      	ldr	r3, [pc, #420]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b65      	ldr	r3, [pc, #404]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a64      	ldr	r2, [pc, #400]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b62      	ldr	r3, [pc, #392]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b5e      	ldr	r3, [pc, #376]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a5d      	ldr	r2, [pc, #372]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b5b      	ldr	r3, [pc, #364]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b57      	ldr	r3, [pc, #348]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a56      	ldr	r2, [pc, #344]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <MX_GPIO_Init+0x204>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2108      	movs	r1, #8
 8000b86:	4851      	ldr	r0, [pc, #324]	; (8000ccc <MX_GPIO_Init+0x208>)
 8000b88:	f001 fc3a 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2101      	movs	r1, #1
 8000b90:	484f      	ldr	r0, [pc, #316]	; (8000cd0 <MX_GPIO_Init+0x20c>)
 8000b92:	f001 fc35 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b96:	2200      	movs	r2, #0
 8000b98:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b9c:	484d      	ldr	r0, [pc, #308]	; (8000cd4 <MX_GPIO_Init+0x210>)
 8000b9e:	f001 fc2f 	bl	8002400 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4844      	ldr	r0, [pc, #272]	; (8000ccc <MX_GPIO_Init+0x208>)
 8000bba:	f001 fa85 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	483e      	ldr	r0, [pc, #248]	; (8000cd0 <MX_GPIO_Init+0x20c>)
 8000bd6:	f001 fa77 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bea:	2305      	movs	r3, #5
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4836      	ldr	r0, [pc, #216]	; (8000cd0 <MX_GPIO_Init+0x20c>)
 8000bf6:	f001 fa67 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bfe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4832      	ldr	r0, [pc, #200]	; (8000cd8 <MX_GPIO_Init+0x214>)
 8000c10:	f001 fa5a 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	482d      	ldr	r0, [pc, #180]	; (8000cdc <MX_GPIO_Init+0x218>)
 8000c28:	f001 fa4e 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4824      	ldr	r0, [pc, #144]	; (8000cdc <MX_GPIO_Init+0x218>)
 8000c4a:	f001 fa3d 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c4e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c52:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481b      	ldr	r0, [pc, #108]	; (8000cd4 <MX_GPIO_Init+0x210>)
 8000c68:	f001 fa2e 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <MX_GPIO_Init+0x214>)
 8000c8a:	f001 fa1d 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_GPIO_Init+0x210>)
 8000ca2:	f001 fa11 	bl	80020c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000caa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <MX_GPIO_Init+0x208>)
 8000cbc:	f001 fa04 	bl	80020c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3730      	adds	r7, #48	; 0x30
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020c00 	.word	0x40020c00
 8000cd8:	40020000 	.word	0x40020000
 8000cdc:	40020400 	.word	0x40020400

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a0f      	ldr	r2, [pc, #60]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x4c>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d2e:	2007      	movs	r0, #7
 8000d30:	f000 fe9e 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40023800 	.word	0x40023800

08000d40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <HAL_ADC_MspInit+0xdc>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d157      	bne.n	8000e12 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b2e      	ldr	r3, [pc, #184]	; (8000e20 <HAL_ADC_MspInit+0xe0>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <HAL_ADC_MspInit+0xe0>)
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d70:	6453      	str	r3, [r2, #68]	; 0x44
 8000d72:	4b2b      	ldr	r3, [pc, #172]	; (8000e20 <HAL_ADC_MspInit+0xe0>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <HAL_ADC_MspInit+0xe0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a26      	ldr	r2, [pc, #152]	; (8000e20 <HAL_ADC_MspInit+0xe0>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <HAL_ADC_MspInit+0xe0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	481d      	ldr	r0, [pc, #116]	; (8000e24 <HAL_ADC_MspInit+0xe4>)
 8000dae:	f001 f98b 	bl	80020c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000db4:	4a1d      	ldr	r2, [pc, #116]	; (8000e2c <HAL_ADC_MspInit+0xec>)
 8000db6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000dcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000ddc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000de0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000de4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000de8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000df8:	f000 fe7c 	bl	8001af4 <HAL_DMA_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e02:	f7ff ff6d 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_ADC_MspInit+0xe8>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	200000f4 	.word	0x200000f4
 8000e2c:	40026410 	.word	0x40026410

08000e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <HAL_I2C_MspInit+0x84>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d12c      	bne.n	8000eac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e74:	2312      	movs	r3, #18
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e80:	2304      	movs	r3, #4
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480c      	ldr	r0, [pc, #48]	; (8000ebc <HAL_I2C_MspInit+0x8c>)
 8000e8c:	f001 f91c 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_I2C_MspInit+0x88>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40005400 	.word	0x40005400
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08e      	sub	sp, #56	; 0x38
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <HAL_I2S_MspInit+0xf0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d15a      	bne.n	8000fa6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000ef4:	2332      	movs	r3, #50	; 0x32
 8000ef6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4618      	mov	r0, r3
 8000f02:	f004 f971 	bl	80051e8 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f0c:	f7ff fee8 	bl	8000ce0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f18:	4a26      	ldr	r2, [pc, #152]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f20:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	4a1f      	ldr	r2, [pc, #124]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3c:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6313      	str	r3, [r2, #48]	; 0x30
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <HAL_I2S_MspInit+0xf4>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f64:	2310      	movs	r3, #16
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f74:	2306      	movs	r3, #6
 8000f76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <HAL_I2S_MspInit+0xf8>)
 8000f80:	f001 f8a2 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f84:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f96:	2306      	movs	r3, #6
 8000f98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4806      	ldr	r0, [pc, #24]	; (8000fbc <HAL_I2S_MspInit+0xfc>)
 8000fa2:	f001 f891 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3738      	adds	r7, #56	; 0x38
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40003c00 	.word	0x40003c00
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_SPI_MspInit+0x84>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d12b      	bne.n	800103a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_SPI_MspInit+0x88>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_SPI_MspInit+0x88>)
 8000fec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_SPI_MspInit+0x88>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_SPI_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a10      	ldr	r2, [pc, #64]	; (8001048 <HAL_SPI_MspInit+0x88>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_SPI_MspInit+0x88>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800101a:	23e0      	movs	r3, #224	; 0xe0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102a:	2305      	movs	r3, #5
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_SPI_MspInit+0x8c>)
 8001036:	f001 f847 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40013000 	.word	0x40013000
 8001048:	40023800 	.word	0x40023800
 800104c:	40020000 	.word	0x40020000

08001050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a22      	ldr	r2, [pc, #136]	; (80010e8 <HAL_TIM_Base_MspInit+0x98>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d13d      	bne.n	80010de <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_TIM_Base_MspInit+0x9c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	4a20      	ldr	r2, [pc, #128]	; (80010ec <HAL_TIM_Base_MspInit+0x9c>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6413      	str	r3, [r2, #64]	; 0x40
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HAL_TIM_Base_MspInit+0x9c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 8001080:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_TIM_Base_MspInit+0xa4>)
 8001082:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 8001086:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800108a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800108c:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 800108e:	2240      	movs	r2, #64	; 0x40
 8001090:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 800109a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 80010a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 80010aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ae:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 80010c4:	f000 fd16 	bl	8001af4 <HAL_DMA_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80010ce:	f7ff fe07 	bl	8000ce0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <HAL_TIM_Base_MspInit+0xa0>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010de:	bf00      	nop
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40000800 	.word	0x40000800
 80010ec:	40023800 	.word	0x40023800
 80010f0:	20000290 	.word	0x20000290
 80010f4:	40026058 	.word	0x40026058

080010f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 030c 	add.w	r3, r7, #12
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a12      	ldr	r2, [pc, #72]	; (8001160 <HAL_TIM_MspPostInit+0x68>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d11e      	bne.n	8001158 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <HAL_TIM_MspPostInit+0x6c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a10      	ldr	r2, [pc, #64]	; (8001164 <HAL_TIM_MspPostInit+0x6c>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_TIM_MspPostInit+0x6c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001136:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800113a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001148:	2302      	movs	r3, #2
 800114a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_TIM_MspPostInit+0x70>)
 8001154:	f000 ffb8 	bl	80020c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40000800 	.word	0x40000800
 8001164:	40023800 	.word	0x40023800
 8001168:	40020400 	.word	0x40020400

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001170:	e7fe      	b.n	8001170 <NMI_Handler+0x4>

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	e7fe      	b.n	800117c <MemManage_Handler+0x4>

0800117e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <UsageFault_Handler+0x4>

0800118a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b8:	f000 f8e4 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}

080011c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <DMA1_Stream3_IRQHandler+0x10>)
 80011c6:	f000 fd43 	bl	8001c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000290 	.word	0x20000290

080011d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA2_Stream0_IRQHandler+0x10>)
 80011da:	f000 fd39 	bl	8001c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000f4 	.word	0x200000f4

080011e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <OTG_FS_IRQHandler+0x10>)
 80011ee:	f001 fb8b 	bl	8002908 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200006d4 	.word	0x200006d4

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f008 fb08 	bl	8009840 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20020000 	.word	0x20020000
 800125c:	00000400 	.word	0x00000400
 8001260:	200002f0 	.word	0x200002f0
 8001264:	200009e8 	.word	0x200009e8

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  



  ldr   sp, =_estack     /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012b6:	f7ff ffd7 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f008 fac7 	bl	800984c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff f905 	bl	80004cc <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012d0:	08009b0c 	.word	0x08009b0c
  ldr r2, =_sbss
 80012d4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012d8:	200009e8 	.word	0x200009e8

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_Init+0x40>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_Init+0x40>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x40>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 fbb1 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fcec 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fbc9 	bl	8001ada <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 fb91 	bl	8001a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000000 	.word	0x20000000
 800137c:	20000008 	.word	0x20000008
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000008 	.word	0x20000008
 80013a8:	200002f4 	.word	0x200002f4

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	200002f4 	.word	0x200002f4

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000008 	.word	0x20000008

0800140c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e033      	b.n	800148a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fc88 	bl	8000d40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001452:	f023 0302 	bic.w	r3, r3, #2
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f93a 	bl	80016d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
 800147a:	e001      	b.n	8001480 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_ADC_ConfigChannel+0x1c>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e105      	b.n	80016bc <HAL_ADC_ConfigChannel+0x228>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b09      	cmp	r3, #9
 80014be:	d925      	bls.n	800150c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68d9      	ldr	r1, [r3, #12]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	3b1e      	subs	r3, #30
 80014d6:	2207      	movs	r2, #7
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43da      	mvns	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	400a      	ands	r2, r1
 80014e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	4603      	mov	r3, r0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4403      	add	r3, r0
 80014fe:	3b1e      	subs	r3, #30
 8001500:	409a      	lsls	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	e022      	b.n	8001552 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6919      	ldr	r1, [r3, #16]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	2207      	movs	r2, #7
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6919      	ldr	r1, [r3, #16]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	4603      	mov	r3, r0
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4403      	add	r3, r0
 8001548:	409a      	lsls	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	2b06      	cmp	r3, #6
 8001558:	d824      	bhi.n	80015a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	3b05      	subs	r3, #5
 800156c:	221f      	movs	r2, #31
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	400a      	ands	r2, r1
 800157a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	4618      	mov	r0, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b05      	subs	r3, #5
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	635a      	str	r2, [r3, #52]	; 0x34
 80015a2:	e04c      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b0c      	cmp	r3, #12
 80015aa:	d824      	bhi.n	80015f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b23      	subs	r3, #35	; 0x23
 80015be:	221f      	movs	r2, #31
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43da      	mvns	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	400a      	ands	r2, r1
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	4613      	mov	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	3b23      	subs	r3, #35	; 0x23
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
 80015f4:	e023      	b.n	800163e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	3b41      	subs	r3, #65	; 0x41
 8001608:	221f      	movs	r2, #31
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	400a      	ands	r2, r1
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	4618      	mov	r0, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3b41      	subs	r3, #65	; 0x41
 8001632:	fa00 f203 	lsl.w	r2, r0, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <HAL_ADC_ConfigChannel+0x234>)
 8001640:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a21      	ldr	r2, [pc, #132]	; (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d109      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b12      	cmp	r3, #18
 8001652:	d105      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a19      	ldr	r2, [pc, #100]	; (80016cc <HAL_ADC_ConfigChannel+0x238>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d123      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b10      	cmp	r3, #16
 8001670:	d003      	beq.n	800167a <HAL_ADC_ConfigChannel+0x1e6>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b11      	cmp	r3, #17
 8001678:	d11b      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b10      	cmp	r3, #16
 800168c:	d111      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_ADC_ConfigChannel+0x23c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a10      	ldr	r2, [pc, #64]	; (80016d4 <HAL_ADC_ConfigChannel+0x240>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	0c9a      	lsrs	r2, r3, #18
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016a4:	e002      	b.n	80016ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3b01      	subs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f9      	bne.n	80016a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40012300 	.word	0x40012300
 80016cc:	40012000 	.word	0x40012000
 80016d0:	20000000 	.word	0x20000000
 80016d4:	431bde83 	.word	0x431bde83

080016d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016e0:	4b79      	ldr	r3, [pc, #484]	; (80018c8 <ADC_Init+0x1f0>)
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800170c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6859      	ldr	r1, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	021a      	lsls	r2, r3, #8
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001730:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6859      	ldr	r1, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6899      	ldr	r1, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	4a58      	ldr	r2, [pc, #352]	; (80018cc <ADC_Init+0x1f4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d022      	beq.n	80017b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800177e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6899      	ldr	r1, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6899      	ldr	r1, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	e00f      	b.n	80017d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0202 	bic.w	r2, r2, #2
 80017e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6899      	ldr	r1, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7e1b      	ldrb	r3, [r3, #24]
 80017f0:	005a      	lsls	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001812:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001822:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6859      	ldr	r1, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	3b01      	subs	r3, #1
 8001830:	035a      	lsls	r2, r3, #13
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	e007      	b.n	800184c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800184a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	3b01      	subs	r3, #1
 8001868:	051a      	lsls	r2, r3, #20
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001880:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6899      	ldr	r1, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800188e:	025a      	lsls	r2, r3, #9
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6899      	ldr	r1, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	029a      	lsls	r2, r3, #10
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	40012300 	.word	0x40012300
 80018cc:	0f000001 	.word	0x0f000001

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f7ff ff8e 	bl	8001970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff29 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff3e 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff8e 	bl	80019c4 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5d 	bl	8001970 <__NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff31 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ffa2 	bl	8001a2c <SysTick_Config>
 8001ae8:	4603      	mov	r3, r0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fc54 	bl	80013ac <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e099      	b.n	8001c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b30:	e00f      	b.n	8001b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b32:	f7ff fc3b 	bl	80013ac <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d908      	bls.n	8001b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2220      	movs	r2, #32
 8001b44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e078      	b.n	8001c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e8      	bne.n	8001b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_DMA_Init+0x158>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691b      	ldr	r3, [r3, #16]
 8001b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d107      	bne.n	8001bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	697a      	ldr	r2, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f023 0307 	bic.w	r3, r3, #7
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d117      	bne.n	8001c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f9e9 	bl	8001fd0 <DMA_CheckFifoParam>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2240      	movs	r2, #64	; 0x40
 8001c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c12:	2301      	movs	r3, #1
 8001c14:	e016      	b.n	8001c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f9a0 	bl	8001f64 <DMA_CalcBaseAndBitshift>
 8001c24:	4603      	mov	r3, r0
 8001c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	223f      	movs	r2, #63	; 0x3f
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	f010803f 	.word	0xf010803f

08001c50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c5c:	4b8e      	ldr	r3, [pc, #568]	; (8001e98 <HAL_DMA_IRQHandler+0x248>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a8e      	ldr	r2, [pc, #568]	; (8001e9c <HAL_DMA_IRQHandler+0x24c>)
 8001c62:	fba2 2303 	umull	r2, r3, r2, r3
 8001c66:	0a9b      	lsrs	r3, r3, #10
 8001c68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d01a      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0204 	bic.w	r2, r2, #4
 8001ca2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	2208      	movs	r2, #8
 8001caa:	409a      	lsls	r2, r3
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d012      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00b      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cde:	2201      	movs	r2, #1
 8001ce0:	409a      	lsls	r2, r3
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cea:	f043 0202 	orr.w	r2, r3, #2
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	409a      	lsls	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d012      	beq.n	8001d28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00b      	beq.n	8001d28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	2204      	movs	r2, #4
 8001d16:	409a      	lsls	r2, r3
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	f043 0204 	orr.w	r2, r3, #4
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2c:	2210      	movs	r2, #16
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d043      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d03c      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d018      	beq.n	8001d92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d108      	bne.n	8001d80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d024      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
 8001d7e:	e01f      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01b      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
 8001d90:	e016      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0208 	bic.w	r2, r2, #8
 8001dae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 808f 	beq.w	8001ef0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 8087 	beq.w	8001ef0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	2220      	movs	r2, #32
 8001de8:	409a      	lsls	r2, r3
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b05      	cmp	r3, #5
 8001df8:	d136      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0216 	bic.w	r2, r2, #22
 8001e08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d103      	bne.n	8001e2a <HAL_DMA_IRQHandler+0x1da>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0208 	bic.w	r2, r2, #8
 8001e38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3e:	223f      	movs	r2, #63	; 0x3f
 8001e40:	409a      	lsls	r2, r3
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d07e      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	4798      	blx	r3
        }
        return;
 8001e66:	e079      	b.n	8001f5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d01d      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10d      	bne.n	8001ea0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d031      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	4798      	blx	r3
 8001e94:	e02c      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x2a0>
 8001e96:	bf00      	nop
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d023      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	4798      	blx	r3
 8001eb0:	e01e      	b.n	8001ef0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10f      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0210 	bic.w	r2, r2, #16
 8001ece:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d032      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d022      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2205      	movs	r2, #5
 8001f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d307      	bcc.n	8001f38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f2      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x2cc>
 8001f36:	e000      	b.n	8001f3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
 8001f5a:	e000      	b.n	8001f5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f5c:	bf00      	nop
    }
  }
}
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3b10      	subs	r3, #16
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <DMA_CalcBaseAndBitshift+0x64>)
 8001f76:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7a:	091b      	lsrs	r3, r3, #4
 8001f7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f7e:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <DMA_CalcBaseAndBitshift+0x68>)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2b03      	cmp	r3, #3
 8001f90:	d909      	bls.n	8001fa6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f9a:	f023 0303 	bic.w	r3, r3, #3
 8001f9e:	1d1a      	adds	r2, r3, #4
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fa4:	e007      	b.n	8001fb6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fae:	f023 0303 	bic.w	r3, r3, #3
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	aaaaaaab 	.word	0xaaaaaaab
 8001fcc:	08009af4 	.word	0x08009af4

08001fd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d11f      	bne.n	800202a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d856      	bhi.n	800209e <DMA_CheckFifoParam+0xce>
 8001ff0:	a201      	add	r2, pc, #4	; (adr r2, 8001ff8 <DMA_CheckFifoParam+0x28>)
 8001ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff6:	bf00      	nop
 8001ff8:	08002009 	.word	0x08002009
 8001ffc:	0800201b 	.word	0x0800201b
 8002000:	08002009 	.word	0x08002009
 8002004:	0800209f 	.word	0x0800209f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d046      	beq.n	80020a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002018:	e043      	b.n	80020a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002022:	d140      	bne.n	80020a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002028:	e03d      	b.n	80020a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002032:	d121      	bne.n	8002078 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d837      	bhi.n	80020aa <DMA_CheckFifoParam+0xda>
 800203a:	a201      	add	r2, pc, #4	; (adr r2, 8002040 <DMA_CheckFifoParam+0x70>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002051 	.word	0x08002051
 8002044:	08002057 	.word	0x08002057
 8002048:	08002051 	.word	0x08002051
 800204c:	08002069 	.word	0x08002069
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
      break;
 8002054:	e030      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d025      	beq.n	80020ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002066:	e022      	b.n	80020ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002070:	d11f      	bne.n	80020b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002076:	e01c      	b.n	80020b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d903      	bls.n	8002086 <DMA_CheckFifoParam+0xb6>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b03      	cmp	r3, #3
 8002082:	d003      	beq.n	800208c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002084:	e018      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
      break;
 800208a:	e015      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00e      	beq.n	80020b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      break;
 800209c:	e00b      	b.n	80020b6 <DMA_CheckFifoParam+0xe6>
      break;
 800209e:	bf00      	nop
 80020a0:	e00a      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020a2:	bf00      	nop
 80020a4:	e008      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020a6:	bf00      	nop
 80020a8:	e006      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020aa:	bf00      	nop
 80020ac:	e004      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ae:	bf00      	nop
 80020b0:	e002      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020b2:	bf00      	nop
 80020b4:	e000      	b.n	80020b8 <DMA_CheckFifoParam+0xe8>
      break;
 80020b6:	bf00      	nop
    }
  } 
  
  return status; 
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop

080020c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	; 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e16b      	b.n	80023bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e4:	2201      	movs	r2, #1
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	f040 815a 	bne.w	80023b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002116:	2b02      	cmp	r3, #2
 8002118:	d130      	bne.n	800217c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	2203      	movs	r2, #3
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 0201 	and.w	r2, r3, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b03      	cmp	r3, #3
 8002186:	d017      	beq.n	80021b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d123      	bne.n	800220c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	08da      	lsrs	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	08da      	lsrs	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	3208      	adds	r2, #8
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0203 	and.w	r2, r3, #3
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 80b4 	beq.w	80023b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b60      	ldr	r3, [pc, #384]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	4a5f      	ldr	r2, [pc, #380]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 8002258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800225c:	6453      	str	r3, [r2, #68]	; 0x44
 800225e:	4b5d      	ldr	r3, [pc, #372]	; (80023d4 <HAL_GPIO_Init+0x30c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226a:	4a5b      	ldr	r2, [pc, #364]	; (80023d8 <HAL_GPIO_Init+0x310>)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3302      	adds	r3, #2
 8002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a52      	ldr	r2, [pc, #328]	; (80023dc <HAL_GPIO_Init+0x314>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02b      	beq.n	80022ee <HAL_GPIO_Init+0x226>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a51      	ldr	r2, [pc, #324]	; (80023e0 <HAL_GPIO_Init+0x318>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d025      	beq.n	80022ea <HAL_GPIO_Init+0x222>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a50      	ldr	r2, [pc, #320]	; (80023e4 <HAL_GPIO_Init+0x31c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d01f      	beq.n	80022e6 <HAL_GPIO_Init+0x21e>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4f      	ldr	r2, [pc, #316]	; (80023e8 <HAL_GPIO_Init+0x320>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d019      	beq.n	80022e2 <HAL_GPIO_Init+0x21a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4e      	ldr	r2, [pc, #312]	; (80023ec <HAL_GPIO_Init+0x324>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_GPIO_Init+0x216>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4d      	ldr	r2, [pc, #308]	; (80023f0 <HAL_GPIO_Init+0x328>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d00d      	beq.n	80022da <HAL_GPIO_Init+0x212>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4c      	ldr	r2, [pc, #304]	; (80023f4 <HAL_GPIO_Init+0x32c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d007      	beq.n	80022d6 <HAL_GPIO_Init+0x20e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4b      	ldr	r2, [pc, #300]	; (80023f8 <HAL_GPIO_Init+0x330>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d101      	bne.n	80022d2 <HAL_GPIO_Init+0x20a>
 80022ce:	2307      	movs	r3, #7
 80022d0:	e00e      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022d2:	2308      	movs	r3, #8
 80022d4:	e00c      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022d6:	2306      	movs	r3, #6
 80022d8:	e00a      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022da:	2305      	movs	r3, #5
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022de:	2304      	movs	r3, #4
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x228>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_GPIO_Init+0x310>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b3b      	ldr	r3, [pc, #236]	; (80023fc <HAL_GPIO_Init+0x334>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_GPIO_Init+0x334>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b30      	ldr	r3, [pc, #192]	; (80023fc <HAL_GPIO_Init+0x334>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a27      	ldr	r2, [pc, #156]	; (80023fc <HAL_GPIO_Init+0x334>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002362:	4b26      	ldr	r3, [pc, #152]	; (80023fc <HAL_GPIO_Init+0x334>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002386:	4a1d      	ldr	r2, [pc, #116]	; (80023fc <HAL_GPIO_Init+0x334>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238c:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_GPIO_Init+0x334>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_GPIO_Init+0x334>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f ae90 	bls.w	80020e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40021400 	.word	0x40021400
 80023f4:	40021800 	.word	0x40021800
 80023f8:	40021c00 	.word	0x40021c00
 80023fc:	40013c00 	.word	0x40013c00

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800241c:	e003      	b.n	8002426 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800241e:	887b      	ldrh	r3, [r7, #2]
 8002420:	041a      	lsls	r2, r3, #16
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr

08002432 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002434:	b08f      	sub	sp, #60	; 0x3c
 8002436:	af0a      	add	r7, sp, #40	; 0x28
 8002438:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e054      	b.n	80024ee <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f006 ff44 	bl	80092ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2203      	movs	r2, #3
 8002468:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	2b00      	cmp	r3, #0
 8002476:	d102      	bne.n	800247e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 ff72 	bl	800636c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	687e      	ldr	r6, [r7, #4]
 8002490:	466d      	mov	r5, sp
 8002492:	f106 0410 	add.w	r4, r6, #16
 8002496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a6:	1d33      	adds	r3, r6, #4
 80024a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024aa:	6838      	ldr	r0, [r7, #0]
 80024ac:	f003 feec 	bl	8006288 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 ff69 	bl	800638e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	603b      	str	r3, [r7, #0]
 80024c2:	687e      	ldr	r6, [r7, #4]
 80024c4:	466d      	mov	r5, sp
 80024c6:	f106 0410 	add.w	r4, r6, #16
 80024ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024da:	1d33      	adds	r3, r6, #4
 80024dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024de:	6838      	ldr	r0, [r7, #0]
 80024e0:	f004 f8f2 	bl	80066c8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024f6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80024f6:	b590      	push	{r4, r7, lr}
 80024f8:	b089      	sub	sp, #36	; 0x24
 80024fa:	af04      	add	r7, sp, #16
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	4608      	mov	r0, r1
 8002500:	4611      	mov	r1, r2
 8002502:	461a      	mov	r2, r3
 8002504:	4603      	mov	r3, r0
 8002506:	70fb      	strb	r3, [r7, #3]
 8002508:	460b      	mov	r3, r1
 800250a:	70bb      	strb	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_HCD_HC_Init+0x28>
 800251a:	2302      	movs	r3, #2
 800251c:	e076      	b.n	800260c <HAL_HCD_HC_Init+0x116>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	333d      	adds	r3, #61	; 0x3d
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002538:	78fb      	ldrb	r3, [r7, #3]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	212c      	movs	r1, #44	; 0x2c
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	4413      	add	r3, r2
 8002544:	3338      	adds	r3, #56	; 0x38
 8002546:	787a      	ldrb	r2, [r7, #1]
 8002548:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3340      	adds	r3, #64	; 0x40
 8002558:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800255a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	212c      	movs	r1, #44	; 0x2c
 8002562:	fb01 f303 	mul.w	r3, r1, r3
 8002566:	4413      	add	r3, r2
 8002568:	3339      	adds	r3, #57	; 0x39
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	333f      	adds	r3, #63	; 0x3f
 800257c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002580:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	78ba      	ldrb	r2, [r7, #2]
 8002586:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800258a:	b2d0      	uxtb	r0, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	212c      	movs	r1, #44	; 0x2c
 8002590:	fb01 f303 	mul.w	r3, r1, r3
 8002594:	4413      	add	r3, r2
 8002596:	333a      	adds	r3, #58	; 0x3a
 8002598:	4602      	mov	r2, r0
 800259a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800259c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	da09      	bge.n	80025b8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	333b      	adds	r3, #59	; 0x3b
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e008      	b.n	80025ca <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	333b      	adds	r3, #59	; 0x3b
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	333c      	adds	r3, #60	; 0x3c
 80025d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025dc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	787c      	ldrb	r4, [r7, #1]
 80025e4:	78ba      	ldrb	r2, [r7, #2]
 80025e6:	78f9      	ldrb	r1, [r7, #3]
 80025e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80025ea:	9302      	str	r3, [sp, #8]
 80025ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4623      	mov	r3, r4
 80025fa:	f004 f9eb 	bl	80069d4 <USB_HC_Init>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800260a:	7bfb      	ldrb	r3, [r7, #15]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002620:	2300      	movs	r3, #0
 8002622:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_HCD_HC_Halt+0x1e>
 800262e:	2302      	movs	r3, #2
 8002630:	e00f      	b.n	8002652 <HAL_HCD_HC_Halt+0x3e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f004 fc3b 	bl	8006ebe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	4608      	mov	r0, r1
 8002666:	4611      	mov	r1, r2
 8002668:	461a      	mov	r2, r3
 800266a:	4603      	mov	r3, r0
 800266c:	70fb      	strb	r3, [r7, #3]
 800266e:	460b      	mov	r3, r1
 8002670:	70bb      	strb	r3, [r7, #2]
 8002672:	4613      	mov	r3, r2
 8002674:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002676:	78fb      	ldrb	r3, [r7, #3]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	333b      	adds	r3, #59	; 0x3b
 8002684:	78ba      	ldrb	r2, [r7, #2]
 8002686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	333f      	adds	r3, #63	; 0x3f
 8002696:	787a      	ldrb	r2, [r7, #1]
 8002698:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800269a:	7c3b      	ldrb	r3, [r7, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d112      	bne.n	80026c6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3342      	adds	r3, #66	; 0x42
 80026ae:	2203      	movs	r2, #3
 80026b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	212c      	movs	r1, #44	; 0x2c
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	4413      	add	r3, r2
 80026be:	333d      	adds	r3, #61	; 0x3d
 80026c0:	7f3a      	ldrb	r2, [r7, #28]
 80026c2:	701a      	strb	r2, [r3, #0]
 80026c4:	e008      	b.n	80026d8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	212c      	movs	r1, #44	; 0x2c
 80026cc:	fb01 f303 	mul.w	r3, r1, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	3342      	adds	r3, #66	; 0x42
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80026d8:	787b      	ldrb	r3, [r7, #1]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	f200 80c6 	bhi.w	800286c <HAL_HCD_HC_SubmitRequest+0x210>
 80026e0:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80026e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e6:	bf00      	nop
 80026e8:	080026f9 	.word	0x080026f9
 80026ec:	08002859 	.word	0x08002859
 80026f0:	0800275d 	.word	0x0800275d
 80026f4:	080027db 	.word	0x080027db
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80026f8:	7c3b      	ldrb	r3, [r7, #16]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 80b8 	bne.w	8002870 <HAL_HCD_HC_SubmitRequest+0x214>
 8002700:	78bb      	ldrb	r3, [r7, #2]
 8002702:	2b00      	cmp	r3, #0
 8002704:	f040 80b4 	bne.w	8002870 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002708:	8b3b      	ldrh	r3, [r7, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3355      	adds	r3, #85	; 0x55
 800271c:	2201      	movs	r2, #1
 800271e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3355      	adds	r3, #85	; 0x55
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002734:	78fb      	ldrb	r3, [r7, #3]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3342      	adds	r3, #66	; 0x42
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002746:	e093      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3342      	adds	r3, #66	; 0x42
 8002756:	2202      	movs	r2, #2
 8002758:	701a      	strb	r2, [r3, #0]
      break;
 800275a:	e089      	b.n	8002870 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800275c:	78bb      	ldrb	r3, [r7, #2]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11d      	bne.n	800279e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3355      	adds	r3, #85	; 0x55
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	3342      	adds	r3, #66	; 0x42
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002788:	e073      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	212c      	movs	r1, #44	; 0x2c
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	4413      	add	r3, r2
 8002796:	3342      	adds	r3, #66	; 0x42
 8002798:	2202      	movs	r2, #2
 800279a:	701a      	strb	r2, [r3, #0]
      break;
 800279c:	e069      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	212c      	movs	r1, #44	; 0x2c
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	3354      	adds	r3, #84	; 0x54
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	3342      	adds	r3, #66	; 0x42
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
      break;
 80027c4:	e055      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	212c      	movs	r1, #44	; 0x2c
 80027cc:	fb01 f303 	mul.w	r3, r1, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	3342      	adds	r3, #66	; 0x42
 80027d4:	2202      	movs	r2, #2
 80027d6:	701a      	strb	r2, [r3, #0]
      break;
 80027d8:	e04b      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027da:	78bb      	ldrb	r3, [r7, #2]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11d      	bne.n	800281c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027e0:	78fb      	ldrb	r3, [r7, #3]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	212c      	movs	r1, #44	; 0x2c
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	4413      	add	r3, r2
 80027ec:	3355      	adds	r3, #85	; 0x55
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	212c      	movs	r1, #44	; 0x2c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	3342      	adds	r3, #66	; 0x42
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002806:	e034      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	212c      	movs	r1, #44	; 0x2c
 800280e:	fb01 f303 	mul.w	r3, r1, r3
 8002812:	4413      	add	r3, r2
 8002814:	3342      	adds	r3, #66	; 0x42
 8002816:	2202      	movs	r2, #2
 8002818:	701a      	strb	r2, [r3, #0]
      break;
 800281a:	e02a      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	212c      	movs	r1, #44	; 0x2c
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	4413      	add	r3, r2
 8002828:	3354      	adds	r3, #84	; 0x54
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002830:	78fb      	ldrb	r3, [r7, #3]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	212c      	movs	r1, #44	; 0x2c
 8002836:	fb01 f303 	mul.w	r3, r1, r3
 800283a:	4413      	add	r3, r2
 800283c:	3342      	adds	r3, #66	; 0x42
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
      break;
 8002842:	e016      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3342      	adds	r3, #66	; 0x42
 8002852:	2202      	movs	r2, #2
 8002854:	701a      	strb	r2, [r3, #0]
      break;
 8002856:	e00c      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3342      	adds	r3, #66	; 0x42
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
      break;
 800286a:	e002      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800286c:	bf00      	nop
 800286e:	e000      	b.n	8002872 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002870:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	212c      	movs	r1, #44	; 0x2c
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	4413      	add	r3, r2
 800287e:	3344      	adds	r3, #68	; 0x44
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	8b3a      	ldrh	r2, [r7, #24]
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	202c      	movs	r0, #44	; 0x2c
 800288c:	fb00 f303 	mul.w	r3, r0, r3
 8002890:	440b      	add	r3, r1
 8002892:	334c      	adds	r3, #76	; 0x4c
 8002894:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	212c      	movs	r1, #44	; 0x2c
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	4413      	add	r3, r2
 80028a2:	3360      	adds	r3, #96	; 0x60
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	212c      	movs	r1, #44	; 0x2c
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	3350      	adds	r3, #80	; 0x50
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3339      	adds	r3, #57	; 0x39
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3361      	adds	r3, #97	; 0x61
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	222c      	movs	r2, #44	; 0x2c
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	3338      	adds	r3, #56	; 0x38
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	18d1      	adds	r1, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	f004 f98e 	bl	8006c18 <USB_HC_StartXfer>
 80028fc:	4603      	mov	r3, r0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop

08002908 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fe8f 	bl	8006642 <USB_GetMode>
 8002924:	4603      	mov	r3, r0
 8002926:	2b01      	cmp	r3, #1
 8002928:	f040 80f6 	bne.w	8002b18 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fe73 	bl	800661c <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80ec 	beq.w	8002b16 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f003 fe6a 	bl	800661c <USB_ReadInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800294e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002952:	d104      	bne.n	800295e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800295c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f003 fe5a 	bl	800661c <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800296e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002972:	d104      	bne.n	800297e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800297c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fe4a 	bl	800661c <USB_ReadInterrupts>
 8002988:	4603      	mov	r3, r0
 800298a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800298e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002992:	d104      	bne.n	800299e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800299c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 fe3a 	bl	800661c <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d103      	bne.n	80029ba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2202      	movs	r2, #2
 80029b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f003 fe2c 	bl	800661c <USB_ReadInterrupts>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ce:	d11c      	bne.n	8002a0a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029d8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80029ea:	2110      	movs	r1, #16
 80029ec:	6938      	ldr	r0, [r7, #16]
 80029ee:	f003 fd1b 	bl	8006428 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80029f2:	6938      	ldr	r0, [r7, #16]
 80029f4:	f003 fd4c 	bl	8006490 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 ff22 	bl	8006848 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f006 fcef 	bl	80093e8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fe04 	bl	800661c <USB_ReadInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a1e:	d102      	bne.n	8002a26 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f001 f89e 	bl	8003b62 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 fdf6 	bl	800661c <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d106      	bne.n	8002a48 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f006 fcb8 	bl	80093b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2208      	movs	r2, #8
 8002a46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f003 fde5 	bl	800661c <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b10      	cmp	r3, #16
 8002a5a:	d101      	bne.n	8002a60 <HAL_HCD_IRQHandler+0x158>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_HCD_IRQHandler+0x15a>
 8002a60:	2300      	movs	r3, #0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d012      	beq.n	8002a8c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0210 	bic.w	r2, r2, #16
 8002a74:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 ffa1 	bl	80039be <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699a      	ldr	r2, [r3, #24]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0210 	orr.w	r2, r2, #16
 8002a8a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 fdc3 	bl	800661c <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002aa0:	d13a      	bne.n	8002b18 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 f9f8 	bl	8006e9c <USB_HC_ReadInterrupt>
 8002aac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	e025      	b.n	8002b00 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d018      	beq.n	8002afa <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ade:	d106      	bne.n	8002aee <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8ab 	bl	8002c42 <HCD_HC_IN_IRQHandler>
 8002aec:	e005      	b.n	8002afa <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fbf9 	bl	80032ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d3d4      	bcc.n	8002ab4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b12:	615a      	str	r2, [r3, #20]
 8002b14:	e000      	b.n	8002b18 <HAL_HCD_IRQHandler+0x210>
      return;
 8002b16:	bf00      	nop
    }
  }
}
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_HCD_Start+0x16>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e013      	b.n	8002b5c <HAL_HCD_Start+0x3e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f003 fee4 	bl	8006910 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 fbfc 	bl	800634a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_HCD_Stop+0x16>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e00d      	b.n	8002b96 <HAL_HCD_Stop+0x32>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f004 fad2 	bl	8007130 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 fe86 	bl	80068bc <USB_ResetPort>
 8002bb0:	4603      	mov	r3, r0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3360      	adds	r3, #96	; 0x60
 8002bd4:	781b      	ldrb	r3, [r3, #0]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3350      	adds	r3, #80	; 0x50
 8002bfc:	681b      	ldr	r3, [r3, #0]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f003 feca 	bl	80069b0 <USB_GetCurrentFrame>
 8002c1c:	4603      	mov	r3, r0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fea5 	bl	8006982 <USB_GetHostSpeed>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d11a      	bne.n	8002ca8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2304      	movs	r3, #4
 8002c82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3361      	adds	r3, #97	; 0x61
 8002c92:	2206      	movs	r2, #6
 8002c94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	b2d2      	uxtb	r2, r2
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f004 f90c 	bl	8006ebe <USB_HC_Halt>
 8002ca6:	e0af      	b.n	8002e08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cbe:	d11b      	bne.n	8002cf8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	461a      	mov	r2, r3
 8002cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3361      	adds	r3, #97	; 0x61
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f004 f8e4 	bl	8006ebe <USB_HC_Halt>
 8002cf6:	e087      	b.n	8002e08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	d109      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	6093      	str	r3, [r2, #8]
 8002d20:	e072      	b.n	8002e08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0308 	and.w	r3, r3, #8
 8002d34:	2b08      	cmp	r3, #8
 8002d36:	d11a      	bne.n	8002d6e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	2308      	movs	r3, #8
 8002d48:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3361      	adds	r3, #97	; 0x61
 8002d58:	2205      	movs	r2, #5
 8002d5a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	b2d2      	uxtb	r2, r2
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 f8a9 	bl	8006ebe <USB_HC_Halt>
 8002d6c:	e04c      	b.n	8002e08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d84:	d11b      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	461a      	mov	r2, r3
 8002d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	212c      	movs	r1, #44	; 0x2c
 8002da0:	fb01 f303 	mul.w	r3, r1, r3
 8002da4:	4413      	add	r3, r2
 8002da6:	3361      	adds	r3, #97	; 0x61
 8002da8:	2208      	movs	r2, #8
 8002daa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 f881 	bl	8006ebe <USB_HC_Halt>
 8002dbc:	e024      	b.n	8002e08 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd0:	2b80      	cmp	r3, #128	; 0x80
 8002dd2:	d119      	bne.n	8002e08 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de0:	461a      	mov	r2, r3
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	212c      	movs	r1, #44	; 0x2c
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	3361      	adds	r3, #97	; 0x61
 8002df4:	2206      	movs	r2, #6
 8002df6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 f85b 	bl	8006ebe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e1e:	d112      	bne.n	8002e46 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	4611      	mov	r1, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f004 f847 	bl	8006ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e42:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002e44:	e24e      	b.n	80032e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	f040 80df 	bne.w	800301c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d019      	beq.n	8002e9a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3348      	adds	r3, #72	; 0x48
 8002e74:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	0159      	lsls	r1, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002e88:	1ad2      	subs	r2, r2, r3
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	202c      	movs	r0, #44	; 0x2c
 8002e90:	fb00 f303 	mul.w	r3, r0, r3
 8002e94:	440b      	add	r3, r1
 8002e96:	3350      	adds	r3, #80	; 0x50
 8002e98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	212c      	movs	r1, #44	; 0x2c
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3361      	adds	r3, #97	; 0x61
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	335c      	adds	r3, #92	; 0x5c
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2301      	movs	r3, #1
 8002ece:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	212c      	movs	r1, #44	; 0x2c
 8002ed6:	fb01 f303 	mul.w	r3, r1, r3
 8002eda:	4413      	add	r3, r2
 8002edc:	333f      	adds	r3, #63	; 0x3f
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	212c      	movs	r1, #44	; 0x2c
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	333f      	adds	r3, #63	; 0x3f
 8002ef2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d111      	bne.n	8002f1c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 ffdb 	bl	8006ebe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f14:	461a      	mov	r2, r3
 8002f16:	2310      	movs	r3, #16
 8002f18:	6093      	str	r3, [r2, #8]
 8002f1a:	e03a      	b.n	8002f92 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	333f      	adds	r3, #63	; 0x3f
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d009      	beq.n	8002f44 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	212c      	movs	r1, #44	; 0x2c
 8002f36:	fb01 f303 	mul.w	r3, r1, r3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	333f      	adds	r3, #63	; 0x3f
 8002f3e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d126      	bne.n	8002f92 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	0151      	lsls	r1, r2, #5
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	440a      	add	r2, r1
 8002f5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f62:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	3360      	adds	r3, #96	; 0x60
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	b2d9      	uxtb	r1, r3
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	202c      	movs	r0, #44	; 0x2c
 8002f80:	fb00 f303 	mul.w	r3, r0, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	3360      	adds	r3, #96	; 0x60
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f006 fa39 	bl	8009404 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d12b      	bne.n	8002ff2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	212c      	movs	r1, #44	; 0x2c
 8002fa0:	fb01 f303 	mul.w	r3, r1, r3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	3348      	adds	r3, #72	; 0x48
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	202c      	movs	r0, #44	; 0x2c
 8002fb0:	fb00 f202 	mul.w	r2, r0, r2
 8002fb4:	440a      	add	r2, r1
 8002fb6:	3240      	adds	r2, #64	; 0x40
 8002fb8:	8812      	ldrh	r2, [r2, #0]
 8002fba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 818e 	beq.w	80032e4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	212c      	movs	r1, #44	; 0x2c
 8002fce:	fb01 f303 	mul.w	r3, r1, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3354      	adds	r3, #84	; 0x54
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2d8      	uxtb	r0, r3
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	212c      	movs	r1, #44	; 0x2c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3354      	adds	r3, #84	; 0x54
 8002fec:	4602      	mov	r2, r0
 8002fee:	701a      	strb	r2, [r3, #0]
}
 8002ff0:	e178      	b.n	80032e4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	212c      	movs	r1, #44	; 0x2c
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3354      	adds	r3, #84	; 0x54
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	f083 0301 	eor.w	r3, r3, #1
 8003006:	b2d8      	uxtb	r0, r3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3354      	adds	r3, #84	; 0x54
 8003016:	4602      	mov	r2, r0
 8003018:	701a      	strb	r2, [r3, #0]
}
 800301a:	e163      	b.n	80032e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b02      	cmp	r3, #2
 8003030:	f040 80f6 	bne.w	8003220 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	212c      	movs	r1, #44	; 0x2c
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	4413      	add	r3, r2
 8003040:	3361      	adds	r3, #97	; 0x61
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d109      	bne.n	800305c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3360      	adds	r3, #96	; 0x60
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e0c9      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	3361      	adds	r3, #97	; 0x61
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b05      	cmp	r3, #5
 800306e:	d109      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	212c      	movs	r1, #44	; 0x2c
 8003076:	fb01 f303 	mul.w	r3, r1, r3
 800307a:	4413      	add	r3, r2
 800307c:	3360      	adds	r3, #96	; 0x60
 800307e:	2205      	movs	r2, #5
 8003080:	701a      	strb	r2, [r3, #0]
 8003082:	e0b5      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3361      	adds	r3, #97	; 0x61
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b06      	cmp	r3, #6
 8003096:	d009      	beq.n	80030ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3361      	adds	r3, #97	; 0x61
 80030a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d150      	bne.n	800314e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	335c      	adds	r3, #92	; 0x5c
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	202c      	movs	r0, #44	; 0x2c
 80030c4:	fb00 f303 	mul.w	r3, r0, r3
 80030c8:	440b      	add	r3, r1
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	212c      	movs	r1, #44	; 0x2c
 80030d4:	fb01 f303 	mul.w	r3, r1, r3
 80030d8:	4413      	add	r3, r2
 80030da:	335c      	adds	r3, #92	; 0x5c
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d912      	bls.n	8003108 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	335c      	adds	r3, #92	; 0x5c
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3360      	adds	r3, #96	; 0x60
 8003102:	2204      	movs	r2, #4
 8003104:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003106:	e073      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3360      	adds	r3, #96	; 0x60
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003130:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003138:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	461a      	mov	r2, r3
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800314c:	e050      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3361      	adds	r3, #97	; 0x61
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d122      	bne.n	80031a8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	3360      	adds	r3, #96	; 0x60
 8003170:	2202      	movs	r2, #2
 8003172:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800318a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003192:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	461a      	mov	r2, r3
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	e023      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3361      	adds	r3, #97	; 0x61
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b07      	cmp	r3, #7
 80031ba:	d119      	bne.n	80031f0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	335c      	adds	r3, #92	; 0x5c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	202c      	movs	r0, #44	; 0x2c
 80031d4:	fb00 f303 	mul.w	r3, r0, r3
 80031d8:	440b      	add	r3, r1
 80031da:	335c      	adds	r3, #92	; 0x5c
 80031dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	212c      	movs	r1, #44	; 0x2c
 80031e4:	fb01 f303 	mul.w	r3, r1, r3
 80031e8:	4413      	add	r3, r2
 80031ea:	3360      	adds	r3, #96	; 0x60
 80031ec:	2204      	movs	r2, #4
 80031ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fc:	461a      	mov	r2, r3
 80031fe:	2302      	movs	r3, #2
 8003200:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	b2d9      	uxtb	r1, r3
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	202c      	movs	r0, #44	; 0x2c
 800320c:	fb00 f303 	mul.w	r3, r0, r3
 8003210:	4413      	add	r3, r2
 8003212:	3360      	adds	r3, #96	; 0x60
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f006 f8f3 	bl	8009404 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800321e:	e061      	b.n	80032e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	4413      	add	r3, r2
 8003228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b10      	cmp	r3, #16
 8003234:	d156      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	212c      	movs	r1, #44	; 0x2c
 800323c:	fb01 f303 	mul.w	r3, r1, r3
 8003240:	4413      	add	r3, r2
 8003242:	333f      	adds	r3, #63	; 0x3f
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d111      	bne.n	800326e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	335c      	adds	r3, #92	; 0x5c
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fe29 	bl	8006ebe <USB_HC_Halt>
 800326c:	e031      	b.n	80032d2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	212c      	movs	r1, #44	; 0x2c
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	4413      	add	r3, r2
 800327a:	333f      	adds	r3, #63	; 0x3f
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	333f      	adds	r3, #63	; 0x3f
 8003290:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003292:	2b02      	cmp	r3, #2
 8003294:	d11d      	bne.n	80032d2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	335c      	adds	r3, #92	; 0x5c
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d110      	bne.n	80032d2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3361      	adds	r3, #97	; 0x61
 80032be:	2203      	movs	r2, #3
 80032c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fdf6 	bl	8006ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	461a      	mov	r2, r3
 80032e0:	2310      	movs	r3, #16
 80032e2:	6093      	str	r3, [r2, #8]
}
 80032e4:	bf00      	nop
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b04      	cmp	r3, #4
 800331a:	d11a      	bne.n	8003352 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	2304      	movs	r3, #4
 800332c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	212c      	movs	r1, #44	; 0x2c
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	4413      	add	r3, r2
 800333a:	3361      	adds	r3, #97	; 0x61
 800333c:	2206      	movs	r2, #6
 800333e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fdb7 	bl	8006ebe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003350:	e331      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b20      	cmp	r3, #32
 8003366:	d12e      	bne.n	80033c6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	4413      	add	r3, r2
 8003370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003374:	461a      	mov	r2, r3
 8003376:	2320      	movs	r3, #32
 8003378:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	333d      	adds	r3, #61	; 0x3d
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b01      	cmp	r3, #1
 800338c:	f040 8313 	bne.w	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	212c      	movs	r1, #44	; 0x2c
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	4413      	add	r3, r2
 800339c:	333d      	adds	r3, #61	; 0x3d
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	212c      	movs	r1, #44	; 0x2c
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	3360      	adds	r3, #96	; 0x60
 80033b0:	2202      	movs	r2, #2
 80033b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 fd7d 	bl	8006ebe <USB_HC_Halt>
}
 80033c4:	e2f7      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033dc:	d112      	bne.n	8003404 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ea:	461a      	mov	r2, r3
 80033ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f003 fd5e 	bl	8006ebe <USB_HC_Halt>
}
 8003402:	e2d8      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d140      	bne.n	800349c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	212c      	movs	r1, #44	; 0x2c
 8003420:	fb01 f303 	mul.w	r3, r1, r3
 8003424:	4413      	add	r3, r2
 8003426:	335c      	adds	r3, #92	; 0x5c
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d111      	bne.n	8003466 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	333d      	adds	r3, #61	; 0x3d
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	4413      	add	r3, r2
 800345c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003460:	461a      	mov	r2, r3
 8003462:	2340      	movs	r3, #64	; 0x40
 8003464:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003472:	461a      	mov	r2, r3
 8003474:	2301      	movs	r3, #1
 8003476:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	212c      	movs	r1, #44	; 0x2c
 800347e:	fb01 f303 	mul.w	r3, r1, r3
 8003482:	4413      	add	r3, r2
 8003484:	3361      	adds	r3, #97	; 0x61
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f003 fd12 	bl	8006ebe <USB_HC_Halt>
}
 800349a:	e28c      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ae:	2b40      	cmp	r3, #64	; 0x40
 80034b0:	d12c      	bne.n	800350c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	212c      	movs	r1, #44	; 0x2c
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	4413      	add	r3, r2
 80034be:	3361      	adds	r3, #97	; 0x61
 80034c0:	2204      	movs	r2, #4
 80034c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	333d      	adds	r3, #61	; 0x3d
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	335c      	adds	r3, #92	; 0x5c
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	697a      	ldr	r2, [r7, #20]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f003 fce3 	bl	8006ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003504:	461a      	mov	r2, r3
 8003506:	2340      	movs	r3, #64	; 0x40
 8003508:	6093      	str	r3, [r2, #8]
}
 800350a:	e254      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	015a      	lsls	r2, r3, #5
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	4413      	add	r3, r2
 8003514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11a      	bne.n	8003558 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	015a      	lsls	r2, r3, #5
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	4413      	add	r3, r2
 800352a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352e:	461a      	mov	r2, r3
 8003530:	2308      	movs	r3, #8
 8003532:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3361      	adds	r3, #97	; 0x61
 8003542:	2205      	movs	r2, #5
 8003544:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f003 fcb4 	bl	8006ebe <USB_HC_Halt>
}
 8003556:	e22e      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	2b10      	cmp	r3, #16
 800356c:	d140      	bne.n	80035f0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	335c      	adds	r3, #92	; 0x5c
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3361      	adds	r3, #97	; 0x61
 800358e:	2203      	movs	r2, #3
 8003590:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	333d      	adds	r3, #61	; 0x3d
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d112      	bne.n	80035cc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	333c      	adds	r3, #60	; 0x3c
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d108      	bne.n	80035cc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	212c      	movs	r1, #44	; 0x2c
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	333d      	adds	r3, #61	; 0x3d
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f003 fc71 	bl	8006ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	2310      	movs	r3, #16
 80035ec:	6093      	str	r3, [r2, #8]
}
 80035ee:	e1e2      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b80      	cmp	r3, #128	; 0x80
 8003604:	d164      	bne.n	80036d0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d111      	bne.n	8003632 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	212c      	movs	r1, #44	; 0x2c
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	4413      	add	r3, r2
 800361a:	3361      	adds	r3, #97	; 0x61
 800361c:	2206      	movs	r2, #6
 800361e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f003 fc47 	bl	8006ebe <USB_HC_Halt>
 8003630:	e044      	b.n	80036bc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	212c      	movs	r1, #44	; 0x2c
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	4413      	add	r3, r2
 800363e:	335c      	adds	r3, #92	; 0x5c
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	202c      	movs	r0, #44	; 0x2c
 800364a:	fb00 f303 	mul.w	r3, r0, r3
 800364e:	440b      	add	r3, r1
 8003650:	335c      	adds	r3, #92	; 0x5c
 8003652:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	335c      	adds	r3, #92	; 0x5c
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d920      	bls.n	80036aa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	335c      	adds	r3, #92	; 0x5c
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	212c      	movs	r1, #44	; 0x2c
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	4413      	add	r3, r2
 8003686:	3360      	adds	r3, #96	; 0x60
 8003688:	2204      	movs	r2, #4
 800368a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	b2d9      	uxtb	r1, r3
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	202c      	movs	r0, #44	; 0x2c
 8003696:	fb00 f303 	mul.w	r3, r0, r3
 800369a:	4413      	add	r3, r2
 800369c:	3360      	adds	r3, #96	; 0x60
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f005 feae 	bl	8009404 <HAL_HCD_HC_NotifyURBChange_Callback>
 80036a8:	e008      	b.n	80036bc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	212c      	movs	r1, #44	; 0x2c
 80036b0:	fb01 f303 	mul.w	r3, r1, r3
 80036b4:	4413      	add	r3, r2
 80036b6:	3360      	adds	r3, #96	; 0x60
 80036b8:	2202      	movs	r2, #2
 80036ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	2380      	movs	r3, #128	; 0x80
 80036cc:	6093      	str	r3, [r2, #8]
}
 80036ce:	e172      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e6:	d11b      	bne.n	8003720 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	3361      	adds	r3, #97	; 0x61
 80036f6:	2208      	movs	r2, #8
 80036f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	b2d2      	uxtb	r2, r2
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fbda 	bl	8006ebe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003716:	461a      	mov	r2, r3
 8003718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800371c:	6093      	str	r3, [r2, #8]
}
 800371e:	e14a      	b.n	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b02      	cmp	r3, #2
 8003734:	f040 813f 	bne.w	80039b6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3361      	adds	r3, #97	; 0x61
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d17d      	bne.n	8003848 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3360      	adds	r3, #96	; 0x60
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	333f      	adds	r3, #63	; 0x3f
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b02      	cmp	r3, #2
 8003770:	d00a      	beq.n	8003788 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	212c      	movs	r1, #44	; 0x2c
 8003778:	fb01 f303 	mul.w	r3, r1, r3
 800377c:	4413      	add	r3, r2
 800377e:	333f      	adds	r3, #63	; 0x3f
 8003780:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003782:	2b03      	cmp	r3, #3
 8003784:	f040 8100 	bne.w	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d113      	bne.n	80037b8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	212c      	movs	r1, #44	; 0x2c
 8003796:	fb01 f303 	mul.w	r3, r1, r3
 800379a:	4413      	add	r3, r2
 800379c:	3355      	adds	r3, #85	; 0x55
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	f083 0301 	eor.w	r3, r3, #1
 80037a4:	b2d8      	uxtb	r0, r3
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	212c      	movs	r1, #44	; 0x2c
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	3355      	adds	r3, #85	; 0x55
 80037b4:	4602      	mov	r2, r0
 80037b6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	f040 80e3 	bne.w	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	212c      	movs	r1, #44	; 0x2c
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	334c      	adds	r3, #76	; 0x4c
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80d8 	beq.w	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	212c      	movs	r1, #44	; 0x2c
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	334c      	adds	r3, #76	; 0x4c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	202c      	movs	r0, #44	; 0x2c
 80037ee:	fb00 f202 	mul.w	r2, r0, r2
 80037f2:	440a      	add	r2, r1
 80037f4:	3240      	adds	r2, #64	; 0x40
 80037f6:	8812      	ldrh	r2, [r2, #0]
 80037f8:	4413      	add	r3, r2
 80037fa:	3b01      	subs	r3, #1
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	202c      	movs	r0, #44	; 0x2c
 8003802:	fb00 f202 	mul.w	r2, r0, r2
 8003806:	440a      	add	r2, r1
 8003808:	3240      	adds	r2, #64	; 0x40
 800380a:	8812      	ldrh	r2, [r2, #0]
 800380c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003810:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 80b5 	beq.w	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3355      	adds	r3, #85	; 0x55
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	f083 0301 	eor.w	r3, r3, #1
 8003832:	b2d8      	uxtb	r0, r3
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	3355      	adds	r3, #85	; 0x55
 8003842:	4602      	mov	r2, r0
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e09f      	b.n	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	212c      	movs	r1, #44	; 0x2c
 800384e:	fb01 f303 	mul.w	r3, r1, r3
 8003852:	4413      	add	r3, r2
 8003854:	3361      	adds	r3, #97	; 0x61
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d109      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3360      	adds	r3, #96	; 0x60
 800386a:	2202      	movs	r2, #2
 800386c:	701a      	strb	r2, [r3, #0]
 800386e:	e08b      	b.n	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3361      	adds	r3, #97	; 0x61
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d109      	bne.n	8003898 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	212c      	movs	r1, #44	; 0x2c
 800388a:	fb01 f303 	mul.w	r3, r1, r3
 800388e:	4413      	add	r3, r2
 8003890:	3360      	adds	r3, #96	; 0x60
 8003892:	2202      	movs	r2, #2
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e077      	b.n	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	212c      	movs	r1, #44	; 0x2c
 800389e:	fb01 f303 	mul.w	r3, r1, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3361      	adds	r3, #97	; 0x61
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d109      	bne.n	80038c0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3360      	adds	r3, #96	; 0x60
 80038ba:	2205      	movs	r2, #5
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e063      	b.n	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	212c      	movs	r1, #44	; 0x2c
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	4413      	add	r3, r2
 80038cc:	3361      	adds	r3, #97	; 0x61
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d009      	beq.n	80038e8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3361      	adds	r3, #97	; 0x61
 80038e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d14f      	bne.n	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	335c      	adds	r3, #92	; 0x5c
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	202c      	movs	r0, #44	; 0x2c
 8003900:	fb00 f303 	mul.w	r3, r0, r3
 8003904:	440b      	add	r3, r1
 8003906:	335c      	adds	r3, #92	; 0x5c
 8003908:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	212c      	movs	r1, #44	; 0x2c
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	4413      	add	r3, r2
 8003916:	335c      	adds	r3, #92	; 0x5c
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d912      	bls.n	8003944 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	212c      	movs	r1, #44	; 0x2c
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	4413      	add	r3, r2
 800392a:	335c      	adds	r3, #92	; 0x5c
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	212c      	movs	r1, #44	; 0x2c
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	4413      	add	r3, r2
 800393c:	3360      	adds	r3, #96	; 0x60
 800393e:	2204      	movs	r2, #4
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e021      	b.n	8003988 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	212c      	movs	r1, #44	; 0x2c
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	4413      	add	r3, r2
 8003950:	3360      	adds	r3, #96	; 0x60
 8003952:	2202      	movs	r2, #2
 8003954:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	4413      	add	r3, r2
 800395e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800396c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003974:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4413      	add	r3, r2
 800397e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003982:	461a      	mov	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	4413      	add	r3, r2
 8003990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003994:	461a      	mov	r2, r3
 8003996:	2302      	movs	r3, #2
 8003998:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	b2d9      	uxtb	r1, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	202c      	movs	r0, #44	; 0x2c
 80039a4:	fb00 f303 	mul.w	r3, r0, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	3360      	adds	r3, #96	; 0x60
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f005 fd27 	bl	8009404 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80039b6:	bf00      	nop
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b08a      	sub	sp, #40	; 0x28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	0c5b      	lsrs	r3, r3, #17
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039f2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d004      	beq.n	8003a04 <HCD_RXQLVL_IRQHandler+0x46>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	f000 80a9 	beq.w	8003b54 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a02:	e0aa      	b.n	8003b5a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80a6 	beq.w	8003b58 <HCD_RXQLVL_IRQHandler+0x19a>
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	212c      	movs	r1, #44	; 0x2c
 8003a12:	fb01 f303 	mul.w	r3, r1, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	3344      	adds	r3, #68	; 0x44
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 809b 	beq.w	8003b58 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	212c      	movs	r1, #44	; 0x2c
 8003a28:	fb01 f303 	mul.w	r3, r1, r3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3350      	adds	r3, #80	; 0x50
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	441a      	add	r2, r3
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	202c      	movs	r0, #44	; 0x2c
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	440b      	add	r3, r1
 8003a42:	334c      	adds	r3, #76	; 0x4c
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d87a      	bhi.n	8003b40 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	212c      	movs	r1, #44	; 0x2c
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	4413      	add	r3, r2
 8003a5a:	3344      	adds	r3, #68	; 0x44
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	b292      	uxth	r2, r2
 8003a62:	4619      	mov	r1, r3
 8003a64:	f002 fd82 	bl	800656c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3344      	adds	r3, #68	; 0x44
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	441a      	add	r2, r3
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	202c      	movs	r0, #44	; 0x2c
 8003a82:	fb00 f303 	mul.w	r3, r0, r3
 8003a86:	440b      	add	r3, r1
 8003a88:	3344      	adds	r3, #68	; 0x44
 8003a8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3350      	adds	r3, #80	; 0x50
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	441a      	add	r2, r3
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	202c      	movs	r0, #44	; 0x2c
 8003aa6:	fb00 f303 	mul.w	r3, r0, r3
 8003aaa:	440b      	add	r3, r1
 8003aac:	3350      	adds	r3, #80	; 0x50
 8003aae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	0cdb      	lsrs	r3, r3, #19
 8003ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	212c      	movs	r1, #44	; 0x2c
 8003acc:	fb01 f303 	mul.w	r3, r1, r3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3340      	adds	r3, #64	; 0x40
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d13c      	bne.n	8003b58 <HCD_RXQLVL_IRQHandler+0x19a>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d039      	beq.n	8003b58 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003afa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b02:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b10:	461a      	mov	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	212c      	movs	r1, #44	; 0x2c
 8003b1c:	fb01 f303 	mul.w	r3, r1, r3
 8003b20:	4413      	add	r3, r2
 8003b22:	3354      	adds	r3, #84	; 0x54
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	f083 0301 	eor.w	r3, r3, #1
 8003b2a:	b2d8      	uxtb	r0, r3
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3354      	adds	r3, #84	; 0x54
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	701a      	strb	r2, [r3, #0]
      break;
 8003b3e:	e00b      	b.n	8003b58 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	212c      	movs	r1, #44	; 0x2c
 8003b46:	fb01 f303 	mul.w	r3, r1, r3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	3360      	adds	r3, #96	; 0x60
 8003b4e:	2204      	movs	r2, #4
 8003b50:	701a      	strb	r2, [r3, #0]
      break;
 8003b52:	e001      	b.n	8003b58 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003b54:	bf00      	nop
 8003b56:	e000      	b.n	8003b5a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003b58:	bf00      	nop
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	3728      	adds	r7, #40	; 0x28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b8e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d10b      	bne.n	8003bb2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d102      	bne.n	8003baa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f005 fc11 	bl	80093cc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f043 0302 	orr.w	r3, r3, #2
 8003bb0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d132      	bne.n	8003c22 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f043 0308 	orr.w	r3, r3, #8
 8003bc2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d126      	bne.n	8003c1c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d113      	bne.n	8003bfe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003bdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003be0:	d106      	bne.n	8003bf0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2102      	movs	r1, #2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f002 fe2d 	bl	8006848 <USB_InitFSLSPClkSel>
 8003bee:	e011      	b.n	8003c14 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f002 fe26 	bl	8006848 <USB_InitFSLSPClkSel>
 8003bfc:	e00a      	b.n	8003c14 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d106      	bne.n	8003c14 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c12:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f005 fc03 	bl	8009420 <HAL_HCD_PortEnabled_Callback>
 8003c1a:	e002      	b.n	8003c22 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f005 fc0d 	bl	800943c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d103      	bne.n	8003c34 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f043 0320 	orr.w	r3, r3, #32
 8003c32:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e12b      	b.n	8003eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd f8de 	bl	8000e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f022 0201 	bic.w	r2, r2, #1
 8003c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cac:	f001 fa88 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4a81      	ldr	r2, [pc, #516]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d807      	bhi.n	8003ccc <HAL_I2C_Init+0x84>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <HAL_I2C_Init+0x278>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bf94      	ite	ls
 8003cc4:	2301      	movls	r3, #1
 8003cc6:	2300      	movhi	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e006      	b.n	8003cda <HAL_I2C_Init+0x92>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4a7d      	ldr	r2, [pc, #500]	; (8003ec4 <HAL_I2C_Init+0x27c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	bf94      	ite	ls
 8003cd4:	2301      	movls	r3, #1
 8003cd6:	2300      	movhi	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0e7      	b.n	8003eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a78      	ldr	r2, [pc, #480]	; (8003ec8 <HAL_I2C_Init+0x280>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0c9b      	lsrs	r3, r3, #18
 8003cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6a1b      	ldr	r3, [r3, #32]
 8003d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a6a      	ldr	r2, [pc, #424]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d802      	bhi.n	8003d1c <HAL_I2C_Init+0xd4>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	e009      	b.n	8003d30 <HAL_I2C_Init+0xe8>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	4a69      	ldr	r2, [pc, #420]	; (8003ecc <HAL_I2C_Init+0x284>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	099b      	lsrs	r3, r3, #6
 8003d2e:	3301      	adds	r3, #1
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	495c      	ldr	r1, [pc, #368]	; (8003ebc <HAL_I2C_Init+0x274>)
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	d819      	bhi.n	8003d84 <HAL_I2C_Init+0x13c>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	1e59      	subs	r1, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d5e:	1c59      	adds	r1, r3, #1
 8003d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d64:	400b      	ands	r3, r1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_I2C_Init+0x138>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1e59      	subs	r1, r3, #1
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d78:	3301      	adds	r3, #1
 8003d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7e:	e051      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003d80:	2304      	movs	r3, #4
 8003d82:	e04f      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <HAL_I2C_Init+0x168>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1e58      	subs	r0, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	440b      	add	r3, r1
 8003d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e012      	b.n	8003dd6 <HAL_I2C_Init+0x18e>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1e58      	subs	r0, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	0099      	lsls	r1, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_I2C_Init+0x196>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e022      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10e      	bne.n	8003e04 <HAL_I2C_Init+0x1bc>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1e58      	subs	r0, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6859      	ldr	r1, [r3, #4]
 8003dee:	460b      	mov	r3, r1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	440b      	add	r3, r1
 8003df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df8:	3301      	adds	r3, #1
 8003dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e02:	e00f      	b.n	8003e24 <HAL_I2C_Init+0x1dc>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	1e58      	subs	r0, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	0099      	lsls	r1, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	6809      	ldr	r1, [r1, #0]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6911      	ldr	r1, [r2, #16]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	695a      	ldr	r2, [r3, #20]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	000186a0 	.word	0x000186a0
 8003ec0:	001e847f 	.word	0x001e847f
 8003ec4:	003d08ff 	.word	0x003d08ff
 8003ec8:	431bde83 	.word	0x431bde83
 8003ecc:	10624dd3 	.word	0x10624dd3

08003ed0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e128      	b.n	8004134 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d109      	bne.n	8003f02 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a90      	ldr	r2, [pc, #576]	; (800413c <HAL_I2S_Init+0x26c>)
 8003efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7fc ffdf 	bl	8000ec0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003f18:	f023 030f 	bic.w	r3, r3, #15
 8003f1c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2202      	movs	r2, #2
 8003f24:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d060      	beq.n	8003ff0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003f36:	2310      	movs	r3, #16
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e001      	b.n	8003f40 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d802      	bhi.n	8003f4e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f001 fa2c 	bl	80053ac <HAL_RCCEx_GetPeriphCLKFreq>
 8003f54:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f5e:	d125      	bne.n	8003fac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d010      	beq.n	8003f8a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	3305      	adds	r3, #5
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	e01f      	b.n	8003fca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	00db      	lsls	r3, r3, #3
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa6:	3305      	adds	r3, #5
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	e00e      	b.n	8003fca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	005b      	lsls	r3, r3, #1
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	3305      	adds	r3, #5
 8003fc8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4a5c      	ldr	r2, [pc, #368]	; (8004140 <HAL_I2S_Init+0x270>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	08db      	lsrs	r3, r3, #3
 8003fd4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	085b      	lsrs	r3, r3, #1
 8003fe6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e003      	b.n	8003ff8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d902      	bls.n	8004004 <HAL_I2S_Init+0x134>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	2bff      	cmp	r3, #255	; 0xff
 8004002:	d907      	bls.n	8004014 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e08f      	b.n	8004134 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691a      	ldr	r2, [r3, #16]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	ea42 0103 	orr.w	r1, r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	430a      	orrs	r2, r1
 8004026:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004032:	f023 030f 	bic.w	r3, r3, #15
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6851      	ldr	r1, [r2, #4]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6892      	ldr	r2, [r2, #8]
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68d2      	ldr	r2, [r2, #12]
 8004044:	4311      	orrs	r1, r2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6992      	ldr	r2, [r2, #24]
 800404a:	430a      	orrs	r2, r1
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004056:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d161      	bne.n	8004124 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a38      	ldr	r2, [pc, #224]	; (8004144 <HAL_I2S_Init+0x274>)
 8004064:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a37      	ldr	r2, [pc, #220]	; (8004148 <HAL_I2S_Init+0x278>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <HAL_I2S_Init+0x1a4>
 8004070:	4b36      	ldr	r3, [pc, #216]	; (800414c <HAL_I2S_Init+0x27c>)
 8004072:	e001      	b.n	8004078 <HAL_I2S_Init+0x1a8>
 8004074:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6812      	ldr	r2, [r2, #0]
 800407e:	4932      	ldr	r1, [pc, #200]	; (8004148 <HAL_I2S_Init+0x278>)
 8004080:	428a      	cmp	r2, r1
 8004082:	d101      	bne.n	8004088 <HAL_I2S_Init+0x1b8>
 8004084:	4a31      	ldr	r2, [pc, #196]	; (800414c <HAL_I2S_Init+0x27c>)
 8004086:	e001      	b.n	800408c <HAL_I2S_Init+0x1bc>
 8004088:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800408c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004090:	f023 030f 	bic.w	r3, r3, #15
 8004094:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2b      	ldr	r2, [pc, #172]	; (8004148 <HAL_I2S_Init+0x278>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_I2S_Init+0x1d4>
 80040a0:	4b2a      	ldr	r3, [pc, #168]	; (800414c <HAL_I2S_Init+0x27c>)
 80040a2:	e001      	b.n	80040a8 <HAL_I2S_Init+0x1d8>
 80040a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a8:	2202      	movs	r2, #2
 80040aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a25      	ldr	r2, [pc, #148]	; (8004148 <HAL_I2S_Init+0x278>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <HAL_I2S_Init+0x1ea>
 80040b6:	4b25      	ldr	r3, [pc, #148]	; (800414c <HAL_I2S_Init+0x27c>)
 80040b8:	e001      	b.n	80040be <HAL_I2S_Init+0x1ee>
 80040ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040ca:	d003      	beq.n	80040d4 <HAL_I2S_Init+0x204>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d103      	bne.n	80040dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80040d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	e001      	b.n	80040e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040ea:	4313      	orrs	r3, r2
 80040ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040f4:	4313      	orrs	r3, r2
 80040f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040fe:	4313      	orrs	r3, r2
 8004100:	b29a      	uxth	r2, r3
 8004102:	897b      	ldrh	r3, [r7, #10]
 8004104:	4313      	orrs	r3, r2
 8004106:	b29b      	uxth	r3, r3
 8004108:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800410c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <HAL_I2S_Init+0x278>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d101      	bne.n	800411c <HAL_I2S_Init+0x24c>
 8004118:	4b0c      	ldr	r3, [pc, #48]	; (800414c <HAL_I2S_Init+0x27c>)
 800411a:	e001      	b.n	8004120 <HAL_I2S_Init+0x250>
 800411c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004120:	897a      	ldrh	r2, [r7, #10]
 8004122:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	08004247 	.word	0x08004247
 8004140:	cccccccd 	.word	0xcccccccd
 8004144:	0800435d 	.word	0x0800435d
 8004148:	40003800 	.word	0x40003800
 800414c:	40003400 	.word	0x40003400

08004150 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	881a      	ldrh	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	1c9a      	adds	r2, r3, #2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10e      	bne.n	80041e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff ffb8 	bl	8004150 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	b292      	uxth	r2, r2
 80041fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10e      	bne.n	800423e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800422e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff93 	bl	8004164 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b04      	cmp	r3, #4
 8004260:	d13a      	bne.n	80042d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d109      	bne.n	8004280 <I2S_IRQHandler+0x3a>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004276:	2b40      	cmp	r3, #64	; 0x40
 8004278:	d102      	bne.n	8004280 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ffb4 	bl	80041e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b40      	cmp	r3, #64	; 0x40
 8004288:	d126      	bne.n	80042d8 <I2S_IRQHandler+0x92>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b20      	cmp	r3, #32
 8004296:	d11f      	bne.n	80042d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	613b      	str	r3, [r7, #16]
 80042bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ca:	f043 0202 	orr.w	r2, r3, #2
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff ff50 	bl	8004178 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d136      	bne.n	8004352 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d109      	bne.n	8004302 <I2S_IRQHandler+0xbc>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f8:	2b80      	cmp	r3, #128	; 0x80
 80042fa:	d102      	bne.n	8004302 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff ff45 	bl	800418c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b08      	cmp	r3, #8
 800430a:	d122      	bne.n	8004352 <I2S_IRQHandler+0x10c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b20      	cmp	r3, #32
 8004318:	d11b      	bne.n	8004352 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004328:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004344:	f043 0204 	orr.w	r2, r3, #4
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ff13 	bl	8004178 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a92      	ldr	r2, [pc, #584]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d101      	bne.n	800437a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004376:	4b92      	ldr	r3, [pc, #584]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004378:	e001      	b.n	800437e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800437a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a8b      	ldr	r2, [pc, #556]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d101      	bne.n	8004398 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004394:	4b8a      	ldr	r3, [pc, #552]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004396:	e001      	b.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004398:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043a8:	d004      	beq.n	80043b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 8099 	bne.w	80044e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d107      	bne.n	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f925 	bl	8004618 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d107      	bne.n	80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d002      	beq.n	80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9c8 	bl	8004778 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d13a      	bne.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d035      	beq.n	8004468 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6e      	ldr	r2, [pc, #440]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d101      	bne.n	800440a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004406:	4b6e      	ldr	r3, [pc, #440]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004408:	e001      	b.n	800440e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800440a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4969      	ldr	r1, [pc, #420]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004416:	428b      	cmp	r3, r1
 8004418:	d101      	bne.n	800441e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800441a:	4b69      	ldr	r3, [pc, #420]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800441c:	e001      	b.n	8004422 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800441e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004422:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004426:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004436:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	60fb      	str	r3, [r7, #12]
 800444c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f043 0202 	orr.w	r2, r3, #2
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff fe88 	bl	8004178 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b08      	cmp	r3, #8
 8004470:	f040 80c3 	bne.w	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 80bd 	beq.w	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800448e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a49      	ldr	r2, [pc, #292]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800449a:	4b49      	ldr	r3, [pc, #292]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800449c:	e001      	b.n	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800449e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4944      	ldr	r1, [pc, #272]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044aa:	428b      	cmp	r3, r1
 80044ac:	d101      	bne.n	80044b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80044ae:	4b44      	ldr	r3, [pc, #272]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044b0:	e001      	b.n	80044b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80044b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fe4a 	bl	8004178 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044e4:	e089      	b.n	80045fa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d107      	bne.n	8004500 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8be 	bl	800467c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d107      	bne.n	800451a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f8fd 	bl	8004714 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d12f      	bne.n	8004584 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f003 0320 	and.w	r3, r3, #32
 800452a:	2b00      	cmp	r3, #0
 800452c:	d02a      	beq.n	8004584 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800453c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1e      	ldr	r2, [pc, #120]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d101      	bne.n	800454c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800454a:	e001      	b.n	8004550 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800454c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4919      	ldr	r1, [pc, #100]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004558:	428b      	cmp	r3, r1
 800455a:	d101      	bne.n	8004560 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800455c:	4b18      	ldr	r3, [pc, #96]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800455e:	e001      	b.n	8004564 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004564:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004568:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004576:	f043 0202 	orr.w	r2, r3, #2
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff fdfa 	bl	8004178 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b08      	cmp	r3, #8
 800458c:	d136      	bne.n	80045fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 0320 	and.w	r3, r3, #32
 8004594:	2b00      	cmp	r3, #0
 8004596:	d031      	beq.n	80045fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d101      	bne.n	80045a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045a4:	e001      	b.n	80045aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80045a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4902      	ldr	r1, [pc, #8]	; (80045bc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045b2:	428b      	cmp	r3, r1
 80045b4:	d106      	bne.n	80045c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80045b6:	4b02      	ldr	r3, [pc, #8]	; (80045c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045b8:	e006      	b.n	80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80045ba:	bf00      	nop
 80045bc:	40003800 	.word	0x40003800
 80045c0:	40003400 	.word	0x40003400
 80045c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045cc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045dc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ea:	f043 0204 	orr.w	r2, r3, #4
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7ff fdc0 	bl	8004178 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045f8:	e000      	b.n	80045fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045fa:	bf00      	nop
}
 80045fc:	bf00      	nop
 80045fe:	3720      	adds	r7, #32
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c99      	adds	r1, r3, #2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6251      	str	r1, [r2, #36]	; 0x24
 800462a:	881a      	ldrh	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d113      	bne.n	8004672 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004658:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d106      	bne.n	8004672 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff ffc9 	bl	8004604 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	1c99      	adds	r1, r3, #2
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6251      	str	r1, [r2, #36]	; 0x24
 800468e:	8819      	ldrh	r1, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1d      	ldr	r2, [pc, #116]	; (800470c <I2SEx_TxISR_I2SExt+0x90>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d101      	bne.n	800469e <I2SEx_TxISR_I2SExt+0x22>
 800469a:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <I2SEx_TxISR_I2SExt+0x94>)
 800469c:	e001      	b.n	80046a2 <I2SEx_TxISR_I2SExt+0x26>
 800469e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a2:	460a      	mov	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d121      	bne.n	8004702 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a12      	ldr	r2, [pc, #72]	; (800470c <I2SEx_TxISR_I2SExt+0x90>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <I2SEx_TxISR_I2SExt+0x50>
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <I2SEx_TxISR_I2SExt+0x94>)
 80046ca:	e001      	b.n	80046d0 <I2SEx_TxISR_I2SExt+0x54>
 80046cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	490d      	ldr	r1, [pc, #52]	; (800470c <I2SEx_TxISR_I2SExt+0x90>)
 80046d8:	428b      	cmp	r3, r1
 80046da:	d101      	bne.n	80046e0 <I2SEx_TxISR_I2SExt+0x64>
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <I2SEx_TxISR_I2SExt+0x94>)
 80046de:	e001      	b.n	80046e4 <I2SEx_TxISR_I2SExt+0x68>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046e8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff ff81 	bl	8004604 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004702:	bf00      	nop
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40003800 	.word	0x40003800
 8004710:	40003400 	.word	0x40003400

08004714 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68d8      	ldr	r0, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	1c99      	adds	r1, r3, #2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800472c:	b282      	uxth	r2, r0
 800472e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d113      	bne.n	8004770 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004756:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7ff ff4a 	bl	8004604 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004770:	bf00      	nop
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <I2SEx_RxISR_I2SExt+0x90>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d101      	bne.n	800478e <I2SEx_RxISR_I2SExt+0x16>
 800478a:	4b20      	ldr	r3, [pc, #128]	; (800480c <I2SEx_RxISR_I2SExt+0x94>)
 800478c:	e001      	b.n	8004792 <I2SEx_RxISR_I2SExt+0x1a>
 800478e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004792:	68d8      	ldr	r0, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	1c99      	adds	r1, r3, #2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800479e:	b282      	uxth	r2, r0
 80047a0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d121      	bne.n	80047fe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <I2SEx_RxISR_I2SExt+0x90>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d101      	bne.n	80047c8 <I2SEx_RxISR_I2SExt+0x50>
 80047c4:	4b11      	ldr	r3, [pc, #68]	; (800480c <I2SEx_RxISR_I2SExt+0x94>)
 80047c6:	e001      	b.n	80047cc <I2SEx_RxISR_I2SExt+0x54>
 80047c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	490d      	ldr	r1, [pc, #52]	; (8004808 <I2SEx_RxISR_I2SExt+0x90>)
 80047d4:	428b      	cmp	r3, r1
 80047d6:	d101      	bne.n	80047dc <I2SEx_RxISR_I2SExt+0x64>
 80047d8:	4b0c      	ldr	r3, [pc, #48]	; (800480c <I2SEx_RxISR_I2SExt+0x94>)
 80047da:	e001      	b.n	80047e0 <I2SEx_RxISR_I2SExt+0x68>
 80047dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047e4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ff03 	bl	8004604 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40003800 	.word	0x40003800
 800480c:	40003400 	.word	0x40003400

08004810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e267      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d075      	beq.n	800491a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800482e:	4b88      	ldr	r3, [pc, #544]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b04      	cmp	r3, #4
 8004838:	d00c      	beq.n	8004854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483a:	4b85      	ldr	r3, [pc, #532]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004842:	2b08      	cmp	r3, #8
 8004844:	d112      	bne.n	800486c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004846:	4b82      	ldr	r3, [pc, #520]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004852:	d10b      	bne.n	800486c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004854:	4b7e      	ldr	r3, [pc, #504]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d05b      	beq.n	8004918 <HAL_RCC_OscConfig+0x108>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d157      	bne.n	8004918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e242      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004874:	d106      	bne.n	8004884 <HAL_RCC_OscConfig+0x74>
 8004876:	4b76      	ldr	r3, [pc, #472]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a75      	ldr	r2, [pc, #468]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800487c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	e01d      	b.n	80048c0 <HAL_RCC_OscConfig+0xb0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800488c:	d10c      	bne.n	80048a8 <HAL_RCC_OscConfig+0x98>
 800488e:	4b70      	ldr	r3, [pc, #448]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6f      	ldr	r2, [pc, #444]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	4b6d      	ldr	r3, [pc, #436]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a6c      	ldr	r2, [pc, #432]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a4:	6013      	str	r3, [r2, #0]
 80048a6:	e00b      	b.n	80048c0 <HAL_RCC_OscConfig+0xb0>
 80048a8:	4b69      	ldr	r3, [pc, #420]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a68      	ldr	r2, [pc, #416]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	4b66      	ldr	r3, [pc, #408]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a65      	ldr	r2, [pc, #404]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d013      	beq.n	80048f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c8:	f7fc fd70 	bl	80013ac <HAL_GetTick>
 80048cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ce:	e008      	b.n	80048e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048d0:	f7fc fd6c 	bl	80013ac <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	2b64      	cmp	r3, #100	; 0x64
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e207      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048e2:	4b5b      	ldr	r3, [pc, #364]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0f0      	beq.n	80048d0 <HAL_RCC_OscConfig+0xc0>
 80048ee:	e014      	b.n	800491a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fc fd5c 	bl	80013ac <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fc fd58 	bl	80013ac <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e1f3      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800490a:	4b51      	ldr	r3, [pc, #324]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0xe8>
 8004916:	e000      	b.n	800491a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d063      	beq.n	80049ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004926:	4b4a      	ldr	r3, [pc, #296]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800493a:	2b08      	cmp	r3, #8
 800493c:	d11c      	bne.n	8004978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493e:	4b44      	ldr	r3, [pc, #272]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d116      	bne.n	8004978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494a:	4b41      	ldr	r3, [pc, #260]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <HAL_RCC_OscConfig+0x152>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d001      	beq.n	8004962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e1c7      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004962:	4b3b      	ldr	r3, [pc, #236]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4937      	ldr	r1, [pc, #220]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004976:	e03a      	b.n	80049ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d020      	beq.n	80049c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004980:	4b34      	ldr	r3, [pc, #208]	; (8004a54 <HAL_RCC_OscConfig+0x244>)
 8004982:	2201      	movs	r2, #1
 8004984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004986:	f7fc fd11 	bl	80013ac <HAL_GetTick>
 800498a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800498c:	e008      	b.n	80049a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800498e:	f7fc fd0d 	bl	80013ac <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e1a8      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049a0:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0f0      	beq.n	800498e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ac:	4b28      	ldr	r3, [pc, #160]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4925      	ldr	r1, [pc, #148]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]
 80049c0:	e015      	b.n	80049ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <HAL_RCC_OscConfig+0x244>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fc fcf0 	bl	80013ac <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fc fcec 	bl	80013ac <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e187      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049e2:	4b1b      	ldr	r3, [pc, #108]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d036      	beq.n	8004a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d016      	beq.n	8004a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <HAL_RCC_OscConfig+0x248>)
 8004a04:	2201      	movs	r2, #1
 8004a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a08:	f7fc fcd0 	bl	80013ac <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a10:	f7fc fccc 	bl	80013ac <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e167      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_OscConfig+0x240>)
 8004a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0f0      	beq.n	8004a10 <HAL_RCC_OscConfig+0x200>
 8004a2e:	e01b      	b.n	8004a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RCC_OscConfig+0x248>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a36:	f7fc fcb9 	bl	80013ac <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a3c:	e00e      	b.n	8004a5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3e:	f7fc fcb5 	bl	80013ac <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d907      	bls.n	8004a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e150      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
 8004a50:	40023800 	.word	0x40023800
 8004a54:	42470000 	.word	0x42470000
 8004a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a5c:	4b88      	ldr	r3, [pc, #544]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ea      	bne.n	8004a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 8097 	beq.w	8004ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a7a:	4b81      	ldr	r3, [pc, #516]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10f      	bne.n	8004aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	4b7d      	ldr	r3, [pc, #500]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	4a7c      	ldr	r2, [pc, #496]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a94:	6413      	str	r3, [r2, #64]	; 0x40
 8004a96:	4b7a      	ldr	r3, [pc, #488]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa6:	4b77      	ldr	r3, [pc, #476]	; (8004c84 <HAL_RCC_OscConfig+0x474>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d118      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ab2:	4b74      	ldr	r3, [pc, #464]	; (8004c84 <HAL_RCC_OscConfig+0x474>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a73      	ldr	r2, [pc, #460]	; (8004c84 <HAL_RCC_OscConfig+0x474>)
 8004ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004abe:	f7fc fc75 	bl	80013ac <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac6:	f7fc fc71 	bl	80013ac <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e10c      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad8:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCC_OscConfig+0x474>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d106      	bne.n	8004afa <HAL_RCC_OscConfig+0x2ea>
 8004aec:	4b64      	ldr	r3, [pc, #400]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a63      	ldr	r2, [pc, #396]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
 8004af8:	e01c      	b.n	8004b34 <HAL_RCC_OscConfig+0x324>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x30c>
 8004b02:	4b5f      	ldr	r3, [pc, #380]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a5e      	ldr	r2, [pc, #376]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b08:	f043 0304 	orr.w	r3, r3, #4
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0e:	4b5c      	ldr	r3, [pc, #368]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b12:	4a5b      	ldr	r2, [pc, #364]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCC_OscConfig+0x324>
 8004b1c:	4b58      	ldr	r3, [pc, #352]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b20:	4a57      	ldr	r2, [pc, #348]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	6713      	str	r3, [r2, #112]	; 0x70
 8004b28:	4b55      	ldr	r3, [pc, #340]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2c:	4a54      	ldr	r2, [pc, #336]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b2e:	f023 0304 	bic.w	r3, r3, #4
 8004b32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d015      	beq.n	8004b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3c:	f7fc fc36 	bl	80013ac <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fc fc32 	bl	80013ac <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e0cb      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5a:	4b49      	ldr	r3, [pc, #292]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0ee      	beq.n	8004b44 <HAL_RCC_OscConfig+0x334>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b68:	f7fc fc20 	bl	80013ac <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b70:	f7fc fc1c 	bl	80013ac <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0b5      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b86:	4b3e      	ldr	r3, [pc, #248]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1ee      	bne.n	8004b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d105      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b98:	4b39      	ldr	r3, [pc, #228]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	4a38      	ldr	r2, [pc, #224]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80a1 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bae:	4b34      	ldr	r3, [pc, #208]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d05c      	beq.n	8004c74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d141      	bne.n	8004c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc2:	4b31      	ldr	r3, [pc, #196]	; (8004c88 <HAL_RCC_OscConfig+0x478>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fc fbf0 	bl	80013ac <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fc fbec 	bl	80013ac <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e087      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be2:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	019b      	lsls	r3, r3, #6
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	3b01      	subs	r3, #1
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c10:	061b      	lsls	r3, r3, #24
 8004c12:	491b      	ldr	r1, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c18:	4b1b      	ldr	r3, [pc, #108]	; (8004c88 <HAL_RCC_OscConfig+0x478>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1e:	f7fc fbc5 	bl	80013ac <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c26:	f7fc fbc1 	bl	80013ac <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e05c      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0x416>
 8004c44:	e054      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c46:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <HAL_RCC_OscConfig+0x478>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4c:	f7fc fbae 	bl	80013ac <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c54:	f7fc fbaa 	bl	80013ac <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e045      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_RCC_OscConfig+0x470>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f0      	bne.n	8004c54 <HAL_RCC_OscConfig+0x444>
 8004c72:	e03d      	b.n	8004cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e038      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40007000 	.word	0x40007000
 8004c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c8c:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_RCC_OscConfig+0x4ec>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d028      	beq.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d121      	bne.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d11a      	bne.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d111      	bne.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d107      	bne.n	8004cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40023800 	.word	0x40023800

08004d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e0cc      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d14:	4b68      	ldr	r3, [pc, #416]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0307 	and.w	r3, r3, #7
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d90c      	bls.n	8004d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d22:	4b65      	ldr	r3, [pc, #404]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	4b63      	ldr	r3, [pc, #396]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0307 	and.w	r3, r3, #7
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0b8      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d020      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	4a58      	ldr	r2, [pc, #352]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0308 	and.w	r3, r3, #8
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d6c:	4b53      	ldr	r3, [pc, #332]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	4a52      	ldr	r2, [pc, #328]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d78:	4b50      	ldr	r3, [pc, #320]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	494d      	ldr	r1, [pc, #308]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d044      	beq.n	8004e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d107      	bne.n	8004dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9e:	4b47      	ldr	r3, [pc, #284]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d119      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d107      	bne.n	8004dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e06f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dce:	4b3b      	ldr	r3, [pc, #236]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e067      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dde:	4b37      	ldr	r3, [pc, #220]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 0203 	bic.w	r2, r3, #3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4934      	ldr	r1, [pc, #208]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004df0:	f7fc fadc 	bl	80013ac <HAL_GetTick>
 8004df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df8:	f7fc fad8 	bl	80013ac <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e04f      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	f003 020c 	and.w	r2, r3, #12
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d1eb      	bne.n	8004df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e20:	4b25      	ldr	r3, [pc, #148]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d20c      	bcs.n	8004e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e36:	4b20      	ldr	r3, [pc, #128]	; (8004eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d001      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e032      	b.n	8004eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4916      	ldr	r1, [pc, #88]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	490e      	ldr	r1, [pc, #56]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e86:	f000 f889 	bl	8004f9c <HAL_RCC_GetSysClockFreq>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	490a      	ldr	r1, [pc, #40]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8004e98:	5ccb      	ldrb	r3, [r1, r3]
 8004e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9e:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ea2:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fc fa3c 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40023c00 	.word	0x40023c00
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	08009adc 	.word	0x08009adc
 8004ec4:	20000000 	.word	0x20000000
 8004ec8:	20000004 	.word	0x20000004

08004ecc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08c      	sub	sp, #48	; 0x30
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d129      	bne.n	8004f32 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	6313      	str	r3, [r2, #48]	; 0x30
 8004eee:	4b28      	ldr	r3, [pc, #160]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f00:	2302      	movs	r3, #2
 8004f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f04:	2303      	movs	r3, #3
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004f10:	f107 031c 	add.w	r3, r7, #28
 8004f14:	4619      	mov	r1, r3
 8004f16:	481f      	ldr	r0, [pc, #124]	; (8004f94 <HAL_RCC_MCOConfig+0xc8>)
 8004f18:	f7fd f8d6 	bl	80020c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004f1c:	4b1c      	ldr	r3, [pc, #112]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004f24:	68b9      	ldr	r1, [r7, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	4919      	ldr	r1, [pc, #100]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004f30:	e029      	b.n	8004f86 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004f32:	2300      	movs	r3, #0
 8004f34:	617b      	str	r3, [r7, #20]
 8004f36:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	4a15      	ldr	r2, [pc, #84]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004f3c:	f043 0304 	orr.w	r3, r3, #4
 8004f40:	6313      	str	r3, [r2, #48]	; 0x30
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f003 0304 	and.w	r3, r3, #4
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f54:	2302      	movs	r3, #2
 8004f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f60:	2300      	movs	r3, #0
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004f64:	f107 031c 	add.w	r3, r7, #28
 8004f68:	4619      	mov	r1, r3
 8004f6a:	480b      	ldr	r0, [pc, #44]	; (8004f98 <HAL_RCC_MCOConfig+0xcc>)
 8004f6c:	f7fd f8ac 	bl	80020c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	00d9      	lsls	r1, r3, #3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	430b      	orrs	r3, r1
 8004f80:	4903      	ldr	r1, [pc, #12]	; (8004f90 <HAL_RCC_MCOConfig+0xc4>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
}
 8004f86:	bf00      	nop
 8004f88:	3730      	adds	r7, #48	; 0x30
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	40020000 	.word	0x40020000
 8004f98:	40020800 	.word	0x40020800

08004f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa0:	b094      	sub	sp, #80	; 0x50
 8004fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fa8:	2300      	movs	r3, #0
 8004faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fac:	2300      	movs	r3, #0
 8004fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb4:	4b79      	ldr	r3, [pc, #484]	; (800519c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 030c 	and.w	r3, r3, #12
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d00d      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x40>
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	f200 80e1 	bhi.w	8005188 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fce:	e0db      	b.n	8005188 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fd0:	4b73      	ldr	r3, [pc, #460]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fd4:	e0db      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fd6:	4b73      	ldr	r3, [pc, #460]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fda:	e0d8      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fdc:	4b6f      	ldr	r3, [pc, #444]	; (800519c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fe6:	4b6d      	ldr	r3, [pc, #436]	; (800519c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d063      	beq.n	80050ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff2:	4b6a      	ldr	r3, [pc, #424]	; (800519c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005004:	633b      	str	r3, [r7, #48]	; 0x30
 8005006:	2300      	movs	r3, #0
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
 800500a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800500e:	4622      	mov	r2, r4
 8005010:	462b      	mov	r3, r5
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f04f 0100 	mov.w	r1, #0
 800501a:	0159      	lsls	r1, r3, #5
 800501c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005020:	0150      	lsls	r0, r2, #5
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4621      	mov	r1, r4
 8005028:	1a51      	subs	r1, r2, r1
 800502a:	6139      	str	r1, [r7, #16]
 800502c:	4629      	mov	r1, r5
 800502e:	eb63 0301 	sbc.w	r3, r3, r1
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005040:	4659      	mov	r1, fp
 8005042:	018b      	lsls	r3, r1, #6
 8005044:	4651      	mov	r1, sl
 8005046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800504a:	4651      	mov	r1, sl
 800504c:	018a      	lsls	r2, r1, #6
 800504e:	4651      	mov	r1, sl
 8005050:	ebb2 0801 	subs.w	r8, r2, r1
 8005054:	4659      	mov	r1, fp
 8005056:	eb63 0901 	sbc.w	r9, r3, r1
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800506a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800506e:	4690      	mov	r8, r2
 8005070:	4699      	mov	r9, r3
 8005072:	4623      	mov	r3, r4
 8005074:	eb18 0303 	adds.w	r3, r8, r3
 8005078:	60bb      	str	r3, [r7, #8]
 800507a:	462b      	mov	r3, r5
 800507c:	eb49 0303 	adc.w	r3, r9, r3
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f04f 0300 	mov.w	r3, #0
 800508a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800508e:	4629      	mov	r1, r5
 8005090:	024b      	lsls	r3, r1, #9
 8005092:	4621      	mov	r1, r4
 8005094:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005098:	4621      	mov	r1, r4
 800509a:	024a      	lsls	r2, r1, #9
 800509c:	4610      	mov	r0, r2
 800509e:	4619      	mov	r1, r3
 80050a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a2:	2200      	movs	r2, #0
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ac:	f7fb f88c 	bl	80001c8 <__aeabi_uldivmod>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4613      	mov	r3, r2
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b8:	e058      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ba:	4b38      	ldr	r3, [pc, #224]	; (800519c <HAL_RCC_GetSysClockFreq+0x200>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	099b      	lsrs	r3, r3, #6
 80050c0:	2200      	movs	r2, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	4611      	mov	r1, r2
 80050c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050ca:	623b      	str	r3, [r7, #32]
 80050cc:	2300      	movs	r3, #0
 80050ce:	627b      	str	r3, [r7, #36]	; 0x24
 80050d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050d4:	4642      	mov	r2, r8
 80050d6:	464b      	mov	r3, r9
 80050d8:	f04f 0000 	mov.w	r0, #0
 80050dc:	f04f 0100 	mov.w	r1, #0
 80050e0:	0159      	lsls	r1, r3, #5
 80050e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050e6:	0150      	lsls	r0, r2, #5
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4641      	mov	r1, r8
 80050ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80050f2:	4649      	mov	r1, r9
 80050f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	f04f 0300 	mov.w	r3, #0
 8005100:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005104:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005108:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800510c:	ebb2 040a 	subs.w	r4, r2, sl
 8005110:	eb63 050b 	sbc.w	r5, r3, fp
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	00eb      	lsls	r3, r5, #3
 800511e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005122:	00e2      	lsls	r2, r4, #3
 8005124:	4614      	mov	r4, r2
 8005126:	461d      	mov	r5, r3
 8005128:	4643      	mov	r3, r8
 800512a:	18e3      	adds	r3, r4, r3
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	464b      	mov	r3, r9
 8005130:	eb45 0303 	adc.w	r3, r5, r3
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005142:	4629      	mov	r1, r5
 8005144:	028b      	lsls	r3, r1, #10
 8005146:	4621      	mov	r1, r4
 8005148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800514c:	4621      	mov	r1, r4
 800514e:	028a      	lsls	r2, r1, #10
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005156:	2200      	movs	r2, #0
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	61fa      	str	r2, [r7, #28]
 800515c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005160:	f7fb f832 	bl	80001c8 <__aeabi_uldivmod>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4613      	mov	r3, r2
 800516a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_RCC_GetSysClockFreq+0x200>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	3301      	adds	r3, #1
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800517c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800517e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005186:	e002      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800518a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800518c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800518e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005190:	4618      	mov	r0, r3
 8005192:	3750      	adds	r7, #80	; 0x50
 8005194:	46bd      	mov	sp, r7
 8005196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	007a1200 	.word	0x007a1200

080051a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ae:	681b      	ldr	r3, [r3, #0]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000000 	.word	0x20000000

080051c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051c4:	f7ff fff0 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b05      	ldr	r3, [pc, #20]	; (80051e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	0a9b      	lsrs	r3, r3, #10
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4903      	ldr	r1, [pc, #12]	; (80051e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40023800 	.word	0x40023800
 80051e4:	08009aec 	.word	0x08009aec

080051e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d105      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800520c:	2b00      	cmp	r3, #0
 800520e:	d035      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005210:	4b62      	ldr	r3, [pc, #392]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005216:	f7fc f8c9 	bl	80013ac <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800521e:	f7fc f8c5 	bl	80013ac <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e0b0      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005230:	4b5b      	ldr	r3, [pc, #364]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f0      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	019a      	lsls	r2, r3, #6
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	071b      	lsls	r3, r3, #28
 8005248:	4955      	ldr	r1, [pc, #340]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005250:	4b52      	ldr	r3, [pc, #328]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005256:	f7fc f8a9 	bl	80013ac <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800525e:	f7fc f8a5 	bl	80013ac <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e090      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005270:	4b4b      	ldr	r3, [pc, #300]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8083 	beq.w	8005390 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	4b44      	ldr	r3, [pc, #272]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	4a43      	ldr	r2, [pc, #268]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005298:	6413      	str	r3, [r2, #64]	; 0x40
 800529a:	4b41      	ldr	r3, [pc, #260]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80052a6:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a3e      	ldr	r2, [pc, #248]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80052b2:	f7fc f87b 	bl	80013ac <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80052ba:	f7fc f877 	bl	80013ac <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e062      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052cc:	4b35      	ldr	r3, [pc, #212]	; (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052d8:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d02f      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d028      	beq.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052f6:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005300:	4b29      	ldr	r3, [pc, #164]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005302:	2201      	movs	r2, #1
 8005304:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005306:	4b28      	ldr	r3, [pc, #160]	; (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800530c:	4a24      	ldr	r2, [pc, #144]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005312:	4b23      	ldr	r3, [pc, #140]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	d114      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800531e:	f7fc f845 	bl	80013ac <HAL_GetTick>
 8005322:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005324:	e00a      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005326:	f7fc f841 	bl	80013ac <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	f241 3288 	movw	r2, #5000	; 0x1388
 8005334:	4293      	cmp	r3, r2
 8005336:	d901      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e02a      	b.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533c:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0ee      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005354:	d10d      	bne.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536a:	490d      	ldr	r1, [pc, #52]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800536c:	4313      	orrs	r3, r2
 800536e:	608b      	str	r3, [r1, #8]
 8005370:	e005      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	4a0a      	ldr	r2, [pc, #40]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005378:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800537c:	6093      	str	r3, [r2, #8]
 800537e:	4b08      	ldr	r3, [pc, #32]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538a:	4905      	ldr	r1, [pc, #20]	; (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800538c:	4313      	orrs	r3, r2
 800538e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	42470068 	.word	0x42470068
 80053a0:	40023800 	.word	0x40023800
 80053a4:	40007000 	.word	0x40007000
 80053a8:	42470e40 	.word	0x42470e40

080053ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d13e      	bne.n	8005448 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80053ca:	4b23      	ldr	r3, [pc, #140]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d12f      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053e2:	617b      	str	r3, [r7, #20]
          break;
 80053e4:	e02f      	b.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053e6:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f2:	d108      	bne.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053f4:	4b18      	ldr	r3, [pc, #96]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053fc:	4a18      	ldr	r2, [pc, #96]	; (8005460 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	e007      	b.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800540e:	4a15      	ldr	r2, [pc, #84]	; (8005464 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005410:	fbb2 f3f3 	udiv	r3, r2, r3
 8005414:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800541c:	099b      	lsrs	r3, r3, #6
 800541e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	fb02 f303 	mul.w	r3, r2, r3
 8005428:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800542a:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800542c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005430:	0f1b      	lsrs	r3, r3, #28
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	fbb2 f3f3 	udiv	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
          break;
 800543e:	e002      	b.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	617b      	str	r3, [r7, #20]
          break;
 8005444:	bf00      	nop
        }
      }
      break;
 8005446:	bf00      	nop
    }
  }
  return frequency;
 8005448:	697b      	ldr	r3, [r7, #20]
}
 800544a:	4618      	mov	r0, r3
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40023800 	.word	0x40023800
 800545c:	00bb8000 	.word	0x00bb8000
 8005460:	007a1200 	.word	0x007a1200
 8005464:	00f42400 	.word	0x00f42400

08005468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e07b      	b.n	8005572 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d108      	bne.n	8005494 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800548a:	d009      	beq.n	80054a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
 8005492:	e005      	b.n	80054a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d106      	bne.n	80054c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fb fd80 	bl	8000fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005510:	431a      	orrs	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005524:	ea42 0103 	orr.w	r1, r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	f003 0104 	and.w	r1, r3, #4
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	f003 0210 	and.w	r2, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005560:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d101      	bne.n	800558c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e041      	b.n	8005610 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fb fd55 	bl	8001050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2202      	movs	r2, #2
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f000 fad9 	bl	8005b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e041      	b.n	80056ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f839 	bl	80056b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2202      	movs	r2, #2
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f000 fa8a 	bl	8005b70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_TIM_PWM_Start+0x24>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	bf14      	ite	ne
 80056e8:	2301      	movne	r3, #1
 80056ea:	2300      	moveq	r3, #0
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	e022      	b.n	8005736 <HAL_TIM_PWM_Start+0x6a>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b04      	cmp	r3, #4
 80056f4:	d109      	bne.n	800570a <HAL_TIM_PWM_Start+0x3e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b01      	cmp	r3, #1
 8005700:	bf14      	ite	ne
 8005702:	2301      	movne	r3, #1
 8005704:	2300      	moveq	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	e015      	b.n	8005736 <HAL_TIM_PWM_Start+0x6a>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b08      	cmp	r3, #8
 800570e:	d109      	bne.n	8005724 <HAL_TIM_PWM_Start+0x58>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	e008      	b.n	8005736 <HAL_TIM_PWM_Start+0x6a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e07c      	b.n	8005838 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d104      	bne.n	800574e <HAL_TIM_PWM_Start+0x82>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574c:	e013      	b.n	8005776 <HAL_TIM_PWM_Start+0xaa>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	2b04      	cmp	r3, #4
 8005752:	d104      	bne.n	800575e <HAL_TIM_PWM_Start+0x92>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800575c:	e00b      	b.n	8005776 <HAL_TIM_PWM_Start+0xaa>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d104      	bne.n	800576e <HAL_TIM_PWM_Start+0xa2>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800576c:	e003      	b.n	8005776 <HAL_TIM_PWM_Start+0xaa>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2202      	movs	r2, #2
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2201      	movs	r2, #1
 800577c:	6839      	ldr	r1, [r7, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fce0 	bl	8006144 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <HAL_TIM_PWM_Start+0x174>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d004      	beq.n	8005798 <HAL_TIM_PWM_Start+0xcc>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a2c      	ldr	r2, [pc, #176]	; (8005844 <HAL_TIM_PWM_Start+0x178>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <HAL_TIM_PWM_Start+0xd0>
 8005798:	2301      	movs	r3, #1
 800579a:	e000      	b.n	800579e <HAL_TIM_PWM_Start+0xd2>
 800579c:	2300      	movs	r3, #0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a22      	ldr	r2, [pc, #136]	; (8005840 <HAL_TIM_PWM_Start+0x174>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <HAL_TIM_PWM_Start+0x136>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d01d      	beq.n	8005802 <HAL_TIM_PWM_Start+0x136>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a1f      	ldr	r2, [pc, #124]	; (8005848 <HAL_TIM_PWM_Start+0x17c>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d018      	beq.n	8005802 <HAL_TIM_PWM_Start+0x136>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1d      	ldr	r2, [pc, #116]	; (800584c <HAL_TIM_PWM_Start+0x180>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d013      	beq.n	8005802 <HAL_TIM_PWM_Start+0x136>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <HAL_TIM_PWM_Start+0x184>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00e      	beq.n	8005802 <HAL_TIM_PWM_Start+0x136>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a16      	ldr	r2, [pc, #88]	; (8005844 <HAL_TIM_PWM_Start+0x178>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d009      	beq.n	8005802 <HAL_TIM_PWM_Start+0x136>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a18      	ldr	r2, [pc, #96]	; (8005854 <HAL_TIM_PWM_Start+0x188>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d004      	beq.n	8005802 <HAL_TIM_PWM_Start+0x136>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a16      	ldr	r2, [pc, #88]	; (8005858 <HAL_TIM_PWM_Start+0x18c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d111      	bne.n	8005826 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b06      	cmp	r3, #6
 8005812:	d010      	beq.n	8005836 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005824:	e007      	b.n	8005836 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0201 	orr.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40010000 	.word	0x40010000
 8005844:	40010400 	.word	0x40010400
 8005848:	40000400 	.word	0x40000400
 800584c:	40000800 	.word	0x40000800
 8005850:	40000c00 	.word	0x40000c00
 8005854:	40014000 	.word	0x40014000
 8005858:	40001800 	.word	0x40001800

0800585c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005868:	2300      	movs	r3, #0
 800586a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005872:	2b01      	cmp	r3, #1
 8005874:	d101      	bne.n	800587a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005876:	2302      	movs	r3, #2
 8005878:	e0ae      	b.n	80059d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b0c      	cmp	r3, #12
 8005886:	f200 809f 	bhi.w	80059c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058c5 	.word	0x080058c5
 8005894:	080059c9 	.word	0x080059c9
 8005898:	080059c9 	.word	0x080059c9
 800589c:	080059c9 	.word	0x080059c9
 80058a0:	08005905 	.word	0x08005905
 80058a4:	080059c9 	.word	0x080059c9
 80058a8:	080059c9 	.word	0x080059c9
 80058ac:	080059c9 	.word	0x080059c9
 80058b0:	08005947 	.word	0x08005947
 80058b4:	080059c9 	.word	0x080059c9
 80058b8:	080059c9 	.word	0x080059c9
 80058bc:	080059c9 	.word	0x080059c9
 80058c0:	08005987 	.word	0x08005987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68b9      	ldr	r1, [r7, #8]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f9f0 	bl	8005cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	699a      	ldr	r2, [r3, #24]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0208 	orr.w	r2, r2, #8
 80058de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0204 	bic.w	r2, r2, #4
 80058ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6999      	ldr	r1, [r3, #24]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	619a      	str	r2, [r3, #24]
      break;
 8005902:	e064      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	4618      	mov	r0, r3
 800590c:	f000 fa40 	bl	8005d90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699a      	ldr	r2, [r3, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6999      	ldr	r1, [r3, #24]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	021a      	lsls	r2, r3, #8
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	430a      	orrs	r2, r1
 8005942:	619a      	str	r2, [r3, #24]
      break;
 8005944:	e043      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fa95 	bl	8005e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69da      	ldr	r2, [r3, #28]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0208 	orr.w	r2, r2, #8
 8005960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69da      	ldr	r2, [r3, #28]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0204 	bic.w	r2, r2, #4
 8005970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	69d9      	ldr	r1, [r3, #28]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	61da      	str	r2, [r3, #28]
      break;
 8005984:	e023      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68b9      	ldr	r1, [r7, #8]
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fae9 	bl	8005f64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69da      	ldr	r2, [r3, #28]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	021a      	lsls	r2, r3, #8
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	61da      	str	r2, [r3, #28]
      break;
 80059c6:	e002      	b.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	75fb      	strb	r3, [r7, #23]
      break;
 80059cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIM_ConfigClockSource+0x1c>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e0b4      	b.n	8005b66 <HAL_TIM_ConfigClockSource+0x186>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a34:	d03e      	beq.n	8005ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8005a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3a:	f200 8087 	bhi.w	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a42:	f000 8086 	beq.w	8005b52 <HAL_TIM_ConfigClockSource+0x172>
 8005a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4a:	d87f      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b70      	cmp	r3, #112	; 0x70
 8005a4e:	d01a      	beq.n	8005a86 <HAL_TIM_ConfigClockSource+0xa6>
 8005a50:	2b70      	cmp	r3, #112	; 0x70
 8005a52:	d87b      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b60      	cmp	r3, #96	; 0x60
 8005a56:	d050      	beq.n	8005afa <HAL_TIM_ConfigClockSource+0x11a>
 8005a58:	2b60      	cmp	r3, #96	; 0x60
 8005a5a:	d877      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b50      	cmp	r3, #80	; 0x50
 8005a5e:	d03c      	beq.n	8005ada <HAL_TIM_ConfigClockSource+0xfa>
 8005a60:	2b50      	cmp	r3, #80	; 0x50
 8005a62:	d873      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	d058      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x13a>
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d86f      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b30      	cmp	r3, #48	; 0x30
 8005a6e:	d064      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15a>
 8005a70:	2b30      	cmp	r3, #48	; 0x30
 8005a72:	d86b      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d060      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15a>
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d867      	bhi.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d05c      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d05a      	beq.n	8005b3a <HAL_TIM_ConfigClockSource+0x15a>
 8005a84:	e062      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	6899      	ldr	r1, [r3, #8]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f000 fb35 	bl	8006104 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	609a      	str	r2, [r3, #8]
      break;
 8005ab2:	e04f      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	6899      	ldr	r1, [r3, #8]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f000 fb1e 	bl	8006104 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ad6:	609a      	str	r2, [r3, #8]
      break;
 8005ad8:	e03c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6818      	ldr	r0, [r3, #0]
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f000 fa92 	bl	8006010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2150      	movs	r1, #80	; 0x50
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 faeb 	bl	80060ce <TIM_ITRx_SetConfig>
      break;
 8005af8:	e02c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	6859      	ldr	r1, [r3, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	461a      	mov	r2, r3
 8005b08:	f000 fab1 	bl	800606e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2160      	movs	r1, #96	; 0x60
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 fadb 	bl	80060ce <TIM_ITRx_SetConfig>
      break;
 8005b18:	e01c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6859      	ldr	r1, [r3, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	461a      	mov	r2, r3
 8005b28:	f000 fa72 	bl	8006010 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2140      	movs	r1, #64	; 0x40
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 facb 	bl	80060ce <TIM_ITRx_SetConfig>
      break;
 8005b38:	e00c      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4619      	mov	r1, r3
 8005b44:	4610      	mov	r0, r2
 8005b46:	f000 fac2 	bl	80060ce <TIM_ITRx_SetConfig>
      break;
 8005b4a:	e003      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b50:	e000      	b.n	8005b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a40      	ldr	r2, [pc, #256]	; (8005c84 <TIM_Base_SetConfig+0x114>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d013      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8e:	d00f      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a3d      	ldr	r2, [pc, #244]	; (8005c88 <TIM_Base_SetConfig+0x118>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00b      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a3c      	ldr	r2, [pc, #240]	; (8005c8c <TIM_Base_SetConfig+0x11c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d007      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a3b      	ldr	r2, [pc, #236]	; (8005c90 <TIM_Base_SetConfig+0x120>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d003      	beq.n	8005bb0 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3a      	ldr	r2, [pc, #232]	; (8005c94 <TIM_Base_SetConfig+0x124>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d108      	bne.n	8005bc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a2f      	ldr	r2, [pc, #188]	; (8005c84 <TIM_Base_SetConfig+0x114>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d02b      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd0:	d027      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a2c      	ldr	r2, [pc, #176]	; (8005c88 <TIM_Base_SetConfig+0x118>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d023      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2b      	ldr	r2, [pc, #172]	; (8005c8c <TIM_Base_SetConfig+0x11c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d01f      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2a      	ldr	r2, [pc, #168]	; (8005c90 <TIM_Base_SetConfig+0x120>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d01b      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a29      	ldr	r2, [pc, #164]	; (8005c94 <TIM_Base_SetConfig+0x124>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d017      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a28      	ldr	r2, [pc, #160]	; (8005c98 <TIM_Base_SetConfig+0x128>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <TIM_Base_SetConfig+0x12c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00f      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a26      	ldr	r2, [pc, #152]	; (8005ca0 <TIM_Base_SetConfig+0x130>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00b      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a25      	ldr	r2, [pc, #148]	; (8005ca4 <TIM_Base_SetConfig+0x134>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d007      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a24      	ldr	r2, [pc, #144]	; (8005ca8 <TIM_Base_SetConfig+0x138>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d003      	beq.n	8005c22 <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a23      	ldr	r2, [pc, #140]	; (8005cac <TIM_Base_SetConfig+0x13c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d108      	bne.n	8005c34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <TIM_Base_SetConfig+0x114>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_Base_SetConfig+0xf8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a0c      	ldr	r2, [pc, #48]	; (8005c94 <TIM_Base_SetConfig+0x124>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d103      	bne.n	8005c70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	691a      	ldr	r2, [r3, #16]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	615a      	str	r2, [r3, #20]
}
 8005c76:	bf00      	nop
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40014400 	.word	0x40014400
 8005ca0:	40014800 	.word	0x40014800
 8005ca4:	40001800 	.word	0x40001800
 8005ca8:	40001c00 	.word	0x40001c00
 8005cac:	40002000 	.word	0x40002000

08005cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f023 0201 	bic.w	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f023 0302 	bic.w	r3, r3, #2
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a20      	ldr	r2, [pc, #128]	; (8005d88 <TIM_OC1_SetConfig+0xd8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_OC1_SetConfig+0x64>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a1f      	ldr	r2, [pc, #124]	; (8005d8c <TIM_OC1_SetConfig+0xdc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d10c      	bne.n	8005d2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f023 0308 	bic.w	r3, r3, #8
 8005d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 0304 	bic.w	r3, r3, #4
 8005d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <TIM_OC1_SetConfig+0xd8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d003      	beq.n	8005d3e <TIM_OC1_SetConfig+0x8e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <TIM_OC1_SetConfig+0xdc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d111      	bne.n	8005d62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	68fa      	ldr	r2, [r7, #12]
 8005d6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	621a      	str	r2, [r3, #32]
}
 8005d7c:	bf00      	nop
 8005d7e:	371c      	adds	r7, #28
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	40010000 	.word	0x40010000
 8005d8c:	40010400 	.word	0x40010400

08005d90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f023 0210 	bic.w	r2, r3, #16
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f023 0320 	bic.w	r3, r3, #32
 8005dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	011b      	lsls	r3, r3, #4
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a22      	ldr	r2, [pc, #136]	; (8005e74 <TIM_OC2_SetConfig+0xe4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_OC2_SetConfig+0x68>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <TIM_OC2_SetConfig+0xe8>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d10d      	bne.n	8005e14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <TIM_OC2_SetConfig+0xe4>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d003      	beq.n	8005e24 <TIM_OC2_SetConfig+0x94>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a16      	ldr	r2, [pc, #88]	; (8005e78 <TIM_OC2_SetConfig+0xe8>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d113      	bne.n	8005e4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	693a      	ldr	r2, [r7, #16]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685a      	ldr	r2, [r3, #4]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	621a      	str	r2, [r3, #32]
}
 8005e66:	bf00      	nop
 8005e68:	371c      	adds	r7, #28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40010400 	.word	0x40010400

08005e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	021b      	lsls	r3, r3, #8
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <TIM_OC3_SetConfig+0xe0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d003      	beq.n	8005ee2 <TIM_OC3_SetConfig+0x66>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <TIM_OC3_SetConfig+0xe4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d10d      	bne.n	8005efe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ee8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	021b      	lsls	r3, r3, #8
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a16      	ldr	r2, [pc, #88]	; (8005f5c <TIM_OC3_SetConfig+0xe0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d003      	beq.n	8005f0e <TIM_OC3_SetConfig+0x92>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a15      	ldr	r2, [pc, #84]	; (8005f60 <TIM_OC3_SetConfig+0xe4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d113      	bne.n	8005f36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	011b      	lsls	r3, r3, #4
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	621a      	str	r2, [r3, #32]
}
 8005f50:	bf00      	nop
 8005f52:	371c      	adds	r7, #28
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40010400 	.word	0x40010400

08005f64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	021b      	lsls	r3, r3, #8
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a12      	ldr	r2, [pc, #72]	; (8006008 <TIM_OC4_SetConfig+0xa4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d003      	beq.n	8005fcc <TIM_OC4_SetConfig+0x68>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a11      	ldr	r2, [pc, #68]	; (800600c <TIM_OC4_SetConfig+0xa8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d109      	bne.n	8005fe0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	019b      	lsls	r3, r3, #6
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	40010000 	.word	0x40010000
 800600c:	40010400 	.word	0x40010400

08006010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006010:	b480      	push	{r7}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f023 0201 	bic.w	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800603a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 030a 	bic.w	r3, r3, #10
 800604c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	693a      	ldr	r2, [r7, #16]
 800605a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800606e:	b480      	push	{r7}
 8006070:	b087      	sub	sp, #28
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f023 0210 	bic.w	r2, r3, #16
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006098:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	031b      	lsls	r3, r3, #12
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	f043 0307 	orr.w	r3, r3, #7
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	609a      	str	r2, [r3, #8]
}
 80060f8:	bf00      	nop
 80060fa:	3714      	adds	r7, #20
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800611e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	021a      	lsls	r2, r3, #8
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	431a      	orrs	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4313      	orrs	r3, r2
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	609a      	str	r2, [r3, #8]
}
 8006138:	bf00      	nop
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	2201      	movs	r2, #1
 8006158:	fa02 f303 	lsl.w	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6a1a      	ldr	r2, [r3, #32]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	43db      	mvns	r3, r3
 8006166:	401a      	ands	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	fa01 f303 	lsl.w	r3, r1, r3
 800617c:	431a      	orrs	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	621a      	str	r2, [r3, #32]
}
 8006182:	bf00      	nop
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e05a      	b.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a21      	ldr	r2, [pc, #132]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d01d      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a18      	ldr	r2, [pc, #96]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a17      	ldr	r2, [pc, #92]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a15      	ldr	r2, [pc, #84]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d10c      	bne.n	800624c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4313      	orrs	r3, r2
 8006242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40010400 	.word	0x40010400
 8006280:	40014000 	.word	0x40014000
 8006284:	40001800 	.word	0x40001800

08006288 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006288:	b084      	sub	sp, #16
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	f107 001c 	add.w	r0, r7, #28
 8006296:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b01      	cmp	r3, #1
 800629e:	d122      	bne.n	80062e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80062b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f9c0 	bl	8006660 <USB_CoreReset>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	e01a      	b.n	800631c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f9b4 	bl	8006660 <USB_CoreReset>
 80062f8:	4603      	mov	r3, r0
 80062fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006306:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	639a      	str	r2, [r3, #56]	; 0x38
 800630e:	e005      	b.n	800631c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800631c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631e:	2b01      	cmp	r3, #1
 8006320:	d10b      	bne.n	800633a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f043 0206 	orr.w	r2, r3, #6
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f043 0220 	orr.w	r2, r3, #32
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800633a:	7bfb      	ldrb	r3, [r7, #15]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006346:	b004      	add	sp, #16
 8006348:	4770      	bx	lr

0800634a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f043 0201 	orr.w	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f023 0201 	bic.w	r2, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	460b      	mov	r3, r1
 8006398:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d115      	bne.n	80063dc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063bc:	2001      	movs	r0, #1
 80063be:	f7fb f801 	bl	80013c4 <HAL_Delay>
      ms++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 f93a 	bl	8006642 <USB_GetMode>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d01e      	beq.n	8006412 <USB_SetCurrentMode+0x84>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b31      	cmp	r3, #49	; 0x31
 80063d8:	d9f0      	bls.n	80063bc <USB_SetCurrentMode+0x2e>
 80063da:	e01a      	b.n	8006412 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d115      	bne.n	800640e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80063ee:	2001      	movs	r0, #1
 80063f0:	f7fa ffe8 	bl	80013c4 <HAL_Delay>
      ms++;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f921 	bl	8006642 <USB_GetMode>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <USB_SetCurrentMode+0x84>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b31      	cmp	r3, #49	; 0x31
 800640a:	d9f0      	bls.n	80063ee <USB_SetCurrentMode+0x60>
 800640c:	e001      	b.n	8006412 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e005      	b.n	800641e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b32      	cmp	r3, #50	; 0x32
 8006416:	d101      	bne.n	800641c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e000      	b.n	800641e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
	...

08006428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4a13      	ldr	r2, [pc, #76]	; (800648c <USB_FlushTxFifo+0x64>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d901      	bls.n	8006448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e01b      	b.n	8006480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	daf2      	bge.n	8006436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	019b      	lsls	r3, r3, #6
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	4a08      	ldr	r2, [pc, #32]	; (800648c <USB_FlushTxFifo+0x64>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d901      	bls.n	8006472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e006      	b.n	8006480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b20      	cmp	r3, #32
 800647c:	d0f0      	beq.n	8006460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	00030d40 	.word	0x00030d40

08006490 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3301      	adds	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	4a11      	ldr	r2, [pc, #68]	; (80064ec <USB_FlushRxFifo+0x5c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d901      	bls.n	80064ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e018      	b.n	80064e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	daf2      	bge.n	800649c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2210      	movs	r2, #16
 80064be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	3301      	adds	r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a08      	ldr	r2, [pc, #32]	; (80064ec <USB_FlushRxFifo+0x5c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d901      	bls.n	80064d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e006      	b.n	80064e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	f003 0310 	and.w	r3, r3, #16
 80064da:	2b10      	cmp	r3, #16
 80064dc:	d0f0      	beq.n	80064c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	00030d40 	.word	0x00030d40

080064f0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b089      	sub	sp, #36	; 0x24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4611      	mov	r1, r2
 80064fc:	461a      	mov	r2, r3
 80064fe:	460b      	mov	r3, r1
 8006500:	71fb      	strb	r3, [r7, #7]
 8006502:	4613      	mov	r3, r2
 8006504:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800650e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006512:	2b00      	cmp	r3, #0
 8006514:	d123      	bne.n	800655e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006516:	88bb      	ldrh	r3, [r7, #4]
 8006518:	3303      	adds	r3, #3
 800651a:	089b      	lsrs	r3, r3, #2
 800651c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800651e:	2300      	movs	r3, #0
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e018      	b.n	8006556 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006524:	79fb      	ldrb	r3, [r7, #7]
 8006526:	031a      	lsls	r2, r3, #12
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	4413      	add	r3, r2
 800652c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006530:	461a      	mov	r2, r3
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	3301      	adds	r3, #1
 800653c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	3301      	adds	r3, #1
 8006542:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	3301      	adds	r3, #1
 8006548:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	3301      	adds	r3, #1
 800654e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	3301      	adds	r3, #1
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d3e2      	bcc.n	8006524 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3724      	adds	r7, #36	; 0x24
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800656c:	b480      	push	{r7}
 800656e:	b08b      	sub	sp, #44	; 0x2c
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	4613      	mov	r3, r2
 8006578:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	089b      	lsrs	r3, r3, #2
 8006586:	b29b      	uxth	r3, r3
 8006588:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	f003 0303 	and.w	r3, r3, #3
 8006590:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006592:	2300      	movs	r3, #0
 8006594:	623b      	str	r3, [r7, #32]
 8006596:	e014      	b.n	80065c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	3301      	adds	r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	3301      	adds	r3, #1
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	3301      	adds	r3, #1
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	3301      	adds	r3, #1
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	3301      	adds	r3, #1
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	6a3a      	ldr	r2, [r7, #32]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d3e6      	bcc.n	8006598 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80065ca:	8bfb      	ldrh	r3, [r7, #30]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d01e      	beq.n	800660e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065da:	461a      	mov	r2, r3
 80065dc:	f107 0310 	add.w	r3, r7, #16
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	701a      	strb	r2, [r3, #0]
      i++;
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	3301      	adds	r3, #1
 80065fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	3301      	adds	r3, #1
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006602:	8bfb      	ldrh	r3, [r7, #30]
 8006604:	3b01      	subs	r3, #1
 8006606:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006608:	8bfb      	ldrh	r3, [r7, #30]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1ea      	bne.n	80065e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006610:	4618      	mov	r0, r3
 8006612:	372c      	adds	r7, #44	; 0x2c
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4013      	ands	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006634:	68fb      	ldr	r3, [r7, #12]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3714      	adds	r7, #20
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	f003 0301 	and.w	r3, r3, #1
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr
	...

08006660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <USB_CoreReset+0x64>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e01b      	b.n	80066b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	daf2      	bge.n	800666c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	f043 0201 	orr.w	r2, r3, #1
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4a09      	ldr	r2, [pc, #36]	; (80066c4 <USB_CoreReset+0x64>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d901      	bls.n	80066a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e006      	b.n	80066b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d0f0      	beq.n	8006696 <USB_CoreReset+0x36>

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	00030d40 	.word	0x00030d40

080066c8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066c8:	b084      	sub	sp, #16
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671a:	2b00      	cmp	r3, #0
 800671c:	d018      	beq.n	8006750 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800671e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d10a      	bne.n	800673a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006732:	f043 0304 	orr.w	r3, r3, #4
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	e014      	b.n	8006764 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006748:	f023 0304 	bic.w	r3, r3, #4
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	e009      	b.n	8006764 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800675e:	f023 0304 	bic.w	r3, r3, #4
 8006762:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006764:	2110      	movs	r1, #16
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff fe5e 	bl	8006428 <USB_FlushTxFifo>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fe8a 	bl	8006490 <USB_FlushRxFifo>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006786:	2300      	movs	r3, #0
 8006788:	613b      	str	r3, [r7, #16]
 800678a:	e015      	b.n	80067b8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4413      	add	r3, r2
 8006794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006798:	461a      	mov	r2, r3
 800679a:	f04f 33ff 	mov.w	r3, #4294967295
 800679e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ac:	461a      	mov	r2, r3
 80067ae:	2300      	movs	r3, #0
 80067b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	3301      	adds	r3, #1
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d3e5      	bcc.n	800678c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f04f 32ff 	mov.w	r2, #4294967295
 80067cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00b      	beq.n	80067f2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a13      	ldr	r2, [pc, #76]	; (8006834 <USB_HostInit+0x16c>)
 80067e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a13      	ldr	r2, [pc, #76]	; (8006838 <USB_HostInit+0x170>)
 80067ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80067f0:	e009      	b.n	8006806 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2280      	movs	r2, #128	; 0x80
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <USB_HostInit+0x174>)
 80067fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a0f      	ldr	r2, [pc, #60]	; (8006840 <USB_HostInit+0x178>)
 8006802:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	2b00      	cmp	r3, #0
 800680a:	d105      	bne.n	8006818 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f043 0210 	orr.w	r2, r3, #16
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	699a      	ldr	r2, [r3, #24]
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <USB_HostInit+0x17c>)
 800681e:	4313      	orrs	r3, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006830:	b004      	add	sp, #16
 8006832:	4770      	bx	lr
 8006834:	01000200 	.word	0x01000200
 8006838:	00e00300 	.word	0x00e00300
 800683c:	00600080 	.word	0x00600080
 8006840:	004000e0 	.word	0x004000e0
 8006844:	a3200008 	.word	0xa3200008

08006848 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d107      	bne.n	800689a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006890:	461a      	mov	r2, r3
 8006892:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006896:	6053      	str	r3, [r2, #4]
 8006898:	e009      	b.n	80068ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	2b02      	cmp	r3, #2
 800689e:	d106      	bne.n	80068ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a6:	461a      	mov	r2, r3
 80068a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80068ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80068dc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80068ec:	2064      	movs	r0, #100	; 0x64
 80068ee:	f7fa fd69 	bl	80013c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80068fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068fe:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006900:	200a      	movs	r0, #10
 8006902:	f7fa fd5f 	bl	80013c4 <HAL_Delay>

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006934:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d109      	bne.n	8006954 <USB_DriveVbus+0x44>
 8006940:	78fb      	ldrb	r3, [r7, #3]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d106      	bne.n	8006954 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800694e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006952:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	d109      	bne.n	8006974 <USB_DriveVbus+0x64>
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800696e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006972:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr

08006982 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006982:	b480      	push	{r7}
 8006984:	b085      	sub	sp, #20
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	0c5b      	lsrs	r3, r3, #17
 80069a0:	f003 0303 	and.w	r3, r3, #3
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3714      	adds	r7, #20
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	b29b      	uxth	r3, r3
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
	...

080069d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	4608      	mov	r0, r1
 80069de:	4611      	mov	r1, r2
 80069e0:	461a      	mov	r2, r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	70fb      	strb	r3, [r7, #3]
 80069e6:	460b      	mov	r3, r1
 80069e8:	70bb      	strb	r3, [r7, #2]
 80069ea:	4613      	mov	r3, r2
 80069ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a02:	461a      	mov	r2, r3
 8006a04:	f04f 33ff 	mov.w	r3, #4294967295
 8006a08:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006a0a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d87e      	bhi.n	8006b10 <USB_HC_Init+0x13c>
 8006a12:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <USB_HC_Init+0x44>)
 8006a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a18:	08006a29 	.word	0x08006a29
 8006a1c:	08006ad3 	.word	0x08006ad3
 8006a20:	08006a29 	.word	0x08006a29
 8006a24:	08006a95 	.word	0x08006a95
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a34:	461a      	mov	r2, r3
 8006a36:	f240 439d 	movw	r3, #1181	; 0x49d
 8006a3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006a3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	da10      	bge.n	8006a66 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a44:	78fb      	ldrb	r3, [r7, #3]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	78fa      	ldrb	r2, [r7, #3]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a62:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006a64:	e057      	b.n	8006b16 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d051      	beq.n	8006b16 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	78fa      	ldrb	r2, [r7, #3]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006a90:	60d3      	str	r3, [r2, #12]
      break;
 8006a92:	e040      	b.n	8006b16 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a94:	78fb      	ldrb	r3, [r7, #3]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	f240 639d 	movw	r3, #1693	; 0x69d
 8006aa6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006aa8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da34      	bge.n	8006b1a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	015a      	lsls	r2, r3, #5
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	78fa      	ldrb	r2, [r7, #3]
 8006ac0:	0151      	lsls	r1, r2, #5
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	440a      	add	r2, r1
 8006ac6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ace:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006ad0:	e023      	b.n	8006b1a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ad2:	78fb      	ldrb	r3, [r7, #3]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f240 2325 	movw	r3, #549	; 0x225
 8006ae4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ae6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da17      	bge.n	8006b1e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b08:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006b0c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006b0e:	e006      	b.n	8006b1e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	77fb      	strb	r3, [r7, #31]
      break;
 8006b14:	e004      	b.n	8006b20 <USB_HC_Init+0x14c>
      break;
 8006b16:	bf00      	nop
 8006b18:	e002      	b.n	8006b20 <USB_HC_Init+0x14c>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e000      	b.n	8006b20 <USB_HC_Init+0x14c>
      break;
 8006b1e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b3a:	f043 0302 	orr.w	r3, r3, #2
 8006b3e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b46:	699a      	ldr	r2, [r3, #24]
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	2101      	movs	r1, #1
 8006b50:	fa01 f303 	lsl.w	r3, r1, r3
 8006b54:	6939      	ldr	r1, [r7, #16]
 8006b56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006b6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	da03      	bge.n	8006b7a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b76:	61bb      	str	r3, [r7, #24]
 8006b78:	e001      	b.n	8006b7e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff feff 	bl	8006982 <USB_GetHostSpeed>
 8006b84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006b86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d106      	bne.n	8006b9c <USB_HC_Init+0x1c8>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d003      	beq.n	8006b9c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b98:	617b      	str	r3, [r7, #20]
 8006b9a:	e001      	b.n	8006ba0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ba0:	787b      	ldrb	r3, [r7, #1]
 8006ba2:	059b      	lsls	r3, r3, #22
 8006ba4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ba8:	78bb      	ldrb	r3, [r7, #2]
 8006baa:	02db      	lsls	r3, r3, #11
 8006bac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bb0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006bb6:	049b      	lsls	r3, r3, #18
 8006bb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006bbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006bbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006bc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006bc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bca:	78fb      	ldrb	r3, [r7, #3]
 8006bcc:	0159      	lsls	r1, r3, #5
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	440b      	add	r3, r1
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bdc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006bde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d003      	beq.n	8006bee <USB_HC_Init+0x21a>
 8006be6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d10f      	bne.n	8006c0e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	78fa      	ldrb	r2, [r7, #3]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006c0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3720      	adds	r7, #32
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08c      	sub	sp, #48	; 0x30
 8006c1c:	af02      	add	r7, sp, #8
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	4613      	mov	r3, r2
 8006c24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	785b      	ldrb	r3, [r3, #1]
 8006c2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006c30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c34:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d02d      	beq.n	8006c9e <USB_HC_StartXfer+0x86>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	791b      	ldrb	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d129      	bne.n	8006c9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d117      	bne.n	8006c80 <USB_HC_StartXfer+0x68>
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	79db      	ldrb	r3, [r3, #7]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <USB_HC_StartXfer+0x48>
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	79db      	ldrb	r3, [r3, #7]
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d10f      	bne.n	8006c80 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	015a      	lsls	r2, r3, #5
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	4413      	add	r3, r2
 8006c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	0151      	lsls	r1, r2, #5
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	440a      	add	r2, r1
 8006c76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <USB_HC_StartXfer+0x86>
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	795b      	ldrb	r3, [r3, #5]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d107      	bne.n	8006c9e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	785b      	ldrb	r3, [r3, #1]
 8006c92:	4619      	mov	r1, r3
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 fa0f 	bl	80070b8 <USB_DoPing>
      return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e0f8      	b.n	8006e90 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d018      	beq.n	8006cd8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	8912      	ldrh	r2, [r2, #8]
 8006cae:	4413      	add	r3, r2
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	8912      	ldrh	r2, [r2, #8]
 8006cb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cba:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006cbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006cbe:	8b7b      	ldrh	r3, [r7, #26]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d90b      	bls.n	8006cdc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006cc4:	8b7b      	ldrh	r3, [r7, #26]
 8006cc6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006cc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	8912      	ldrh	r2, [r2, #8]
 8006cce:	fb03 f202 	mul.w	r2, r3, r2
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	611a      	str	r2, [r3, #16]
 8006cd6:	e001      	b.n	8006cdc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	78db      	ldrb	r3, [r3, #3]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ce4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	8912      	ldrh	r2, [r2, #8]
 8006cea:	fb03 f202 	mul.w	r2, r3, r2
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	611a      	str	r2, [r3, #16]
 8006cf2:	e003      	b.n	8006cfc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	695a      	ldr	r2, [r3, #20]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d06:	04d9      	lsls	r1, r3, #19
 8006d08:	4b63      	ldr	r3, [pc, #396]	; (8006e98 <USB_HC_StartXfer+0x280>)
 8006d0a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d0c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	7a9b      	ldrb	r3, [r3, #10]
 8006d12:	075b      	lsls	r3, r3, #29
 8006d14:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d18:	69f9      	ldr	r1, [r7, #28]
 8006d1a:	0148      	lsls	r0, r1, #5
 8006d1c:	6a39      	ldr	r1, [r7, #32]
 8006d1e:	4401      	add	r1, r0
 8006d20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d24:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d26:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	68d9      	ldr	r1, [r3, #12]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d3e:	460a      	mov	r2, r1
 8006d40:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bf0c      	ite	eq
 8006d52:	2301      	moveq	r3, #1
 8006d54:	2300      	movne	r3, #0
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	6a3b      	ldr	r3, [r7, #32]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	0151      	lsls	r1, r2, #5
 8006d6c:	6a3a      	ldr	r2, [r7, #32]
 8006d6e:	440a      	add	r2, r1
 8006d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d74:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d78:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	7e7b      	ldrb	r3, [r7, #25]
 8006d8a:	075b      	lsls	r3, r3, #29
 8006d8c:	69f9      	ldr	r1, [r7, #28]
 8006d8e:	0148      	lsls	r0, r1, #5
 8006d90:	6a39      	ldr	r1, [r7, #32]
 8006d92:	4401      	add	r1, r0
 8006d94:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006db2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	78db      	ldrb	r3, [r3, #3]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d004      	beq.n	8006dc6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	e003      	b.n	8006dce <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dcc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dd4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de2:	461a      	mov	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d001      	beq.n	8006df2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e04e      	b.n	8006e90 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	78db      	ldrb	r3, [r3, #3]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d149      	bne.n	8006e8e <USB_HC_StartXfer+0x276>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d045      	beq.n	8006e8e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	79db      	ldrb	r3, [r3, #7]
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d830      	bhi.n	8006e6c <USB_HC_StartXfer+0x254>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USB_HC_StartXfer+0x1f8>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e21 	.word	0x08006e21
 8006e14:	08006e45 	.word	0x08006e45
 8006e18:	08006e21 	.word	0x08006e21
 8006e1c:	08006e45 	.word	0x08006e45
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	695b      	ldr	r3, [r3, #20]
 8006e24:	3303      	adds	r3, #3
 8006e26:	089b      	lsrs	r3, r3, #2
 8006e28:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006e2a:	8afa      	ldrh	r2, [r7, #22]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d91c      	bls.n	8006e70 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f043 0220 	orr.w	r2, r3, #32
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e42:	e015      	b.n	8006e70 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	3303      	adds	r3, #3
 8006e4a:	089b      	lsrs	r3, r3, #2
 8006e4c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e4e:	8afa      	ldrh	r2, [r7, #22]
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d90a      	bls.n	8006e74 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e6a:	e003      	b.n	8006e74 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006e6c:	bf00      	nop
 8006e6e:	e002      	b.n	8006e76 <USB_HC_StartXfer+0x25e>
        break;
 8006e70:	bf00      	nop
 8006e72:	e000      	b.n	8006e76 <USB_HC_StartXfer+0x25e>
        break;
 8006e74:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	68d9      	ldr	r1, [r3, #12]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	785a      	ldrb	r2, [r3, #1]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2000      	movs	r0, #0
 8006e86:	9000      	str	r0, [sp, #0]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff fb31 	bl	80064f0 <USB_WritePacket>
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	1ff80000 	.word	0x1ff80000

08006e9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	b29b      	uxth	r3, r3
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b089      	sub	sp, #36	; 0x24
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006ece:	78fb      	ldrb	r3, [r7, #3]
 8006ed0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	0c9b      	lsrs	r3, r3, #18
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	0fdb      	lsrs	r3, r3, #31
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d104      	bne.n	8006f18 <USB_HC_Halt+0x5a>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	e0c8      	b.n	80070aa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <USB_HC_Halt+0x66>
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d163      	bne.n	8006fec <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f003 0320 	and.w	r3, r3, #32
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f040 80ab 	bne.w	80070a8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d133      	bne.n	8006fc6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	015a      	lsls	r2, r3, #5
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	0151      	lsls	r1, r2, #5
 8006f70:	69fa      	ldr	r2, [r7, #28]
 8006f72:	440a      	add	r2, r1
 8006f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f7c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	0151      	lsls	r1, r2, #5
 8006f90:	69fa      	ldr	r2, [r7, #28]
 8006f92:	440a      	add	r2, r1
 8006f94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f9c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006faa:	d81d      	bhi.n	8006fe8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc2:	d0ec      	beq.n	8006f9e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fc4:	e070      	b.n	80070a8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	69fa      	ldr	r2, [r7, #28]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fe4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fe6:	e05f      	b.n	80070a8 <USB_HC_Halt+0x1ea>
            break;
 8006fe8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fea:	e05d      	b.n	80070a8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	69fa      	ldr	r2, [r7, #28]
 8007000:	440a      	add	r2, r1
 8007002:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800700a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d133      	bne.n	8007084 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	4413      	add	r3, r2
 8007024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	440a      	add	r2, r1
 8007032:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007036:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800703a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	440a      	add	r2, r1
 8007052:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007056:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800705a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	3301      	adds	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007068:	d81d      	bhi.n	80070a6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800707c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007080:	d0ec      	beq.n	800705c <USB_HC_Halt+0x19e>
 8007082:	e011      	b.n	80070a8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	4413      	add	r3, r2
 800708c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	0151      	lsls	r1, r2, #5
 8007096:	69fa      	ldr	r2, [r7, #28]
 8007098:	440a      	add	r2, r1
 800709a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800709e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	e000      	b.n	80070a8 <USB_HC_Halt+0x1ea>
          break;
 80070a6:	bf00      	nop
    }
  }

  return HAL_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3724      	adds	r7, #36	; 0x24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
	...

080070b8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070c8:	78fb      	ldrb	r3, [r7, #3]
 80070ca:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070cc:	2301      	movs	r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	04da      	lsls	r2, r3, #19
 80070d4:	4b15      	ldr	r3, [pc, #84]	; (800712c <USB_DoPing+0x74>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	0151      	lsls	r1, r2, #5
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	440a      	add	r2, r1
 80070e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070e8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007100:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007108:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	015a      	lsls	r2, r3, #5
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	4413      	add	r3, r2
 8007112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007116:	461a      	mov	r2, r3
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	371c      	adds	r7, #28
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	1ff80000 	.word	0x1ff80000

08007130 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff f911 	bl	800636c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800714a:	2110      	movs	r1, #16
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff f96b 	bl	8006428 <USB_FlushTxFifo>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff f997 	bl	8006490 <USB_FlushRxFifo>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800716c:	2300      	movs	r3, #0
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	e01f      	b.n	80071b2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007188:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007190:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007198:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a6:	461a      	mov	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	3301      	adds	r3, #1
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	2b0f      	cmp	r3, #15
 80071b6:	d9dc      	bls.n	8007172 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80071b8:	2300      	movs	r3, #0
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	e034      	b.n	8007228 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f2:	461a      	mov	r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007204:	d80c      	bhi.n	8007220 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	015a      	lsls	r2, r3, #5
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	4413      	add	r3, r2
 800720e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800721c:	d0ec      	beq.n	80071f8 <USB_StopHost+0xc8>
 800721e:	e000      	b.n	8007222 <USB_StopHost+0xf2>
        break;
 8007220:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	3301      	adds	r3, #1
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b0f      	cmp	r3, #15
 800722c:	d9c7      	bls.n	80071be <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007234:	461a      	mov	r2, r3
 8007236:	f04f 33ff 	mov.w	r3, #4294967295
 800723a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff f880 	bl	800634a <USB_EnableGlobalInt>

  return ret;
 800724a:	7ffb      	ldrb	r3, [r7, #31]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3720      	adds	r7, #32
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007254:	b590      	push	{r4, r7, lr}
 8007256:	b089      	sub	sp, #36	; 0x24
 8007258:	af04      	add	r7, sp, #16
 800725a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800725c:	2301      	movs	r3, #1
 800725e:	2202      	movs	r2, #2
 8007260:	2102      	movs	r1, #2
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fc66 	bl	8007b34 <USBH_FindInterface>
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800726c:	7bfb      	ldrb	r3, [r7, #15]
 800726e:	2bff      	cmp	r3, #255	; 0xff
 8007270:	d002      	beq.n	8007278 <USBH_CDC_InterfaceInit+0x24>
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d901      	bls.n	800727c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007278:	2302      	movs	r3, #2
 800727a:	e13d      	b.n	80074f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fc3b 	bl	8007afc <USBH_SelectInterface>
 8007286:	4603      	mov	r3, r0
 8007288:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007290:	2302      	movs	r3, #2
 8007292:	e131      	b.n	80074f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800729a:	2050      	movs	r0, #80	; 0x50
 800729c:	f002 fafa 	bl	8009894 <malloc>
 80072a0:	4603      	mov	r3, r0
 80072a2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80072b4:	2302      	movs	r3, #2
 80072b6:	e11f      	b.n	80074f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80072b8:	2250      	movs	r2, #80	; 0x50
 80072ba:	2100      	movs	r1, #0
 80072bc:	68b8      	ldr	r0, [r7, #8]
 80072be:	f002 faf9 	bl	80098b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	211a      	movs	r1, #26
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	4413      	add	r3, r2
 80072ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	b25b      	sxtb	r3, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da15      	bge.n	8007306 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	211a      	movs	r1, #26
 80072e0:	fb01 f303 	mul.w	r3, r1, r3
 80072e4:	4413      	add	r3, r2
 80072e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072ea:	781a      	ldrb	r2, [r3, #0]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	211a      	movs	r1, #26
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007300:	881a      	ldrh	r2, [r3, #0]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	785b      	ldrb	r3, [r3, #1]
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f001 ff2c 	bl	800916a <USBH_AllocPipe>
 8007312:	4603      	mov	r3, r0
 8007314:	461a      	mov	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	7819      	ldrb	r1, [r3, #0]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	7858      	ldrb	r0, [r3, #1]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	8952      	ldrh	r2, [r2, #10]
 8007332:	9202      	str	r2, [sp, #8]
 8007334:	2203      	movs	r2, #3
 8007336:	9201      	str	r2, [sp, #4]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4623      	mov	r3, r4
 800733c:	4602      	mov	r2, r0
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fee4 	bl	800910c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2200      	movs	r2, #0
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f002 f9f3 	bl	8009738 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007352:	2300      	movs	r3, #0
 8007354:	2200      	movs	r2, #0
 8007356:	210a      	movs	r1, #10
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fbeb 	bl	8007b34 <USBH_FindInterface>
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2bff      	cmp	r3, #255	; 0xff
 8007366:	d002      	beq.n	800736e <USBH_CDC_InterfaceInit+0x11a>
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d901      	bls.n	8007372 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800736e:	2302      	movs	r3, #2
 8007370:	e0c2      	b.n	80074f8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	211a      	movs	r1, #26
 8007378:	fb01 f303 	mul.w	r3, r1, r3
 800737c:	4413      	add	r3, r2
 800737e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	b25b      	sxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	da16      	bge.n	80073b8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	211a      	movs	r1, #26
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	4413      	add	r3, r2
 8007396:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800739a:	781a      	ldrb	r2, [r3, #0]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	211a      	movs	r1, #26
 80073a6:	fb01 f303 	mul.w	r3, r1, r3
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073b0:	881a      	ldrh	r2, [r3, #0]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	835a      	strh	r2, [r3, #26]
 80073b6:	e015      	b.n	80073e4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	211a      	movs	r1, #26
 80073be:	fb01 f303 	mul.w	r3, r1, r3
 80073c2:	4413      	add	r3, r2
 80073c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073c8:	781a      	ldrb	r2, [r3, #0]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	211a      	movs	r1, #26
 80073d4:	fb01 f303 	mul.w	r3, r1, r3
 80073d8:	4413      	add	r3, r2
 80073da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073de:	881a      	ldrh	r2, [r3, #0]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	211a      	movs	r1, #26
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	4413      	add	r3, r2
 80073f0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b25b      	sxtb	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	da16      	bge.n	800742a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	211a      	movs	r1, #26
 8007402:	fb01 f303 	mul.w	r3, r1, r3
 8007406:	4413      	add	r3, r2
 8007408:	f203 3356 	addw	r3, r3, #854	; 0x356
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	211a      	movs	r1, #26
 8007418:	fb01 f303 	mul.w	r3, r1, r3
 800741c:	4413      	add	r3, r2
 800741e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007422:	881a      	ldrh	r2, [r3, #0]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	835a      	strh	r2, [r3, #26]
 8007428:	e015      	b.n	8007456 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	211a      	movs	r1, #26
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	4413      	add	r3, r2
 8007436:	f203 3356 	addw	r3, r3, #854	; 0x356
 800743a:	781a      	ldrb	r2, [r3, #0]
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	211a      	movs	r1, #26
 8007446:	fb01 f303 	mul.w	r3, r1, r3
 800744a:	4413      	add	r3, r2
 800744c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007450:	881a      	ldrh	r2, [r3, #0]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	7b9b      	ldrb	r3, [r3, #14]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fe84 	bl	800916a <USBH_AllocPipe>
 8007462:	4603      	mov	r3, r0
 8007464:	461a      	mov	r2, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	7bdb      	ldrb	r3, [r3, #15]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f001 fe7a 	bl	800916a <USBH_AllocPipe>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	7b59      	ldrb	r1, [r3, #13]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	7b98      	ldrb	r0, [r3, #14]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	8b12      	ldrh	r2, [r2, #24]
 8007496:	9202      	str	r2, [sp, #8]
 8007498:	2202      	movs	r2, #2
 800749a:	9201      	str	r2, [sp, #4]
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	4623      	mov	r3, r4
 80074a0:	4602      	mov	r2, r0
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 fe32 	bl	800910c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	7b19      	ldrb	r1, [r3, #12]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	7bd8      	ldrb	r0, [r3, #15]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	8b52      	ldrh	r2, [r2, #26]
 80074c0:	9202      	str	r2, [sp, #8]
 80074c2:	2202      	movs	r2, #2
 80074c4:	9201      	str	r2, [sp, #4]
 80074c6:	9300      	str	r3, [sp, #0]
 80074c8:	4623      	mov	r3, r4
 80074ca:	4602      	mov	r2, r0
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f001 fe1d 	bl	800910c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	7b5b      	ldrb	r3, [r3, #13]
 80074de:	2200      	movs	r2, #0
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f002 f928 	bl	8009738 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	7b1b      	ldrb	r3, [r3, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f002 f921 	bl	8009738 <USBH_LL_SetToggle>

  return USBH_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd90      	pop	{r4, r7, pc}

08007500 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00e      	beq.n	8007538 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f001 fe12 	bl	800914a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f001 fe3d 	bl	80091ac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	7b1b      	ldrb	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00e      	beq.n	800755e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	7b1b      	ldrb	r3, [r3, #12]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 fdff 	bl	800914a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	7b1b      	ldrb	r3, [r3, #12]
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fe2a 	bl	80091ac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	7b5b      	ldrb	r3, [r3, #13]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00e      	beq.n	8007584 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	7b5b      	ldrb	r3, [r3, #13]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f001 fdec 	bl	800914a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	7b5b      	ldrb	r3, [r3, #13]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f001 fe17 	bl	80091ac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007596:	69db      	ldr	r3, [r3, #28]
 8007598:	4618      	mov	r0, r3
 800759a:	f002 f983 	bl	80098a4 <free>
    phost->pActiveClass->pData = 0U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a4:	2200      	movs	r2, #0
 80075a6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3710      	adds	r7, #16
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3340      	adds	r3, #64	; 0x40
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f8b1 	bl	8007732 <GetLineCoding>
 80075d0:	4603      	mov	r3, r0
 80075d2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80075d4:	7afb      	ldrb	r3, [r7, #11]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075e0:	2102      	movs	r1, #2
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80075e6:	7afb      	ldrb	r3, [r7, #11]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007606:	69db      	ldr	r3, [r3, #28]
 8007608:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007610:	2b04      	cmp	r3, #4
 8007612:	d877      	bhi.n	8007704 <USBH_CDC_Process+0x114>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <USBH_CDC_Process+0x2c>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007631 	.word	0x08007631
 8007620:	08007637 	.word	0x08007637
 8007624:	08007667 	.word	0x08007667
 8007628:	080076db 	.word	0x080076db
 800762c:	080076e9 	.word	0x080076e9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
      break;
 8007634:	e06d      	b.n	8007712 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763a:	4619      	mov	r1, r3
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 f897 	bl	8007770 <SetLineCoding>
 8007642:	4603      	mov	r3, r0
 8007644:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2202      	movs	r2, #2
 8007650:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007654:	e058      	b.n	8007708 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d055      	beq.n	8007708 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2204      	movs	r2, #4
 8007660:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007664:	e050      	b.n	8007708 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	3340      	adds	r3, #64	; 0x40
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f860 	bl	8007732 <GetLineCoding>
 8007672:	4603      	mov	r3, r0
 8007674:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d126      	bne.n	80076ca <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	429a      	cmp	r2, r3
 8007692:	d13b      	bne.n	800770c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800769e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d133      	bne.n	800770c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ae:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d12b      	bne.n	800770c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076bc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076be:	429a      	cmp	r2, r3
 80076c0:	d124      	bne.n	800770c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f958 	bl	8007978 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076c8:	e020      	b.n	800770c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d01d      	beq.n	800770c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2204      	movs	r2, #4
 80076d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80076d8:	e018      	b.n	800770c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f867 	bl	80077ae <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f8da 	bl	800789a <CDC_ProcessReception>
      break;
 80076e6:	e014      	b.n	8007712 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80076e8:	2100      	movs	r1, #0
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 ffef 	bl	80086ce <USBH_ClrFeature>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076f4:	7bbb      	ldrb	r3, [r7, #14]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10a      	bne.n	8007710 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007702:	e005      	b.n	8007710 <USBH_CDC_Process+0x120>

    default:
      break;
 8007704:	bf00      	nop
 8007706:	e004      	b.n	8007712 <USBH_CDC_Process+0x122>
      break;
 8007708:	bf00      	nop
 800770a:	e002      	b.n	8007712 <USBH_CDC_Process+0x122>
      break;
 800770c:	bf00      	nop
 800770e:	e000      	b.n	8007712 <USBH_CDC_Process+0x122>
      break;
 8007710:	bf00      	nop

  }

  return status;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	22a1      	movs	r2, #161	; 0xa1
 8007740:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2221      	movs	r2, #33	; 0x21
 8007746:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2207      	movs	r2, #7
 8007758:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2207      	movs	r2, #7
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 fa81 	bl	8008c68 <USBH_CtlReq>
 8007766:	4603      	mov	r3, r0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2221      	movs	r2, #33	; 0x21
 800777e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2220      	movs	r2, #32
 8007784:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2207      	movs	r2, #7
 8007796:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2207      	movs	r2, #7
 800779c:	4619      	mov	r1, r3
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f001 fa62 	bl	8008c68 <USBH_CtlReq>
 80077a4:	4603      	mov	r3, r0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b086      	sub	sp, #24
 80077b2:	af02      	add	r7, sp, #8
 80077b4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077c0:	2300      	movs	r3, #0
 80077c2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d002      	beq.n	80077d4 <CDC_ProcessTransmission+0x26>
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d023      	beq.n	800781a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80077d2:	e05e      	b.n	8007892 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	8b12      	ldrh	r2, [r2, #24]
 80077dc:	4293      	cmp	r3, r2
 80077de:	d90b      	bls.n	80077f8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	69d9      	ldr	r1, [r3, #28]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8b1a      	ldrh	r2, [r3, #24]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	7b5b      	ldrb	r3, [r3, #13]
 80077ec:	2001      	movs	r0, #1
 80077ee:	9000      	str	r0, [sp, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fc48 	bl	8009086 <USBH_BulkSendData>
 80077f6:	e00b      	b.n	8007810 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007800:	b29a      	uxth	r2, r3
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	7b5b      	ldrb	r3, [r3, #13]
 8007806:	2001      	movs	r0, #1
 8007808:	9000      	str	r0, [sp, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fc3b 	bl	8009086 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007818:	e03b      	b.n	8007892 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	7b5b      	ldrb	r3, [r3, #13]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 ff5f 	bl	80096e4 <USBH_LL_GetURBState>
 8007826:	4603      	mov	r3, r0
 8007828:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800782a:	7afb      	ldrb	r3, [r7, #11]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d128      	bne.n	8007882 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	8b12      	ldrh	r2, [r2, #24]
 8007838:	4293      	cmp	r3, r2
 800783a:	d90e      	bls.n	800785a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	8b12      	ldrh	r2, [r2, #24]
 8007844:	1a9a      	subs	r2, r3, r2
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	8b12      	ldrh	r2, [r2, #24]
 8007852:	441a      	add	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	61da      	str	r2, [r3, #28]
 8007858:	e002      	b.n	8007860 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	d004      	beq.n	8007872 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007870:	e00e      	b.n	8007890 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f868 	bl	8007950 <USBH_CDC_TransmitCallback>
      break;
 8007880:	e006      	b.n	8007890 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d103      	bne.n	8007890 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007890:	bf00      	nop
  }
}
 8007892:	bf00      	nop
 8007894:	3710      	adds	r7, #16
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b086      	sub	sp, #24
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078ac:	2300      	movs	r3, #0
 80078ae:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d002      	beq.n	80078c0 <CDC_ProcessReception+0x26>
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d00e      	beq.n	80078dc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80078be:	e043      	b.n	8007948 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	6a19      	ldr	r1, [r3, #32]
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	8b5a      	ldrh	r2, [r3, #26]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	7b1b      	ldrb	r3, [r3, #12]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f001 fbff 	bl	80090d0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2204      	movs	r2, #4
 80078d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80078da:	e035      	b.n	8007948 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	7b1b      	ldrb	r3, [r3, #12]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f001 fefe 	bl	80096e4 <USBH_LL_GetURBState>
 80078e8:	4603      	mov	r3, r0
 80078ea:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80078ec:	7cfb      	ldrb	r3, [r7, #19]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d129      	bne.n	8007946 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	7b1b      	ldrb	r3, [r3, #12]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f001 fe61 	bl	80095c0 <USBH_LL_GetLastXferSize>
 80078fe:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	429a      	cmp	r2, r3
 8007908:	d016      	beq.n	8007938 <CDC_ProcessReception+0x9e>
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	8b5b      	ldrh	r3, [r3, #26]
 800790e:	461a      	mov	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4293      	cmp	r3, r2
 8007914:	d910      	bls.n	8007938 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	1ad2      	subs	r2, r2, r3
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	6a1a      	ldr	r2, [r3, #32]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	441a      	add	r2, r3
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2203      	movs	r2, #3
 8007932:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007936:	e006      	b.n	8007946 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2200      	movs	r2, #0
 800793c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f80f 	bl	8007964 <USBH_CDC_ReceiveCallback>
      break;
 8007946:	bf00      	nop
  }
}
 8007948:	bf00      	nop
 800794a:	3718      	adds	r7, #24
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80079a0:	2302      	movs	r3, #2
 80079a2:	e029      	b.n	80079f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	79fa      	ldrb	r2, [r7, #7]
 80079a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f81f 	bl	8007a00 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d003      	beq.n	80079f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f001 fd31 	bl	8009458 <USBH_LL_Init>

  return USBH_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e009      	b.n	8007a26 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	33e0      	adds	r3, #224	; 0xe0
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	4413      	add	r3, r2
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b0f      	cmp	r3, #15
 8007a2a:	d9f2      	bls.n	8007a12 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	e009      	b.n	8007a46 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	3301      	adds	r3, #1
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4c:	d3f1      	bcc.n	8007a32 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2240      	movs	r2, #64	; 0x40
 8007a72:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d016      	beq.n	8007aea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10e      	bne.n	8007ae4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	33de      	adds	r3, #222	; 0xde
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
 8007ae2:	e004      	b.n	8007aee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	73fb      	strb	r3, [r7, #15]
 8007ae8:	e001      	b.n	8007aee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007aea:	2302      	movs	r3, #2
 8007aec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d204      	bcs.n	8007b22 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	78fa      	ldrb	r2, [r7, #3]
 8007b1c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007b20:	e001      	b.n	8007b26 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b22:	2302      	movs	r3, #2
 8007b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3714      	adds	r7, #20
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	4608      	mov	r0, r1
 8007b3e:	4611      	mov	r1, r2
 8007b40:	461a      	mov	r2, r3
 8007b42:	4603      	mov	r3, r0
 8007b44:	70fb      	strb	r3, [r7, #3]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70bb      	strb	r3, [r7, #2]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b52:	2300      	movs	r3, #0
 8007b54:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007b5c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007b5e:	e025      	b.n	8007bac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
 8007b62:	221a      	movs	r2, #26
 8007b64:	fb02 f303 	mul.w	r3, r2, r3
 8007b68:	3308      	adds	r3, #8
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3302      	adds	r3, #2
 8007b70:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	795b      	ldrb	r3, [r3, #5]
 8007b76:	78fa      	ldrb	r2, [r7, #3]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d002      	beq.n	8007b82 <USBH_FindInterface+0x4e>
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	2bff      	cmp	r3, #255	; 0xff
 8007b80:	d111      	bne.n	8007ba6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007b86:	78ba      	ldrb	r2, [r7, #2]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d002      	beq.n	8007b92 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b8c:	78bb      	ldrb	r3, [r7, #2]
 8007b8e:	2bff      	cmp	r3, #255	; 0xff
 8007b90:	d109      	bne.n	8007ba6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007b96:	787a      	ldrb	r2, [r7, #1]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d002      	beq.n	8007ba2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007b9c:	787b      	ldrb	r3, [r7, #1]
 8007b9e:	2bff      	cmp	r3, #255	; 0xff
 8007ba0:	d101      	bne.n	8007ba6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ba2:	7dfb      	ldrb	r3, [r7, #23]
 8007ba4:	e006      	b.n	8007bb4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d9d6      	bls.n	8007b60 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007bb2:	23ff      	movs	r3, #255	; 0xff
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	371c      	adds	r7, #28
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f001 fc81 	bl	80094d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007bce:	2101      	movs	r1, #1
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f001 fd9a 	bl	800970a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af04      	add	r7, sp, #16
 8007be6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007be8:	2302      	movs	r3, #2
 8007bea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d102      	bne.n	8007c02 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2203      	movs	r2, #3
 8007c00:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b0b      	cmp	r3, #11
 8007c0a:	f200 81be 	bhi.w	8007f8a <USBH_Process+0x3aa>
 8007c0e:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <USBH_Process+0x34>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007c45 	.word	0x08007c45
 8007c18:	08007c77 	.word	0x08007c77
 8007c1c:	08007cdf 	.word	0x08007cdf
 8007c20:	08007f25 	.word	0x08007f25
 8007c24:	08007f8b 	.word	0x08007f8b
 8007c28:	08007d83 	.word	0x08007d83
 8007c2c:	08007ecb 	.word	0x08007ecb
 8007c30:	08007db9 	.word	0x08007db9
 8007c34:	08007dd9 	.word	0x08007dd9
 8007c38:	08007df9 	.word	0x08007df9
 8007c3c:	08007e3d 	.word	0x08007e3d
 8007c40:	08007f0d 	.word	0x08007f0d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 819e 	beq.w	8007f8e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007c58:	20c8      	movs	r0, #200	; 0xc8
 8007c5a:	f001 fd9d 	bl	8009798 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 fc93 	bl	800958a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c74:	e18b      	b.n	8007f8e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d107      	bne.n	8007c90 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007c8e:	e18d      	b.n	8007fac <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007c96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c9a:	d914      	bls.n	8007cc6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d903      	bls.n	8007cbe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	220d      	movs	r2, #13
 8007cba:	701a      	strb	r2, [r3, #0]
      break;
 8007cbc:	e176      	b.n	8007fac <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
      break;
 8007cc4:	e172      	b.n	8007fac <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007ccc:	f103 020a 	add.w	r2, r3, #10
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007cd6:	200a      	movs	r0, #10
 8007cd8:	f001 fd5e 	bl	8009798 <USBH_Delay>
      break;
 8007cdc:	e166      	b.n	8007fac <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007cee:	2104      	movs	r1, #4
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007cf4:	2064      	movs	r0, #100	; 0x64
 8007cf6:	f001 fd4f 	bl	8009798 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 fc1e 	bl	800953c <USBH_LL_GetSpeed>
 8007d00:	4603      	mov	r3, r0
 8007d02:	461a      	mov	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2205      	movs	r2, #5
 8007d0e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d10:	2100      	movs	r1, #0
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f001 fa29 	bl	800916a <USBH_AllocPipe>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f001 fa21 	bl	800916a <USBH_AllocPipe>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	7919      	ldrb	r1, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007d44:	b292      	uxth	r2, r2
 8007d46:	9202      	str	r2, [sp, #8]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	9201      	str	r2, [sp, #4]
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2280      	movs	r2, #128	; 0x80
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 f9da 	bl	800910c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	7959      	ldrb	r1, [r3, #5]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007d6c:	b292      	uxth	r2, r2
 8007d6e:	9202      	str	r2, [sp, #8]
 8007d70:	2200      	movs	r2, #0
 8007d72:	9201      	str	r2, [sp, #4]
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	4603      	mov	r3, r0
 8007d78:	2200      	movs	r2, #0
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f001 f9c6 	bl	800910c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d80:	e114      	b.n	8007fac <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f918 	bl	8007fb8 <USBH_HandleEnum>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f040 80fe 	bne.w	8007f92 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d103      	bne.n	8007db0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2208      	movs	r2, #8
 8007dac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007dae:	e0f0      	b.n	8007f92 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2207      	movs	r2, #7
 8007db4:	701a      	strb	r2, [r3, #0]
      break;
 8007db6:	e0ec      	b.n	8007f92 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80e9 	beq.w	8007f96 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007dca:	2101      	movs	r1, #1
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2208      	movs	r2, #8
 8007dd4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007dd6:	e0de      	b.n	8007f96 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fc2c 	bl	8008640 <USBH_SetCfg>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f040 80d5 	bne.w	8007f9a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2209      	movs	r2, #9
 8007df4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007df6:	e0d0      	b.n	8007f9a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d016      	beq.n	8007e34 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007e06:	2101      	movs	r1, #1
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fc3c 	bl	8008686 <USBH_SetFeature>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e12:	7bbb      	ldrb	r3, [r7, #14]
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	220a      	movs	r2, #10
 8007e1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e20:	e0bd      	b.n	8007f9e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	f040 80b9 	bne.w	8007f9e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	220a      	movs	r2, #10
 8007e30:	701a      	strb	r2, [r3, #0]
      break;
 8007e32:	e0b4      	b.n	8007f9e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	220a      	movs	r2, #10
 8007e38:	701a      	strb	r2, [r3, #0]
      break;
 8007e3a:	e0b0      	b.n	8007f9e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f000 80ad 	beq.w	8007fa2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
 8007e54:	e016      	b.n	8007e84 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007e56:	7bfa      	ldrb	r2, [r7, #15]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	32de      	adds	r2, #222	; 0xde
 8007e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e60:	791a      	ldrb	r2, [r3, #4]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d108      	bne.n	8007e7e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007e6c:	7bfa      	ldrb	r2, [r7, #15]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	32de      	adds	r2, #222	; 0xde
 8007e72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007e7c:	e005      	b.n	8007e8a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	3301      	adds	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d0e5      	beq.n	8007e56 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d016      	beq.n	8007ec2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	4798      	blx	r3
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d109      	bne.n	8007eba <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2206      	movs	r2, #6
 8007eaa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007eb2:	2103      	movs	r1, #3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007eb8:	e073      	b.n	8007fa2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	220d      	movs	r2, #13
 8007ebe:	701a      	strb	r2, [r3, #0]
      break;
 8007ec0:	e06f      	b.n	8007fa2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	220d      	movs	r2, #13
 8007ec6:	701a      	strb	r2, [r3, #0]
      break;
 8007ec8:	e06b      	b.n	8007fa2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d017      	beq.n	8007f04 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007eda:	691b      	ldr	r3, [r3, #16]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4798      	blx	r3
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ee4:	7bbb      	ldrb	r3, [r7, #14]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d103      	bne.n	8007ef4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	220b      	movs	r2, #11
 8007ef0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ef2:	e058      	b.n	8007fa6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d154      	bne.n	8007fa6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	220d      	movs	r2, #13
 8007f00:	701a      	strb	r2, [r3, #0]
      break;
 8007f02:	e050      	b.n	8007fa6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	220d      	movs	r2, #13
 8007f08:	701a      	strb	r2, [r3, #0]
      break;
 8007f0a:	e04c      	b.n	8007fa6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d049      	beq.n	8007faa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
      }
      break;
 8007f22:	e042      	b.n	8007faa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff fd67 	bl	8007a00 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f60:	2105      	movs	r1, #5
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d107      	bne.n	8007f82 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fe20 	bl	8007bc0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f80:	e014      	b.n	8007fac <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 faa4 	bl	80094d0 <USBH_LL_Start>
      break;
 8007f88:	e010      	b.n	8007fac <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007f8a:	bf00      	nop
 8007f8c:	e00e      	b.n	8007fac <USBH_Process+0x3cc>
      break;
 8007f8e:	bf00      	nop
 8007f90:	e00c      	b.n	8007fac <USBH_Process+0x3cc>
      break;
 8007f92:	bf00      	nop
 8007f94:	e00a      	b.n	8007fac <USBH_Process+0x3cc>
    break;
 8007f96:	bf00      	nop
 8007f98:	e008      	b.n	8007fac <USBH_Process+0x3cc>
      break;
 8007f9a:	bf00      	nop
 8007f9c:	e006      	b.n	8007fac <USBH_Process+0x3cc>
      break;
 8007f9e:	bf00      	nop
 8007fa0:	e004      	b.n	8007fac <USBH_Process+0x3cc>
      break;
 8007fa2:	bf00      	nop
 8007fa4:	e002      	b.n	8007fac <USBH_Process+0x3cc>
      break;
 8007fa6:	bf00      	nop
 8007fa8:	e000      	b.n	8007fac <USBH_Process+0x3cc>
      break;
 8007faa:	bf00      	nop
  }
  return USBH_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop

08007fb8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af04      	add	r7, sp, #16
 8007fbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	2b07      	cmp	r3, #7
 8007fce:	f200 81c1 	bhi.w	8008354 <USBH_HandleEnum+0x39c>
 8007fd2:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <USBH_HandleEnum+0x20>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007ff9 	.word	0x08007ff9
 8007fdc:	080080b7 	.word	0x080080b7
 8007fe0:	08008121 	.word	0x08008121
 8007fe4:	080081af 	.word	0x080081af
 8007fe8:	08008219 	.word	0x08008219
 8007fec:	08008289 	.word	0x08008289
 8007ff0:	080082cf 	.word	0x080082cf
 8007ff4:	08008315 	.word	0x08008315
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007ff8:	2108      	movs	r1, #8
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa50 	bl	80084a0 <USBH_Get_DevDesc>
 8008000:	4603      	mov	r3, r0
 8008002:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d130      	bne.n	800806c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	7919      	ldrb	r1, [r3, #4]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800802e:	b292      	uxth	r2, r2
 8008030:	9202      	str	r2, [sp, #8]
 8008032:	2200      	movs	r2, #0
 8008034:	9201      	str	r2, [sp, #4]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	4603      	mov	r3, r0
 800803a:	2280      	movs	r2, #128	; 0x80
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 f865 	bl	800910c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	7959      	ldrb	r1, [r3, #5]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008056:	b292      	uxth	r2, r2
 8008058:	9202      	str	r2, [sp, #8]
 800805a:	2200      	movs	r2, #0
 800805c:	9201      	str	r2, [sp, #4]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	4603      	mov	r3, r0
 8008062:	2200      	movs	r2, #0
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f851 	bl	800910c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800806a:	e175      	b.n	8008358 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b03      	cmp	r3, #3
 8008070:	f040 8172 	bne.w	8008358 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800807a:	3301      	adds	r3, #1
 800807c:	b2da      	uxtb	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800808a:	2b03      	cmp	r3, #3
 800808c:	d903      	bls.n	8008096 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	220d      	movs	r2, #13
 8008092:	701a      	strb	r2, [r3, #0]
      break;
 8008094:	e160      	b.n	8008358 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	795b      	ldrb	r3, [r3, #5]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f001 f885 	bl	80091ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	791b      	ldrb	r3, [r3, #4]
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f001 f87f 	bl	80091ac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	701a      	strb	r2, [r3, #0]
      break;
 80080b4:	e150      	b.n	8008358 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80080b6:	2112      	movs	r1, #18
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9f1 	bl	80084a0 <USBH_Get_DevDesc>
 80080be:	4603      	mov	r3, r0
 80080c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d103      	bne.n	80080d0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080ce:	e145      	b.n	800835c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	f040 8142 	bne.w	800835c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080de:	3301      	adds	r3, #1
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d903      	bls.n	80080fa <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	220d      	movs	r2, #13
 80080f6:	701a      	strb	r2, [r3, #0]
      break;
 80080f8:	e130      	b.n	800835c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	795b      	ldrb	r3, [r3, #5]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 f853 	bl	80091ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	791b      	ldrb	r3, [r3, #4]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 f84d 	bl	80091ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	701a      	strb	r2, [r3, #0]
      break;
 800811e:	e11d      	b.n	800835c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008120:	2101      	movs	r1, #1
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fa68 	bl	80085f8 <USBH_SetAddress>
 8008128:	4603      	mov	r3, r0
 800812a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800812c:	7bbb      	ldrb	r3, [r7, #14]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d132      	bne.n	8008198 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008132:	2002      	movs	r0, #2
 8008134:	f001 fb30 	bl	8009798 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2203      	movs	r2, #3
 8008144:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	7919      	ldrb	r1, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800815a:	b292      	uxth	r2, r2
 800815c:	9202      	str	r2, [sp, #8]
 800815e:	2200      	movs	r2, #0
 8008160:	9201      	str	r2, [sp, #4]
 8008162:	9300      	str	r3, [sp, #0]
 8008164:	4603      	mov	r3, r0
 8008166:	2280      	movs	r2, #128	; 0x80
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 ffcf 	bl	800910c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	7959      	ldrb	r1, [r3, #5]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008182:	b292      	uxth	r2, r2
 8008184:	9202      	str	r2, [sp, #8]
 8008186:	2200      	movs	r2, #0
 8008188:	9201      	str	r2, [sp, #4]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	4603      	mov	r3, r0
 800818e:	2200      	movs	r2, #0
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 ffbb 	bl	800910c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008196:	e0e3      	b.n	8008360 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	2b03      	cmp	r3, #3
 800819c:	f040 80e0 	bne.w	8008360 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	220d      	movs	r2, #13
 80081a4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	705a      	strb	r2, [r3, #1]
      break;
 80081ac:	e0d8      	b.n	8008360 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80081ae:	2109      	movs	r1, #9
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f99d 	bl	80084f0 <USBH_Get_CfgDesc>
 80081b6:	4603      	mov	r3, r0
 80081b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081ba:	7bbb      	ldrb	r3, [r7, #14]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2204      	movs	r2, #4
 80081c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081c6:	e0cd      	b.n	8008364 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b03      	cmp	r3, #3
 80081cc:	f040 80ca 	bne.w	8008364 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081d6:	3301      	adds	r3, #1
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d903      	bls.n	80081f2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	220d      	movs	r2, #13
 80081ee:	701a      	strb	r2, [r3, #0]
      break;
 80081f0:	e0b8      	b.n	8008364 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	795b      	ldrb	r3, [r3, #5]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 ffd7 	bl	80091ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	791b      	ldrb	r3, [r3, #4]
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 ffd1 	bl	80091ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]
      break;
 8008216:	e0a5      	b.n	8008364 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800821e:	4619      	mov	r1, r3
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f965 	bl	80084f0 <USBH_Get_CfgDesc>
 8008226:	4603      	mov	r3, r0
 8008228:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2205      	movs	r2, #5
 8008234:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008236:	e097      	b.n	8008368 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	2b03      	cmp	r3, #3
 800823c:	f040 8094 	bne.w	8008368 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008246:	3301      	adds	r3, #1
 8008248:	b2da      	uxtb	r2, r3
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008256:	2b03      	cmp	r3, #3
 8008258:	d903      	bls.n	8008262 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	220d      	movs	r2, #13
 800825e:	701a      	strb	r2, [r3, #0]
      break;
 8008260:	e082      	b.n	8008368 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	795b      	ldrb	r3, [r3, #5]
 8008266:	4619      	mov	r1, r3
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 ff9f 	bl	80091ac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	791b      	ldrb	r3, [r3, #4]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 ff99 	bl	80091ac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	701a      	strb	r2, [r3, #0]
      break;
 8008286:	e06f      	b.n	8008368 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800828e:	2b00      	cmp	r3, #0
 8008290:	d019      	beq.n	80082c6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800829e:	23ff      	movs	r3, #255	; 0xff
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 f949 	bl	8008538 <USBH_Get_StringDesc>
 80082a6:	4603      	mov	r3, r0
 80082a8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d103      	bne.n	80082b8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2206      	movs	r2, #6
 80082b4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082b6:	e059      	b.n	800836c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b8:	7bbb      	ldrb	r3, [r7, #14]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d156      	bne.n	800836c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2206      	movs	r2, #6
 80082c2:	705a      	strb	r2, [r3, #1]
      break;
 80082c4:	e052      	b.n	800836c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2206      	movs	r2, #6
 80082ca:	705a      	strb	r2, [r3, #1]
      break;
 80082cc:	e04e      	b.n	800836c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d019      	beq.n	800830c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80082e4:	23ff      	movs	r3, #255	; 0xff
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f926 	bl	8008538 <USBH_Get_StringDesc>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2207      	movs	r2, #7
 80082fa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80082fc:	e038      	b.n	8008370 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	2b03      	cmp	r3, #3
 8008302:	d135      	bne.n	8008370 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2207      	movs	r2, #7
 8008308:	705a      	strb	r2, [r3, #1]
      break;
 800830a:	e031      	b.n	8008370 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2207      	movs	r2, #7
 8008310:	705a      	strb	r2, [r3, #1]
      break;
 8008312:	e02d      	b.n	8008370 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800831a:	2b00      	cmp	r3, #0
 800831c:	d017      	beq.n	800834e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800832a:	23ff      	movs	r3, #255	; 0xff
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f903 	bl	8008538 <USBH_Get_StringDesc>
 8008332:	4603      	mov	r3, r0
 8008334:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d102      	bne.n	8008342 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800833c:	2300      	movs	r3, #0
 800833e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008340:	e018      	b.n	8008374 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	2b03      	cmp	r3, #3
 8008346:	d115      	bne.n	8008374 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]
      break;
 800834c:	e012      	b.n	8008374 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
      break;
 8008352:	e00f      	b.n	8008374 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008354:	bf00      	nop
 8008356:	e00e      	b.n	8008376 <USBH_HandleEnum+0x3be>
      break;
 8008358:	bf00      	nop
 800835a:	e00c      	b.n	8008376 <USBH_HandleEnum+0x3be>
      break;
 800835c:	bf00      	nop
 800835e:	e00a      	b.n	8008376 <USBH_HandleEnum+0x3be>
      break;
 8008360:	bf00      	nop
 8008362:	e008      	b.n	8008376 <USBH_HandleEnum+0x3be>
      break;
 8008364:	bf00      	nop
 8008366:	e006      	b.n	8008376 <USBH_HandleEnum+0x3be>
      break;
 8008368:	bf00      	nop
 800836a:	e004      	b.n	8008376 <USBH_HandleEnum+0x3be>
      break;
 800836c:	bf00      	nop
 800836e:	e002      	b.n	8008376 <USBH_HandleEnum+0x3be>
      break;
 8008370:	bf00      	nop
 8008372:	e000      	b.n	8008376 <USBH_HandleEnum+0x3be>
      break;
 8008374:	bf00      	nop
  }
  return Status;
 8008376:	7bfb      	ldrb	r3, [r7, #15]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	683a      	ldr	r2, [r7, #0]
 800838e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008392:	bf00      	nop
 8008394:	370c      	adds	r7, #12
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr

0800839e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ac:	1c5a      	adds	r2, r3, #1
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f804 	bl	80083c2 <USBH_HandleSof>
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b082      	sub	sp, #8
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b0b      	cmp	r3, #11
 80083d2:	d10a      	bne.n	80083ea <USBH_HandleSof+0x28>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d005      	beq.n	80083ea <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
  }
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008402:	bf00      	nop
}
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800840e:	b480      	push	{r7}
 8008410:	b083      	sub	sp, #12
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800841e:	bf00      	nop
}
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f001 f844 	bl	8009506 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	791b      	ldrb	r3, [r3, #4]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fe91 	bl	80091ac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	795b      	ldrb	r3, [r3, #5]
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fe8b 	bl	80091ac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af02      	add	r7, sp, #8
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	460b      	mov	r3, r1
 80084aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80084b2:	78fb      	ldrb	r3, [r7, #3]
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	4613      	mov	r3, r2
 80084ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084be:	2100      	movs	r1, #0
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f864 	bl	800858e <USBH_GetDescriptor>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10a      	bne.n	80084e6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f203 3026 	addw	r0, r3, #806	; 0x326
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	b292      	uxth	r2, r2
 80084e0:	4619      	mov	r1, r3
 80084e2:	f000 f918 	bl	8008716 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	331c      	adds	r3, #28
 8008500:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008502:	887b      	ldrh	r3, [r7, #2]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800850c:	2100      	movs	r1, #0
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f83d 	bl	800858e <USBH_GetDescriptor>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d107      	bne.n	800852e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800851e:	887b      	ldrh	r3, [r7, #2]
 8008520:	461a      	mov	r2, r3
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f987 	bl	8008838 <USBH_ParseCfgDesc>
 800852a:	4603      	mov	r3, r0
 800852c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b088      	sub	sp, #32
 800853c:	af02      	add	r7, sp, #8
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	461a      	mov	r2, r3
 8008544:	460b      	mov	r3, r1
 8008546:	72fb      	strb	r3, [r7, #11]
 8008548:	4613      	mov	r3, r2
 800854a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800854c:	7afb      	ldrb	r3, [r7, #11]
 800854e:	b29b      	uxth	r3, r3
 8008550:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008554:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800855c:	893b      	ldrh	r3, [r7, #8]
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	460b      	mov	r3, r1
 8008562:	2100      	movs	r1, #0
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 f812 	bl	800858e <USBH_GetDescriptor>
 800856a:	4603      	mov	r3, r0
 800856c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800856e:	7dfb      	ldrb	r3, [r7, #23]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d107      	bne.n	8008584 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800857a:	893a      	ldrh	r2, [r7, #8]
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb24 	bl	8008bcc <USBH_ParseStringDesc>
  }

  return status;
 8008584:	7dfb      	ldrb	r3, [r7, #23]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3718      	adds	r7, #24
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	b084      	sub	sp, #16
 8008592:	af00      	add	r7, sp, #0
 8008594:	60f8      	str	r0, [r7, #12]
 8008596:	607b      	str	r3, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	72fb      	strb	r3, [r7, #11]
 800859c:	4613      	mov	r3, r2
 800859e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	789b      	ldrb	r3, [r3, #2]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d11c      	bne.n	80085e2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80085a8:	7afb      	ldrb	r3, [r7, #11]
 80085aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80085ae:	b2da      	uxtb	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2206      	movs	r2, #6
 80085b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	893a      	ldrh	r2, [r7, #8]
 80085be:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80085c0:	893b      	ldrh	r3, [r7, #8]
 80085c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80085c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ca:	d104      	bne.n	80085d6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f240 4209 	movw	r2, #1033	; 0x409
 80085d2:	829a      	strh	r2, [r3, #20]
 80085d4:	e002      	b.n	80085dc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	8b3a      	ldrh	r2, [r7, #24]
 80085e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80085e2:	8b3b      	ldrh	r3, [r7, #24]
 80085e4:	461a      	mov	r2, r3
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 fb3d 	bl	8008c68 <USBH_CtlReq>
 80085ee:	4603      	mov	r3, r0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}

080085f8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	460b      	mov	r3, r1
 8008602:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	789b      	ldrb	r3, [r3, #2]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d10f      	bne.n	800862c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2205      	movs	r2, #5
 8008616:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	b29a      	uxth	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800862c:	2200      	movs	r2, #0
 800862e:	2100      	movs	r1, #0
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fb19 	bl	8008c68 <USBH_CtlReq>
 8008636:	4603      	mov	r3, r0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	460b      	mov	r3, r1
 800864a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	789b      	ldrb	r3, [r3, #2]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d10e      	bne.n	8008672 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2209      	movs	r2, #9
 800865e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	887a      	ldrh	r2, [r7, #2]
 8008664:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008672:	2200      	movs	r2, #0
 8008674:	2100      	movs	r1, #0
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 faf6 	bl	8008c68 <USBH_CtlReq>
 800867c:	4603      	mov	r3, r0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008686:	b580      	push	{r7, lr}
 8008688:	b082      	sub	sp, #8
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	789b      	ldrb	r3, [r3, #2]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d10f      	bne.n	80086ba <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2203      	movs	r2, #3
 80086a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086ba:	2200      	movs	r2, #0
 80086bc:	2100      	movs	r1, #0
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fad2 	bl	8008c68 <USBH_CtlReq>
 80086c4:	4603      	mov	r3, r0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b082      	sub	sp, #8
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	460b      	mov	r3, r1
 80086d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	789b      	ldrb	r3, [r3, #2]
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d10f      	bne.n	8008702 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80086f4:	78fb      	ldrb	r3, [r7, #3]
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008702:	2200      	movs	r2, #0
 8008704:	2100      	movs	r1, #0
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f000 faae 	bl	8008c68 <USBH_CtlReq>
 800870c:	4603      	mov	r3, r0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008716:	b480      	push	{r7}
 8008718:	b085      	sub	sp, #20
 800871a:	af00      	add	r7, sp, #0
 800871c:	60f8      	str	r0, [r7, #12]
 800871e:	60b9      	str	r1, [r7, #8]
 8008720:	4613      	mov	r3, r2
 8008722:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	781a      	ldrb	r2, [r3, #0]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	785a      	ldrb	r2, [r3, #1]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	3302      	adds	r3, #2
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	b29a      	uxth	r2, r3
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	3303      	adds	r3, #3
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b29b      	uxth	r3, r3
 8008744:	021b      	lsls	r3, r3, #8
 8008746:	b29b      	uxth	r3, r3
 8008748:	4313      	orrs	r3, r2
 800874a:	b29a      	uxth	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	791a      	ldrb	r2, [r3, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	795a      	ldrb	r2, [r3, #5]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	799a      	ldrb	r2, [r3, #6]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	79da      	ldrb	r2, [r3, #7]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	79db      	ldrb	r3, [r3, #7]
 8008774:	2b20      	cmp	r3, #32
 8008776:	dc11      	bgt.n	800879c <USBH_ParseDevDesc+0x86>
 8008778:	2b08      	cmp	r3, #8
 800877a:	db16      	blt.n	80087aa <USBH_ParseDevDesc+0x94>
 800877c:	3b08      	subs	r3, #8
 800877e:	2201      	movs	r2, #1
 8008780:	fa02 f303 	lsl.w	r3, r2, r3
 8008784:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800878c:	2b00      	cmp	r3, #0
 800878e:	bf14      	ite	ne
 8008790:	2301      	movne	r3, #1
 8008792:	2300      	moveq	r3, #0
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d102      	bne.n	80087a0 <USBH_ParseDevDesc+0x8a>
 800879a:	e006      	b.n	80087aa <USBH_ParseDevDesc+0x94>
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d104      	bne.n	80087aa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	79da      	ldrb	r2, [r3, #7]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	71da      	strb	r2, [r3, #7]
      break;
 80087a8:	e003      	b.n	80087b2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2240      	movs	r2, #64	; 0x40
 80087ae:	71da      	strb	r2, [r3, #7]
      break;
 80087b0:	bf00      	nop
  }

  if (length > 8U)
 80087b2:	88fb      	ldrh	r3, [r7, #6]
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	d939      	bls.n	800882c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	3308      	adds	r3, #8
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3309      	adds	r3, #9
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	021b      	lsls	r3, r3, #8
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	4313      	orrs	r3, r2
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	330a      	adds	r3, #10
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	b29a      	uxth	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	330b      	adds	r3, #11
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	4313      	orrs	r3, r2
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	330c      	adds	r3, #12
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	330d      	adds	r3, #13
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	021b      	lsls	r3, r3, #8
 8008802:	b29b      	uxth	r3, r3
 8008804:	4313      	orrs	r3, r2
 8008806:	b29a      	uxth	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	7b9a      	ldrb	r2, [r3, #14]
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	7bda      	ldrb	r2, [r3, #15]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	7c1a      	ldrb	r2, [r3, #16]
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	7c5a      	ldrb	r2, [r3, #17]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	745a      	strb	r2, [r3, #17]
  }
}
 800882c:	bf00      	nop
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08c      	sub	sp, #48	; 0x30
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	4613      	mov	r3, r2
 8008844:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800884c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008858:	2300      	movs	r3, #0
 800885a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	781a      	ldrb	r2, [r3, #0]
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	785a      	ldrb	r2, [r3, #1]
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	3302      	adds	r3, #2
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b29a      	uxth	r2, r3
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	3303      	adds	r3, #3
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	b29b      	uxth	r3, r3
 800888c:	4313      	orrs	r3, r2
 800888e:	b29b      	uxth	r3, r3
 8008890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008894:	bf28      	it	cs
 8008896:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800889a:	b29a      	uxth	r2, r3
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	791a      	ldrb	r2, [r3, #4]
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	795a      	ldrb	r2, [r3, #5]
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	799a      	ldrb	r2, [r3, #6]
 80088b4:	6a3b      	ldr	r3, [r7, #32]
 80088b6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	79da      	ldrb	r2, [r3, #7]
 80088bc:	6a3b      	ldr	r3, [r7, #32]
 80088be:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	7a1a      	ldrb	r2, [r3, #8]
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d002      	beq.n	80088d6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	2209      	movs	r2, #9
 80088d4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	2b09      	cmp	r3, #9
 80088da:	f240 809d 	bls.w	8008a18 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80088de:	2309      	movs	r3, #9
 80088e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80088e6:	e081      	b.n	80089ec <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088e8:	f107 0316 	add.w	r3, r7, #22
 80088ec:	4619      	mov	r1, r3
 80088ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088f0:	f000 f99f 	bl	8008c32 <USBH_GetNextDesc>
 80088f4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	785b      	ldrb	r3, [r3, #1]
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d176      	bne.n	80089ec <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	2b09      	cmp	r3, #9
 8008904:	d002      	beq.n	800890c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008908:	2209      	movs	r2, #9
 800890a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800890c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008910:	221a      	movs	r2, #26
 8008912:	fb02 f303 	mul.w	r3, r2, r3
 8008916:	3308      	adds	r3, #8
 8008918:	6a3a      	ldr	r2, [r7, #32]
 800891a:	4413      	add	r3, r2
 800891c:	3302      	adds	r3, #2
 800891e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008922:	69f8      	ldr	r0, [r7, #28]
 8008924:	f000 f87e 	bl	8008a24 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008928:	2300      	movs	r3, #0
 800892a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008932:	e043      	b.n	80089bc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008934:	f107 0316 	add.w	r3, r7, #22
 8008938:	4619      	mov	r1, r3
 800893a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800893c:	f000 f979 	bl	8008c32 <USBH_GetNextDesc>
 8008940:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	785b      	ldrb	r3, [r3, #1]
 8008946:	2b05      	cmp	r3, #5
 8008948:	d138      	bne.n	80089bc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	795b      	ldrb	r3, [r3, #5]
 800894e:	2b01      	cmp	r3, #1
 8008950:	d10f      	bne.n	8008972 <USBH_ParseCfgDesc+0x13a>
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	799b      	ldrb	r3, [r3, #6]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d10b      	bne.n	8008972 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	79db      	ldrb	r3, [r3, #7]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10f      	bne.n	8008982 <USBH_ParseCfgDesc+0x14a>
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	2b09      	cmp	r3, #9
 8008968:	d00b      	beq.n	8008982 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800896a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800896c:	2209      	movs	r2, #9
 800896e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008970:	e007      	b.n	8008982 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	2b07      	cmp	r3, #7
 8008978:	d004      	beq.n	8008984 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	2207      	movs	r2, #7
 800897e:	701a      	strb	r2, [r3, #0]
 8008980:	e000      	b.n	8008984 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008982:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008988:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800898c:	3201      	adds	r2, #1
 800898e:	00d2      	lsls	r2, r2, #3
 8008990:	211a      	movs	r1, #26
 8008992:	fb01 f303 	mul.w	r3, r1, r3
 8008996:	4413      	add	r3, r2
 8008998:	3308      	adds	r3, #8
 800899a:	6a3a      	ldr	r2, [r7, #32]
 800899c:	4413      	add	r3, r2
 800899e:	3304      	adds	r3, #4
 80089a0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80089a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089a4:	69b9      	ldr	r1, [r7, #24]
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f000 f86b 	bl	8008a82 <USBH_ParseEPDesc>
 80089ac:	4603      	mov	r3, r0
 80089ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80089b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089b6:	3301      	adds	r3, #1
 80089b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	791b      	ldrb	r3, [r3, #4]
 80089c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d204      	bcs.n	80089d2 <USBH_ParseCfgDesc+0x19a>
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	885a      	ldrh	r2, [r3, #2]
 80089cc:	8afb      	ldrh	r3, [r7, #22]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d8b0      	bhi.n	8008934 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	791b      	ldrb	r3, [r3, #4]
 80089d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089da:	429a      	cmp	r2, r3
 80089dc:	d201      	bcs.n	80089e2 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80089de:	2303      	movs	r3, #3
 80089e0:	e01c      	b.n	8008a1c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80089e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089e6:	3301      	adds	r3, #1
 80089e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d805      	bhi.n	8008a00 <USBH_ParseCfgDesc+0x1c8>
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	885a      	ldrh	r2, [r3, #2]
 80089f8:	8afb      	ldrh	r3, [r7, #22]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	f63f af74 	bhi.w	80088e8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	791b      	ldrb	r3, [r3, #4]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	bf28      	it	cs
 8008a08:	2302      	movcs	r3, #2
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d201      	bcs.n	8008a18 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e001      	b.n	8008a1c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008a18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3730      	adds	r7, #48	; 0x30
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	785a      	ldrb	r2, [r3, #1]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	789a      	ldrb	r2, [r3, #2]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	78da      	ldrb	r2, [r3, #3]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	791a      	ldrb	r2, [r3, #4]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	795a      	ldrb	r2, [r3, #5]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	799a      	ldrb	r2, [r3, #6]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	79da      	ldrb	r2, [r3, #7]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	7a1a      	ldrb	r2, [r3, #8]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	721a      	strb	r2, [r3, #8]
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b087      	sub	sp, #28
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	781a      	ldrb	r2, [r3, #0]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	785a      	ldrb	r2, [r3, #1]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	789a      	ldrb	r2, [r3, #2]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	78da      	ldrb	r2, [r3, #3]
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3305      	adds	r3, #5
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	021b      	lsls	r3, r3, #8
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	b29a      	uxth	r2, r3
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	799a      	ldrb	r2, [r3, #6]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	889b      	ldrh	r3, [r3, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d102      	bne.n	8008ae4 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	75fb      	strb	r3, [r7, #23]
 8008ae2:	e033      	b.n	8008b4c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	889b      	ldrh	r3, [r3, #4]
 8008ae8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008aec:	f023 0307 	bic.w	r3, r3, #7
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	889b      	ldrh	r3, [r3, #4]
 8008afa:	b21a      	sxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3304      	adds	r3, #4
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	b299      	uxth	r1, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3305      	adds	r3, #5
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	430b      	orrs	r3, r1
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d110      	bne.n	8008b3e <USBH_ParseEPDesc+0xbc>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3304      	adds	r3, #4
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b299      	uxth	r1, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	3305      	adds	r3, #5
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	430b      	orrs	r3, r1
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	b21b      	sxth	r3, r3
 8008b36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b3a:	b21b      	sxth	r3, r3
 8008b3c:	e001      	b.n	8008b42 <USBH_ParseEPDesc+0xc0>
 8008b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b42:	4313      	orrs	r3, r2
 8008b44:	b21b      	sxth	r3, r3
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d116      	bne.n	8008b84 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	78db      	ldrb	r3, [r3, #3]
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d005      	beq.n	8008b6e <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	78db      	ldrb	r3, [r3, #3]
 8008b66:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d127      	bne.n	8008bbe <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	799b      	ldrb	r3, [r3, #6]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <USBH_ParseEPDesc+0xfc>
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	799b      	ldrb	r3, [r3, #6]
 8008b7a:	2b10      	cmp	r3, #16
 8008b7c:	d91f      	bls.n	8008bbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	75fb      	strb	r3, [r7, #23]
 8008b82:	e01c      	b.n	8008bbe <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	78db      	ldrb	r3, [r3, #3]
 8008b88:	f003 0303 	and.w	r3, r3, #3
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d10a      	bne.n	8008ba6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	799b      	ldrb	r3, [r3, #6]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <USBH_ParseEPDesc+0x11e>
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	799b      	ldrb	r3, [r3, #6]
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d90e      	bls.n	8008bbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	75fb      	strb	r3, [r7, #23]
 8008ba4:	e00b      	b.n	8008bbe <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	78db      	ldrb	r3, [r3, #3]
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d105      	bne.n	8008bbe <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	799b      	ldrb	r3, [r3, #6]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	371c      	adds	r7, #28
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d120      	bne.n	8008c26 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	1e9a      	subs	r2, r3, #2
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	4293      	cmp	r3, r2
 8008bee:	bf28      	it	cs
 8008bf0:	4613      	movcs	r3, r2
 8008bf2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	82fb      	strh	r3, [r7, #22]
 8008bfe:	e00b      	b.n	8008c18 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c00:	8afb      	ldrh	r3, [r7, #22]
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	4413      	add	r3, r2
 8008c06:	781a      	ldrb	r2, [r3, #0]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c12:	8afb      	ldrh	r3, [r7, #22]
 8008c14:	3302      	adds	r3, #2
 8008c16:	82fb      	strh	r3, [r7, #22]
 8008c18:	8afa      	ldrh	r2, [r7, #22]
 8008c1a:	8abb      	ldrh	r3, [r7, #20]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d3ef      	bcc.n	8008c00 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
  }
}
 8008c26:	bf00      	nop
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b085      	sub	sp, #20
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	881a      	ldrh	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	4413      	add	r3, r2
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4413      	add	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	4613      	mov	r3, r2
 8008c74:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c76:	2301      	movs	r3, #1
 8008c78:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	789b      	ldrb	r3, [r3, #2]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d002      	beq.n	8008c88 <USBH_CtlReq+0x20>
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d00f      	beq.n	8008ca6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c86:	e027      	b.n	8008cd8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	88fa      	ldrh	r2, [r7, #6]
 8008c92:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2201      	movs	r2, #1
 8008c98:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ca4:	e018      	b.n	8008cd8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 f81c 	bl	8008ce4 <USBH_HandleControl>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008cb0:	7dfb      	ldrb	r3, [r7, #23]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d002      	beq.n	8008cbc <USBH_CtlReq+0x54>
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d106      	bne.n	8008cca <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	761a      	strb	r2, [r3, #24]
      break;
 8008cc8:	e005      	b.n	8008cd6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008cca:	7dfb      	ldrb	r3, [r7, #23]
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d102      	bne.n	8008cd6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	709a      	strb	r2, [r3, #2]
      break;
 8008cd6:	bf00      	nop
  }
  return status;
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af02      	add	r7, sp, #8
 8008cea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008cec:	2301      	movs	r3, #1
 8008cee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	7e1b      	ldrb	r3, [r3, #24]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	2b0a      	cmp	r3, #10
 8008cfc:	f200 8156 	bhi.w	8008fac <USBH_HandleControl+0x2c8>
 8008d00:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <USBH_HandleControl+0x24>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d35 	.word	0x08008d35
 8008d0c:	08008d4f 	.word	0x08008d4f
 8008d10:	08008db9 	.word	0x08008db9
 8008d14:	08008ddf 	.word	0x08008ddf
 8008d18:	08008e17 	.word	0x08008e17
 8008d1c:	08008e41 	.word	0x08008e41
 8008d20:	08008e93 	.word	0x08008e93
 8008d24:	08008eb5 	.word	0x08008eb5
 8008d28:	08008ef1 	.word	0x08008ef1
 8008d2c:	08008f17 	.word	0x08008f17
 8008d30:	08008f55 	.word	0x08008f55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f103 0110 	add.w	r1, r3, #16
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	795b      	ldrb	r3, [r3, #5]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f943 	bl	8008fcc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	761a      	strb	r2, [r3, #24]
      break;
 8008d4c:	e139      	b.n	8008fc2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	795b      	ldrb	r3, [r3, #5]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fcc5 	bl	80096e4 <USBH_LL_GetURBState>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d11e      	bne.n	8008da2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	7c1b      	ldrb	r3, [r3, #16]
 8008d68:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d6c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	8adb      	ldrh	r3, [r3, #22]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d76:	7b7b      	ldrb	r3, [r7, #13]
 8008d78:	2b80      	cmp	r3, #128	; 0x80
 8008d7a:	d103      	bne.n	8008d84 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2203      	movs	r2, #3
 8008d80:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d82:	e115      	b.n	8008fb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2205      	movs	r2, #5
 8008d88:	761a      	strb	r2, [r3, #24]
      break;
 8008d8a:	e111      	b.n	8008fb0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008d8c:	7b7b      	ldrb	r3, [r7, #13]
 8008d8e:	2b80      	cmp	r3, #128	; 0x80
 8008d90:	d103      	bne.n	8008d9a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2209      	movs	r2, #9
 8008d96:	761a      	strb	r2, [r3, #24]
      break;
 8008d98:	e10a      	b.n	8008fb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2207      	movs	r2, #7
 8008d9e:	761a      	strb	r2, [r3, #24]
      break;
 8008da0:	e106      	b.n	8008fb0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d003      	beq.n	8008db0 <USBH_HandleControl+0xcc>
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	f040 8100 	bne.w	8008fb0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	220b      	movs	r2, #11
 8008db4:	761a      	strb	r2, [r3, #24]
      break;
 8008db6:	e0fb      	b.n	8008fb0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6899      	ldr	r1, [r3, #8]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	899a      	ldrh	r2, [r3, #12]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	791b      	ldrb	r3, [r3, #4]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f93a 	bl	800904a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2204      	movs	r2, #4
 8008dda:	761a      	strb	r2, [r3, #24]
      break;
 8008ddc:	e0f1      	b.n	8008fc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	791b      	ldrb	r3, [r3, #4]
 8008de2:	4619      	mov	r1, r3
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fc7d 	bl	80096e4 <USBH_LL_GetURBState>
 8008dea:	4603      	mov	r3, r0
 8008dec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d102      	bne.n	8008dfa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2209      	movs	r2, #9
 8008df8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	2b05      	cmp	r3, #5
 8008dfe:	d102      	bne.n	8008e06 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e00:	2303      	movs	r3, #3
 8008e02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e04:	e0d6      	b.n	8008fb4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008e06:	7bbb      	ldrb	r3, [r7, #14]
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	f040 80d3 	bne.w	8008fb4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	220b      	movs	r2, #11
 8008e12:	761a      	strb	r2, [r3, #24]
      break;
 8008e14:	e0ce      	b.n	8008fb4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6899      	ldr	r1, [r3, #8]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	899a      	ldrh	r2, [r3, #12]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	795b      	ldrb	r3, [r3, #5]
 8008e22:	2001      	movs	r0, #1
 8008e24:	9000      	str	r0, [sp, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f8ea 	bl	8009000 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2206      	movs	r2, #6
 8008e3c:	761a      	strb	r2, [r3, #24]
      break;
 8008e3e:	e0c0      	b.n	8008fc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	795b      	ldrb	r3, [r3, #5]
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fc4c 	bl	80096e4 <USBH_LL_GetURBState>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e50:	7bbb      	ldrb	r3, [r7, #14]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d103      	bne.n	8008e5e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2207      	movs	r2, #7
 8008e5a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e5c:	e0ac      	b.n	8008fb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
 8008e60:	2b05      	cmp	r3, #5
 8008e62:	d105      	bne.n	8008e70 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	220c      	movs	r2, #12
 8008e68:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e6e:	e0a3      	b.n	8008fb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d103      	bne.n	8008e7e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2205      	movs	r2, #5
 8008e7a:	761a      	strb	r2, [r3, #24]
      break;
 8008e7c:	e09c      	b.n	8008fb8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	2b04      	cmp	r3, #4
 8008e82:	f040 8099 	bne.w	8008fb8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	220b      	movs	r2, #11
 8008e8a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e90:	e092      	b.n	8008fb8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	791b      	ldrb	r3, [r3, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	2100      	movs	r1, #0
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f8d5 	bl	800904a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2208      	movs	r2, #8
 8008eb0:	761a      	strb	r2, [r3, #24]

      break;
 8008eb2:	e086      	b.n	8008fc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	791b      	ldrb	r3, [r3, #4]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 fc12 	bl	80096e4 <USBH_LL_GetURBState>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d105      	bne.n	8008ed6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	220d      	movs	r2, #13
 8008ece:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ed4:	e072      	b.n	8008fbc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	2b04      	cmp	r3, #4
 8008eda:	d103      	bne.n	8008ee4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	220b      	movs	r2, #11
 8008ee0:	761a      	strb	r2, [r3, #24]
      break;
 8008ee2:	e06b      	b.n	8008fbc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	2b05      	cmp	r3, #5
 8008ee8:	d168      	bne.n	8008fbc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008eea:	2303      	movs	r3, #3
 8008eec:	73fb      	strb	r3, [r7, #15]
      break;
 8008eee:	e065      	b.n	8008fbc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	795b      	ldrb	r3, [r3, #5]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	9200      	str	r2, [sp, #0]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f87f 	bl	8009000 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	220a      	movs	r2, #10
 8008f12:	761a      	strb	r2, [r3, #24]
      break;
 8008f14:	e055      	b.n	8008fc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	795b      	ldrb	r3, [r3, #5]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fbe1 	bl	80096e4 <USBH_LL_GetURBState>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d105      	bne.n	8008f38 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	220d      	movs	r2, #13
 8008f34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f36:	e043      	b.n	8008fc0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d103      	bne.n	8008f46 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2209      	movs	r2, #9
 8008f42:	761a      	strb	r2, [r3, #24]
      break;
 8008f44:	e03c      	b.n	8008fc0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008f46:	7bbb      	ldrb	r3, [r7, #14]
 8008f48:	2b04      	cmp	r3, #4
 8008f4a:	d139      	bne.n	8008fc0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	220b      	movs	r2, #11
 8008f50:	761a      	strb	r2, [r3, #24]
      break;
 8008f52:	e035      	b.n	8008fc0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	7e5b      	ldrb	r3, [r3, #25]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	765a      	strb	r2, [r3, #25]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7e5b      	ldrb	r3, [r3, #25]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d806      	bhi.n	8008f76 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2201      	movs	r2, #1
 8008f72:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f74:	e025      	b.n	8008fc2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f7c:	2106      	movs	r1, #6
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	795b      	ldrb	r3, [r3, #5]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f90c 	bl	80091ac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	791b      	ldrb	r3, [r3, #4]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f906 	bl	80091ac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8008faa:	e00a      	b.n	8008fc2 <USBH_HandleControl+0x2de>

    default:
      break;
 8008fac:	bf00      	nop
 8008fae:	e008      	b.n	8008fc2 <USBH_HandleControl+0x2de>
      break;
 8008fb0:	bf00      	nop
 8008fb2:	e006      	b.n	8008fc2 <USBH_HandleControl+0x2de>
      break;
 8008fb4:	bf00      	nop
 8008fb6:	e004      	b.n	8008fc2 <USBH_HandleControl+0x2de>
      break;
 8008fb8:	bf00      	nop
 8008fba:	e002      	b.n	8008fc2 <USBH_HandleControl+0x2de>
      break;
 8008fbc:	bf00      	nop
 8008fbe:	e000      	b.n	8008fc2 <USBH_HandleControl+0x2de>
      break;
 8008fc0:	bf00      	nop
  }

  return status;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b088      	sub	sp, #32
 8008fd0:	af04      	add	r7, sp, #16
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fda:	79f9      	ldrb	r1, [r7, #7]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	9302      	str	r3, [sp, #8]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	9301      	str	r3, [sp, #4]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	2300      	movs	r3, #0
 8008fee:	2200      	movs	r2, #0
 8008ff0:	68f8      	ldr	r0, [r7, #12]
 8008ff2:	f000 fb46 	bl	8009682 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af04      	add	r7, sp, #16
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4611      	mov	r1, r2
 800900c:	461a      	mov	r2, r3
 800900e:	460b      	mov	r3, r1
 8009010:	80fb      	strh	r3, [r7, #6]
 8009012:	4613      	mov	r3, r2
 8009014:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009024:	7979      	ldrb	r1, [r7, #5]
 8009026:	7e3b      	ldrb	r3, [r7, #24]
 8009028:	9303      	str	r3, [sp, #12]
 800902a:	88fb      	ldrh	r3, [r7, #6]
 800902c:	9302      	str	r3, [sp, #8]
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	2301      	movs	r3, #1
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	2300      	movs	r3, #0
 8009038:	2200      	movs	r2, #0
 800903a:	68f8      	ldr	r0, [r7, #12]
 800903c:	f000 fb21 	bl	8009682 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b088      	sub	sp, #32
 800904e:	af04      	add	r7, sp, #16
 8009050:	60f8      	str	r0, [r7, #12]
 8009052:	60b9      	str	r1, [r7, #8]
 8009054:	4611      	mov	r1, r2
 8009056:	461a      	mov	r2, r3
 8009058:	460b      	mov	r3, r1
 800905a:	80fb      	strh	r3, [r7, #6]
 800905c:	4613      	mov	r3, r2
 800905e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009060:	7979      	ldrb	r1, [r7, #5]
 8009062:	2300      	movs	r3, #0
 8009064:	9303      	str	r3, [sp, #12]
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	9302      	str	r3, [sp, #8]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	2301      	movs	r3, #1
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	2300      	movs	r3, #0
 8009074:	2201      	movs	r2, #1
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 fb03 	bl	8009682 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800907c:	2300      	movs	r3, #0

}
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b088      	sub	sp, #32
 800908a:	af04      	add	r7, sp, #16
 800908c:	60f8      	str	r0, [r7, #12]
 800908e:	60b9      	str	r1, [r7, #8]
 8009090:	4611      	mov	r1, r2
 8009092:	461a      	mov	r2, r3
 8009094:	460b      	mov	r3, r1
 8009096:	80fb      	strh	r3, [r7, #6]
 8009098:	4613      	mov	r3, r2
 800909a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d001      	beq.n	80090aa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090aa:	7979      	ldrb	r1, [r7, #5]
 80090ac:	7e3b      	ldrb	r3, [r7, #24]
 80090ae:	9303      	str	r3, [sp, #12]
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	9302      	str	r3, [sp, #8]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	2301      	movs	r3, #1
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	2302      	movs	r3, #2
 80090be:	2200      	movs	r2, #0
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 fade 	bl	8009682 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af04      	add	r7, sp, #16
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	4611      	mov	r1, r2
 80090dc:	461a      	mov	r2, r3
 80090de:	460b      	mov	r3, r1
 80090e0:	80fb      	strh	r3, [r7, #6]
 80090e2:	4613      	mov	r3, r2
 80090e4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090e6:	7979      	ldrb	r1, [r7, #5]
 80090e8:	2300      	movs	r3, #0
 80090ea:	9303      	str	r3, [sp, #12]
 80090ec:	88fb      	ldrh	r3, [r7, #6]
 80090ee:	9302      	str	r3, [sp, #8]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	2301      	movs	r3, #1
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	2302      	movs	r3, #2
 80090fa:	2201      	movs	r2, #1
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 fac0 	bl	8009682 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af04      	add	r7, sp, #16
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	4608      	mov	r0, r1
 8009116:	4611      	mov	r1, r2
 8009118:	461a      	mov	r2, r3
 800911a:	4603      	mov	r3, r0
 800911c:	70fb      	strb	r3, [r7, #3]
 800911e:	460b      	mov	r3, r1
 8009120:	70bb      	strb	r3, [r7, #2]
 8009122:	4613      	mov	r3, r2
 8009124:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009126:	7878      	ldrb	r0, [r7, #1]
 8009128:	78ba      	ldrb	r2, [r7, #2]
 800912a:	78f9      	ldrb	r1, [r7, #3]
 800912c:	8b3b      	ldrh	r3, [r7, #24]
 800912e:	9302      	str	r3, [sp, #8]
 8009130:	7d3b      	ldrb	r3, [r7, #20]
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	7c3b      	ldrb	r3, [r7, #16]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	4603      	mov	r3, r0
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fa53 	bl	80095e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	4619      	mov	r1, r3
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fa72 	bl	8009644 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009160:	2300      	movs	r3, #0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f836 	bl	80091e8 <USBH_GetFreePipe>
 800917c:	4603      	mov	r3, r0
 800917e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009180:	89fb      	ldrh	r3, [r7, #14]
 8009182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009186:	4293      	cmp	r3, r2
 8009188:	d00a      	beq.n	80091a0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	89fb      	ldrh	r3, [r7, #14]
 800918e:	f003 030f 	and.w	r3, r3, #15
 8009192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	33e0      	adds	r3, #224	; 0xe0
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	440b      	add	r3, r1
 800919e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80091a0:	89fb      	ldrh	r3, [r7, #14]
 80091a2:	b2db      	uxtb	r3, r3
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	2b0f      	cmp	r3, #15
 80091bc:	d80d      	bhi.n	80091da <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	33e0      	adds	r3, #224	; 0xe0
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4413      	add	r3, r2
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80091d0:	6879      	ldr	r1, [r7, #4]
 80091d2:	33e0      	adds	r3, #224	; 0xe0
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80091f4:	2300      	movs	r3, #0
 80091f6:	73fb      	strb	r3, [r7, #15]
 80091f8:	e00f      	b.n	800921a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	33e0      	adds	r3, #224	; 0xe0
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d102      	bne.n	8009214 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	b29b      	uxth	r3, r3
 8009212:	e007      	b.n	8009224 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	3301      	adds	r3, #1
 8009218:	73fb      	strb	r3, [r7, #15]
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	2b0f      	cmp	r3, #15
 800921e:	d9ec      	bls.n	80091fa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009220:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009234:	2201      	movs	r2, #1
 8009236:	490e      	ldr	r1, [pc, #56]	; (8009270 <MX_USB_HOST_Init+0x40>)
 8009238:	480e      	ldr	r0, [pc, #56]	; (8009274 <MX_USB_HOST_Init+0x44>)
 800923a:	f7fe fba7 	bl	800798c <USBH_Init>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009244:	f7f7 fd4c 	bl	8000ce0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009248:	490b      	ldr	r1, [pc, #44]	; (8009278 <MX_USB_HOST_Init+0x48>)
 800924a:	480a      	ldr	r0, [pc, #40]	; (8009274 <MX_USB_HOST_Init+0x44>)
 800924c:	f7fe fc2c 	bl	8007aa8 <USBH_RegisterClass>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009256:	f7f7 fd43 	bl	8000ce0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800925a:	4806      	ldr	r0, [pc, #24]	; (8009274 <MX_USB_HOST_Init+0x44>)
 800925c:	f7fe fcb0 	bl	8007bc0 <USBH_Start>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009266:	f7f7 fd3b 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800926a:	bf00      	nop
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	08009291 	.word	0x08009291
 8009274:	200002f8 	.word	0x200002f8
 8009278:	2000000c 	.word	0x2000000c

0800927c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009280:	4802      	ldr	r0, [pc, #8]	; (800928c <MX_USB_HOST_Process+0x10>)
 8009282:	f7fe fcad 	bl	8007be0 <USBH_Process>
}
 8009286:	bf00      	nop
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	200002f8 	.word	0x200002f8

08009290 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	3b01      	subs	r3, #1
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d819      	bhi.n	80092d8 <USBH_UserProcess+0x48>
 80092a4:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <USBH_UserProcess+0x1c>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	080092d9 	.word	0x080092d9
 80092b0:	080092c9 	.word	0x080092c9
 80092b4:	080092d9 	.word	0x080092d9
 80092b8:	080092d1 	.word	0x080092d1
 80092bc:	080092c1 	.word	0x080092c1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80092c0:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <USBH_UserProcess+0x58>)
 80092c2:	2203      	movs	r2, #3
 80092c4:	701a      	strb	r2, [r3, #0]
  break;
 80092c6:	e008      	b.n	80092da <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80092c8:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <USBH_UserProcess+0x58>)
 80092ca:	2202      	movs	r2, #2
 80092cc:	701a      	strb	r2, [r3, #0]
  break;
 80092ce:	e004      	b.n	80092da <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80092d0:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <USBH_UserProcess+0x58>)
 80092d2:	2201      	movs	r2, #1
 80092d4:	701a      	strb	r2, [r3, #0]
  break;
 80092d6:	e000      	b.n	80092da <USBH_UserProcess+0x4a>

  default:
  break;
 80092d8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80092da:	bf00      	nop
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	200006d0 	.word	0x200006d0

080092ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08a      	sub	sp, #40	; 0x28
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f4:	f107 0314 	add.w	r3, r7, #20
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	605a      	str	r2, [r3, #4]
 80092fe:	609a      	str	r2, [r3, #8]
 8009300:	60da      	str	r2, [r3, #12]
 8009302:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800930c:	d147      	bne.n	800939e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800930e:	2300      	movs	r3, #0
 8009310:	613b      	str	r3, [r7, #16]
 8009312:	4b25      	ldr	r3, [pc, #148]	; (80093a8 <HAL_HCD_MspInit+0xbc>)
 8009314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009316:	4a24      	ldr	r2, [pc, #144]	; (80093a8 <HAL_HCD_MspInit+0xbc>)
 8009318:	f043 0301 	orr.w	r3, r3, #1
 800931c:	6313      	str	r3, [r2, #48]	; 0x30
 800931e:	4b22      	ldr	r3, [pc, #136]	; (80093a8 <HAL_HCD_MspInit+0xbc>)
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	613b      	str	r3, [r7, #16]
 8009328:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800932a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800932e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009330:	2300      	movs	r3, #0
 8009332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009334:	2300      	movs	r3, #0
 8009336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009338:	f107 0314 	add.w	r3, r7, #20
 800933c:	4619      	mov	r1, r3
 800933e:	481b      	ldr	r0, [pc, #108]	; (80093ac <HAL_HCD_MspInit+0xc0>)
 8009340:	f7f8 fec2 	bl	80020c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009344:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800934a:	2302      	movs	r3, #2
 800934c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009352:	2300      	movs	r3, #0
 8009354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009356:	230a      	movs	r3, #10
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800935a:	f107 0314 	add.w	r3, r7, #20
 800935e:	4619      	mov	r1, r3
 8009360:	4812      	ldr	r0, [pc, #72]	; (80093ac <HAL_HCD_MspInit+0xc0>)
 8009362:	f7f8 feb1 	bl	80020c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009366:	4b10      	ldr	r3, [pc, #64]	; (80093a8 <HAL_HCD_MspInit+0xbc>)
 8009368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936a:	4a0f      	ldr	r2, [pc, #60]	; (80093a8 <HAL_HCD_MspInit+0xbc>)
 800936c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009370:	6353      	str	r3, [r2, #52]	; 0x34
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <HAL_HCD_MspInit+0xbc>)
 8009378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800937a:	4a0b      	ldr	r2, [pc, #44]	; (80093a8 <HAL_HCD_MspInit+0xbc>)
 800937c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009380:	6453      	str	r3, [r2, #68]	; 0x44
 8009382:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <HAL_HCD_MspInit+0xbc>)
 8009384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800938e:	2200      	movs	r2, #0
 8009390:	2100      	movs	r1, #0
 8009392:	2043      	movs	r0, #67	; 0x43
 8009394:	f7f8 fb77 	bl	8001a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009398:	2043      	movs	r0, #67	; 0x43
 800939a:	f7f8 fb90 	bl	8001abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800939e:	bf00      	nop
 80093a0:	3728      	adds	r7, #40	; 0x28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	40023800 	.word	0x40023800
 80093ac:	40020000 	.word	0x40020000

080093b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fe ffed 	bl	800839e <USBH_LL_IncTimer>
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff f825 	bl	800842a <USBH_LL_Connect>
}
 80093e0:	bf00      	nop
 80093e2:	3708      	adds	r7, #8
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff f82e 	bl	8008458 <USBH_LL_Disconnect>
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
 8009410:	4613      	mov	r3, r2
 8009412:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800942e:	4618      	mov	r0, r3
 8009430:	f7fe ffdf 	bl	80083f2 <USBH_LL_PortEnabled>
}
 8009434:	bf00      	nop
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe ffdf 	bl	800840e <USBH_LL_PortDisabled>
}
 8009450:	bf00      	nop
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009466:	2b01      	cmp	r3, #1
 8009468:	d12a      	bne.n	80094c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800946a:	4a18      	ldr	r2, [pc, #96]	; (80094cc <USBH_LL_Init+0x74>)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a15      	ldr	r2, [pc, #84]	; (80094cc <USBH_LL_Init+0x74>)
 8009476:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800947a:	4b14      	ldr	r3, [pc, #80]	; (80094cc <USBH_LL_Init+0x74>)
 800947c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009480:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <USBH_LL_Init+0x74>)
 8009484:	2208      	movs	r2, #8
 8009486:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009488:	4b10      	ldr	r3, [pc, #64]	; (80094cc <USBH_LL_Init+0x74>)
 800948a:	2201      	movs	r2, #1
 800948c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800948e:	4b0f      	ldr	r3, [pc, #60]	; (80094cc <USBH_LL_Init+0x74>)
 8009490:	2200      	movs	r2, #0
 8009492:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009494:	4b0d      	ldr	r3, [pc, #52]	; (80094cc <USBH_LL_Init+0x74>)
 8009496:	2202      	movs	r2, #2
 8009498:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800949a:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <USBH_LL_Init+0x74>)
 800949c:	2200      	movs	r2, #0
 800949e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80094a0:	480a      	ldr	r0, [pc, #40]	; (80094cc <USBH_LL_Init+0x74>)
 80094a2:	f7f8 ffc6 	bl	8002432 <HAL_HCD_Init>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80094ac:	f7f7 fc18 	bl	8000ce0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80094b0:	4806      	ldr	r0, [pc, #24]	; (80094cc <USBH_LL_Init+0x74>)
 80094b2:	f7f9 fbaa 	bl	8002c0a <HAL_HCD_GetCurrentFrame>
 80094b6:	4603      	mov	r3, r0
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7fe ff60 	bl	8008380 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	200006d4 	.word	0x200006d4

080094d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f9 fb19 	bl	8002b1e <HAL_HCD_Start>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f95c 	bl	80097b0 <USBH_Get_USB_Status>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800951c:	4618      	mov	r0, r3
 800951e:	f7f9 fb21 	bl	8002b64 <HAL_HCD_Stop>
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	4618      	mov	r0, r3
 800952a:	f000 f941 	bl	80097b0 <USBH_Get_USB_Status>
 800952e:	4603      	mov	r3, r0
 8009530:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009532:	7bbb      	ldrb	r3, [r7, #14]
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009544:	2301      	movs	r3, #1
 8009546:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800954e:	4618      	mov	r0, r3
 8009550:	f7f9 fb69 	bl	8002c26 <HAL_HCD_GetCurrentSpeed>
 8009554:	4603      	mov	r3, r0
 8009556:	2b02      	cmp	r3, #2
 8009558:	d00c      	beq.n	8009574 <USBH_LL_GetSpeed+0x38>
 800955a:	2b02      	cmp	r3, #2
 800955c:	d80d      	bhi.n	800957a <USBH_LL_GetSpeed+0x3e>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <USBH_LL_GetSpeed+0x2c>
 8009562:	2b01      	cmp	r3, #1
 8009564:	d003      	beq.n	800956e <USBH_LL_GetSpeed+0x32>
 8009566:	e008      	b.n	800957a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
    break;
 800956c:	e008      	b.n	8009580 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800956e:	2301      	movs	r3, #1
 8009570:	73fb      	strb	r3, [r7, #15]
    break;
 8009572:	e005      	b.n	8009580 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009574:	2302      	movs	r3, #2
 8009576:	73fb      	strb	r3, [r7, #15]
    break;
 8009578:	e002      	b.n	8009580 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800957a:	2301      	movs	r3, #1
 800957c:	73fb      	strb	r3, [r7, #15]
    break;
 800957e:	bf00      	nop
  }
  return  speed;
 8009580:	7bfb      	ldrb	r3, [r7, #15]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3710      	adds	r7, #16
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7f9 fafc 	bl	8002b9e <HAL_HCD_ResetPort>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f8ff 	bl	80097b0 <USBH_Get_USB_Status>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80095d2:	78fa      	ldrb	r2, [r7, #3]
 80095d4:	4611      	mov	r1, r2
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7f9 fb03 	bl	8002be2 <HAL_HCD_HC_GetXferCount>
 80095dc:	4603      	mov	r3, r0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80095e6:	b590      	push	{r4, r7, lr}
 80095e8:	b089      	sub	sp, #36	; 0x24
 80095ea:	af04      	add	r7, sp, #16
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	4608      	mov	r0, r1
 80095f0:	4611      	mov	r1, r2
 80095f2:	461a      	mov	r2, r3
 80095f4:	4603      	mov	r3, r0
 80095f6:	70fb      	strb	r3, [r7, #3]
 80095f8:	460b      	mov	r3, r1
 80095fa:	70bb      	strb	r3, [r7, #2]
 80095fc:	4613      	mov	r3, r2
 80095fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800960e:	787c      	ldrb	r4, [r7, #1]
 8009610:	78ba      	ldrb	r2, [r7, #2]
 8009612:	78f9      	ldrb	r1, [r7, #3]
 8009614:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009616:	9302      	str	r3, [sp, #8]
 8009618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	4623      	mov	r3, r4
 8009626:	f7f8 ff66 	bl	80024f6 <HAL_HCD_HC_Init>
 800962a:	4603      	mov	r3, r0
 800962c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800962e:	7bfb      	ldrb	r3, [r7, #15]
 8009630:	4618      	mov	r0, r3
 8009632:	f000 f8bd 	bl	80097b0 <USBH_Get_USB_Status>
 8009636:	4603      	mov	r3, r0
 8009638:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800963a:	7bbb      	ldrb	r3, [r7, #14]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	bd90      	pop	{r4, r7, pc}

08009644 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800965e:	78fa      	ldrb	r2, [r7, #3]
 8009660:	4611      	mov	r1, r2
 8009662:	4618      	mov	r0, r3
 8009664:	f7f8 ffd6 	bl	8002614 <HAL_HCD_HC_Halt>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800966c:	7bfb      	ldrb	r3, [r7, #15]
 800966e:	4618      	mov	r0, r3
 8009670:	f000 f89e 	bl	80097b0 <USBH_Get_USB_Status>
 8009674:	4603      	mov	r3, r0
 8009676:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009678:	7bbb      	ldrb	r3, [r7, #14]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009682:	b590      	push	{r4, r7, lr}
 8009684:	b089      	sub	sp, #36	; 0x24
 8009686:	af04      	add	r7, sp, #16
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	4608      	mov	r0, r1
 800968c:	4611      	mov	r1, r2
 800968e:	461a      	mov	r2, r3
 8009690:	4603      	mov	r3, r0
 8009692:	70fb      	strb	r3, [r7, #3]
 8009694:	460b      	mov	r3, r1
 8009696:	70bb      	strb	r3, [r7, #2]
 8009698:	4613      	mov	r3, r2
 800969a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80096aa:	787c      	ldrb	r4, [r7, #1]
 80096ac:	78ba      	ldrb	r2, [r7, #2]
 80096ae:	78f9      	ldrb	r1, [r7, #3]
 80096b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80096b8:	9302      	str	r3, [sp, #8]
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	9301      	str	r3, [sp, #4]
 80096be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4623      	mov	r3, r4
 80096c6:	f7f8 ffc9 	bl	800265c <HAL_HCD_HC_SubmitRequest>
 80096ca:	4603      	mov	r3, r0
 80096cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f86d 	bl	80097b0 <USBH_Get_USB_Status>
 80096d6:	4603      	mov	r3, r0
 80096d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096da:	7bbb      	ldrb	r3, [r7, #14]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd90      	pop	{r4, r7, pc}

080096e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80096f6:	78fa      	ldrb	r2, [r7, #3]
 80096f8:	4611      	mov	r1, r2
 80096fa:	4618      	mov	r0, r3
 80096fc:	f7f9 fa5d 	bl	8002bba <HAL_HCD_HC_GetURBState>
 8009700:	4603      	mov	r3, r0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b082      	sub	sp, #8
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	460b      	mov	r3, r1
 8009714:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800971c:	2b01      	cmp	r3, #1
 800971e:	d103      	bne.n	8009728 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	4618      	mov	r0, r3
 8009724:	f000 f870 	bl	8009808 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009728:	20c8      	movs	r0, #200	; 0xc8
 800972a:	f7f7 fe4b 	bl	80013c4 <HAL_Delay>
  return USBH_OK;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009738:	b480      	push	{r7}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
 8009744:	4613      	mov	r3, r2
 8009746:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800974e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	212c      	movs	r1, #44	; 0x2c
 8009756:	fb01 f303 	mul.w	r3, r1, r3
 800975a:	4413      	add	r3, r2
 800975c:	333b      	adds	r3, #59	; 0x3b
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d009      	beq.n	8009778 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	212c      	movs	r1, #44	; 0x2c
 800976a:	fb01 f303 	mul.w	r3, r1, r3
 800976e:	4413      	add	r3, r2
 8009770:	3354      	adds	r3, #84	; 0x54
 8009772:	78ba      	ldrb	r2, [r7, #2]
 8009774:	701a      	strb	r2, [r3, #0]
 8009776:	e008      	b.n	800978a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009778:	78fb      	ldrb	r3, [r7, #3]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	212c      	movs	r1, #44	; 0x2c
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	4413      	add	r3, r2
 8009784:	3355      	adds	r3, #85	; 0x55
 8009786:	78ba      	ldrb	r2, [r7, #2]
 8009788:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3714      	adds	r7, #20
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7f7 fe0f 	bl	80013c4 <HAL_Delay>
}
 80097a6:	bf00      	nop
 80097a8:	3708      	adds	r7, #8
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097be:	79fb      	ldrb	r3, [r7, #7]
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d817      	bhi.n	80097f4 <USBH_Get_USB_Status+0x44>
 80097c4:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <USBH_Get_USB_Status+0x1c>)
 80097c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ca:	bf00      	nop
 80097cc:	080097dd 	.word	0x080097dd
 80097d0:	080097e3 	.word	0x080097e3
 80097d4:	080097e9 	.word	0x080097e9
 80097d8:	080097ef 	.word	0x080097ef
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]
    break;
 80097e0:	e00b      	b.n	80097fa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80097e2:	2302      	movs	r3, #2
 80097e4:	73fb      	strb	r3, [r7, #15]
    break;
 80097e6:	e008      	b.n	80097fa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80097e8:	2301      	movs	r3, #1
 80097ea:	73fb      	strb	r3, [r7, #15]
    break;
 80097ec:	e005      	b.n	80097fa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80097ee:	2302      	movs	r3, #2
 80097f0:	73fb      	strb	r3, [r7, #15]
    break;
 80097f2:	e002      	b.n	80097fa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80097f4:	2302      	movs	r3, #2
 80097f6:	73fb      	strb	r3, [r7, #15]
    break;
 80097f8:	bf00      	nop
  }
  return usb_status;
 80097fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009812:	79fb      	ldrb	r3, [r7, #7]
 8009814:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d102      	bne.n	8009822 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
 8009820:	e001      	b.n	8009826 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009822:	2301      	movs	r3, #1
 8009824:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009826:	7bfb      	ldrb	r3, [r7, #15]
 8009828:	461a      	mov	r2, r3
 800982a:	2101      	movs	r1, #1
 800982c:	4803      	ldr	r0, [pc, #12]	; (800983c <MX_DriverVbusFS+0x34>)
 800982e:	f7f8 fde7 	bl	8002400 <HAL_GPIO_WritePin>
}
 8009832:	bf00      	nop
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	40020800 	.word	0x40020800

08009840 <__errno>:
 8009840:	4b01      	ldr	r3, [pc, #4]	; (8009848 <__errno+0x8>)
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	2000002c 	.word	0x2000002c

0800984c <__libc_init_array>:
 800984c:	b570      	push	{r4, r5, r6, lr}
 800984e:	4d0d      	ldr	r5, [pc, #52]	; (8009884 <__libc_init_array+0x38>)
 8009850:	4c0d      	ldr	r4, [pc, #52]	; (8009888 <__libc_init_array+0x3c>)
 8009852:	1b64      	subs	r4, r4, r5
 8009854:	10a4      	asrs	r4, r4, #2
 8009856:	2600      	movs	r6, #0
 8009858:	42a6      	cmp	r6, r4
 800985a:	d109      	bne.n	8009870 <__libc_init_array+0x24>
 800985c:	4d0b      	ldr	r5, [pc, #44]	; (800988c <__libc_init_array+0x40>)
 800985e:	4c0c      	ldr	r4, [pc, #48]	; (8009890 <__libc_init_array+0x44>)
 8009860:	f000 f92e 	bl	8009ac0 <_init>
 8009864:	1b64      	subs	r4, r4, r5
 8009866:	10a4      	asrs	r4, r4, #2
 8009868:	2600      	movs	r6, #0
 800986a:	42a6      	cmp	r6, r4
 800986c:	d105      	bne.n	800987a <__libc_init_array+0x2e>
 800986e:	bd70      	pop	{r4, r5, r6, pc}
 8009870:	f855 3b04 	ldr.w	r3, [r5], #4
 8009874:	4798      	blx	r3
 8009876:	3601      	adds	r6, #1
 8009878:	e7ee      	b.n	8009858 <__libc_init_array+0xc>
 800987a:	f855 3b04 	ldr.w	r3, [r5], #4
 800987e:	4798      	blx	r3
 8009880:	3601      	adds	r6, #1
 8009882:	e7f2      	b.n	800986a <__libc_init_array+0x1e>
 8009884:	08009b04 	.word	0x08009b04
 8009888:	08009b04 	.word	0x08009b04
 800988c:	08009b04 	.word	0x08009b04
 8009890:	08009b08 	.word	0x08009b08

08009894 <malloc>:
 8009894:	4b02      	ldr	r3, [pc, #8]	; (80098a0 <malloc+0xc>)
 8009896:	4601      	mov	r1, r0
 8009898:	6818      	ldr	r0, [r3, #0]
 800989a:	f000 b87f 	b.w	800999c <_malloc_r>
 800989e:	bf00      	nop
 80098a0:	2000002c 	.word	0x2000002c

080098a4 <free>:
 80098a4:	4b02      	ldr	r3, [pc, #8]	; (80098b0 <free+0xc>)
 80098a6:	4601      	mov	r1, r0
 80098a8:	6818      	ldr	r0, [r3, #0]
 80098aa:	f000 b80b 	b.w	80098c4 <_free_r>
 80098ae:	bf00      	nop
 80098b0:	2000002c 	.word	0x2000002c

080098b4 <memset>:
 80098b4:	4402      	add	r2, r0
 80098b6:	4603      	mov	r3, r0
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d100      	bne.n	80098be <memset+0xa>
 80098bc:	4770      	bx	lr
 80098be:	f803 1b01 	strb.w	r1, [r3], #1
 80098c2:	e7f9      	b.n	80098b8 <memset+0x4>

080098c4 <_free_r>:
 80098c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098c6:	2900      	cmp	r1, #0
 80098c8:	d044      	beq.n	8009954 <_free_r+0x90>
 80098ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ce:	9001      	str	r0, [sp, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f1a1 0404 	sub.w	r4, r1, #4
 80098d6:	bfb8      	it	lt
 80098d8:	18e4      	addlt	r4, r4, r3
 80098da:	f000 f8e3 	bl	8009aa4 <__malloc_lock>
 80098de:	4a1e      	ldr	r2, [pc, #120]	; (8009958 <_free_r+0x94>)
 80098e0:	9801      	ldr	r0, [sp, #4]
 80098e2:	6813      	ldr	r3, [r2, #0]
 80098e4:	b933      	cbnz	r3, 80098f4 <_free_r+0x30>
 80098e6:	6063      	str	r3, [r4, #4]
 80098e8:	6014      	str	r4, [r2, #0]
 80098ea:	b003      	add	sp, #12
 80098ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098f0:	f000 b8de 	b.w	8009ab0 <__malloc_unlock>
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d908      	bls.n	800990a <_free_r+0x46>
 80098f8:	6825      	ldr	r5, [r4, #0]
 80098fa:	1961      	adds	r1, r4, r5
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf01      	itttt	eq
 8009900:	6819      	ldreq	r1, [r3, #0]
 8009902:	685b      	ldreq	r3, [r3, #4]
 8009904:	1949      	addeq	r1, r1, r5
 8009906:	6021      	streq	r1, [r4, #0]
 8009908:	e7ed      	b.n	80098e6 <_free_r+0x22>
 800990a:	461a      	mov	r2, r3
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	b10b      	cbz	r3, 8009914 <_free_r+0x50>
 8009910:	42a3      	cmp	r3, r4
 8009912:	d9fa      	bls.n	800990a <_free_r+0x46>
 8009914:	6811      	ldr	r1, [r2, #0]
 8009916:	1855      	adds	r5, r2, r1
 8009918:	42a5      	cmp	r5, r4
 800991a:	d10b      	bne.n	8009934 <_free_r+0x70>
 800991c:	6824      	ldr	r4, [r4, #0]
 800991e:	4421      	add	r1, r4
 8009920:	1854      	adds	r4, r2, r1
 8009922:	42a3      	cmp	r3, r4
 8009924:	6011      	str	r1, [r2, #0]
 8009926:	d1e0      	bne.n	80098ea <_free_r+0x26>
 8009928:	681c      	ldr	r4, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	6053      	str	r3, [r2, #4]
 800992e:	4421      	add	r1, r4
 8009930:	6011      	str	r1, [r2, #0]
 8009932:	e7da      	b.n	80098ea <_free_r+0x26>
 8009934:	d902      	bls.n	800993c <_free_r+0x78>
 8009936:	230c      	movs	r3, #12
 8009938:	6003      	str	r3, [r0, #0]
 800993a:	e7d6      	b.n	80098ea <_free_r+0x26>
 800993c:	6825      	ldr	r5, [r4, #0]
 800993e:	1961      	adds	r1, r4, r5
 8009940:	428b      	cmp	r3, r1
 8009942:	bf04      	itt	eq
 8009944:	6819      	ldreq	r1, [r3, #0]
 8009946:	685b      	ldreq	r3, [r3, #4]
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	bf04      	itt	eq
 800994c:	1949      	addeq	r1, r1, r5
 800994e:	6021      	streq	r1, [r4, #0]
 8009950:	6054      	str	r4, [r2, #4]
 8009952:	e7ca      	b.n	80098ea <_free_r+0x26>
 8009954:	b003      	add	sp, #12
 8009956:	bd30      	pop	{r4, r5, pc}
 8009958:	200009d8 	.word	0x200009d8

0800995c <sbrk_aligned>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	4e0e      	ldr	r6, [pc, #56]	; (8009998 <sbrk_aligned+0x3c>)
 8009960:	460c      	mov	r4, r1
 8009962:	6831      	ldr	r1, [r6, #0]
 8009964:	4605      	mov	r5, r0
 8009966:	b911      	cbnz	r1, 800996e <sbrk_aligned+0x12>
 8009968:	f000 f88c 	bl	8009a84 <_sbrk_r>
 800996c:	6030      	str	r0, [r6, #0]
 800996e:	4621      	mov	r1, r4
 8009970:	4628      	mov	r0, r5
 8009972:	f000 f887 	bl	8009a84 <_sbrk_r>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d00a      	beq.n	8009990 <sbrk_aligned+0x34>
 800997a:	1cc4      	adds	r4, r0, #3
 800997c:	f024 0403 	bic.w	r4, r4, #3
 8009980:	42a0      	cmp	r0, r4
 8009982:	d007      	beq.n	8009994 <sbrk_aligned+0x38>
 8009984:	1a21      	subs	r1, r4, r0
 8009986:	4628      	mov	r0, r5
 8009988:	f000 f87c 	bl	8009a84 <_sbrk_r>
 800998c:	3001      	adds	r0, #1
 800998e:	d101      	bne.n	8009994 <sbrk_aligned+0x38>
 8009990:	f04f 34ff 	mov.w	r4, #4294967295
 8009994:	4620      	mov	r0, r4
 8009996:	bd70      	pop	{r4, r5, r6, pc}
 8009998:	200009dc 	.word	0x200009dc

0800999c <_malloc_r>:
 800999c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a0:	1ccd      	adds	r5, r1, #3
 80099a2:	f025 0503 	bic.w	r5, r5, #3
 80099a6:	3508      	adds	r5, #8
 80099a8:	2d0c      	cmp	r5, #12
 80099aa:	bf38      	it	cc
 80099ac:	250c      	movcc	r5, #12
 80099ae:	2d00      	cmp	r5, #0
 80099b0:	4607      	mov	r7, r0
 80099b2:	db01      	blt.n	80099b8 <_malloc_r+0x1c>
 80099b4:	42a9      	cmp	r1, r5
 80099b6:	d905      	bls.n	80099c4 <_malloc_r+0x28>
 80099b8:	230c      	movs	r3, #12
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	2600      	movs	r6, #0
 80099be:	4630      	mov	r0, r6
 80099c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099c4:	4e2e      	ldr	r6, [pc, #184]	; (8009a80 <_malloc_r+0xe4>)
 80099c6:	f000 f86d 	bl	8009aa4 <__malloc_lock>
 80099ca:	6833      	ldr	r3, [r6, #0]
 80099cc:	461c      	mov	r4, r3
 80099ce:	bb34      	cbnz	r4, 8009a1e <_malloc_r+0x82>
 80099d0:	4629      	mov	r1, r5
 80099d2:	4638      	mov	r0, r7
 80099d4:	f7ff ffc2 	bl	800995c <sbrk_aligned>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	4604      	mov	r4, r0
 80099dc:	d14d      	bne.n	8009a7a <_malloc_r+0xde>
 80099de:	6834      	ldr	r4, [r6, #0]
 80099e0:	4626      	mov	r6, r4
 80099e2:	2e00      	cmp	r6, #0
 80099e4:	d140      	bne.n	8009a68 <_malloc_r+0xcc>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	4631      	mov	r1, r6
 80099ea:	4638      	mov	r0, r7
 80099ec:	eb04 0803 	add.w	r8, r4, r3
 80099f0:	f000 f848 	bl	8009a84 <_sbrk_r>
 80099f4:	4580      	cmp	r8, r0
 80099f6:	d13a      	bne.n	8009a6e <_malloc_r+0xd2>
 80099f8:	6821      	ldr	r1, [r4, #0]
 80099fa:	3503      	adds	r5, #3
 80099fc:	1a6d      	subs	r5, r5, r1
 80099fe:	f025 0503 	bic.w	r5, r5, #3
 8009a02:	3508      	adds	r5, #8
 8009a04:	2d0c      	cmp	r5, #12
 8009a06:	bf38      	it	cc
 8009a08:	250c      	movcc	r5, #12
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f7ff ffa5 	bl	800995c <sbrk_aligned>
 8009a12:	3001      	adds	r0, #1
 8009a14:	d02b      	beq.n	8009a6e <_malloc_r+0xd2>
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	442b      	add	r3, r5
 8009a1a:	6023      	str	r3, [r4, #0]
 8009a1c:	e00e      	b.n	8009a3c <_malloc_r+0xa0>
 8009a1e:	6822      	ldr	r2, [r4, #0]
 8009a20:	1b52      	subs	r2, r2, r5
 8009a22:	d41e      	bmi.n	8009a62 <_malloc_r+0xc6>
 8009a24:	2a0b      	cmp	r2, #11
 8009a26:	d916      	bls.n	8009a56 <_malloc_r+0xba>
 8009a28:	1961      	adds	r1, r4, r5
 8009a2a:	42a3      	cmp	r3, r4
 8009a2c:	6025      	str	r5, [r4, #0]
 8009a2e:	bf18      	it	ne
 8009a30:	6059      	strne	r1, [r3, #4]
 8009a32:	6863      	ldr	r3, [r4, #4]
 8009a34:	bf08      	it	eq
 8009a36:	6031      	streq	r1, [r6, #0]
 8009a38:	5162      	str	r2, [r4, r5]
 8009a3a:	604b      	str	r3, [r1, #4]
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f104 060b 	add.w	r6, r4, #11
 8009a42:	f000 f835 	bl	8009ab0 <__malloc_unlock>
 8009a46:	f026 0607 	bic.w	r6, r6, #7
 8009a4a:	1d23      	adds	r3, r4, #4
 8009a4c:	1af2      	subs	r2, r6, r3
 8009a4e:	d0b6      	beq.n	80099be <_malloc_r+0x22>
 8009a50:	1b9b      	subs	r3, r3, r6
 8009a52:	50a3      	str	r3, [r4, r2]
 8009a54:	e7b3      	b.n	80099be <_malloc_r+0x22>
 8009a56:	6862      	ldr	r2, [r4, #4]
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	bf0c      	ite	eq
 8009a5c:	6032      	streq	r2, [r6, #0]
 8009a5e:	605a      	strne	r2, [r3, #4]
 8009a60:	e7ec      	b.n	8009a3c <_malloc_r+0xa0>
 8009a62:	4623      	mov	r3, r4
 8009a64:	6864      	ldr	r4, [r4, #4]
 8009a66:	e7b2      	b.n	80099ce <_malloc_r+0x32>
 8009a68:	4634      	mov	r4, r6
 8009a6a:	6876      	ldr	r6, [r6, #4]
 8009a6c:	e7b9      	b.n	80099e2 <_malloc_r+0x46>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	603b      	str	r3, [r7, #0]
 8009a72:	4638      	mov	r0, r7
 8009a74:	f000 f81c 	bl	8009ab0 <__malloc_unlock>
 8009a78:	e7a1      	b.n	80099be <_malloc_r+0x22>
 8009a7a:	6025      	str	r5, [r4, #0]
 8009a7c:	e7de      	b.n	8009a3c <_malloc_r+0xa0>
 8009a7e:	bf00      	nop
 8009a80:	200009d8 	.word	0x200009d8

08009a84 <_sbrk_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	4d06      	ldr	r5, [pc, #24]	; (8009aa0 <_sbrk_r+0x1c>)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	602b      	str	r3, [r5, #0]
 8009a90:	f7f7 fbb4 	bl	80011fc <_sbrk>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_sbrk_r+0x1a>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_sbrk_r+0x1a>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	200009e0 	.word	0x200009e0

08009aa4 <__malloc_lock>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__malloc_lock+0x8>)
 8009aa6:	f000 b809 	b.w	8009abc <__retarget_lock_acquire_recursive>
 8009aaa:	bf00      	nop
 8009aac:	200009e4 	.word	0x200009e4

08009ab0 <__malloc_unlock>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	; (8009ab8 <__malloc_unlock+0x8>)
 8009ab2:	f000 b804 	b.w	8009abe <__retarget_lock_release_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	200009e4 	.word	0x200009e4

08009abc <__retarget_lock_acquire_recursive>:
 8009abc:	4770      	bx	lr

08009abe <__retarget_lock_release_recursive>:
 8009abe:	4770      	bx	lr

08009ac0 <_init>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	bf00      	nop
 8009ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	469e      	mov	lr, r3
 8009aca:	4770      	bx	lr

08009acc <_fini>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr

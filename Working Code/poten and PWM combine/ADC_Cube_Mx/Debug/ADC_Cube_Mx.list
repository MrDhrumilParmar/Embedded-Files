
ADC_Cube_Mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800a884  0800a884  0001a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a8  0800a8a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8b0  0800a8b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8b0  0800a8b0  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000904  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000994  20000994  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d75b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004329  00000000  00000000  0003d81b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a0  00000000  00000000  00041b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e0  00000000  00000000  000433e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261dd  00000000  00000000  00044ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020383  00000000  00000000  0006aca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0aae  00000000  00000000  0008b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016bad6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bb8  00000000  00000000  0016bb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a86c 	.word	0x0800a86c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800a86c 	.word	0x0800a86c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2uiz>:
 8000794:	004a      	lsls	r2, r1, #1
 8000796:	d211      	bcs.n	80007bc <__aeabi_d2uiz+0x28>
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d211      	bcs.n	80007c2 <__aeabi_d2uiz+0x2e>
 800079e:	d50d      	bpl.n	80007bc <__aeabi_d2uiz+0x28>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d40e      	bmi.n	80007c8 <__aeabi_d2uiz+0x34>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	fa23 f002 	lsr.w	r0, r3, r2
 80007ba:	4770      	bx	lr
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	4770      	bx	lr
 80007c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007c6:	d102      	bne.n	80007ce <__aeabi_d2uiz+0x3a>
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_uldivmod>:
 80007d4:	b953      	cbnz	r3, 80007ec <__aeabi_uldivmod+0x18>
 80007d6:	b94a      	cbnz	r2, 80007ec <__aeabi_uldivmod+0x18>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bf08      	it	eq
 80007dc:	2800      	cmpeq	r0, #0
 80007de:	bf1c      	itt	ne
 80007e0:	f04f 31ff 	movne.w	r1, #4294967295
 80007e4:	f04f 30ff 	movne.w	r0, #4294967295
 80007e8:	f000 b974 	b.w	8000ad4 <__aeabi_idiv0>
 80007ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80007f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007f4:	f000 f806 	bl	8000804 <__udivmoddi4>
 80007f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr

08000804 <__udivmoddi4>:
 8000804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000808:	9d08      	ldr	r5, [sp, #32]
 800080a:	4604      	mov	r4, r0
 800080c:	468e      	mov	lr, r1
 800080e:	2b00      	cmp	r3, #0
 8000810:	d14d      	bne.n	80008ae <__udivmoddi4+0xaa>
 8000812:	428a      	cmp	r2, r1
 8000814:	4694      	mov	ip, r2
 8000816:	d969      	bls.n	80008ec <__udivmoddi4+0xe8>
 8000818:	fab2 f282 	clz	r2, r2
 800081c:	b152      	cbz	r2, 8000834 <__udivmoddi4+0x30>
 800081e:	fa01 f302 	lsl.w	r3, r1, r2
 8000822:	f1c2 0120 	rsb	r1, r2, #32
 8000826:	fa20 f101 	lsr.w	r1, r0, r1
 800082a:	fa0c fc02 	lsl.w	ip, ip, r2
 800082e:	ea41 0e03 	orr.w	lr, r1, r3
 8000832:	4094      	lsls	r4, r2
 8000834:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000838:	0c21      	lsrs	r1, r4, #16
 800083a:	fbbe f6f8 	udiv	r6, lr, r8
 800083e:	fa1f f78c 	uxth.w	r7, ip
 8000842:	fb08 e316 	mls	r3, r8, r6, lr
 8000846:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800084a:	fb06 f107 	mul.w	r1, r6, r7
 800084e:	4299      	cmp	r1, r3
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x64>
 8000852:	eb1c 0303 	adds.w	r3, ip, r3
 8000856:	f106 30ff 	add.w	r0, r6, #4294967295
 800085a:	f080 811f 	bcs.w	8000a9c <__udivmoddi4+0x298>
 800085e:	4299      	cmp	r1, r3
 8000860:	f240 811c 	bls.w	8000a9c <__udivmoddi4+0x298>
 8000864:	3e02      	subs	r6, #2
 8000866:	4463      	add	r3, ip
 8000868:	1a5b      	subs	r3, r3, r1
 800086a:	b2a4      	uxth	r4, r4
 800086c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000870:	fb08 3310 	mls	r3, r8, r0, r3
 8000874:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000878:	fb00 f707 	mul.w	r7, r0, r7
 800087c:	42a7      	cmp	r7, r4
 800087e:	d90a      	bls.n	8000896 <__udivmoddi4+0x92>
 8000880:	eb1c 0404 	adds.w	r4, ip, r4
 8000884:	f100 33ff 	add.w	r3, r0, #4294967295
 8000888:	f080 810a 	bcs.w	8000aa0 <__udivmoddi4+0x29c>
 800088c:	42a7      	cmp	r7, r4
 800088e:	f240 8107 	bls.w	8000aa0 <__udivmoddi4+0x29c>
 8000892:	4464      	add	r4, ip
 8000894:	3802      	subs	r0, #2
 8000896:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800089a:	1be4      	subs	r4, r4, r7
 800089c:	2600      	movs	r6, #0
 800089e:	b11d      	cbz	r5, 80008a8 <__udivmoddi4+0xa4>
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	2300      	movs	r3, #0
 80008a4:	e9c5 4300 	strd	r4, r3, [r5]
 80008a8:	4631      	mov	r1, r6
 80008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ae:	428b      	cmp	r3, r1
 80008b0:	d909      	bls.n	80008c6 <__udivmoddi4+0xc2>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	f000 80ef 	beq.w	8000a96 <__udivmoddi4+0x292>
 80008b8:	2600      	movs	r6, #0
 80008ba:	e9c5 0100 	strd	r0, r1, [r5]
 80008be:	4630      	mov	r0, r6
 80008c0:	4631      	mov	r1, r6
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	fab3 f683 	clz	r6, r3
 80008ca:	2e00      	cmp	r6, #0
 80008cc:	d14a      	bne.n	8000964 <__udivmoddi4+0x160>
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d302      	bcc.n	80008d8 <__udivmoddi4+0xd4>
 80008d2:	4282      	cmp	r2, r0
 80008d4:	f200 80f9 	bhi.w	8000aca <__udivmoddi4+0x2c6>
 80008d8:	1a84      	subs	r4, r0, r2
 80008da:	eb61 0303 	sbc.w	r3, r1, r3
 80008de:	2001      	movs	r0, #1
 80008e0:	469e      	mov	lr, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d0e0      	beq.n	80008a8 <__udivmoddi4+0xa4>
 80008e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80008ea:	e7dd      	b.n	80008a8 <__udivmoddi4+0xa4>
 80008ec:	b902      	cbnz	r2, 80008f0 <__udivmoddi4+0xec>
 80008ee:	deff      	udf	#255	; 0xff
 80008f0:	fab2 f282 	clz	r2, r2
 80008f4:	2a00      	cmp	r2, #0
 80008f6:	f040 8092 	bne.w	8000a1e <__udivmoddi4+0x21a>
 80008fa:	eba1 010c 	sub.w	r1, r1, ip
 80008fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000902:	fa1f fe8c 	uxth.w	lr, ip
 8000906:	2601      	movs	r6, #1
 8000908:	0c20      	lsrs	r0, r4, #16
 800090a:	fbb1 f3f7 	udiv	r3, r1, r7
 800090e:	fb07 1113 	mls	r1, r7, r3, r1
 8000912:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000916:	fb0e f003 	mul.w	r0, lr, r3
 800091a:	4288      	cmp	r0, r1
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x12c>
 800091e:	eb1c 0101 	adds.w	r1, ip, r1
 8000922:	f103 38ff 	add.w	r8, r3, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x12a>
 8000928:	4288      	cmp	r0, r1
 800092a:	f200 80cb 	bhi.w	8000ac4 <__udivmoddi4+0x2c0>
 800092e:	4643      	mov	r3, r8
 8000930:	1a09      	subs	r1, r1, r0
 8000932:	b2a4      	uxth	r4, r4
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1110 	mls	r1, r7, r0, r1
 800093c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000940:	fb0e fe00 	mul.w	lr, lr, r0
 8000944:	45a6      	cmp	lr, r4
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x156>
 8000948:	eb1c 0404 	adds.w	r4, ip, r4
 800094c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000950:	d202      	bcs.n	8000958 <__udivmoddi4+0x154>
 8000952:	45a6      	cmp	lr, r4
 8000954:	f200 80bb 	bhi.w	8000ace <__udivmoddi4+0x2ca>
 8000958:	4608      	mov	r0, r1
 800095a:	eba4 040e 	sub.w	r4, r4, lr
 800095e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000962:	e79c      	b.n	800089e <__udivmoddi4+0x9a>
 8000964:	f1c6 0720 	rsb	r7, r6, #32
 8000968:	40b3      	lsls	r3, r6
 800096a:	fa22 fc07 	lsr.w	ip, r2, r7
 800096e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000972:	fa20 f407 	lsr.w	r4, r0, r7
 8000976:	fa01 f306 	lsl.w	r3, r1, r6
 800097a:	431c      	orrs	r4, r3
 800097c:	40f9      	lsrs	r1, r7
 800097e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000982:	fa00 f306 	lsl.w	r3, r0, r6
 8000986:	fbb1 f8f9 	udiv	r8, r1, r9
 800098a:	0c20      	lsrs	r0, r4, #16
 800098c:	fa1f fe8c 	uxth.w	lr, ip
 8000990:	fb09 1118 	mls	r1, r9, r8, r1
 8000994:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000998:	fb08 f00e 	mul.w	r0, r8, lr
 800099c:	4288      	cmp	r0, r1
 800099e:	fa02 f206 	lsl.w	r2, r2, r6
 80009a2:	d90b      	bls.n	80009bc <__udivmoddi4+0x1b8>
 80009a4:	eb1c 0101 	adds.w	r1, ip, r1
 80009a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ac:	f080 8088 	bcs.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b0:	4288      	cmp	r0, r1
 80009b2:	f240 8085 	bls.w	8000ac0 <__udivmoddi4+0x2bc>
 80009b6:	f1a8 0802 	sub.w	r8, r8, #2
 80009ba:	4461      	add	r1, ip
 80009bc:	1a09      	subs	r1, r1, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009c4:	fb09 1110 	mls	r1, r9, r0, r1
 80009c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d0:	458e      	cmp	lr, r1
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x1e2>
 80009d4:	eb1c 0101 	adds.w	r1, ip, r1
 80009d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009dc:	d26c      	bcs.n	8000ab8 <__udivmoddi4+0x2b4>
 80009de:	458e      	cmp	lr, r1
 80009e0:	d96a      	bls.n	8000ab8 <__udivmoddi4+0x2b4>
 80009e2:	3802      	subs	r0, #2
 80009e4:	4461      	add	r1, ip
 80009e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009ea:	fba0 9402 	umull	r9, r4, r0, r2
 80009ee:	eba1 010e 	sub.w	r1, r1, lr
 80009f2:	42a1      	cmp	r1, r4
 80009f4:	46c8      	mov	r8, r9
 80009f6:	46a6      	mov	lr, r4
 80009f8:	d356      	bcc.n	8000aa8 <__udivmoddi4+0x2a4>
 80009fa:	d053      	beq.n	8000aa4 <__udivmoddi4+0x2a0>
 80009fc:	b15d      	cbz	r5, 8000a16 <__udivmoddi4+0x212>
 80009fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000a02:	eb61 010e 	sbc.w	r1, r1, lr
 8000a06:	fa01 f707 	lsl.w	r7, r1, r7
 8000a0a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a0e:	40f1      	lsrs	r1, r6
 8000a10:	431f      	orrs	r7, r3
 8000a12:	e9c5 7100 	strd	r7, r1, [r5]
 8000a16:	2600      	movs	r6, #0
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	f1c2 0320 	rsb	r3, r2, #32
 8000a22:	40d8      	lsrs	r0, r3
 8000a24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a28:	fa21 f303 	lsr.w	r3, r1, r3
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	4301      	orrs	r1, r0
 8000a30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a3c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a40:	0c0b      	lsrs	r3, r1, #16
 8000a42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a46:	fb00 f60e 	mul.w	r6, r0, lr
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a50:	d908      	bls.n	8000a64 <__udivmoddi4+0x260>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a5a:	d22f      	bcs.n	8000abc <__udivmoddi4+0x2b8>
 8000a5c:	429e      	cmp	r6, r3
 8000a5e:	d92d      	bls.n	8000abc <__udivmoddi4+0x2b8>
 8000a60:	3802      	subs	r0, #2
 8000a62:	4463      	add	r3, ip
 8000a64:	1b9b      	subs	r3, r3, r6
 8000a66:	b289      	uxth	r1, r1
 8000a68:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a6c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a74:	fb06 f30e 	mul.w	r3, r6, lr
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x28a>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a84:	d216      	bcs.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a86:	428b      	cmp	r3, r1
 8000a88:	d914      	bls.n	8000ab4 <__udivmoddi4+0x2b0>
 8000a8a:	3e02      	subs	r6, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	1ac9      	subs	r1, r1, r3
 8000a90:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a94:	e738      	b.n	8000908 <__udivmoddi4+0x104>
 8000a96:	462e      	mov	r6, r5
 8000a98:	4628      	mov	r0, r5
 8000a9a:	e705      	b.n	80008a8 <__udivmoddi4+0xa4>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	e6e3      	b.n	8000868 <__udivmoddi4+0x64>
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	e6f8      	b.n	8000896 <__udivmoddi4+0x92>
 8000aa4:	454b      	cmp	r3, r9
 8000aa6:	d2a9      	bcs.n	80009fc <__udivmoddi4+0x1f8>
 8000aa8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aac:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ab0:	3801      	subs	r0, #1
 8000ab2:	e7a3      	b.n	80009fc <__udivmoddi4+0x1f8>
 8000ab4:	4646      	mov	r6, r8
 8000ab6:	e7ea      	b.n	8000a8e <__udivmoddi4+0x28a>
 8000ab8:	4620      	mov	r0, r4
 8000aba:	e794      	b.n	80009e6 <__udivmoddi4+0x1e2>
 8000abc:	4640      	mov	r0, r8
 8000abe:	e7d1      	b.n	8000a64 <__udivmoddi4+0x260>
 8000ac0:	46d0      	mov	r8, sl
 8000ac2:	e77b      	b.n	80009bc <__udivmoddi4+0x1b8>
 8000ac4:	3b02      	subs	r3, #2
 8000ac6:	4461      	add	r1, ip
 8000ac8:	e732      	b.n	8000930 <__udivmoddi4+0x12c>
 8000aca:	4630      	mov	r0, r6
 8000acc:	e709      	b.n	80008e2 <__udivmoddi4+0xde>
 8000ace:	4464      	add	r4, ip
 8000ad0:	3802      	subs	r0, #2
 8000ad2:	e742      	b.n	800095a <__udivmoddi4+0x156>

08000ad4 <__aeabi_idiv0>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <main>:
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	f000 fe9e 	bl	800181c <HAL_Init>
 8000ae0:	f000 f85c 	bl	8000b9c <SystemClock_Config>
 8000ae4:	f000 fab8 	bl	8001058 <MX_GPIO_Init>
 8000ae8:	f000 fa96 	bl	8001018 <MX_DMA_Init>
 8000aec:	f000 f974 	bl	8000dd8 <MX_I2C1_Init>
 8000af0:	f000 f9a0 	bl	8000e34 <MX_I2S3_Init>
 8000af4:	f000 f9ce 	bl	8000e94 <MX_SPI1_Init>
 8000af8:	f009 fa70 	bl	8009fdc <MX_USB_HOST_Init>
 8000afc:	f000 f8c0 	bl	8000c80 <MX_ADC1_Init>
 8000b00:	f000 f9fe 	bl	8000f00 <MX_TIM4_Init>
 8000b04:	f009 fa90 	bl	800a028 <MX_USB_HOST_Process>
 8000b08:	481f      	ldr	r0, [pc, #124]	; (8000b88 <main+0xb0>)
 8000b0a:	f000 ff61 	bl	80019d0 <HAL_ADC_Start>
 8000b0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b12:	481d      	ldr	r0, [pc, #116]	; (8000b88 <main+0xb0>)
 8000b14:	f001 f82e 	bl	8001b74 <HAL_ADC_PollForConversion>
 8000b18:	481b      	ldr	r0, [pc, #108]	; (8000b88 <main+0xb0>)
 8000b1a:	f001 f9c6 	bl	8001eaa <HAL_ADC_GetValue>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a1a      	ldr	r2, [pc, #104]	; (8000b8c <main+0xb4>)
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	4818      	ldr	r0, [pc, #96]	; (8000b88 <main+0xb0>)
 8000b26:	f001 f9c0 	bl	8001eaa <HAL_ADC_GetValue>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <main+0xb8>)
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <main+0xb4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fdb3 	bl	80006a0 <__aeabi_ui2d>
 8000b3a:	a311      	add	r3, pc, #68	; (adr r3, 8000b80 <main+0xa8>)
 8000b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b40:	f7ff fb42 	bl	80001c8 <__aeabi_dmul>
 8000b44:	4602      	mov	r2, r0
 8000b46:	460b      	mov	r3, r1
 8000b48:	4610      	mov	r0, r2
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f7ff fe22 	bl	8000794 <__aeabi_d2uiz>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <main+0xbc>)
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	2104      	movs	r1, #4
 8000b58:	480f      	ldr	r0, [pc, #60]	; (8000b98 <main+0xc0>)
 8000b5a:	f005 fc8d 	bl	8006478 <HAL_TIM_PWM_Start>
 8000b5e:	2108      	movs	r1, #8
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <main+0xc0>)
 8000b62:	f005 fc89 	bl	8006478 <HAL_TIM_PWM_Start>
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <main+0xc0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <main+0xbc>)
 8000b6c:	6812      	ldr	r2, [r2, #0]
 8000b6e:	639a      	str	r2, [r3, #56]	; 0x38
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <main+0xc0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a07      	ldr	r2, [pc, #28]	; (8000b94 <main+0xbc>)
 8000b76:	6812      	ldr	r2, [r2, #0]
 8000b78:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b7a:	e7c5      	b.n	8000b08 <main+0x30>
 8000b7c:	f3af 8000 	nop.w
 8000b80:	eb851eb8 	.word	0xeb851eb8
 8000b84:	3fceb851 	.word	0x3fceb851
 8000b88:	200000ac 	.word	0x200000ac
 8000b8c:	20000298 	.word	0x20000298
 8000b90:	20000294 	.word	0x20000294
 8000b94:	20000290 	.word	0x20000290
 8000b98:	200001e8 	.word	0x200001e8

08000b9c <SystemClock_Config>:
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	; 0x50
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	2230      	movs	r2, #48	; 0x30
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f009 fd58 	bl	800a660 <memset>
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b2c      	ldr	r3, [pc, #176]	; (8000c78 <SystemClock_Config+0xdc>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a2b      	ldr	r2, [pc, #172]	; (8000c78 <SystemClock_Config+0xdc>)
 8000bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b29      	ldr	r3, [pc, #164]	; (8000c78 <SystemClock_Config+0xdc>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <SystemClock_Config+0xe0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a25      	ldr	r2, [pc, #148]	; (8000c7c <SystemClock_Config+0xe0>)
 8000be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <SystemClock_Config+0xe0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
 8000bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
 8000c02:	2301      	movs	r3, #1
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c06:	2310      	movs	r3, #16
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c14:	2304      	movs	r3, #4
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
 8000c18:	2348      	movs	r3, #72	; 0x48
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000c20:	2303      	movs	r3, #3
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 fcc7 	bl	80055bc <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x9c>
 8000c34:	f000 fb1e 	bl	8001274 <Error_Handler>
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	f107 030c 	add.w	r3, r7, #12
 8000c54:	2102      	movs	r1, #2
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 ff28 	bl	8005aac <HAL_RCC_ClockConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xca>
 8000c62:	f000 fb07 	bl	8001274 <Error_Handler>
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f005 f804 	bl	8005c78 <HAL_RCC_MCOConfig>
 8000c70:	bf00      	nop
 8000c72:	3750      	adds	r7, #80	; 0x50
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40007000 	.word	0x40007000

08000c80 <MX_ADC1_Init>:
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	; 0x30
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	463b      	mov	r3, r7
 8000c96:	2220      	movs	r2, #32
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f009 fce0 	bl	800a660 <memset>
 8000ca0:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000ca2:	4a4a      	ldr	r2, [pc, #296]	; (8000dcc <MX_ADC1_Init+0x14c>)
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	4b48      	ldr	r3, [pc, #288]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000ca8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4b44      	ldr	r3, [pc, #272]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	761a      	strb	r2, [r3, #24]
 8000cc0:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2020 	strb.w	r2, [r3, #32]
 8000cc8:	4b3f      	ldr	r3, [pc, #252]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cce:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cd0:	4a3f      	ldr	r2, [pc, #252]	; (8000dd0 <MX_ADC1_Init+0x150>)
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8000cd4:	4b3c      	ldr	r3, [pc, #240]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cdc:	2202      	movs	r2, #2
 8000cde:	61da      	str	r2, [r3, #28]
 8000ce0:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8000ce8:	4b37      	ldr	r3, [pc, #220]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000cf0:	f000 fe2a 	bl	8001948 <HAL_ADC_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_ADC1_Init+0x7e>
 8000cfa:	f000 fabb 	bl	8001274 <Error_Handler>
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
 8000d02:	2301      	movs	r3, #1
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	4619      	mov	r1, r3
 8000d10:	482d      	ldr	r0, [pc, #180]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000d12:	f001 f8f5 	bl	8001f00 <HAL_ADC_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0xa0>
 8000d1c:	f000 faaa 	bl	8001274 <Error_Handler>
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
 8000d24:	2302      	movs	r3, #2
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
 8000d28:	f107 0320 	add.w	r3, r7, #32
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4826      	ldr	r0, [pc, #152]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000d30:	f001 f8e6 	bl	8001f00 <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0xbe>
 8000d3a:	f000 fa9b 	bl	8001274 <Error_Handler>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	2304      	movs	r3, #4
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_ADC1_Init+0x154>)
 8000d54:	61bb      	str	r3, [r7, #24]
 8000d56:	2300      	movs	r3, #0
 8000d58:	757b      	strb	r3, [r7, #21]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	753b      	strb	r3, [r7, #20]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000d68:	f001 faf2 	bl	8002350 <HAL_ADCEx_InjectedConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC1_Init+0xf6>
 8000d72:	f000 fa7f 	bl	8001274 <Error_Handler>
 8000d76:	2302      	movs	r3, #2
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4812      	ldr	r0, [pc, #72]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000d80:	f001 fae6 	bl	8002350 <HAL_ADCEx_InjectedConfigChannel>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC1_Init+0x10e>
 8000d8a:	f000 fa73 	bl	8001274 <Error_Handler>
 8000d8e:	2303      	movs	r3, #3
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	463b      	mov	r3, r7
 8000d94:	4619      	mov	r1, r3
 8000d96:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000d98:	f001 fada 	bl	8002350 <HAL_ADCEx_InjectedConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0x126>
 8000da2:	f000 fa67 	bl	8001274 <Error_Handler>
 8000da6:	2304      	movs	r3, #4
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	463b      	mov	r3, r7
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <MX_ADC1_Init+0x148>)
 8000db0:	f001 face 	bl	8002350 <HAL_ADCEx_InjectedConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC1_Init+0x13e>
 8000dba:	f000 fa5b 	bl	8001274 <Error_Handler>
 8000dbe:	bf00      	nop
 8000dc0:	3730      	adds	r7, #48	; 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000ac 	.word	0x200000ac
 8000dcc:	40012000 	.word	0x40012000
 8000dd0:	0f000001 	.word	0x0f000001
 8000dd4:	000f0001 	.word	0x000f0001

08000dd8 <MX_I2C1_Init>:
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <MX_I2C1_Init+0x54>)
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_I2C1_Init+0x58>)
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
 8000e08:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	621a      	str	r2, [r3, #32]
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <MX_I2C1_Init+0x50>)
 8000e16:	f003 fded 	bl	80049f4 <HAL_I2C_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_I2C1_Init+0x4c>
 8000e20:	f000 fa28 	bl	8001274 <Error_Handler>
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200000f4 	.word	0x200000f4
 8000e2c:	40005400 	.word	0x40005400
 8000e30:	000186a0 	.word	0x000186a0

08000e34 <MX_I2S3_Init>:
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e3a:	4a14      	ldr	r2, [pc, #80]	; (8000e8c <MX_I2S3_Init+0x58>)
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	611a      	str	r2, [r3, #16]
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e5c:	4a0c      	ldr	r2, [pc, #48]	; (8000e90 <MX_I2S3_Init+0x5c>)
 8000e5e:	615a      	str	r2, [r3, #20]
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_I2S3_Init+0x54>)
 8000e74:	f003 ff02 	bl	8004c7c <HAL_I2S_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_I2S3_Init+0x4e>
 8000e7e:	f000 f9f9 	bl	8001274 <Error_Handler>
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000148 	.word	0x20000148
 8000e8c:	40003c00 	.word	0x40003c00
 8000e90:	00017700 	.word	0x00017700

08000e94 <MX_SPI1_Init>:
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <MX_SPI1_Init+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ea0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ec4:	619a      	str	r2, [r3, #24]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	621a      	str	r2, [r3, #32]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ee0:	220a      	movs	r2, #10
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_SPI1_Init+0x64>)
 8000ee6:	f005 f995 	bl	8006214 <HAL_SPI_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_SPI1_Init+0x60>
 8000ef0:	f000 f9c0 	bl	8001274 <Error_Handler>
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000190 	.word	0x20000190
 8000efc:	40013000 	.word	0x40013000

08000f00 <MX_TIM4_Init>:
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	; 0x38
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
 8000f2c:	615a      	str	r2, [r3, #20]
 8000f2e:	619a      	str	r2, [r3, #24]
 8000f30:	4b37      	ldr	r3, [pc, #220]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f32:	4a38      	ldr	r2, [pc, #224]	; (8001014 <MX_TIM4_Init+0x114>)
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f38:	221f      	movs	r2, #31
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	4b33      	ldr	r3, [pc, #204]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f52:	2280      	movs	r2, #128	; 0x80
 8000f54:	619a      	str	r2, [r3, #24]
 8000f56:	482e      	ldr	r0, [pc, #184]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f58:	f005 f9e5 	bl	8006326 <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM4_Init+0x66>
 8000f62:	f000 f987 	bl	8001274 <Error_Handler>
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4827      	ldr	r0, [pc, #156]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f74:	f005 fc0a 	bl	800678c <HAL_TIM_ConfigClockSource>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM4_Init+0x82>
 8000f7e:	f000 f979 	bl	8001274 <Error_Handler>
 8000f82:	4823      	ldr	r0, [pc, #140]	; (8001010 <MX_TIM4_Init+0x110>)
 8000f84:	f005 fa1e 	bl	80063c4 <HAL_TIM_PWM_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM4_Init+0x92>
 8000f8e:	f000 f971 	bl	8001274 <Error_Handler>
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
 8000f9a:	f107 0320 	add.w	r3, r7, #32
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481b      	ldr	r0, [pc, #108]	; (8001010 <MX_TIM4_Init+0x110>)
 8000fa2:	f005 ffcb 	bl	8006f3c <HAL_TIMEx_MasterConfigSynchronization>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM4_Init+0xb0>
 8000fac:	f000 f962 	bl	8001274 <Error_Handler>
 8000fb0:	2360      	movs	r3, #96	; 0x60
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	2364      	movs	r3, #100	; 0x64
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	1d3b      	adds	r3, r7, #4
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4812      	ldr	r0, [pc, #72]	; (8001010 <MX_TIM4_Init+0x110>)
 8000fc8:	f005 fb1e 	bl	8006608 <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM4_Init+0xd6>
 8000fd2:	f000 f94f 	bl	8001274 <Error_Handler>
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <MX_TIM4_Init+0x110>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	699a      	ldr	r2, [r3, #24]
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_TIM4_Init+0x110>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fe4:	619a      	str	r2, [r3, #24]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2208      	movs	r2, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <MX_TIM4_Init+0x110>)
 8000ff2:	f005 fb09 	bl	8006608 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM4_Init+0x100>
 8000ffc:	f000 f93a 	bl	8001274 <Error_Handler>
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM4_Init+0x110>)
 8001002:	f000 fb17 	bl	8001634 <HAL_TIM_MspPostInit>
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001e8 	.word	0x200001e8
 8001014:	40000800 	.word	0x40000800

08001018 <MX_DMA_Init>:
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_DMA_Init+0x3c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <MX_DMA_Init+0x3c>)
 8001028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_DMA_Init+0x3c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	200e      	movs	r0, #14
 8001040:	f001 fbf7 	bl	8002832 <HAL_NVIC_SetPriority>
 8001044:	200e      	movs	r0, #14
 8001046:	f001 fc10 	bl	800286a <HAL_NVIC_EnableIRQ>
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <MX_GPIO_Init>:
 8001058:	b580      	push	{r7, lr}
 800105a:	b08c      	sub	sp, #48	; 0x30
 800105c:	af00      	add	r7, sp, #0
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
 8001072:	4b7a      	ldr	r3, [pc, #488]	; (800125c <MX_GPIO_Init+0x204>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a79      	ldr	r2, [pc, #484]	; (800125c <MX_GPIO_Init+0x204>)
 8001078:	f043 0310 	orr.w	r3, r3, #16
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b77      	ldr	r3, [pc, #476]	; (800125c <MX_GPIO_Init+0x204>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0310 	and.w	r3, r3, #16
 8001086:	61bb      	str	r3, [r7, #24]
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
 800108e:	4b73      	ldr	r3, [pc, #460]	; (800125c <MX_GPIO_Init+0x204>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a72      	ldr	r2, [pc, #456]	; (800125c <MX_GPIO_Init+0x204>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b70      	ldr	r3, [pc, #448]	; (800125c <MX_GPIO_Init+0x204>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b6c      	ldr	r3, [pc, #432]	; (800125c <MX_GPIO_Init+0x204>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a6b      	ldr	r2, [pc, #428]	; (800125c <MX_GPIO_Init+0x204>)
 80010b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b69      	ldr	r3, [pc, #420]	; (800125c <MX_GPIO_Init+0x204>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b65      	ldr	r3, [pc, #404]	; (800125c <MX_GPIO_Init+0x204>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a64      	ldr	r2, [pc, #400]	; (800125c <MX_GPIO_Init+0x204>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b62      	ldr	r3, [pc, #392]	; (800125c <MX_GPIO_Init+0x204>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	4b5e      	ldr	r3, [pc, #376]	; (800125c <MX_GPIO_Init+0x204>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a5d      	ldr	r2, [pc, #372]	; (800125c <MX_GPIO_Init+0x204>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b5b      	ldr	r3, [pc, #364]	; (800125c <MX_GPIO_Init+0x204>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2300      	movs	r3, #0
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4b57      	ldr	r3, [pc, #348]	; (800125c <MX_GPIO_Init+0x204>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a56      	ldr	r2, [pc, #344]	; (800125c <MX_GPIO_Init+0x204>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b54      	ldr	r3, [pc, #336]	; (800125c <MX_GPIO_Init+0x204>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	607b      	str	r3, [r7, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	2108      	movs	r1, #8
 800111a:	4851      	ldr	r0, [pc, #324]	; (8001260 <MX_GPIO_Init+0x208>)
 800111c:	f002 f846 	bl	80031ac <HAL_GPIO_WritePin>
 8001120:	2201      	movs	r2, #1
 8001122:	2101      	movs	r1, #1
 8001124:	484f      	ldr	r0, [pc, #316]	; (8001264 <MX_GPIO_Init+0x20c>)
 8001126:	f002 f841 	bl	80031ac <HAL_GPIO_WritePin>
 800112a:	2200      	movs	r2, #0
 800112c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001130:	484d      	ldr	r0, [pc, #308]	; (8001268 <MX_GPIO_Init+0x210>)
 8001132:	f002 f83b 	bl	80031ac <HAL_GPIO_WritePin>
 8001136:	2308      	movs	r3, #8
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	2301      	movs	r3, #1
 800113c:	623b      	str	r3, [r7, #32]
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4844      	ldr	r0, [pc, #272]	; (8001260 <MX_GPIO_Init+0x208>)
 800114e:	f001 fe91 	bl	8002e74 <HAL_GPIO_Init>
 8001152:	2301      	movs	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	2301      	movs	r3, #1
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	2300      	movs	r3, #0
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	483e      	ldr	r0, [pc, #248]	; (8001264 <MX_GPIO_Init+0x20c>)
 800116a:	f001 fe83 	bl	8002e74 <HAL_GPIO_Init>
 800116e:	2308      	movs	r3, #8
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	2302      	movs	r3, #2
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	2300      	movs	r3, #0
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
 800117e:	2305      	movs	r3, #5
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4836      	ldr	r0, [pc, #216]	; (8001264 <MX_GPIO_Init+0x20c>)
 800118a:	f001 fe73 	bl	8002e74 <HAL_GPIO_Init>
 800118e:	2301      	movs	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4832      	ldr	r0, [pc, #200]	; (800126c <MX_GPIO_Init+0x214>)
 80011a4:	f001 fe66 	bl	8002e74 <HAL_GPIO_Init>
 80011a8:	2304      	movs	r3, #4
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	2300      	movs	r3, #0
 80011ae:	623b      	str	r3, [r7, #32]
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	482d      	ldr	r0, [pc, #180]	; (8001270 <MX_GPIO_Init+0x218>)
 80011bc:	f001 fe5a 	bl	8002e74 <HAL_GPIO_Init>
 80011c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	2302      	movs	r3, #2
 80011c8:	623b      	str	r3, [r7, #32]
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	2300      	movs	r3, #0
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d2:	2305      	movs	r3, #5
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4824      	ldr	r0, [pc, #144]	; (8001270 <MX_GPIO_Init+0x218>)
 80011de:	f001 fe49 	bl	8002e74 <HAL_GPIO_Init>
 80011e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	481b      	ldr	r0, [pc, #108]	; (8001268 <MX_GPIO_Init+0x210>)
 80011fc:	f001 fe3a 	bl	8002e74 <HAL_GPIO_Init>
 8001200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	2302      	movs	r3, #2
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
 800120e:	2300      	movs	r3, #0
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	4813      	ldr	r0, [pc, #76]	; (800126c <MX_GPIO_Init+0x214>)
 800121e:	f001 fe29 	bl	8002e74 <HAL_GPIO_Init>
 8001222:	2320      	movs	r3, #32
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <MX_GPIO_Init+0x210>)
 8001236:	f001 fe1d 	bl	8002e74 <HAL_GPIO_Init>
 800123a:	2302      	movs	r3, #2
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001242:	623b      	str	r3, [r7, #32]
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
 8001248:	f107 031c 	add.w	r3, r7, #28
 800124c:	4619      	mov	r1, r3
 800124e:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_GPIO_Init+0x208>)
 8001250:	f001 fe10 	bl	8002e74 <HAL_GPIO_Init>
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40021000 	.word	0x40021000
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40020000 	.word	0x40020000
 8001270:	40020400 	.word	0x40020400

08001274 <Error_Handler>:
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_MspInit>:
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_MspInit+0x4c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2007      	movs	r0, #7
 80012c4:	f001 faaa 	bl	800281c <HAL_NVIC_SetPriorityGrouping>
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_ADC_MspInit>:
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_ADC_MspInit+0x8c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d12f      	bne.n	8001356 <HAL_ADC_MspInit+0x82>
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_ADC_MspInit+0x90>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a19      	ldr	r2, [pc, #100]	; (8001364 <HAL_ADC_MspInit+0x90>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <HAL_ADC_MspInit+0x90>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <HAL_ADC_MspInit+0x90>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <HAL_ADC_MspInit+0x90>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_ADC_MspInit+0x90>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2306      	movs	r3, #6
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	2303      	movs	r3, #3
 8001334:	61bb      	str	r3, [r7, #24]
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <HAL_ADC_MspInit+0x94>)
 8001342:	f001 fd97 	bl	8002e74 <HAL_GPIO_Init>
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2012      	movs	r0, #18
 800134c:	f001 fa71 	bl	8002832 <HAL_NVIC_SetPriority>
 8001350:	2012      	movs	r0, #18
 8001352:	f001 fa8a 	bl	800286a <HAL_NVIC_EnableIRQ>
 8001356:	bf00      	nop
 8001358:	3728      	adds	r7, #40	; 0x28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40012000 	.word	0x40012000
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000

0800136c <HAL_I2C_MspInit>:
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_I2C_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_I2C_MspInit+0x7c>
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	2312      	movs	r3, #18
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	2301      	movs	r3, #1
 80013b6:	61fb      	str	r3, [r7, #28]
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
 80013bc:	2304      	movs	r3, #4
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <HAL_I2C_MspInit+0x8c>)
 80013c8:	f001 fd54 	bl	8002e74 <HAL_GPIO_Init>
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 80013d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_I2C_MspInit+0x88>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400

080013fc <HAL_I2S_MspInit>:
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08e      	sub	sp, #56	; 0x38
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a31      	ldr	r2, [pc, #196]	; (80014ec <HAL_I2S_MspInit+0xf0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d15a      	bne.n	80014e2 <HAL_I2S_MspInit+0xe6>
 800142c:	2301      	movs	r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	2332      	movs	r3, #50	; 0x32
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	2302      	movs	r3, #2
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fda9 	bl	8005f94 <HAL_RCCEx_PeriphCLKConfig>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <HAL_I2S_MspInit+0x50>
 8001448:	f7ff ff14 	bl	8001274 <Error_Handler>
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 8001456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145a:	6413      	str	r3, [r2, #64]	; 0x40
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 8001472:	f043 0301 	orr.w	r3, r3, #1
 8001476:	6313      	str	r3, [r2, #48]	; 0x30
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6313      	str	r3, [r2, #48]	; 0x30
 8001494:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_I2S_MspInit+0xf4>)
 8001496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2310      	movs	r3, #16
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
 80014a4:	2302      	movs	r3, #2
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
 80014b0:	2306      	movs	r3, #6
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <HAL_I2S_MspInit+0xf8>)
 80014bc:	f001 fcda 	bl	8002e74 <HAL_GPIO_Init>
 80014c0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
 80014d2:	2306      	movs	r3, #6
 80014d4:	637b      	str	r3, [r7, #52]	; 0x34
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4806      	ldr	r0, [pc, #24]	; (80014f8 <HAL_I2S_MspInit+0xfc>)
 80014de:	f001 fcc9 	bl	8002e74 <HAL_GPIO_Init>
 80014e2:	bf00      	nop
 80014e4:	3738      	adds	r7, #56	; 0x38
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40003c00 	.word	0x40003c00
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020800 	.word	0x40020800

080014fc <HAL_SPI_MspInit>:
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a19      	ldr	r2, [pc, #100]	; (8001580 <HAL_SPI_MspInit+0x84>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12b      	bne.n	8001576 <HAL_SPI_MspInit+0x7a>
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	4b18      	ldr	r3, [pc, #96]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001536:	613b      	str	r3, [r7, #16]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a10      	ldr	r2, [pc, #64]	; (8001584 <HAL_SPI_MspInit+0x88>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_SPI_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	23e0      	movs	r3, #224	; 0xe0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
 8001566:	2305      	movs	r3, #5
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	4805      	ldr	r0, [pc, #20]	; (8001588 <HAL_SPI_MspInit+0x8c>)
 8001572:	f001 fc7f 	bl	8002e74 <HAL_GPIO_Init>
 8001576:	bf00      	nop
 8001578:	3728      	adds	r7, #40	; 0x28
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40013000 	.word	0x40013000
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000

0800158c <HAL_TIM_Base_MspInit>:
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a22      	ldr	r2, [pc, #136]	; (8001624 <HAL_TIM_Base_MspInit+0x98>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d13d      	bne.n	800161a <HAL_TIM_Base_MspInit+0x8e>
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_TIM_Base_MspInit+0x9c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_TIM_Base_MspInit+0x9c>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <HAL_TIM_Base_MspInit+0x9c>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015bc:	4a1c      	ldr	r2, [pc, #112]	; (8001630 <HAL_TIM_Base_MspInit+0xa4>)
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015ca:	2240      	movs	r2, #64	; 0x40
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	4b15      	ldr	r3, [pc, #84]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015da:	611a      	str	r2, [r3, #16]
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e2:	615a      	str	r2, [r3, #20]
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ea:	619a      	str	r2, [r3, #24]
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
 80015fe:	480b      	ldr	r0, [pc, #44]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 8001600:	f001 f94e 	bl	80028a0 <HAL_DMA_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_TIM_Base_MspInit+0x82>
 800160a:	f7ff fe33 	bl	8001274 <Error_Handler>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 8001612:	629a      	str	r2, [r3, #40]	; 0x28
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <HAL_TIM_Base_MspInit+0xa0>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6393      	str	r3, [r2, #56]	; 0x38
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40000800 	.word	0x40000800
 8001628:	40023800 	.word	0x40023800
 800162c:	20000230 	.word	0x20000230
 8001630:	40026058 	.word	0x40026058

08001634 <HAL_TIM_MspPostInit>:
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a12      	ldr	r2, [pc, #72]	; (800169c <HAL_TIM_MspPostInit+0x68>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d11e      	bne.n	8001694 <HAL_TIM_MspPostInit+0x60>
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_TIM_MspPostInit+0x6c>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <HAL_TIM_MspPostInit+0x6c>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <HAL_TIM_MspPostInit+0x6c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	2302      	movs	r3, #2
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	2300      	movs	r3, #0
 8001682:	61bb      	str	r3, [r7, #24]
 8001684:	2302      	movs	r3, #2
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4619      	mov	r1, r3
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_TIM_MspPostInit+0x70>)
 8001690:	f001 fbf0 	bl	8002e74 <HAL_GPIO_Init>
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40000800 	.word	0x40000800
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <NMI_Handler>:
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	f000 f8e4 	bl	80018c0 <HAL_IncTick>
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <DMA1_Stream3_IRQHandler>:
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA1_Stream3_IRQHandler+0x10>)
 8001702:	f001 f97b 	bl	80029fc <HAL_DMA_IRQHandler>
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000230 	.word	0x20000230

08001710 <ADC_IRQHandler>:
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <ADC_IRQHandler+0x10>)
 8001716:	f000 fab8 	bl	8001c8a <HAL_ADC_IRQHandler>
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200000ac 	.word	0x200000ac

08001724 <OTG_FS_IRQHandler>:
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <OTG_FS_IRQHandler+0x10>)
 800172a:	f001 ffc3 	bl	80036b4 <HAL_HCD_IRQHandler>
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000680 	.word	0x20000680

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f008 ff40 	bl	800a5ec <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20020000 	.word	0x20020000
 8001798:	00000400 	.word	0x00000400
 800179c:	2000029c 	.word	0x2000029c
 80017a0:	20000998 	.word	0x20000998

080017a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  



  ldr   sp, =_estack     /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffd7 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f008 feff 	bl	800a5f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff f96d 	bl	8000ad8 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800180c:	0800a8b8 	.word	0x0800a8b8
  ldr r2, =_sbss
 8001810:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001814:	20000994 	.word	0x20000994

08001818 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <CAN1_RX0_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 ffe9 	bl	800281c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fd18 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f001 f801 	bl	8002886 <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295
 800189c:	f000 ffc9 	bl	8002832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	20000008 	.word	0x20000008
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000008 	.word	0x20000008
 80018e4:	200002a0 	.word	0x200002a0

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200002a0 	.word	0x200002a0

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_Delay+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008

08001948 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e033      	b.n	80019c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	2b00      	cmp	r3, #0
 8001964:	d109      	bne.n	800197a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff fcb4 	bl	80012d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b00      	cmp	r3, #0
 8001984:	d118      	bne.n	80019b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800198e:	f023 0302 	bic.w	r3, r3, #2
 8001992:	f043 0202 	orr.w	r2, r3, #2
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fbd2 	bl	8002144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f023 0303 	bic.w	r3, r3, #3
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
 80019b6:	e001      	b.n	80019bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Start+0x1a>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0b2      	b.n	8001b50 <HAL_ADC_Start+0x180>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d018      	beq.n	8001a32 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_ADC_Start+0x18c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a52      	ldr	r2, [pc, #328]	; (8001b60 <HAL_ADC_Start+0x190>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0c9a      	lsrs	r2, r3, #18
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f9      	bne.n	8001a26 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d17a      	bne.n	8001b36 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d007      	beq.n	8001a72 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a7e:	d106      	bne.n	8001a8e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f023 0206 	bic.w	r2, r3, #6
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_ADC_Start+0x194>)
 8001a9e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d12a      	bne.n	8001b0c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <HAL_ADC_Start+0x198>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d015      	beq.n	8001aec <HAL_ADC_Start+0x11c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a29      	ldr	r2, [pc, #164]	; (8001b6c <HAL_ADC_Start+0x19c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d105      	bne.n	8001ad6 <HAL_ADC_Start+0x106>
 8001aca:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <HAL_ADC_Start+0x194>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_ADC_Start+0x1a0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d136      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_ADC_Start+0x194>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d130      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d129      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	e020      	b.n	8001b4e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <HAL_ADC_Start+0x198>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d11b      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d114      	bne.n	8001b4e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e00b      	b.n	8001b4e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f043 0210 	orr.w	r2, r3, #16
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f043 0201 	orr.w	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	431bde83 	.word	0x431bde83
 8001b64:	40012300 	.word	0x40012300
 8001b68:	40012000 	.word	0x40012000
 8001b6c:	40012100 	.word	0x40012100
 8001b70:	40012200 	.word	0x40012200

08001b74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b90:	d113      	bne.n	8001bba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ba0:	d10b      	bne.n	8001bba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f043 0220 	orr.w	r2, r3, #32
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e063      	b.n	8001c82 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bba:	f7ff fe95 	bl	80018e8 <HAL_GetTick>
 8001bbe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bc0:	e021      	b.n	8001c06 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d01d      	beq.n	8001c06 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_ADC_PollForConversion+0x6c>
 8001bd0:	f7ff fe8a 	bl	80018e8 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d212      	bcs.n	8001c06 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d00b      	beq.n	8001c06 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f043 0204 	orr.w	r2, r3, #4
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e03d      	b.n	8001c82 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d1d6      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f06f 0212 	mvn.w	r2, #18
 8001c1c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d123      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d11f      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d111      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	f003 0320 	and.w	r3, r3, #32
 8001cb8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d049      	beq.n	8001d54 <HAL_ADC_IRQHandler+0xca>
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d046      	beq.n	8001d54 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 0310 	and.w	r3, r3, #16
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d12b      	bne.n	8001d44 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d127      	bne.n	8001d44 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d119      	bne.n	8001d44 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0220 	bic.w	r2, r2, #32
 8001d1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f043 0201 	orr.w	r2, r3, #1
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8bd 	bl	8001ec4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0212 	mvn.w	r2, #18
 8001d52:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d057      	beq.n	8001e1a <HAL_ADC_IRQHandler+0x190>
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d054      	beq.n	8001e1a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f003 0310 	and.w	r3, r3, #16
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d105      	bne.n	8001d88 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d139      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d12b      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d124      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11d      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d119      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d105      	bne.n	8001e0a <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f043 0201 	orr.w	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fa96 	bl	800233c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 020c 	mvn.w	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e28:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d017      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x1d6>
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d014      	beq.n	8001e60 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d10d      	bne.n	8001e60 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f841 	bl	8001ed8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f06f 0201 	mvn.w	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e6e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d015      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x218>
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d012      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e80:	f043 0202 	orr.w	r2, r3, #2
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0220 	mvn.w	r2, #32
 8001e90:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f82a 	bl	8001eec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0220 	mvn.w	r2, #32
 8001ea0:	601a      	str	r2, [r3, #0]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x1c>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e105      	b.n	8002128 <HAL_ADC_ConfigChannel+0x228>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d925      	bls.n	8001f78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	3b1e      	subs	r3, #30
 8001f42:	2207      	movs	r2, #7
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43da      	mvns	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	400a      	ands	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68d9      	ldr	r1, [r3, #12]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	4603      	mov	r3, r0
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4403      	add	r3, r0
 8001f6a:	3b1e      	subs	r3, #30
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	e022      	b.n	8001fbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6919      	ldr	r1, [r3, #16]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	400a      	ands	r2, r1
 8001f9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6919      	ldr	r1, [r3, #16]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4618      	mov	r0, r3
 8001fae:	4603      	mov	r3, r0
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4403      	add	r3, r0
 8001fb4:	409a      	lsls	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d824      	bhi.n	8002010 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3b05      	subs	r3, #5
 8001fd8:	221f      	movs	r2, #31
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	400a      	ands	r2, r1
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	3b05      	subs	r3, #5
 8002002:	fa00 f203 	lsl.w	r2, r0, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	635a      	str	r2, [r3, #52]	; 0x34
 800200e:	e04c      	b.n	80020aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b0c      	cmp	r3, #12
 8002016:	d824      	bhi.n	8002062 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4413      	add	r3, r2
 8002028:	3b23      	subs	r3, #35	; 0x23
 800202a:	221f      	movs	r2, #31
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43da      	mvns	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	400a      	ands	r2, r1
 8002038:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4618      	mov	r0, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	3b23      	subs	r3, #35	; 0x23
 8002054:	fa00 f203 	lsl.w	r2, r0, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
 8002060:	e023      	b.n	80020aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	3b41      	subs	r3, #65	; 0x41
 8002074:	221f      	movs	r2, #31
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	400a      	ands	r2, r1
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	3b41      	subs	r3, #65	; 0x41
 800209e:	fa00 f203 	lsl.w	r2, r0, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_ADC_ConfigChannel+0x234>)
 80020ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a21      	ldr	r2, [pc, #132]	; (8002138 <HAL_ADC_ConfigChannel+0x238>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d109      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1cc>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b12      	cmp	r3, #18
 80020be:	d105      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <HAL_ADC_ConfigChannel+0x238>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d123      	bne.n	800211e <HAL_ADC_ConfigChannel+0x21e>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d003      	beq.n	80020e6 <HAL_ADC_ConfigChannel+0x1e6>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b11      	cmp	r3, #17
 80020e4:	d11b      	bne.n	800211e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d111      	bne.n	800211e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <HAL_ADC_ConfigChannel+0x23c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a10      	ldr	r2, [pc, #64]	; (8002140 <HAL_ADC_ConfigChannel+0x240>)
 8002100:	fba2 2303 	umull	r2, r3, r2, r3
 8002104:	0c9a      	lsrs	r2, r3, #18
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002110:	e002      	b.n	8002118 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3b01      	subs	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1f9      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40012300 	.word	0x40012300
 8002138:	40012000 	.word	0x40012000
 800213c:	20000000 	.word	0x20000000
 8002140:	431bde83 	.word	0x431bde83

08002144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214c:	4b79      	ldr	r3, [pc, #484]	; (8002334 <ADC_Init+0x1f0>)
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6859      	ldr	r1, [r3, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	021a      	lsls	r2, r3, #8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800219c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6899      	ldr	r1, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	4a58      	ldr	r2, [pc, #352]	; (8002338 <ADC_Init+0x1f4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800220c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6899      	ldr	r1, [r3, #8]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e00f      	b.n	8002242 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002240:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0202 	bic.w	r2, r2, #2
 8002250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6899      	ldr	r1, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7e1b      	ldrb	r3, [r3, #24]
 800225c:	005a      	lsls	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	430a      	orrs	r2, r1
 8002264:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d01b      	beq.n	80022a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800227e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800228e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	3b01      	subs	r3, #1
 800229c:	035a      	lsls	r2, r3, #13
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	e007      	b.n	80022b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	051a      	lsls	r2, r3, #20
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80022ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6899      	ldr	r1, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022fa:	025a      	lsls	r2, r3, #9
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6899      	ldr	r1, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	029a      	lsls	r2, r3, #10
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40012300 	.word	0x40012300
 8002338:	0f000001 	.word	0x0f000001

0800233c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8002364:	2302      	movs	r3, #2
 8002366:	e17d      	b.n	8002664 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b09      	cmp	r3, #9
 8002376:	d925      	bls.n	80023c4 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68d9      	ldr	r1, [r3, #12]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	3b1e      	subs	r3, #30
 800238e:	2207      	movs	r2, #7
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68d9      	ldr	r1, [r3, #12]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	4618      	mov	r0, r3
 80023b0:	4603      	mov	r3, r0
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4403      	add	r3, r0
 80023b6:	3b1e      	subs	r3, #30
 80023b8:	409a      	lsls	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	e022      	b.n	800240a <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6919      	ldr	r1, [r3, #16]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	2207      	movs	r2, #7
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	400a      	ands	r2, r1
 80023e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4403      	add	r3, r0
 8002400:	409a      	lsls	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	3b01      	subs	r3, #1
 8002426:	051a      	lsls	r2, r3, #20
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	3303      	adds	r3, #3
 8002448:	b2db      	uxtb	r3, r3
 800244a:	461a      	mov	r2, r3
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	221f      	movs	r2, #31
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43da      	mvns	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	400a      	ands	r2, r1
 8002460:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	4618      	mov	r0, r3
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3303      	adds	r3, #3
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	fa00 f203 	lsl.w	r2, r0, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a74      	ldr	r2, [pc, #464]	; (8002670 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d022      	beq.n	80024e8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80024b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	6899      	ldr	r1, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80024d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6899      	ldr	r1, [r3, #8]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	69da      	ldr	r2, [r3, #28]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
 80024e6:	e00f      	b.n	8002508 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80024f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002506:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	7d5b      	ldrb	r3, [r3, #21]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	e007      	b.n	8002532 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002530:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7d1b      	ldrb	r3, [r3, #20]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	e007      	b.n	800255c <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800255a:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d02e      	beq.n	80025c2 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002564:	2b03      	cmp	r3, #3
 8002566:	d840      	bhi.n	80025ea <HAL_ADCEx_InjectedConfigChannel+0x29a>
 8002568:	2b01      	cmp	r3, #1
 800256a:	d002      	beq.n	8002572 <HAL_ADCEx_InjectedConfigChannel+0x222>
 800256c:	2b02      	cmp	r3, #2
 800256e:	d014      	beq.n	800259a <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002570:	e03b      	b.n	80025ea <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002580:	f023 030f 	bic.w	r3, r3, #15
 8002584:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6959      	ldr	r1, [r3, #20]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	615a      	str	r2, [r3, #20]
      break;
 8002598:	e03b      	b.n	8002612 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025a8:	f023 030f 	bic.w	r3, r3, #15
 80025ac:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6999      	ldr	r1, [r3, #24]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	619a      	str	r2, [r3, #24]
      break;
 80025c0:	e027      	b.n	8002612 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69db      	ldr	r3, [r3, #28]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025d0:	f023 030f 	bic.w	r3, r3, #15
 80025d4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69d9      	ldr	r1, [r3, #28]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	61da      	str	r2, [r3, #28]
      break;
 80025e8:	e013      	b.n	8002612 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80025f8:	f023 030f 	bic.w	r3, r3, #15
 80025fc:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a19      	ldr	r1, [r3, #32]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	621a      	str	r2, [r3, #32]
      break;
 8002610:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002614:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a17      	ldr	r2, [pc, #92]	; (8002678 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d109      	bne.n	8002634 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b12      	cmp	r3, #18
 8002626:	d105      	bne.n	8002634 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10d      	bne.n	800265a <HAL_ADCEx_InjectedConfigChannel+0x30a>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d003      	beq.n	800264e <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b11      	cmp	r3, #17
 800264c:	d105      	bne.n	800265a <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	000f0001 	.word	0x000f0001
 8002674:	40012300 	.word	0x40012300
 8002678:	40012000 	.word	0x40012000

0800267c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002692:	68ba      	ldr	r2, [r7, #8]
 8002694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002698:	4013      	ands	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ae:	4a04      	ldr	r2, [pc, #16]	; (80026c0 <__NVIC_SetPriorityGrouping+0x44>)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <__NVIC_GetPriorityGrouping+0x18>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	f003 0307 	and.w	r3, r3, #7
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	db0b      	blt.n	800270a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	f003 021f 	and.w	r2, r3, #31
 80026f8:	4907      	ldr	r1, [pc, #28]	; (8002718 <__NVIC_EnableIRQ+0x38>)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	2001      	movs	r0, #1
 8002702:	fa00 f202 	lsl.w	r2, r0, r2
 8002706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000e100 	.word	0xe000e100

0800271c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	6039      	str	r1, [r7, #0]
 8002726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	2b00      	cmp	r3, #0
 800272e:	db0a      	blt.n	8002746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2da      	uxtb	r2, r3
 8002734:	490c      	ldr	r1, [pc, #48]	; (8002768 <__NVIC_SetPriority+0x4c>)
 8002736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	440b      	add	r3, r1
 8002740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002744:	e00a      	b.n	800275c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4908      	ldr	r1, [pc, #32]	; (800276c <__NVIC_SetPriority+0x50>)
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	3b04      	subs	r3, #4
 8002754:	0112      	lsls	r2, r2, #4
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	440b      	add	r3, r1
 800275a:	761a      	strb	r2, [r3, #24]
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000e100 	.word	0xe000e100
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f1c3 0307 	rsb	r3, r3, #7
 800278a:	2b04      	cmp	r3, #4
 800278c:	bf28      	it	cs
 800278e:	2304      	movcs	r3, #4
 8002790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3304      	adds	r3, #4
 8002796:	2b06      	cmp	r3, #6
 8002798:	d902      	bls.n	80027a0 <NVIC_EncodePriority+0x30>
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3b03      	subs	r3, #3
 800279e:	e000      	b.n	80027a2 <NVIC_EncodePriority+0x32>
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43da      	mvns	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	401a      	ands	r2, r3
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	43d9      	mvns	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	4313      	orrs	r3, r2
         );
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	; 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e8:	d301      	bcc.n	80027ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00f      	b.n	800280e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ee:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <SysTick_Config+0x40>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f6:	210f      	movs	r1, #15
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f7ff ff8e 	bl	800271c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <SysTick_Config+0x40>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <SysTick_Config+0x40>)
 8002808:	2207      	movs	r2, #7
 800280a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	e000e010 	.word	0xe000e010

0800281c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff29 	bl	800267c <__NVIC_SetPriorityGrouping>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002832:	b580      	push	{r7, lr}
 8002834:	b086      	sub	sp, #24
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002844:	f7ff ff3e 	bl	80026c4 <__NVIC_GetPriorityGrouping>
 8002848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	6978      	ldr	r0, [r7, #20]
 8002850:	f7ff ff8e 	bl	8002770 <NVIC_EncodePriority>
 8002854:	4602      	mov	r2, r0
 8002856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff ff5d 	bl	800271c <__NVIC_SetPriority>
}
 8002862:	bf00      	nop
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff31 	bl	80026e0 <__NVIC_EnableIRQ>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff ffa2 	bl	80027d8 <SysTick_Config>
 8002894:	4603      	mov	r3, r0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3708      	adds	r7, #8
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028ac:	f7ff f81c 	bl	80018e8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e099      	b.n	80029f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0201 	bic.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028dc:	e00f      	b.n	80028fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028de:	f7ff f803 	bl	80018e8 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d908      	bls.n	80028fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2203      	movs	r2, #3
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e078      	b.n	80029f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e8      	bne.n	80028de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4b38      	ldr	r3, [pc, #224]	; (80029f8 <HAL_DMA_Init+0x158>)
 8002918:	4013      	ands	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002936:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002942:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	2b04      	cmp	r3, #4
 8002956:	d107      	bne.n	8002968 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f023 0307 	bic.w	r3, r3, #7
 800297e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	2b04      	cmp	r3, #4
 8002990:	d117      	bne.n	80029c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f9e9 	bl	8002d7c <DMA_CheckFifoParam>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029be:	2301      	movs	r3, #1
 80029c0:	e016      	b.n	80029f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9a0 	bl	8002d10 <DMA_CalcBaseAndBitshift>
 80029d0:	4603      	mov	r3, r0
 80029d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	223f      	movs	r2, #63	; 0x3f
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	f010803f 	.word	0xf010803f

080029fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a08:	4b8e      	ldr	r3, [pc, #568]	; (8002c44 <HAL_DMA_IRQHandler+0x248>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a8e      	ldr	r2, [pc, #568]	; (8002c48 <HAL_DMA_IRQHandler+0x24c>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0a9b      	lsrs	r3, r3, #10
 8002a14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	2208      	movs	r2, #8
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01a      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0204 	bic.w	r2, r2, #4
 8002a4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	2208      	movs	r2, #8
 8002a56:	409a      	lsls	r2, r3
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	f043 0201 	orr.w	r2, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d012      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00b      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a96:	f043 0202 	orr.w	r2, r3, #2
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	2204      	movs	r2, #4
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d012      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00b      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2210      	movs	r2, #16
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d043      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d03c      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	2210      	movs	r2, #16
 8002af8:	409a      	lsls	r2, r3
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d018      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d024      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
 8002b2a:	e01f      	b.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d01b      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e016      	b.n	8002b6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d107      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0208 	bic.w	r2, r2, #8
 8002b5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	2220      	movs	r2, #32
 8002b72:	409a      	lsls	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 808f 	beq.w	8002c9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8087 	beq.w	8002c9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	2220      	movs	r2, #32
 8002b94:	409a      	lsls	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b05      	cmp	r3, #5
 8002ba4:	d136      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0216 	bic.w	r2, r2, #22
 8002bb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bc4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x1da>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0208 	bic.w	r2, r2, #8
 8002be4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	223f      	movs	r2, #63	; 0x3f
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d07e      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
        }
        return;
 8002c12:	e079      	b.n	8002d08 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d01d      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d031      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	4798      	blx	r3
 8002c40:	e02c      	b.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000
 8002c48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d023      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4798      	blx	r3
 8002c5c:	e01e      	b.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10f      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0210 	bic.w	r2, r2, #16
 8002c7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d032      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2205      	movs	r2, #5
 8002cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	60bb      	str	r3, [r7, #8]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d307      	bcc.n	8002ce4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f2      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0x2cc>
 8002ce2:	e000      	b.n	8002ce6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ce4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
 8002d06:	e000      	b.n	8002d0a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d08:	bf00      	nop
    }
  }
}
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3b10      	subs	r3, #16
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <DMA_CalcBaseAndBitshift+0x64>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <DMA_CalcBaseAndBitshift+0x68>)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d909      	bls.n	8002d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d46:	f023 0303 	bic.w	r3, r3, #3
 8002d4a:	1d1a      	adds	r2, r3, #4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002d50:	e007      	b.n	8002d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	aaaaaaab 	.word	0xaaaaaaab
 8002d78:	0800a8a0 	.word	0x0800a8a0

08002d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11f      	bne.n	8002dd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d856      	bhi.n	8002e4a <DMA_CheckFifoParam+0xce>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <DMA_CheckFifoParam+0x28>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002dc7 	.word	0x08002dc7
 8002dac:	08002db5 	.word	0x08002db5
 8002db0:	08002e4b 	.word	0x08002e4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d046      	beq.n	8002e4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc4:	e043      	b.n	8002e4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dce:	d140      	bne.n	8002e52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd4:	e03d      	b.n	8002e52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dde:	d121      	bne.n	8002e24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d837      	bhi.n	8002e56 <DMA_CheckFifoParam+0xda>
 8002de6:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <DMA_CheckFifoParam+0x70>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002dfd 	.word	0x08002dfd
 8002df0:	08002e03 	.word	0x08002e03
 8002df4:	08002dfd 	.word	0x08002dfd
 8002df8:	08002e15 	.word	0x08002e15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002e00:	e030      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d025      	beq.n	8002e5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e12:	e022      	b.n	8002e5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e1c:	d11f      	bne.n	8002e5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e22:	e01c      	b.n	8002e5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d903      	bls.n	8002e32 <DMA_CheckFifoParam+0xb6>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d003      	beq.n	8002e38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e30:	e018      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
      break;
 8002e36:	e015      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00e      	beq.n	8002e62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	e00b      	b.n	8002e62 <DMA_CheckFifoParam+0xe6>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e00a      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e008      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e52:	bf00      	nop
 8002e54:	e006      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e56:	bf00      	nop
 8002e58:	e004      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e62:	bf00      	nop
    }
  } 
  
  return status; 
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e16b      	b.n	8003168 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 815a 	bne.w	8003162 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d005      	beq.n	8002ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d130      	bne.n	8002f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002efc:	2201      	movs	r2, #1
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43db      	mvns	r3, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 0201 	and.w	r2, r3, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 0303 	and.w	r3, r3, #3
 8002f30:	2b03      	cmp	r3, #3
 8002f32:	d017      	beq.n	8002f64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	2203      	movs	r2, #3
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	43db      	mvns	r3, r3
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80b4 	beq.w	8003162 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b60      	ldr	r3, [pc, #384]	; (8003180 <HAL_GPIO_Init+0x30c>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	4a5f      	ldr	r2, [pc, #380]	; (8003180 <HAL_GPIO_Init+0x30c>)
 8003004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003008:	6453      	str	r3, [r2, #68]	; 0x44
 800300a:	4b5d      	ldr	r3, [pc, #372]	; (8003180 <HAL_GPIO_Init+0x30c>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003016:	4a5b      	ldr	r2, [pc, #364]	; (8003184 <HAL_GPIO_Init+0x310>)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a52      	ldr	r2, [pc, #328]	; (8003188 <HAL_GPIO_Init+0x314>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d02b      	beq.n	800309a <HAL_GPIO_Init+0x226>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a51      	ldr	r2, [pc, #324]	; (800318c <HAL_GPIO_Init+0x318>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d025      	beq.n	8003096 <HAL_GPIO_Init+0x222>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a50      	ldr	r2, [pc, #320]	; (8003190 <HAL_GPIO_Init+0x31c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d01f      	beq.n	8003092 <HAL_GPIO_Init+0x21e>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a4f      	ldr	r2, [pc, #316]	; (8003194 <HAL_GPIO_Init+0x320>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d019      	beq.n	800308e <HAL_GPIO_Init+0x21a>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a4e      	ldr	r2, [pc, #312]	; (8003198 <HAL_GPIO_Init+0x324>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d013      	beq.n	800308a <HAL_GPIO_Init+0x216>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4d      	ldr	r2, [pc, #308]	; (800319c <HAL_GPIO_Init+0x328>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00d      	beq.n	8003086 <HAL_GPIO_Init+0x212>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4c      	ldr	r2, [pc, #304]	; (80031a0 <HAL_GPIO_Init+0x32c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d007      	beq.n	8003082 <HAL_GPIO_Init+0x20e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a4b      	ldr	r2, [pc, #300]	; (80031a4 <HAL_GPIO_Init+0x330>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d101      	bne.n	800307e <HAL_GPIO_Init+0x20a>
 800307a:	2307      	movs	r3, #7
 800307c:	e00e      	b.n	800309c <HAL_GPIO_Init+0x228>
 800307e:	2308      	movs	r3, #8
 8003080:	e00c      	b.n	800309c <HAL_GPIO_Init+0x228>
 8003082:	2306      	movs	r3, #6
 8003084:	e00a      	b.n	800309c <HAL_GPIO_Init+0x228>
 8003086:	2305      	movs	r3, #5
 8003088:	e008      	b.n	800309c <HAL_GPIO_Init+0x228>
 800308a:	2304      	movs	r3, #4
 800308c:	e006      	b.n	800309c <HAL_GPIO_Init+0x228>
 800308e:	2303      	movs	r3, #3
 8003090:	e004      	b.n	800309c <HAL_GPIO_Init+0x228>
 8003092:	2302      	movs	r3, #2
 8003094:	e002      	b.n	800309c <HAL_GPIO_Init+0x228>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_GPIO_Init+0x228>
 800309a:	2300      	movs	r3, #0
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	f002 0203 	and.w	r2, r2, #3
 80030a2:	0092      	lsls	r2, r2, #2
 80030a4:	4093      	lsls	r3, r2
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ac:	4935      	ldr	r1, [pc, #212]	; (8003184 <HAL_GPIO_Init+0x310>)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	3302      	adds	r3, #2
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_GPIO_Init+0x334>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030de:	4a32      	ldr	r2, [pc, #200]	; (80031a8 <HAL_GPIO_Init+0x334>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e4:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <HAL_GPIO_Init+0x334>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003108:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <HAL_GPIO_Init+0x334>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <HAL_GPIO_Init+0x334>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003132:	4a1d      	ldr	r2, [pc, #116]	; (80031a8 <HAL_GPIO_Init+0x334>)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003138:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_GPIO_Init+0x334>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800315c:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <HAL_GPIO_Init+0x334>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	3301      	adds	r3, #1
 8003166:	61fb      	str	r3, [r7, #28]
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	f67f ae90 	bls.w	8002e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003170:	bf00      	nop
 8003172:	bf00      	nop
 8003174:	3724      	adds	r7, #36	; 0x24
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	40013800 	.word	0x40013800
 8003188:	40020000 	.word	0x40020000
 800318c:	40020400 	.word	0x40020400
 8003190:	40020800 	.word	0x40020800
 8003194:	40020c00 	.word	0x40020c00
 8003198:	40021000 	.word	0x40021000
 800319c:	40021400 	.word	0x40021400
 80031a0:	40021800 	.word	0x40021800
 80031a4:	40021c00 	.word	0x40021c00
 80031a8:	40013c00 	.word	0x40013c00

080031ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	460b      	mov	r3, r1
 80031b6:	807b      	strh	r3, [r7, #2]
 80031b8:	4613      	mov	r3, r2
 80031ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031bc:	787b      	ldrb	r3, [r7, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031c2:	887a      	ldrh	r2, [r7, #2]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c8:	e003      	b.n	80031d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ca:	887b      	ldrh	r3, [r7, #2]
 80031cc:	041a      	lsls	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	619a      	str	r2, [r3, #24]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80031de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e0:	b08f      	sub	sp, #60	; 0x3c
 80031e2:	af0a      	add	r7, sp, #40	; 0x28
 80031e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e054      	b.n	800329a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f006 ff44 	bl	800a098 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2203      	movs	r2, #3
 8003214:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f003 ff72 	bl	8007118 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	687e      	ldr	r6, [r7, #4]
 800323c:	466d      	mov	r5, sp
 800323e:	f106 0410 	add.w	r4, r6, #16
 8003242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800324e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003252:	1d33      	adds	r3, r6, #4
 8003254:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f003 feec 	bl	8007034 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	4618      	mov	r0, r3
 8003264:	f003 ff69 	bl	800713a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	687e      	ldr	r6, [r7, #4]
 8003270:	466d      	mov	r5, sp
 8003272:	f106 0410 	add.w	r4, r6, #16
 8003276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003282:	e885 0003 	stmia.w	r5, {r0, r1}
 8003286:	1d33      	adds	r3, r6, #4
 8003288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	f004 f8f2 	bl	8007474 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032a2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80032a2:	b590      	push	{r4, r7, lr}
 80032a4:	b089      	sub	sp, #36	; 0x24
 80032a6:	af04      	add	r7, sp, #16
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	4608      	mov	r0, r1
 80032ac:	4611      	mov	r1, r2
 80032ae:	461a      	mov	r2, r3
 80032b0:	4603      	mov	r3, r0
 80032b2:	70fb      	strb	r3, [r7, #3]
 80032b4:	460b      	mov	r3, r1
 80032b6:	70bb      	strb	r3, [r7, #2]
 80032b8:	4613      	mov	r3, r2
 80032ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_HCD_HC_Init+0x28>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e076      	b.n	80033b8 <HAL_HCD_HC_Init+0x116>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	212c      	movs	r1, #44	; 0x2c
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	4413      	add	r3, r2
 80032de:	333d      	adds	r3, #61	; 0x3d
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	212c      	movs	r1, #44	; 0x2c
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	3338      	adds	r3, #56	; 0x38
 80032f2:	787a      	ldrb	r2, [r7, #1]
 80032f4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	212c      	movs	r1, #44	; 0x2c
 80032fc:	fb01 f303 	mul.w	r3, r1, r3
 8003300:	4413      	add	r3, r2
 8003302:	3340      	adds	r3, #64	; 0x40
 8003304:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003306:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003308:	78fb      	ldrb	r3, [r7, #3]
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3339      	adds	r3, #57	; 0x39
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	212c      	movs	r1, #44	; 0x2c
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	4413      	add	r3, r2
 8003326:	333f      	adds	r3, #63	; 0x3f
 8003328:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800332c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	78ba      	ldrb	r2, [r7, #2]
 8003332:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003336:	b2d0      	uxtb	r0, r2
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	333a      	adds	r3, #58	; 0x3a
 8003344:	4602      	mov	r2, r0
 8003346:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003348:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800334c:	2b00      	cmp	r3, #0
 800334e:	da09      	bge.n	8003364 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	333b      	adds	r3, #59	; 0x3b
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
 8003362:	e008      	b.n	8003376 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	333b      	adds	r3, #59	; 0x3b
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	333c      	adds	r3, #60	; 0x3c
 8003384:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003388:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	787c      	ldrb	r4, [r7, #1]
 8003390:	78ba      	ldrb	r2, [r7, #2]
 8003392:	78f9      	ldrb	r1, [r7, #3]
 8003394:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4623      	mov	r3, r4
 80033a6:	f004 f9eb 	bl	8007780 <USB_HC_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}

080033c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_HCD_HC_Halt+0x1e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e00f      	b.n	80033fe <HAL_HCD_HC_Halt+0x3e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 fc3b 	bl	8007c6a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	70fb      	strb	r3, [r7, #3]
 800341a:	460b      	mov	r3, r1
 800341c:	70bb      	strb	r3, [r7, #2]
 800341e:	4613      	mov	r3, r2
 8003420:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	212c      	movs	r1, #44	; 0x2c
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	333b      	adds	r3, #59	; 0x3b
 8003430:	78ba      	ldrb	r2, [r7, #2]
 8003432:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	212c      	movs	r1, #44	; 0x2c
 800343a:	fb01 f303 	mul.w	r3, r1, r3
 800343e:	4413      	add	r3, r2
 8003440:	333f      	adds	r3, #63	; 0x3f
 8003442:	787a      	ldrb	r2, [r7, #1]
 8003444:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003446:	7c3b      	ldrb	r3, [r7, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d112      	bne.n	8003472 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	3342      	adds	r3, #66	; 0x42
 800345a:	2203      	movs	r2, #3
 800345c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	333d      	adds	r3, #61	; 0x3d
 800346c:	7f3a      	ldrb	r2, [r7, #28]
 800346e:	701a      	strb	r2, [r3, #0]
 8003470:	e008      	b.n	8003484 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	212c      	movs	r1, #44	; 0x2c
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	4413      	add	r3, r2
 800347e:	3342      	adds	r3, #66	; 0x42
 8003480:	2202      	movs	r2, #2
 8003482:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003484:	787b      	ldrb	r3, [r7, #1]
 8003486:	2b03      	cmp	r3, #3
 8003488:	f200 80c6 	bhi.w	8003618 <HAL_HCD_HC_SubmitRequest+0x210>
 800348c:	a201      	add	r2, pc, #4	; (adr r2, 8003494 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800348e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003492:	bf00      	nop
 8003494:	080034a5 	.word	0x080034a5
 8003498:	08003605 	.word	0x08003605
 800349c:	08003509 	.word	0x08003509
 80034a0:	08003587 	.word	0x08003587
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80034a4:	7c3b      	ldrb	r3, [r7, #16]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	f040 80b8 	bne.w	800361c <HAL_HCD_HC_SubmitRequest+0x214>
 80034ac:	78bb      	ldrb	r3, [r7, #2]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f040 80b4 	bne.w	800361c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80034b4:	8b3b      	ldrh	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d108      	bne.n	80034cc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	212c      	movs	r1, #44	; 0x2c
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	3355      	adds	r3, #85	; 0x55
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3355      	adds	r3, #85	; 0x55
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3342      	adds	r3, #66	; 0x42
 80034ee:	2200      	movs	r2, #0
 80034f0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034f2:	e093      	b.n	800361c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	3342      	adds	r3, #66	; 0x42
 8003502:	2202      	movs	r2, #2
 8003504:	701a      	strb	r2, [r3, #0]
      break;
 8003506:	e089      	b.n	800361c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003508:	78bb      	ldrb	r3, [r7, #2]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11d      	bne.n	800354a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	212c      	movs	r1, #44	; 0x2c
 8003514:	fb01 f303 	mul.w	r3, r1, r3
 8003518:	4413      	add	r3, r2
 800351a:	3355      	adds	r3, #85	; 0x55
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003522:	78fb      	ldrb	r3, [r7, #3]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	212c      	movs	r1, #44	; 0x2c
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	3342      	adds	r3, #66	; 0x42
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003534:	e073      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	212c      	movs	r1, #44	; 0x2c
 800353c:	fb01 f303 	mul.w	r3, r1, r3
 8003540:	4413      	add	r3, r2
 8003542:	3342      	adds	r3, #66	; 0x42
 8003544:	2202      	movs	r2, #2
 8003546:	701a      	strb	r2, [r3, #0]
      break;
 8003548:	e069      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3354      	adds	r3, #84	; 0x54
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800355e:	78fb      	ldrb	r3, [r7, #3]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	212c      	movs	r1, #44	; 0x2c
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	4413      	add	r3, r2
 800356a:	3342      	adds	r3, #66	; 0x42
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
      break;
 8003570:	e055      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003572:	78fb      	ldrb	r3, [r7, #3]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	212c      	movs	r1, #44	; 0x2c
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	4413      	add	r3, r2
 800357e:	3342      	adds	r3, #66	; 0x42
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
      break;
 8003584:	e04b      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003586:	78bb      	ldrb	r3, [r7, #2]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d11d      	bne.n	80035c8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	212c      	movs	r1, #44	; 0x2c
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	3355      	adds	r3, #85	; 0x55
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	212c      	movs	r1, #44	; 0x2c
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	3342      	adds	r3, #66	; 0x42
 80035ae:	2200      	movs	r2, #0
 80035b0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035b2:	e034      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035b4:	78fb      	ldrb	r3, [r7, #3]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3342      	adds	r3, #66	; 0x42
 80035c2:	2202      	movs	r2, #2
 80035c4:	701a      	strb	r2, [r3, #0]
      break;
 80035c6:	e02a      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	212c      	movs	r1, #44	; 0x2c
 80035ce:	fb01 f303 	mul.w	r3, r1, r3
 80035d2:	4413      	add	r3, r2
 80035d4:	3354      	adds	r3, #84	; 0x54
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d109      	bne.n	80035f0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3342      	adds	r3, #66	; 0x42
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
      break;
 80035ee:	e016      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035f0:	78fb      	ldrb	r3, [r7, #3]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3342      	adds	r3, #66	; 0x42
 80035fe:	2202      	movs	r2, #2
 8003600:	701a      	strb	r2, [r3, #0]
      break;
 8003602:	e00c      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003604:	78fb      	ldrb	r3, [r7, #3]
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3342      	adds	r3, #66	; 0x42
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
      break;
 8003616:	e002      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800361c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	212c      	movs	r1, #44	; 0x2c
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	4413      	add	r3, r2
 800362a:	3344      	adds	r3, #68	; 0x44
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	8b3a      	ldrh	r2, [r7, #24]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	202c      	movs	r0, #44	; 0x2c
 8003638:	fb00 f303 	mul.w	r3, r0, r3
 800363c:	440b      	add	r3, r1
 800363e:	334c      	adds	r3, #76	; 0x4c
 8003640:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	212c      	movs	r1, #44	; 0x2c
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	4413      	add	r3, r2
 800364e:	3360      	adds	r3, #96	; 0x60
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3350      	adds	r3, #80	; 0x50
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	212c      	movs	r1, #44	; 0x2c
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	4413      	add	r3, r2
 8003672:	3339      	adds	r3, #57	; 0x39
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	3361      	adds	r3, #97	; 0x61
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	222c      	movs	r2, #44	; 0x2c
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	3338      	adds	r3, #56	; 0x38
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	18d1      	adds	r1, r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	f004 f98e 	bl	80079c4 <USB_HC_StartXfer>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop

080036b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 fe8f 	bl	80073ee <USB_GetMode>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	f040 80f6 	bne.w	80038c4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 fe73 	bl	80073c8 <USB_ReadInterrupts>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80ec 	beq.w	80038c2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 fe6a 	bl	80073c8 <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036fe:	d104      	bne.n	800370a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003708:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f003 fe5a 	bl	80073c8 <USB_ReadInterrupts>
 8003714:	4603      	mov	r3, r0
 8003716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800371a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371e:	d104      	bne.n	800372a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003728:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f003 fe4a 	bl	80073c8 <USB_ReadInterrupts>
 8003734:	4603      	mov	r3, r0
 8003736:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800373a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800373e:	d104      	bne.n	800374a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003748:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f003 fe3a 	bl	80073c8 <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d103      	bne.n	8003766 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2202      	movs	r2, #2
 8003764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fe2c 	bl	80073c8 <USB_ReadInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377a:	d11c      	bne.n	80037b6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003784:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003796:	2110      	movs	r1, #16
 8003798:	6938      	ldr	r0, [r7, #16]
 800379a:	f003 fd1b 	bl	80071d4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800379e:	6938      	ldr	r0, [r7, #16]
 80037a0:	f003 fd4c 	bl	800723c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 ff22 	bl	80075f4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f006 fcef 	bl	800a194 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f003 fe04 	bl	80073c8 <USB_ReadInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ca:	d102      	bne.n	80037d2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f001 f89e 	bl	800490e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f003 fdf6 	bl	80073c8 <USB_ReadInterrupts>
 80037dc:	4603      	mov	r3, r0
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d106      	bne.n	80037f4 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f006 fcb8 	bl	800a15c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2208      	movs	r2, #8
 80037f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f003 fde5 	bl	80073c8 <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	f003 0310 	and.w	r3, r3, #16
 8003804:	2b10      	cmp	r3, #16
 8003806:	d101      	bne.n	800380c <HAL_HCD_IRQHandler+0x158>
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_HCD_IRQHandler+0x15a>
 800380c:	2300      	movs	r3, #0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d012      	beq.n	8003838 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0210 	bic.w	r2, r2, #16
 8003820:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 ffa1 	bl	800476a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0210 	orr.w	r2, r2, #16
 8003836:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f003 fdc3 	bl	80073c8 <USB_ReadInterrupts>
 8003842:	4603      	mov	r3, r0
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800384c:	d13a      	bne.n	80038c4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f004 f9f8 	bl	8007c48 <USB_HC_ReadInterrupt>
 8003858:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	e025      	b.n	80038ac <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	d018      	beq.n	80038a6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388a:	d106      	bne.n	800389a <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	b2db      	uxtb	r3, r3
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8ab 	bl	80039ee <HCD_HC_IN_IRQHandler>
 8003898:	e005      	b.n	80038a6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fbf9 	bl	8004098 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	3301      	adds	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d3d4      	bcc.n	8003860 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038be:	615a      	str	r2, [r3, #20]
 80038c0:	e000      	b.n	80038c4 <HAL_HCD_IRQHandler+0x210>
      return;
 80038c2:	bf00      	nop
    }
  }
}
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b082      	sub	sp, #8
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <HAL_HCD_Start+0x16>
 80038dc:	2302      	movs	r3, #2
 80038de:	e013      	b.n	8003908 <HAL_HCD_Start+0x3e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2101      	movs	r1, #1
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 fee4 	bl	80076bc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fbfc 	bl	80070f6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800391e:	2b01      	cmp	r3, #1
 8003920:	d101      	bne.n	8003926 <HAL_HCD_Stop+0x16>
 8003922:	2302      	movs	r3, #2
 8003924:	e00d      	b.n	8003942 <HAL_HCD_Stop+0x32>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fad2 	bl	8007edc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f003 fe86 	bl	8007668 <USB_ResetPort>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	460b      	mov	r3, r1
 8003970:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3360      	adds	r3, #96	; 0x60
 8003980:	781b      	ldrb	r3, [r3, #0]
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	3350      	adds	r3, #80	; 0x50
 80039a8:	681b      	ldr	r3, [r3, #0]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b082      	sub	sp, #8
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f003 feca 	bl	800775c <USB_GetCurrentFrame>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 fea5 	bl	800772e <USB_GetHostSpeed>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 0304 	and.w	r3, r3, #4
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d11a      	bne.n	8003a54 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	212c      	movs	r1, #44	; 0x2c
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3361      	adds	r3, #97	; 0x61
 8003a3e:	2206      	movs	r2, #6
 8003a40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f004 f90c 	bl	8007c6a <USB_HC_Halt>
 8003a52:	e0af      	b.n	8003bb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6a:	d11b      	bne.n	8003aa4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	2207      	movs	r2, #7
 8003a90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f004 f8e4 	bl	8007c6a <USB_HC_Halt>
 8003aa2:	e087      	b.n	8003bb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	d109      	bne.n	8003ace <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2320      	movs	r3, #32
 8003aca:	6093      	str	r3, [r2, #8]
 8003acc:	e072      	b.n	8003bb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d11a      	bne.n	8003b1a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af0:	461a      	mov	r2, r3
 8003af2:	2308      	movs	r3, #8
 8003af4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	212c      	movs	r1, #44	; 0x2c
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	4413      	add	r3, r2
 8003b02:	3361      	adds	r3, #97	; 0x61
 8003b04:	2205      	movs	r2, #5
 8003b06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f004 f8a9 	bl	8007c6a <USB_HC_Halt>
 8003b18:	e04c      	b.n	8003bb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b30:	d11b      	bne.n	8003b6a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3e:	461a      	mov	r2, r3
 8003b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3361      	adds	r3, #97	; 0x61
 8003b54:	2208      	movs	r2, #8
 8003b56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 f881 	bl	8007c6a <USB_HC_Halt>
 8003b68:	e024      	b.n	8003bb4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d119      	bne.n	8003bb4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	212c      	movs	r1, #44	; 0x2c
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	3361      	adds	r3, #97	; 0x61
 8003ba0:	2206      	movs	r2, #6
 8003ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 f85b 	bl	8007c6a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bca:	d112      	bne.n	8003bf2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 f847 	bl	8007c6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be8:	461a      	mov	r2, r3
 8003bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bee:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003bf0:	e24e      	b.n	8004090 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	f040 80df 	bne.w	8003dc8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d019      	beq.n	8003c46 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	212c      	movs	r1, #44	; 0x2c
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3348      	adds	r3, #72	; 0x48
 8003c20:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	0159      	lsls	r1, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	440b      	add	r3, r1
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c34:	1ad2      	subs	r2, r2, r3
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	202c      	movs	r0, #44	; 0x2c
 8003c3c:	fb00 f303 	mul.w	r3, r0, r3
 8003c40:	440b      	add	r3, r1
 8003c42:	3350      	adds	r3, #80	; 0x50
 8003c44:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	212c      	movs	r1, #44	; 0x2c
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	4413      	add	r3, r2
 8003c52:	3361      	adds	r3, #97	; 0x61
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	212c      	movs	r1, #44	; 0x2c
 8003c5e:	fb01 f303 	mul.w	r3, r1, r3
 8003c62:	4413      	add	r3, r2
 8003c64:	335c      	adds	r3, #92	; 0x5c
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c76:	461a      	mov	r2, r3
 8003c78:	2301      	movs	r3, #1
 8003c7a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	212c      	movs	r1, #44	; 0x2c
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	333f      	adds	r3, #63	; 0x3f
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	333f      	adds	r3, #63	; 0x3f
 8003c9e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d111      	bne.n	8003cc8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	b2d2      	uxtb	r2, r2
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f003 ffdb 	bl	8007c6a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	2310      	movs	r3, #16
 8003cc4:	6093      	str	r3, [r2, #8]
 8003cc6:	e03a      	b.n	8003d3e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	212c      	movs	r1, #44	; 0x2c
 8003cce:	fb01 f303 	mul.w	r3, r1, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	333f      	adds	r3, #63	; 0x3f
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d009      	beq.n	8003cf0 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	212c      	movs	r1, #44	; 0x2c
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	333f      	adds	r3, #63	; 0x3f
 8003cea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d126      	bne.n	8003d3e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d0e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3360      	adds	r3, #96	; 0x60
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	b2d9      	uxtb	r1, r3
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	202c      	movs	r0, #44	; 0x2c
 8003d2c:	fb00 f303 	mul.w	r3, r0, r3
 8003d30:	4413      	add	r3, r2
 8003d32:	3360      	adds	r3, #96	; 0x60
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f006 fa39 	bl	800a1b0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d12b      	bne.n	8003d9e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	212c      	movs	r1, #44	; 0x2c
 8003d4c:	fb01 f303 	mul.w	r3, r1, r3
 8003d50:	4413      	add	r3, r2
 8003d52:	3348      	adds	r3, #72	; 0x48
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	202c      	movs	r0, #44	; 0x2c
 8003d5c:	fb00 f202 	mul.w	r2, r0, r2
 8003d60:	440a      	add	r2, r1
 8003d62:	3240      	adds	r2, #64	; 0x40
 8003d64:	8812      	ldrh	r2, [r2, #0]
 8003d66:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 818e 	beq.w	8004090 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	212c      	movs	r1, #44	; 0x2c
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
 8003d7e:	4413      	add	r3, r2
 8003d80:	3354      	adds	r3, #84	; 0x54
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	f083 0301 	eor.w	r3, r3, #1
 8003d88:	b2d8      	uxtb	r0, r3
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	212c      	movs	r1, #44	; 0x2c
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	4413      	add	r3, r2
 8003d96:	3354      	adds	r3, #84	; 0x54
 8003d98:	4602      	mov	r2, r0
 8003d9a:	701a      	strb	r2, [r3, #0]
}
 8003d9c:	e178      	b.n	8004090 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	212c      	movs	r1, #44	; 0x2c
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	3354      	adds	r3, #84	; 0x54
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	f083 0301 	eor.w	r3, r3, #1
 8003db2:	b2d8      	uxtb	r0, r3
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	212c      	movs	r1, #44	; 0x2c
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3354      	adds	r3, #84	; 0x54
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	701a      	strb	r2, [r3, #0]
}
 8003dc6:	e163      	b.n	8004090 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	f040 80f6 	bne.w	8003fcc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	212c      	movs	r1, #44	; 0x2c
 8003de6:	fb01 f303 	mul.w	r3, r1, r3
 8003dea:	4413      	add	r3, r2
 8003dec:	3361      	adds	r3, #97	; 0x61
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d109      	bne.n	8003e08 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	212c      	movs	r1, #44	; 0x2c
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	4413      	add	r3, r2
 8003e00:	3360      	adds	r3, #96	; 0x60
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	e0c9      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	3361      	adds	r3, #97	; 0x61
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d109      	bne.n	8003e30 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	212c      	movs	r1, #44	; 0x2c
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	3360      	adds	r3, #96	; 0x60
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	e0b5      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3361      	adds	r3, #97	; 0x61
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d009      	beq.n	8003e58 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	3361      	adds	r3, #97	; 0x61
 8003e52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d150      	bne.n	8003efa <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	335c      	adds	r3, #92	; 0x5c
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	202c      	movs	r0, #44	; 0x2c
 8003e70:	fb00 f303 	mul.w	r3, r0, r3
 8003e74:	440b      	add	r3, r1
 8003e76:	335c      	adds	r3, #92	; 0x5c
 8003e78:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	212c      	movs	r1, #44	; 0x2c
 8003e80:	fb01 f303 	mul.w	r3, r1, r3
 8003e84:	4413      	add	r3, r2
 8003e86:	335c      	adds	r3, #92	; 0x5c
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d912      	bls.n	8003eb4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	335c      	adds	r3, #92	; 0x5c
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	3360      	adds	r3, #96	; 0x60
 8003eae:	2204      	movs	r2, #4
 8003eb0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003eb2:	e073      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	212c      	movs	r1, #44	; 0x2c
 8003eba:	fb01 f303 	mul.w	r3, r1, r3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3360      	adds	r3, #96	; 0x60
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003edc:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ee4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ef8:	e050      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	212c      	movs	r1, #44	; 0x2c
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	4413      	add	r3, r2
 8003f06:	3361      	adds	r3, #97	; 0x61
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d122      	bne.n	8003f54 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3360      	adds	r3, #96	; 0x60
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f36:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f3e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	e023      	b.n	8003f9c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	212c      	movs	r1, #44	; 0x2c
 8003f5a:	fb01 f303 	mul.w	r3, r1, r3
 8003f5e:	4413      	add	r3, r2
 8003f60:	3361      	adds	r3, #97	; 0x61
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d119      	bne.n	8003f9c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	335c      	adds	r3, #92	; 0x5c
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	202c      	movs	r0, #44	; 0x2c
 8003f80:	fb00 f303 	mul.w	r3, r0, r3
 8003f84:	440b      	add	r3, r1
 8003f86:	335c      	adds	r3, #92	; 0x5c
 8003f88:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	3360      	adds	r3, #96	; 0x60
 8003f98:	2204      	movs	r2, #4
 8003f9a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa8:	461a      	mov	r2, r3
 8003faa:	2302      	movs	r3, #2
 8003fac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	b2d9      	uxtb	r1, r3
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	202c      	movs	r0, #44	; 0x2c
 8003fb8:	fb00 f303 	mul.w	r3, r0, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3360      	adds	r3, #96	; 0x60
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f006 f8f3 	bl	800a1b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fca:	e061      	b.n	8004090 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0310 	and.w	r3, r3, #16
 8003fde:	2b10      	cmp	r3, #16
 8003fe0:	d156      	bne.n	8004090 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	212c      	movs	r1, #44	; 0x2c
 8003fe8:	fb01 f303 	mul.w	r3, r1, r3
 8003fec:	4413      	add	r3, r2
 8003fee:	333f      	adds	r3, #63	; 0x3f
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b03      	cmp	r3, #3
 8003ff4:	d111      	bne.n	800401a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	212c      	movs	r1, #44	; 0x2c
 8003ffc:	fb01 f303 	mul.w	r3, r1, r3
 8004000:	4413      	add	r3, r2
 8004002:	335c      	adds	r3, #92	; 0x5c
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f003 fe29 	bl	8007c6a <USB_HC_Halt>
 8004018:	e031      	b.n	800407e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	333f      	adds	r3, #63	; 0x3f
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	333f      	adds	r3, #63	; 0x3f
 800403c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800403e:	2b02      	cmp	r3, #2
 8004040:	d11d      	bne.n	800407e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	335c      	adds	r3, #92	; 0x5c
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d110      	bne.n	800407e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	212c      	movs	r1, #44	; 0x2c
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	4413      	add	r3, r2
 8004068:	3361      	adds	r3, #97	; 0x61
 800406a:	2203      	movs	r2, #3
 800406c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f003 fdf6 	bl	8007c6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	461a      	mov	r2, r3
 800408c:	2310      	movs	r3, #16
 800408e:	6093      	str	r3, [r2, #8]
}
 8004090:	bf00      	nop
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	015a      	lsls	r2, r3, #5
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	4413      	add	r3, r2
 80040ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d11a      	bne.n	80040fe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	2304      	movs	r3, #4
 80040d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	212c      	movs	r1, #44	; 0x2c
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	3361      	adds	r3, #97	; 0x61
 80040e8:	2206      	movs	r2, #6
 80040ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f003 fdb7 	bl	8007c6a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80040fc:	e331      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b20      	cmp	r3, #32
 8004112:	d12e      	bne.n	8004172 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	4413      	add	r3, r2
 800411c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004120:	461a      	mov	r2, r3
 8004122:	2320      	movs	r3, #32
 8004124:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	333d      	adds	r3, #61	; 0x3d
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	f040 8313 	bne.w	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	333d      	adds	r3, #61	; 0x3d
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	212c      	movs	r1, #44	; 0x2c
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	4413      	add	r3, r2
 800415a:	3360      	adds	r3, #96	; 0x60
 800415c:	2202      	movs	r2, #2
 800415e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	4611      	mov	r1, r2
 800416a:	4618      	mov	r0, r3
 800416c:	f003 fd7d 	bl	8007c6a <USB_HC_Halt>
}
 8004170:	e2f7      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004188:	d112      	bne.n	80041b0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4413      	add	r3, r2
 8004192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004196:	461a      	mov	r2, r3
 8004198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800419c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	4611      	mov	r1, r2
 80041a8:	4618      	mov	r0, r3
 80041aa:	f003 fd5e 	bl	8007c6a <USB_HC_Halt>
}
 80041ae:	e2d8      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d140      	bne.n	8004248 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	335c      	adds	r3, #92	; 0x5c
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b40      	cmp	r3, #64	; 0x40
 80041ec:	d111      	bne.n	8004212 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	212c      	movs	r1, #44	; 0x2c
 80041f4:	fb01 f303 	mul.w	r3, r1, r3
 80041f8:	4413      	add	r3, r2
 80041fa:	333d      	adds	r3, #61	; 0x3d
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	4413      	add	r3, r2
 8004208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800420c:	461a      	mov	r2, r3
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	4413      	add	r3, r2
 800421a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421e:	461a      	mov	r2, r3
 8004220:	2301      	movs	r3, #1
 8004222:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3361      	adds	r3, #97	; 0x61
 8004232:	2201      	movs	r2, #1
 8004234:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	4611      	mov	r1, r2
 8004240:	4618      	mov	r0, r3
 8004242:	f003 fd12 	bl	8007c6a <USB_HC_Halt>
}
 8004246:	e28c      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d12c      	bne.n	80042b8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	3361      	adds	r3, #97	; 0x61
 800426c:	2204      	movs	r2, #4
 800426e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	333d      	adds	r3, #61	; 0x3d
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	335c      	adds	r3, #92	; 0x5c
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	b2d2      	uxtb	r2, r2
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f003 fce3 	bl	8007c6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b0:	461a      	mov	r2, r3
 80042b2:	2340      	movs	r3, #64	; 0x40
 80042b4:	6093      	str	r3, [r2, #8]
}
 80042b6:	e254      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d11a      	bne.n	8004304 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042da:	461a      	mov	r2, r3
 80042dc:	2308      	movs	r3, #8
 80042de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	3361      	adds	r3, #97	; 0x61
 80042ee:	2205      	movs	r2, #5
 80042f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	4611      	mov	r1, r2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f003 fcb4 	bl	8007c6a <USB_HC_Halt>
}
 8004302:	e22e      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b10      	cmp	r3, #16
 8004318:	d140      	bne.n	800439c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	335c      	adds	r3, #92	; 0x5c
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	3361      	adds	r3, #97	; 0x61
 800433a:	2203      	movs	r2, #3
 800433c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	212c      	movs	r1, #44	; 0x2c
 8004344:	fb01 f303 	mul.w	r3, r1, r3
 8004348:	4413      	add	r3, r2
 800434a:	333d      	adds	r3, #61	; 0x3d
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d112      	bne.n	8004378 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	212c      	movs	r1, #44	; 0x2c
 8004358:	fb01 f303 	mul.w	r3, r1, r3
 800435c:	4413      	add	r3, r2
 800435e:	333c      	adds	r3, #60	; 0x3c
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	333d      	adds	r3, #61	; 0x3d
 8004374:	2201      	movs	r2, #1
 8004376:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f003 fc71 	bl	8007c6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	461a      	mov	r2, r3
 8004396:	2310      	movs	r3, #16
 8004398:	6093      	str	r3, [r2, #8]
}
 800439a:	e1e2      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d164      	bne.n	800447c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d111      	bne.n	80043de <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	212c      	movs	r1, #44	; 0x2c
 80043c0:	fb01 f303 	mul.w	r3, r1, r3
 80043c4:	4413      	add	r3, r2
 80043c6:	3361      	adds	r3, #97	; 0x61
 80043c8:	2206      	movs	r2, #6
 80043ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f003 fc47 	bl	8007c6a <USB_HC_Halt>
 80043dc:	e044      	b.n	8004468 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	335c      	adds	r3, #92	; 0x5c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	202c      	movs	r0, #44	; 0x2c
 80043f6:	fb00 f303 	mul.w	r3, r0, r3
 80043fa:	440b      	add	r3, r1
 80043fc:	335c      	adds	r3, #92	; 0x5c
 80043fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	212c      	movs	r1, #44	; 0x2c
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	335c      	adds	r3, #92	; 0x5c
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d920      	bls.n	8004456 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	212c      	movs	r1, #44	; 0x2c
 800441a:	fb01 f303 	mul.w	r3, r1, r3
 800441e:	4413      	add	r3, r2
 8004420:	335c      	adds	r3, #92	; 0x5c
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	212c      	movs	r1, #44	; 0x2c
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	4413      	add	r3, r2
 8004432:	3360      	adds	r3, #96	; 0x60
 8004434:	2204      	movs	r2, #4
 8004436:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	b2d9      	uxtb	r1, r3
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	202c      	movs	r0, #44	; 0x2c
 8004442:	fb00 f303 	mul.w	r3, r0, r3
 8004446:	4413      	add	r3, r2
 8004448:	3360      	adds	r3, #96	; 0x60
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f005 feae 	bl	800a1b0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004454:	e008      	b.n	8004468 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	212c      	movs	r1, #44	; 0x2c
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	4413      	add	r3, r2
 8004462:	3360      	adds	r3, #96	; 0x60
 8004464:	2202      	movs	r2, #2
 8004466:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004474:	461a      	mov	r2, r3
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	6093      	str	r3, [r2, #8]
}
 800447a:	e172      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004492:	d11b      	bne.n	80044cc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	212c      	movs	r1, #44	; 0x2c
 800449a:	fb01 f303 	mul.w	r3, r1, r3
 800449e:	4413      	add	r3, r2
 80044a0:	3361      	adds	r3, #97	; 0x61
 80044a2:	2208      	movs	r2, #8
 80044a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f003 fbda 	bl	8007c6a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c2:	461a      	mov	r2, r3
 80044c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044c8:	6093      	str	r3, [r2, #8]
}
 80044ca:	e14a      	b.n	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	f040 813f 	bne.w	8004762 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	3361      	adds	r3, #97	; 0x61
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d17d      	bne.n	80045f4 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	212c      	movs	r1, #44	; 0x2c
 80044fe:	fb01 f303 	mul.w	r3, r1, r3
 8004502:	4413      	add	r3, r2
 8004504:	3360      	adds	r3, #96	; 0x60
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	212c      	movs	r1, #44	; 0x2c
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	4413      	add	r3, r2
 8004516:	333f      	adds	r3, #63	; 0x3f
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d00a      	beq.n	8004534 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	212c      	movs	r1, #44	; 0x2c
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	333f      	adds	r3, #63	; 0x3f
 800452c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800452e:	2b03      	cmp	r3, #3
 8004530:	f040 8100 	bne.w	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d113      	bne.n	8004564 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	4413      	add	r3, r2
 8004548:	3355      	adds	r3, #85	; 0x55
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	f083 0301 	eor.w	r3, r3, #1
 8004550:	b2d8      	uxtb	r0, r3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	212c      	movs	r1, #44	; 0x2c
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	4413      	add	r3, r2
 800455e:	3355      	adds	r3, #85	; 0x55
 8004560:	4602      	mov	r2, r0
 8004562:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b01      	cmp	r3, #1
 800456a:	f040 80e3 	bne.w	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	212c      	movs	r1, #44	; 0x2c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	334c      	adds	r3, #76	; 0x4c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 80d8 	beq.w	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	212c      	movs	r1, #44	; 0x2c
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	334c      	adds	r3, #76	; 0x4c
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	202c      	movs	r0, #44	; 0x2c
 800459a:	fb00 f202 	mul.w	r2, r0, r2
 800459e:	440a      	add	r2, r1
 80045a0:	3240      	adds	r2, #64	; 0x40
 80045a2:	8812      	ldrh	r2, [r2, #0]
 80045a4:	4413      	add	r3, r2
 80045a6:	3b01      	subs	r3, #1
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	202c      	movs	r0, #44	; 0x2c
 80045ae:	fb00 f202 	mul.w	r2, r0, r2
 80045b2:	440a      	add	r2, r1
 80045b4:	3240      	adds	r2, #64	; 0x40
 80045b6:	8812      	ldrh	r2, [r2, #0]
 80045b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 80b5 	beq.w	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	212c      	movs	r1, #44	; 0x2c
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	3355      	adds	r3, #85	; 0x55
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	f083 0301 	eor.w	r3, r3, #1
 80045de:	b2d8      	uxtb	r0, r3
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	212c      	movs	r1, #44	; 0x2c
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	3355      	adds	r3, #85	; 0x55
 80045ee:	4602      	mov	r2, r0
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e09f      	b.n	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	212c      	movs	r1, #44	; 0x2c
 80045fa:	fb01 f303 	mul.w	r3, r1, r3
 80045fe:	4413      	add	r3, r2
 8004600:	3361      	adds	r3, #97	; 0x61
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d109      	bne.n	800461c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	212c      	movs	r1, #44	; 0x2c
 800460e:	fb01 f303 	mul.w	r3, r1, r3
 8004612:	4413      	add	r3, r2
 8004614:	3360      	adds	r3, #96	; 0x60
 8004616:	2202      	movs	r2, #2
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	e08b      	b.n	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	3361      	adds	r3, #97	; 0x61
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d109      	bne.n	8004644 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	3360      	adds	r3, #96	; 0x60
 800463e:	2202      	movs	r2, #2
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e077      	b.n	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	212c      	movs	r1, #44	; 0x2c
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	4413      	add	r3, r2
 8004650:	3361      	adds	r3, #97	; 0x61
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b05      	cmp	r3, #5
 8004656:	d109      	bne.n	800466c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	212c      	movs	r1, #44	; 0x2c
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	4413      	add	r3, r2
 8004664:	3360      	adds	r3, #96	; 0x60
 8004666:	2205      	movs	r2, #5
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e063      	b.n	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	212c      	movs	r1, #44	; 0x2c
 8004672:	fb01 f303 	mul.w	r3, r1, r3
 8004676:	4413      	add	r3, r2
 8004678:	3361      	adds	r3, #97	; 0x61
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b06      	cmp	r3, #6
 800467e:	d009      	beq.n	8004694 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	212c      	movs	r1, #44	; 0x2c
 8004686:	fb01 f303 	mul.w	r3, r1, r3
 800468a:	4413      	add	r3, r2
 800468c:	3361      	adds	r3, #97	; 0x61
 800468e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004690:	2b08      	cmp	r3, #8
 8004692:	d14f      	bne.n	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	212c      	movs	r1, #44	; 0x2c
 800469a:	fb01 f303 	mul.w	r3, r1, r3
 800469e:	4413      	add	r3, r2
 80046a0:	335c      	adds	r3, #92	; 0x5c
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	202c      	movs	r0, #44	; 0x2c
 80046ac:	fb00 f303 	mul.w	r3, r0, r3
 80046b0:	440b      	add	r3, r1
 80046b2:	335c      	adds	r3, #92	; 0x5c
 80046b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	212c      	movs	r1, #44	; 0x2c
 80046bc:	fb01 f303 	mul.w	r3, r1, r3
 80046c0:	4413      	add	r3, r2
 80046c2:	335c      	adds	r3, #92	; 0x5c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d912      	bls.n	80046f0 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	335c      	adds	r3, #92	; 0x5c
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	212c      	movs	r1, #44	; 0x2c
 80046e2:	fb01 f303 	mul.w	r3, r1, r3
 80046e6:	4413      	add	r3, r2
 80046e8:	3360      	adds	r3, #96	; 0x60
 80046ea:	2204      	movs	r2, #4
 80046ec:	701a      	strb	r2, [r3, #0]
 80046ee:	e021      	b.n	8004734 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	212c      	movs	r1, #44	; 0x2c
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	4413      	add	r3, r2
 80046fc:	3360      	adds	r3, #96	; 0x60
 80046fe:	2202      	movs	r2, #2
 8004700:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	4413      	add	r3, r2
 800470a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004718:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004720:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	4413      	add	r3, r2
 800472a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800472e:	461a      	mov	r2, r3
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	461a      	mov	r2, r3
 8004742:	2302      	movs	r3, #2
 8004744:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	b2d9      	uxtb	r1, r3
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	202c      	movs	r0, #44	; 0x2c
 8004750:	fb00 f303 	mul.w	r3, r0, r3
 8004754:	4413      	add	r3, r2
 8004756:	3360      	adds	r3, #96	; 0x60
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f005 fd27 	bl	800a1b0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004762:	bf00      	nop
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b08a      	sub	sp, #40	; 0x28
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	0c5b      	lsrs	r3, r3, #17
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800479e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d004      	beq.n	80047b0 <HCD_RXQLVL_IRQHandler+0x46>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	f000 80a9 	beq.w	8004900 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80047ae:	e0aa      	b.n	8004906 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80a6 	beq.w	8004904 <HCD_RXQLVL_IRQHandler+0x19a>
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	3344      	adds	r3, #68	; 0x44
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 809b 	beq.w	8004904 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	212c      	movs	r1, #44	; 0x2c
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	3350      	adds	r3, #80	; 0x50
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	441a      	add	r2, r3
 80047e2:	6879      	ldr	r1, [r7, #4]
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	202c      	movs	r0, #44	; 0x2c
 80047e8:	fb00 f303 	mul.w	r3, r0, r3
 80047ec:	440b      	add	r3, r1
 80047ee:	334c      	adds	r3, #76	; 0x4c
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d87a      	bhi.n	80048ec <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	212c      	movs	r1, #44	; 0x2c
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	4413      	add	r3, r2
 8004806:	3344      	adds	r3, #68	; 0x44
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	b292      	uxth	r2, r2
 800480e:	4619      	mov	r1, r3
 8004810:	f002 fd82 	bl	8007318 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	3344      	adds	r3, #68	; 0x44
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	441a      	add	r2, r3
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	202c      	movs	r0, #44	; 0x2c
 800482e:	fb00 f303 	mul.w	r3, r0, r3
 8004832:	440b      	add	r3, r1
 8004834:	3344      	adds	r3, #68	; 0x44
 8004836:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	212c      	movs	r1, #44	; 0x2c
 800483e:	fb01 f303 	mul.w	r3, r1, r3
 8004842:	4413      	add	r3, r2
 8004844:	3350      	adds	r3, #80	; 0x50
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	441a      	add	r2, r3
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	202c      	movs	r0, #44	; 0x2c
 8004852:	fb00 f303 	mul.w	r3, r0, r3
 8004856:	440b      	add	r3, r1
 8004858:	3350      	adds	r3, #80	; 0x50
 800485a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	4413      	add	r3, r2
 8004864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	0cdb      	lsrs	r3, r3, #19
 800486c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004870:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	212c      	movs	r1, #44	; 0x2c
 8004878:	fb01 f303 	mul.w	r3, r1, r3
 800487c:	4413      	add	r3, r2
 800487e:	3340      	adds	r3, #64	; 0x40
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	4293      	cmp	r3, r2
 8004888:	d13c      	bne.n	8004904 <HCD_RXQLVL_IRQHandler+0x19a>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d039      	beq.n	8004904 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	461a      	mov	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	212c      	movs	r1, #44	; 0x2c
 80048c8:	fb01 f303 	mul.w	r3, r1, r3
 80048cc:	4413      	add	r3, r2
 80048ce:	3354      	adds	r3, #84	; 0x54
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	f083 0301 	eor.w	r3, r3, #1
 80048d6:	b2d8      	uxtb	r0, r3
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	212c      	movs	r1, #44	; 0x2c
 80048de:	fb01 f303 	mul.w	r3, r1, r3
 80048e2:	4413      	add	r3, r2
 80048e4:	3354      	adds	r3, #84	; 0x54
 80048e6:	4602      	mov	r2, r0
 80048e8:	701a      	strb	r2, [r3, #0]
      break;
 80048ea:	e00b      	b.n	8004904 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	212c      	movs	r1, #44	; 0x2c
 80048f2:	fb01 f303 	mul.w	r3, r1, r3
 80048f6:	4413      	add	r3, r2
 80048f8:	3360      	adds	r3, #96	; 0x60
 80048fa:	2204      	movs	r2, #4
 80048fc:	701a      	strb	r2, [r3, #0]
      break;
 80048fe:	e001      	b.n	8004904 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004900:	bf00      	nop
 8004902:	e000      	b.n	8004906 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004904:	bf00      	nop
  }
}
 8004906:	bf00      	nop
 8004908:	3728      	adds	r7, #40	; 0x28
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800493a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b02      	cmp	r3, #2
 8004944:	d10b      	bne.n	800495e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d102      	bne.n	8004956 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f005 fc11 	bl	800a178 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f043 0302 	orr.w	r3, r3, #2
 800495c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d132      	bne.n	80049ce <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f043 0308 	orr.w	r3, r3, #8
 800496e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	2b04      	cmp	r3, #4
 8004978:	d126      	bne.n	80049c8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2b02      	cmp	r3, #2
 8004980:	d113      	bne.n	80049aa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004988:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800498c:	d106      	bne.n	800499c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2102      	movs	r1, #2
 8004994:	4618      	mov	r0, r3
 8004996:	f002 fe2d 	bl	80075f4 <USB_InitFSLSPClkSel>
 800499a:	e011      	b.n	80049c0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2101      	movs	r1, #1
 80049a2:	4618      	mov	r0, r3
 80049a4:	f002 fe26 	bl	80075f4 <USB_InitFSLSPClkSel>
 80049a8:	e00a      	b.n	80049c0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d106      	bne.n	80049c0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b8:	461a      	mov	r2, r3
 80049ba:	f64e 2360 	movw	r3, #60000	; 0xea60
 80049be:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f005 fc03 	bl	800a1cc <HAL_HCD_PortEnabled_Callback>
 80049c6:	e002      	b.n	80049ce <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f005 fc0d 	bl	800a1e8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d103      	bne.n	80049e0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f043 0320 	orr.w	r3, r3, #32
 80049de:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049e6:	461a      	mov	r2, r3
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6013      	str	r3, [r2, #0]
}
 80049ec:	bf00      	nop
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e12b      	b.n	8004c5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc fca6 	bl	800136c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2224      	movs	r2, #36	; 0x24
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0201 	bic.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a58:	f001 fa88 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8004a5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	4a81      	ldr	r2, [pc, #516]	; (8004c68 <HAL_I2C_Init+0x274>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d807      	bhi.n	8004a78 <HAL_I2C_Init+0x84>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4a80      	ldr	r2, [pc, #512]	; (8004c6c <HAL_I2C_Init+0x278>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	bf94      	ite	ls
 8004a70:	2301      	movls	r3, #1
 8004a72:	2300      	movhi	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e006      	b.n	8004a86 <HAL_I2C_Init+0x92>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4a7d      	ldr	r2, [pc, #500]	; (8004c70 <HAL_I2C_Init+0x27c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	bf94      	ite	ls
 8004a80:	2301      	movls	r3, #1
 8004a82:	2300      	movhi	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0e7      	b.n	8004c5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4a78      	ldr	r2, [pc, #480]	; (8004c74 <HAL_I2C_Init+0x280>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	0c9b      	lsrs	r3, r3, #18
 8004a98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	4a6a      	ldr	r2, [pc, #424]	; (8004c68 <HAL_I2C_Init+0x274>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d802      	bhi.n	8004ac8 <HAL_I2C_Init+0xd4>
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	e009      	b.n	8004adc <HAL_I2C_Init+0xe8>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	4a69      	ldr	r2, [pc, #420]	; (8004c78 <HAL_I2C_Init+0x284>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	099b      	lsrs	r3, r3, #6
 8004ada:	3301      	adds	r3, #1
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	495c      	ldr	r1, [pc, #368]	; (8004c68 <HAL_I2C_Init+0x274>)
 8004af8:	428b      	cmp	r3, r1
 8004afa:	d819      	bhi.n	8004b30 <HAL_I2C_Init+0x13c>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1e59      	subs	r1, r3, #1
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b10:	400b      	ands	r3, r1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_I2C_Init+0x138>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1e59      	subs	r1, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b24:	3301      	adds	r3, #1
 8004b26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2a:	e051      	b.n	8004bd0 <HAL_I2C_Init+0x1dc>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	e04f      	b.n	8004bd0 <HAL_I2C_Init+0x1dc>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d111      	bne.n	8004b5c <HAL_I2C_Init+0x168>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1e58      	subs	r0, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6859      	ldr	r1, [r3, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	440b      	add	r3, r1
 8004b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	e012      	b.n	8004b82 <HAL_I2C_Init+0x18e>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e58      	subs	r0, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	0099      	lsls	r1, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_I2C_Init+0x196>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e022      	b.n	8004bd0 <HAL_I2C_Init+0x1dc>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10e      	bne.n	8004bb0 <HAL_I2C_Init+0x1bc>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	1e58      	subs	r0, r3, #1
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6859      	ldr	r1, [r3, #4]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bae:	e00f      	b.n	8004bd0 <HAL_I2C_Init+0x1dc>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1e58      	subs	r0, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	0099      	lsls	r1, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	6809      	ldr	r1, [r1, #0]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69da      	ldr	r2, [r3, #28]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004bfe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6911      	ldr	r1, [r2, #16]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68d2      	ldr	r2, [r2, #12]
 8004c0a:	4311      	orrs	r1, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6812      	ldr	r2, [r2, #0]
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	000186a0 	.word	0x000186a0
 8004c6c:	001e847f 	.word	0x001e847f
 8004c70:	003d08ff 	.word	0x003d08ff
 8004c74:	431bde83 	.word	0x431bde83
 8004c78:	10624dd3 	.word	0x10624dd3

08004c7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b088      	sub	sp, #32
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e128      	b.n	8004ee0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a90      	ldr	r2, [pc, #576]	; (8004ee8 <HAL_I2S_Init+0x26c>)
 8004ca6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f7fc fba7 	bl	80013fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cc4:	f023 030f 	bic.w	r3, r3, #15
 8004cc8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d060      	beq.n	8004d9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e001      	b.n	8004cec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ce8:	2320      	movs	r3, #32
 8004cea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d802      	bhi.n	8004cfa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	f001 fa2c 	bl	8006158 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d00:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d0a:	d125      	bne.n	8004d58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d010      	beq.n	8004d36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	3305      	adds	r3, #5
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	e01f      	b.n	8004d76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d40:	4613      	mov	r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	4413      	add	r3, r2
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	461a      	mov	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d52:	3305      	adds	r3, #5
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e00e      	b.n	8004d76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	461a      	mov	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d72:	3305      	adds	r3, #5
 8004d74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	4a5c      	ldr	r2, [pc, #368]	; (8004eec <HAL_I2S_Init+0x270>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	08db      	lsrs	r3, r3, #3
 8004d80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	61bb      	str	r3, [r7, #24]
 8004d9a:	e003      	b.n	8004da4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d902      	bls.n	8004db0 <HAL_I2S_Init+0x134>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	2bff      	cmp	r3, #255	; 0xff
 8004dae:	d907      	bls.n	8004dc0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db4:	f043 0210 	orr.w	r2, r3, #16
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e08f      	b.n	8004ee0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	ea42 0103 	orr.w	r1, r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004dde:	f023 030f 	bic.w	r3, r3, #15
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6851      	ldr	r1, [r2, #4]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6892      	ldr	r2, [r2, #8]
 8004dea:	4311      	orrs	r1, r2
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68d2      	ldr	r2, [r2, #12]
 8004df0:	4311      	orrs	r1, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6992      	ldr	r2, [r2, #24]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d161      	bne.n	8004ed0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a38      	ldr	r2, [pc, #224]	; (8004ef0 <HAL_I2S_Init+0x274>)
 8004e10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a37      	ldr	r2, [pc, #220]	; (8004ef4 <HAL_I2S_Init+0x278>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d101      	bne.n	8004e20 <HAL_I2S_Init+0x1a4>
 8004e1c:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <HAL_I2S_Init+0x27c>)
 8004e1e:	e001      	b.n	8004e24 <HAL_I2S_Init+0x1a8>
 8004e20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	4932      	ldr	r1, [pc, #200]	; (8004ef4 <HAL_I2S_Init+0x278>)
 8004e2c:	428a      	cmp	r2, r1
 8004e2e:	d101      	bne.n	8004e34 <HAL_I2S_Init+0x1b8>
 8004e30:	4a31      	ldr	r2, [pc, #196]	; (8004ef8 <HAL_I2S_Init+0x27c>)
 8004e32:	e001      	b.n	8004e38 <HAL_I2S_Init+0x1bc>
 8004e34:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004e38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e3c:	f023 030f 	bic.w	r3, r3, #15
 8004e40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <HAL_I2S_Init+0x278>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d101      	bne.n	8004e50 <HAL_I2S_Init+0x1d4>
 8004e4c:	4b2a      	ldr	r3, [pc, #168]	; (8004ef8 <HAL_I2S_Init+0x27c>)
 8004e4e:	e001      	b.n	8004e54 <HAL_I2S_Init+0x1d8>
 8004e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e54:	2202      	movs	r2, #2
 8004e56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a25      	ldr	r2, [pc, #148]	; (8004ef4 <HAL_I2S_Init+0x278>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d101      	bne.n	8004e66 <HAL_I2S_Init+0x1ea>
 8004e62:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <HAL_I2S_Init+0x27c>)
 8004e64:	e001      	b.n	8004e6a <HAL_I2S_Init+0x1ee>
 8004e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e76:	d003      	beq.n	8004e80 <HAL_I2S_Init+0x204>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d103      	bne.n	8004e88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	e001      	b.n	8004e8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004e96:	4313      	orrs	r3, r2
 8004e98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	897b      	ldrh	r3, [r7, #10]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004eb8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a0d      	ldr	r2, [pc, #52]	; (8004ef4 <HAL_I2S_Init+0x278>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <HAL_I2S_Init+0x24c>
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <HAL_I2S_Init+0x27c>)
 8004ec6:	e001      	b.n	8004ecc <HAL_I2S_Init+0x250>
 8004ec8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ecc:	897a      	ldrh	r2, [r7, #10]
 8004ece:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3720      	adds	r7, #32
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	08004ff3 	.word	0x08004ff3
 8004eec:	cccccccd 	.word	0xcccccccd
 8004ef0:	08005109 	.word	0x08005109
 8004ef4:	40003800 	.word	0x40003800
 8004ef8:	40003400 	.word	0x40003400

08004efc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	881a      	ldrh	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	1c9a      	adds	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10e      	bne.n	8004f8c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f7c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff ffb8 	bl	8004efc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	1c9a      	adds	r2, r3, #2
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10e      	bne.n	8004fea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fda:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7ff ff93 	bl	8004f10 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b04      	cmp	r3, #4
 800500c:	d13a      	bne.n	8005084 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b01      	cmp	r3, #1
 8005016:	d109      	bne.n	800502c <I2S_IRQHandler+0x3a>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d102      	bne.n	800502c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7ff ffb4 	bl	8004f94 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005032:	2b40      	cmp	r3, #64	; 0x40
 8005034:	d126      	bne.n	8005084 <I2S_IRQHandler+0x92>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b20      	cmp	r3, #32
 8005042:	d11f      	bne.n	8005084 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005052:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	f043 0202 	orr.w	r2, r3, #2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ff50 	bl	8004f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b03      	cmp	r3, #3
 800508e:	d136      	bne.n	80050fe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b02      	cmp	r3, #2
 8005098:	d109      	bne.n	80050ae <I2S_IRQHandler+0xbc>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a4:	2b80      	cmp	r3, #128	; 0x80
 80050a6:	d102      	bne.n	80050ae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7ff ff45 	bl	8004f38 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d122      	bne.n	80050fe <I2S_IRQHandler+0x10c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b20      	cmp	r3, #32
 80050c4:	d11b      	bne.n	80050fe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	f043 0204 	orr.w	r2, r3, #4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f7ff ff13 	bl	8004f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a92      	ldr	r2, [pc, #584]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d101      	bne.n	8005126 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005122:	4b92      	ldr	r3, [pc, #584]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005124:	e001      	b.n	800512a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005126:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a8b      	ldr	r2, [pc, #556]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d101      	bne.n	8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005140:	4b8a      	ldr	r3, [pc, #552]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005142:	e001      	b.n	8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005144:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005154:	d004      	beq.n	8005160 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	f040 8099 	bne.w	8005292 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b02      	cmp	r3, #2
 8005168:	d107      	bne.n	800517a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f925 	bl	80053c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	d107      	bne.n	8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9c8 	bl	8005524 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d13a      	bne.n	8005214 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d035      	beq.n	8005214 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a6e      	ldr	r2, [pc, #440]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80051b2:	4b6e      	ldr	r3, [pc, #440]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051b4:	e001      	b.n	80051ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80051b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4969      	ldr	r1, [pc, #420]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051c2:	428b      	cmp	r3, r1
 80051c4:	d101      	bne.n	80051ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80051c6:	4b69      	ldr	r3, [pc, #420]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051c8:	e001      	b.n	80051ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80051ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051e4:	2300      	movs	r3, #0
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005206:	f043 0202 	orr.w	r2, r3, #2
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fe88 	bl	8004f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b08      	cmp	r3, #8
 800521c:	f040 80c3 	bne.w	80053a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f003 0320 	and.w	r3, r3, #32
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 80bd 	beq.w	80053a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800523a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a49      	ldr	r2, [pc, #292]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d101      	bne.n	800524a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005246:	4b49      	ldr	r3, [pc, #292]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005248:	e001      	b.n	800524e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800524a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4944      	ldr	r1, [pc, #272]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005256:	428b      	cmp	r3, r1
 8005258:	d101      	bne.n	800525e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800525a:	4b44      	ldr	r3, [pc, #272]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800525c:	e001      	b.n	8005262 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800525e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005262:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005266:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005268:	2300      	movs	r3, #0
 800526a:	60bb      	str	r3, [r7, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	f043 0204 	orr.w	r2, r3, #4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff fe4a 	bl	8004f24 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005290:	e089      	b.n	80053a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b02      	cmp	r3, #2
 800529a:	d107      	bne.n	80052ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f8be 	bl	8005428 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d107      	bne.n	80052c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f8fd 	bl	80054c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	d12f      	bne.n	8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d02a      	beq.n	8005330 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d101      	bne.n	80052f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80052f4:	4b1d      	ldr	r3, [pc, #116]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052f6:	e001      	b.n	80052fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80052f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4919      	ldr	r1, [pc, #100]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005304:	428b      	cmp	r3, r1
 8005306:	d101      	bne.n	800530c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005308:	4b18      	ldr	r3, [pc, #96]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800530a:	e001      	b.n	8005310 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800530c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005310:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005314:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005322:	f043 0202 	orr.w	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7ff fdfa 	bl	8004f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b08      	cmp	r3, #8
 8005338:	d136      	bne.n	80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d031      	beq.n	80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a07      	ldr	r2, [pc, #28]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d101      	bne.n	8005352 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005350:	e001      	b.n	8005356 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4902      	ldr	r1, [pc, #8]	; (8005368 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800535e:	428b      	cmp	r3, r1
 8005360:	d106      	bne.n	8005370 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005362:	4b02      	ldr	r3, [pc, #8]	; (800536c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005364:	e006      	b.n	8005374 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005366:	bf00      	nop
 8005368:	40003800 	.word	0x40003800
 800536c:	40003400 	.word	0x40003400
 8005370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005374:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005378:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005388:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f043 0204 	orr.w	r2, r3, #4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fdc0 	bl	8004f24 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053a4:	e000      	b.n	80053a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053a6:	bf00      	nop
}
 80053a8:	bf00      	nop
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	1c99      	adds	r1, r3, #2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6251      	str	r1, [r2, #36]	; 0x24
 80053d6:	881a      	ldrh	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d113      	bne.n	800541e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005404:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800540a:	b29b      	uxth	r3, r3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff ffc9 	bl	80053b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	1c99      	adds	r1, r3, #2
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6251      	str	r1, [r2, #36]	; 0x24
 800543a:	8819      	ldrh	r1, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d101      	bne.n	800544a <I2SEx_TxISR_I2SExt+0x22>
 8005446:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <I2SEx_TxISR_I2SExt+0x94>)
 8005448:	e001      	b.n	800544e <I2SEx_TxISR_I2SExt+0x26>
 800544a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800544e:	460a      	mov	r2, r1
 8005450:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d121      	bne.n	80054ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a12      	ldr	r2, [pc, #72]	; (80054b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d101      	bne.n	8005478 <I2SEx_TxISR_I2SExt+0x50>
 8005474:	4b11      	ldr	r3, [pc, #68]	; (80054bc <I2SEx_TxISR_I2SExt+0x94>)
 8005476:	e001      	b.n	800547c <I2SEx_TxISR_I2SExt+0x54>
 8005478:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	490d      	ldr	r1, [pc, #52]	; (80054b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005484:	428b      	cmp	r3, r1
 8005486:	d101      	bne.n	800548c <I2SEx_TxISR_I2SExt+0x64>
 8005488:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <I2SEx_TxISR_I2SExt+0x94>)
 800548a:	e001      	b.n	8005490 <I2SEx_TxISR_I2SExt+0x68>
 800548c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005494:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7ff ff81 	bl	80053b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40003800 	.word	0x40003800
 80054bc:	40003400 	.word	0x40003400

080054c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68d8      	ldr	r0, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d2:	1c99      	adds	r1, r3, #2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80054d8:	b282      	uxth	r2, r0
 80054da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d113      	bne.n	800551c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005502:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7ff ff4a 	bl	80053b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800551c:	bf00      	nop
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a20      	ldr	r2, [pc, #128]	; (80055b4 <I2SEx_RxISR_I2SExt+0x90>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d101      	bne.n	800553a <I2SEx_RxISR_I2SExt+0x16>
 8005536:	4b20      	ldr	r3, [pc, #128]	; (80055b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005538:	e001      	b.n	800553e <I2SEx_RxISR_I2SExt+0x1a>
 800553a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800553e:	68d8      	ldr	r0, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	1c99      	adds	r1, r3, #2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	62d1      	str	r1, [r2, #44]	; 0x2c
 800554a:	b282      	uxth	r2, r0
 800554c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005552:	b29b      	uxth	r3, r3
 8005554:	3b01      	subs	r3, #1
 8005556:	b29a      	uxth	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d121      	bne.n	80055aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a12      	ldr	r2, [pc, #72]	; (80055b4 <I2SEx_RxISR_I2SExt+0x90>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d101      	bne.n	8005574 <I2SEx_RxISR_I2SExt+0x50>
 8005570:	4b11      	ldr	r3, [pc, #68]	; (80055b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005572:	e001      	b.n	8005578 <I2SEx_RxISR_I2SExt+0x54>
 8005574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	490d      	ldr	r1, [pc, #52]	; (80055b4 <I2SEx_RxISR_I2SExt+0x90>)
 8005580:	428b      	cmp	r3, r1
 8005582:	d101      	bne.n	8005588 <I2SEx_RxISR_I2SExt+0x64>
 8005584:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005586:	e001      	b.n	800558c <I2SEx_RxISR_I2SExt+0x68>
 8005588:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800558c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005590:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ff03 	bl	80053b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40003800 	.word	0x40003800
 80055b8:	40003400 	.word	0x40003400

080055bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e267      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d075      	beq.n	80056c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055da:	4b88      	ldr	r3, [pc, #544]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 030c 	and.w	r3, r3, #12
 80055e2:	2b04      	cmp	r3, #4
 80055e4:	d00c      	beq.n	8005600 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e6:	4b85      	ldr	r3, [pc, #532]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d112      	bne.n	8005618 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055f2:	4b82      	ldr	r3, [pc, #520]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fe:	d10b      	bne.n	8005618 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	4b7e      	ldr	r3, [pc, #504]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d05b      	beq.n	80056c4 <HAL_RCC_OscConfig+0x108>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d157      	bne.n	80056c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e242      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005620:	d106      	bne.n	8005630 <HAL_RCC_OscConfig+0x74>
 8005622:	4b76      	ldr	r3, [pc, #472]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a75      	ldr	r2, [pc, #468]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e01d      	b.n	800566c <HAL_RCC_OscConfig+0xb0>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x98>
 800563a:	4b70      	ldr	r3, [pc, #448]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a6f      	ldr	r2, [pc, #444]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	4b6d      	ldr	r3, [pc, #436]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a6c      	ldr	r2, [pc, #432]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 800564c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e00b      	b.n	800566c <HAL_RCC_OscConfig+0xb0>
 8005654:	4b69      	ldr	r3, [pc, #420]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a68      	ldr	r2, [pc, #416]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 800565a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	4b66      	ldr	r3, [pc, #408]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a65      	ldr	r2, [pc, #404]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800566a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d013      	beq.n	800569c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fc f938 	bl	80018e8 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800567c:	f7fc f934 	bl	80018e8 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	; 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e207      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568e:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0xc0>
 800569a:	e014      	b.n	80056c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569c:	f7fc f924 	bl	80018e8 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056a4:	f7fc f920 	bl	80018e8 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b64      	cmp	r3, #100	; 0x64
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e1f3      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b6:	4b51      	ldr	r3, [pc, #324]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0xe8>
 80056c2:	e000      	b.n	80056c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d063      	beq.n	800579a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056d2:	4b4a      	ldr	r3, [pc, #296]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 030c 	and.w	r3, r3, #12
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056de:	4b47      	ldr	r3, [pc, #284]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056e6:	2b08      	cmp	r3, #8
 80056e8:	d11c      	bne.n	8005724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ea:	4b44      	ldr	r3, [pc, #272]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f6:	4b41      	ldr	r3, [pc, #260]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_RCC_OscConfig+0x152>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d001      	beq.n	800570e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e1c7      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570e:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4937      	ldr	r1, [pc, #220]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 800571e:	4313      	orrs	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005722:	e03a      	b.n	800579a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800572c:	4b34      	ldr	r3, [pc, #208]	; (8005800 <HAL_RCC_OscConfig+0x244>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fc f8d9 	bl	80018e8 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800573a:	f7fc f8d5 	bl	80018e8 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e1a8      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	4b2b      	ldr	r3, [pc, #172]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005758:	4b28      	ldr	r3, [pc, #160]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4925      	ldr	r1, [pc, #148]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]
 800576c:	e015      	b.n	800579a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576e:	4b24      	ldr	r3, [pc, #144]	; (8005800 <HAL_RCC_OscConfig+0x244>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fc f8b8 	bl	80018e8 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800577c:	f7fc f8b4 	bl	80018e8 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e187      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d036      	beq.n	8005814 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d016      	beq.n	80057dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ae:	4b15      	ldr	r3, [pc, #84]	; (8005804 <HAL_RCC_OscConfig+0x248>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fc f898 	bl	80018e8 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057bc:	f7fc f894 	bl	80018e8 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e167      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ce:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_RCC_OscConfig+0x240>)
 80057d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x200>
 80057da:	e01b      	b.n	8005814 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <HAL_RCC_OscConfig+0x248>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e2:	f7fc f881 	bl	80018e8 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e8:	e00e      	b.n	8005808 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ea:	f7fc f87d 	bl	80018e8 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d907      	bls.n	8005808 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e150      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
 80057fc:	40023800 	.word	0x40023800
 8005800:	42470000 	.word	0x42470000
 8005804:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005808:	4b88      	ldr	r3, [pc, #544]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 800580a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ea      	bne.n	80057ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8097 	beq.w	8005950 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005826:	4b81      	ldr	r3, [pc, #516]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	4b7d      	ldr	r3, [pc, #500]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	4a7c      	ldr	r2, [pc, #496]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005840:	6413      	str	r3, [r2, #64]	; 0x40
 8005842:	4b7a      	ldr	r3, [pc, #488]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005852:	4b77      	ldr	r3, [pc, #476]	; (8005a30 <HAL_RCC_OscConfig+0x474>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d118      	bne.n	8005890 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800585e:	4b74      	ldr	r3, [pc, #464]	; (8005a30 <HAL_RCC_OscConfig+0x474>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a73      	ldr	r2, [pc, #460]	; (8005a30 <HAL_RCC_OscConfig+0x474>)
 8005864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800586a:	f7fc f83d 	bl	80018e8 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005872:	f7fc f839 	bl	80018e8 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e10c      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005884:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <HAL_RCC_OscConfig+0x474>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d106      	bne.n	80058a6 <HAL_RCC_OscConfig+0x2ea>
 8005898:	4b64      	ldr	r3, [pc, #400]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	4a63      	ldr	r2, [pc, #396]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	; 0x70
 80058a4:	e01c      	b.n	80058e0 <HAL_RCC_OscConfig+0x324>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCC_OscConfig+0x30c>
 80058ae:	4b5f      	ldr	r3, [pc, #380]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	4a5e      	ldr	r2, [pc, #376]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80058b4:	f043 0304 	orr.w	r3, r3, #4
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ba:	4b5c      	ldr	r3, [pc, #368]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	4a5b      	ldr	r2, [pc, #364]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	6713      	str	r3, [r2, #112]	; 0x70
 80058c6:	e00b      	b.n	80058e0 <HAL_RCC_OscConfig+0x324>
 80058c8:	4b58      	ldr	r3, [pc, #352]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	4a57      	ldr	r2, [pc, #348]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	6713      	str	r3, [r2, #112]	; 0x70
 80058d4:	4b55      	ldr	r3, [pc, #340]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	4a54      	ldr	r2, [pc, #336]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80058da:	f023 0304 	bic.w	r3, r3, #4
 80058de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d015      	beq.n	8005914 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fb fffe 	bl	80018e8 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f0:	f7fb fffa 	bl	80018e8 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e0cb      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005906:	4b49      	ldr	r3, [pc, #292]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0ee      	beq.n	80058f0 <HAL_RCC_OscConfig+0x334>
 8005912:	e014      	b.n	800593e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005914:	f7fb ffe8 	bl	80018e8 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800591a:	e00a      	b.n	8005932 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591c:	f7fb ffe4 	bl	80018e8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e0b5      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005932:	4b3e      	ldr	r3, [pc, #248]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1ee      	bne.n	800591c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d105      	bne.n	8005950 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005944:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	4a38      	ldr	r2, [pc, #224]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 800594a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800594e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80a1 	beq.w	8005a9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800595a:	4b34      	ldr	r3, [pc, #208]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b08      	cmp	r3, #8
 8005964:	d05c      	beq.n	8005a20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d141      	bne.n	80059f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596e:	4b31      	ldr	r3, [pc, #196]	; (8005a34 <HAL_RCC_OscConfig+0x478>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005974:	f7fb ffb8 	bl	80018e8 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597c:	f7fb ffb4 	bl	80018e8 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e087      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598e:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	3b01      	subs	r3, #1
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	491b      	ldr	r1, [pc, #108]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059c4:	4b1b      	ldr	r3, [pc, #108]	; (8005a34 <HAL_RCC_OscConfig+0x478>)
 80059c6:	2201      	movs	r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ca:	f7fb ff8d 	bl	80018e8 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d0:	e008      	b.n	80059e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d2:	f7fb ff89 	bl	80018e8 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b02      	cmp	r3, #2
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e05c      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e4:	4b11      	ldr	r3, [pc, #68]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0f0      	beq.n	80059d2 <HAL_RCC_OscConfig+0x416>
 80059f0:	e054      	b.n	8005a9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059f2:	4b10      	ldr	r3, [pc, #64]	; (8005a34 <HAL_RCC_OscConfig+0x478>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f8:	f7fb ff76 	bl	80018e8 <HAL_GetTick>
 80059fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a00:	f7fb ff72 	bl	80018e8 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e045      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <HAL_RCC_OscConfig+0x470>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f0      	bne.n	8005a00 <HAL_RCC_OscConfig+0x444>
 8005a1e:	e03d      	b.n	8005a9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d107      	bne.n	8005a38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e038      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	40007000 	.word	0x40007000
 8005a34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a38:	4b1b      	ldr	r3, [pc, #108]	; (8005aa8 <HAL_RCC_OscConfig+0x4ec>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d028      	beq.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d121      	bne.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d11a      	bne.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a68:	4013      	ands	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d111      	bne.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	085b      	lsrs	r3, r3, #1
 8005a80:	3b01      	subs	r3, #1
 8005a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d107      	bne.n	8005a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e000      	b.n	8005a9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3718      	adds	r7, #24
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800

08005aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e0cc      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac0:	4b68      	ldr	r3, [pc, #416]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d90c      	bls.n	8005ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ace:	4b65      	ldr	r3, [pc, #404]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	4b63      	ldr	r3, [pc, #396]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e0b8      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d020      	beq.n	8005b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d005      	beq.n	8005b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b00:	4b59      	ldr	r3, [pc, #356]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	4a58      	ldr	r2, [pc, #352]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b18:	4b53      	ldr	r3, [pc, #332]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	4a52      	ldr	r2, [pc, #328]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b24:	4b50      	ldr	r3, [pc, #320]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	494d      	ldr	r1, [pc, #308]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d044      	beq.n	8005bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d107      	bne.n	8005b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4a:	4b47      	ldr	r3, [pc, #284]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d119      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e07f      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d003      	beq.n	8005b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d107      	bne.n	8005b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d109      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e06f      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7a:	4b3b      	ldr	r3, [pc, #236]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e067      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b8a:	4b37      	ldr	r3, [pc, #220]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f023 0203 	bic.w	r2, r3, #3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	4934      	ldr	r1, [pc, #208]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b9c:	f7fb fea4 	bl	80018e8 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba2:	e00a      	b.n	8005bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba4:	f7fb fea0 	bl	80018e8 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e04f      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bba:	4b2b      	ldr	r3, [pc, #172]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 020c 	and.w	r2, r3, #12
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d1eb      	bne.n	8005ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bcc:	4b25      	ldr	r3, [pc, #148]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d20c      	bcs.n	8005bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bda:	4b22      	ldr	r3, [pc, #136]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be2:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <HAL_RCC_ClockConfig+0x1b8>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d001      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e032      	b.n	8005c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c00:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	4916      	ldr	r1, [pc, #88]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c1e:	4b12      	ldr	r3, [pc, #72]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	490e      	ldr	r1, [pc, #56]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c32:	f000 f889 	bl	8005d48 <HAL_RCC_GetSysClockFreq>
 8005c36:	4602      	mov	r2, r0
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	091b      	lsrs	r3, r3, #4
 8005c3e:	f003 030f 	and.w	r3, r3, #15
 8005c42:	490a      	ldr	r1, [pc, #40]	; (8005c6c <HAL_RCC_ClockConfig+0x1c0>)
 8005c44:	5ccb      	ldrb	r3, [r1, r3]
 8005c46:	fa22 f303 	lsr.w	r3, r2, r3
 8005c4a:	4a09      	ldr	r2, [pc, #36]	; (8005c70 <HAL_RCC_ClockConfig+0x1c4>)
 8005c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c4e:	4b09      	ldr	r3, [pc, #36]	; (8005c74 <HAL_RCC_ClockConfig+0x1c8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fb fe04 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	40023c00 	.word	0x40023c00
 8005c68:	40023800 	.word	0x40023800
 8005c6c:	0800a888 	.word	0x0800a888
 8005c70:	20000000 	.word	0x20000000
 8005c74:	20000004 	.word	0x20000004

08005c78 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08c      	sub	sp, #48	; 0x30
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d129      	bne.n	8005cde <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	4b2b      	ldr	r3, [pc, #172]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	4a2a      	ldr	r2, [pc, #168]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	6313      	str	r3, [r2, #48]	; 0x30
 8005c9a:	4b28      	ldr	r3, [pc, #160]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	61bb      	str	r3, [r7, #24]
 8005ca4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cac:	2302      	movs	r3, #2
 8005cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005cbc:	f107 031c 	add.w	r3, r7, #28
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	481f      	ldr	r0, [pc, #124]	; (8005d40 <HAL_RCC_MCOConfig+0xc8>)
 8005cc4:	f7fd f8d6 	bl	8002e74 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005cc8:	4b1c      	ldr	r3, [pc, #112]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	430b      	orrs	r3, r1
 8005cd6:	4919      	ldr	r1, [pc, #100]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005cdc:	e029      	b.n	8005d32 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	4b16      	ldr	r3, [pc, #88]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	4a15      	ldr	r2, [pc, #84]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005ce8:	f043 0304 	orr.w	r3, r3, #4
 8005cec:	6313      	str	r3, [r2, #48]	; 0x30
 8005cee:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d00:	2302      	movs	r3, #2
 8005d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d04:	2303      	movs	r3, #3
 8005d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005d10:	f107 031c 	add.w	r3, r7, #28
 8005d14:	4619      	mov	r1, r3
 8005d16:	480b      	ldr	r0, [pc, #44]	; (8005d44 <HAL_RCC_MCOConfig+0xcc>)
 8005d18:	f7fd f8ac 	bl	8002e74 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005d1c:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	00d9      	lsls	r1, r3, #3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	4903      	ldr	r1, [pc, #12]	; (8005d3c <HAL_RCC_MCOConfig+0xc4>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	608b      	str	r3, [r1, #8]
}
 8005d32:	bf00      	nop
 8005d34:	3730      	adds	r7, #48	; 0x30
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40020000 	.word	0x40020000
 8005d44:	40020800 	.word	0x40020800

08005d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d4c:	b094      	sub	sp, #80	; 0x50
 8005d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44
 8005d54:	2300      	movs	r3, #0
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d58:	2300      	movs	r3, #0
 8005d5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d60:	4b79      	ldr	r3, [pc, #484]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d00d      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x40>
 8005d6c:	2b08      	cmp	r3, #8
 8005d6e:	f200 80e1 	bhi.w	8005f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <HAL_RCC_GetSysClockFreq+0x34>
 8005d76:	2b04      	cmp	r3, #4
 8005d78:	d003      	beq.n	8005d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005d7a:	e0db      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d7c:	4b73      	ldr	r3, [pc, #460]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005d80:	e0db      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d82:	4b73      	ldr	r3, [pc, #460]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8005d84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d86:	e0d8      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d88:	4b6f      	ldr	r3, [pc, #444]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d90:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d063      	beq.n	8005e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d9e:	4b6a      	ldr	r3, [pc, #424]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	099b      	lsrs	r3, r3, #6
 8005da4:	2200      	movs	r2, #0
 8005da6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db0:	633b      	str	r3, [r7, #48]	; 0x30
 8005db2:	2300      	movs	r3, #0
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
 8005db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005dba:	4622      	mov	r2, r4
 8005dbc:	462b      	mov	r3, r5
 8005dbe:	f04f 0000 	mov.w	r0, #0
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	0159      	lsls	r1, r3, #5
 8005dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dcc:	0150      	lsls	r0, r2, #5
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4621      	mov	r1, r4
 8005dd4:	1a51      	subs	r1, r2, r1
 8005dd6:	6139      	str	r1, [r7, #16]
 8005dd8:	4629      	mov	r1, r5
 8005dda:	eb63 0301 	sbc.w	r3, r3, r1
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f04f 0300 	mov.w	r3, #0
 8005de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dec:	4659      	mov	r1, fp
 8005dee:	018b      	lsls	r3, r1, #6
 8005df0:	4651      	mov	r1, sl
 8005df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005df6:	4651      	mov	r1, sl
 8005df8:	018a      	lsls	r2, r1, #6
 8005dfa:	4651      	mov	r1, sl
 8005dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8005e00:	4659      	mov	r1, fp
 8005e02:	eb63 0901 	sbc.w	r9, r3, r1
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e1a:	4690      	mov	r8, r2
 8005e1c:	4699      	mov	r9, r3
 8005e1e:	4623      	mov	r3, r4
 8005e20:	eb18 0303 	adds.w	r3, r8, r3
 8005e24:	60bb      	str	r3, [r7, #8]
 8005e26:	462b      	mov	r3, r5
 8005e28:	eb49 0303 	adc.w	r3, r9, r3
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	024b      	lsls	r3, r1, #9
 8005e3e:	4621      	mov	r1, r4
 8005e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e44:	4621      	mov	r1, r4
 8005e46:	024a      	lsls	r2, r1, #9
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e4e:	2200      	movs	r2, #0
 8005e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e58:	f7fa fcbc 	bl	80007d4 <__aeabi_uldivmod>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4613      	mov	r3, r2
 8005e62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e64:	e058      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e66:	4b38      	ldr	r3, [pc, #224]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	099b      	lsrs	r3, r3, #6
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	4611      	mov	r1, r2
 8005e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e76:	623b      	str	r3, [r7, #32]
 8005e78:	2300      	movs	r3, #0
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	0159      	lsls	r1, r3, #5
 8005e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e92:	0150      	lsls	r0, r2, #5
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4641      	mov	r1, r8
 8005e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ea4:	f04f 0200 	mov.w	r2, #0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8005ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	00eb      	lsls	r3, r5, #3
 8005eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ece:	00e2      	lsls	r2, r4, #3
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	461d      	mov	r5, r3
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	18e3      	adds	r3, r4, r3
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	464b      	mov	r3, r9
 8005edc:	eb45 0303 	adc.w	r3, r5, r3
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eee:	4629      	mov	r1, r5
 8005ef0:	028b      	lsls	r3, r1, #10
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ef8:	4621      	mov	r1, r4
 8005efa:	028a      	lsls	r2, r1, #10
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f02:	2200      	movs	r2, #0
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	61fa      	str	r2, [r7, #28]
 8005f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f0c:	f7fa fc62 	bl	80007d4 <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4613      	mov	r3, r2
 8005f16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f18:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	0c1b      	lsrs	r3, r3, #16
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	3301      	adds	r3, #1
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f32:	e002      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f34:	4b05      	ldr	r3, [pc, #20]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3750      	adds	r7, #80	; 0x50
 8005f40:	46bd      	mov	sp, r7
 8005f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f46:	bf00      	nop
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	00f42400 	.word	0x00f42400
 8005f50:	007a1200 	.word	0x007a1200

08005f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f58:	4b03      	ldr	r3, [pc, #12]	; (8005f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000000 	.word	0x20000000

08005f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f70:	f7ff fff0 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0a9b      	lsrs	r3, r3, #10
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4903      	ldr	r1, [pc, #12]	; (8005f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	0800a898 	.word	0x0800a898

08005f94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d105      	bne.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d035      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fbc:	4b62      	ldr	r3, [pc, #392]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fc2:	f7fb fc91 	bl	80018e8 <HAL_GetTick>
 8005fc6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005fca:	f7fb fc8d 	bl	80018e8 <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e0b0      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fdc:	4b5b      	ldr	r3, [pc, #364]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d1f0      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	019a      	lsls	r2, r3, #6
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	071b      	lsls	r3, r3, #28
 8005ff4:	4955      	ldr	r1, [pc, #340]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ffc:	4b52      	ldr	r3, [pc, #328]	; (8006148 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006002:	f7fb fc71 	bl	80018e8 <HAL_GetTick>
 8006006:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006008:	e008      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800600a:	f7fb fc6d 	bl	80018e8 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	2b02      	cmp	r3, #2
 8006016:	d901      	bls.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e090      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800601c:	4b4b      	ldr	r3, [pc, #300]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d0f0      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8083 	beq.w	800613c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	4b44      	ldr	r3, [pc, #272]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	4a43      	ldr	r2, [pc, #268]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006044:	6413      	str	r3, [r2, #64]	; 0x40
 8006046:	4b41      	ldr	r3, [pc, #260]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006052:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a3e      	ldr	r2, [pc, #248]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800605e:	f7fb fc43 	bl	80018e8 <HAL_GetTick>
 8006062:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006064:	e008      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006066:	f7fb fc3f 	bl	80018e8 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b02      	cmp	r3, #2
 8006072:	d901      	bls.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e062      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006078:	4b35      	ldr	r3, [pc, #212]	; (8006150 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d0f0      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006084:	4b31      	ldr	r3, [pc, #196]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006088:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d02f      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d028      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060a2:	4b2a      	ldr	r3, [pc, #168]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060ac:	4b29      	ldr	r3, [pc, #164]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80060ae:	2201      	movs	r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060b2:	4b28      	ldr	r3, [pc, #160]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80060b8:	4a24      	ldr	r2, [pc, #144]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060be:	4b23      	ldr	r3, [pc, #140]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d114      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80060ca:	f7fb fc0d 	bl	80018e8 <HAL_GetTick>
 80060ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060d0:	e00a      	b.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060d2:	f7fb fc09 	bl	80018e8 <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e02a      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e8:	4b18      	ldr	r3, [pc, #96]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ee      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006100:	d10d      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006116:	490d      	ldr	r1, [pc, #52]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006118:	4313      	orrs	r3, r2
 800611a:	608b      	str	r3, [r1, #8]
 800611c:	e005      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800611e:	4b0b      	ldr	r3, [pc, #44]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	4a0a      	ldr	r2, [pc, #40]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006124:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006128:	6093      	str	r3, [r2, #8]
 800612a:	4b08      	ldr	r3, [pc, #32]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800612c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006136:	4905      	ldr	r1, [pc, #20]	; (800614c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006138:	4313      	orrs	r3, r2
 800613a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3718      	adds	r7, #24
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	42470068 	.word	0x42470068
 800614c:	40023800 	.word	0x40023800
 8006150:	40007000 	.word	0x40007000
 8006154:	42470e40 	.word	0x42470e40

08006158 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006164:	2300      	movs	r3, #0
 8006166:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d13e      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006176:	4b23      	ldr	r3, [pc, #140]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d12f      	bne.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800618c:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800618e:	617b      	str	r3, [r7, #20]
          break;
 8006190:	e02f      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006192:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800619a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800619e:	d108      	bne.n	80061b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061a0:	4b18      	ldr	r3, [pc, #96]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a8:	4a18      	ldr	r2, [pc, #96]	; (800620c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80061aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ae:	613b      	str	r3, [r7, #16]
 80061b0:	e007      	b.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061b2:	4b14      	ldr	r3, [pc, #80]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ba:	4a15      	ldr	r2, [pc, #84]	; (8006210 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80061bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061c0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80061c2:	4b10      	ldr	r3, [pc, #64]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c8:	099b      	lsrs	r3, r3, #6
 80061ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	fb02 f303 	mul.w	r3, r2, r3
 80061d4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80061d6:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80061d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061dc:	0f1b      	lsrs	r3, r3, #28
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	68ba      	ldr	r2, [r7, #8]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]
          break;
 80061ea:	e002      	b.n	80061f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	617b      	str	r3, [r7, #20]
          break;
 80061f0:	bf00      	nop
        }
      }
      break;
 80061f2:	bf00      	nop
    }
  }
  return frequency;
 80061f4:	697b      	ldr	r3, [r7, #20]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40023800 	.word	0x40023800
 8006208:	00bb8000 	.word	0x00bb8000
 800620c:	007a1200 	.word	0x007a1200
 8006210:	00f42400 	.word	0x00f42400

08006214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e07b      	b.n	800631e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006236:	d009      	beq.n	800624c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	61da      	str	r2, [r3, #28]
 800623e:	e005      	b.n	800624c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fb f948 	bl	80014fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006282:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	431a      	orrs	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d0:	ea42 0103 	orr.w	r1, r2, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	0c1b      	lsrs	r3, r3, #16
 80062ea:	f003 0104 	and.w	r1, r3, #4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0210 	and.w	r2, r3, #16
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800630c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b082      	sub	sp, #8
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d101      	bne.n	8006338 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e041      	b.n	80063bc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d106      	bne.n	8006352 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7fb f91d 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2202      	movs	r2, #2
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3304      	adds	r3, #4
 8006362:	4619      	mov	r1, r3
 8006364:	4610      	mov	r0, r2
 8006366:	f000 fad9 	bl	800691c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e041      	b.n	800645a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f839 	bl	8006462 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2202      	movs	r2, #2
 80063f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3304      	adds	r3, #4
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f000 fa8a 	bl	800691c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
	...

08006478 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d109      	bne.n	800649c <HAL_TIM_PWM_Start+0x24>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	bf14      	ite	ne
 8006494:	2301      	movne	r3, #1
 8006496:	2300      	moveq	r3, #0
 8006498:	b2db      	uxtb	r3, r3
 800649a:	e022      	b.n	80064e2 <HAL_TIM_PWM_Start+0x6a>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d109      	bne.n	80064b6 <HAL_TIM_PWM_Start+0x3e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	bf14      	ite	ne
 80064ae:	2301      	movne	r3, #1
 80064b0:	2300      	moveq	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	e015      	b.n	80064e2 <HAL_TIM_PWM_Start+0x6a>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d109      	bne.n	80064d0 <HAL_TIM_PWM_Start+0x58>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	bf14      	ite	ne
 80064c8:	2301      	movne	r3, #1
 80064ca:	2300      	moveq	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	e008      	b.n	80064e2 <HAL_TIM_PWM_Start+0x6a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	bf14      	ite	ne
 80064dc:	2301      	movne	r3, #1
 80064de:	2300      	moveq	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e07c      	b.n	80065e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d104      	bne.n	80064fa <HAL_TIM_PWM_Start+0x82>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f8:	e013      	b.n	8006522 <HAL_TIM_PWM_Start+0xaa>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d104      	bne.n	800650a <HAL_TIM_PWM_Start+0x92>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006508:	e00b      	b.n	8006522 <HAL_TIM_PWM_Start+0xaa>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b08      	cmp	r3, #8
 800650e:	d104      	bne.n	800651a <HAL_TIM_PWM_Start+0xa2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006518:	e003      	b.n	8006522 <HAL_TIM_PWM_Start+0xaa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2201      	movs	r2, #1
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fce0 	bl	8006ef0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a2d      	ldr	r2, [pc, #180]	; (80065ec <HAL_TIM_PWM_Start+0x174>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d004      	beq.n	8006544 <HAL_TIM_PWM_Start+0xcc>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <HAL_TIM_PWM_Start+0x178>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d101      	bne.n	8006548 <HAL_TIM_PWM_Start+0xd0>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <HAL_TIM_PWM_Start+0xd2>
 8006548:	2300      	movs	r3, #0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a22      	ldr	r2, [pc, #136]	; (80065ec <HAL_TIM_PWM_Start+0x174>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d022      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006570:	d01d      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <HAL_TIM_PWM_Start+0x17c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d018      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1d      	ldr	r2, [pc, #116]	; (80065f8 <HAL_TIM_PWM_Start+0x180>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d013      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <HAL_TIM_PWM_Start+0x184>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d00e      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <HAL_TIM_PWM_Start+0x178>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d009      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a18      	ldr	r2, [pc, #96]	; (8006600 <HAL_TIM_PWM_Start+0x188>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d004      	beq.n	80065ae <HAL_TIM_PWM_Start+0x136>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a16      	ldr	r2, [pc, #88]	; (8006604 <HAL_TIM_PWM_Start+0x18c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d111      	bne.n	80065d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b06      	cmp	r3, #6
 80065be:	d010      	beq.n	80065e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d0:	e007      	b.n	80065e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0201 	orr.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40000400 	.word	0x40000400
 80065f8:	40000800 	.word	0x40000800
 80065fc:	40000c00 	.word	0x40000c00
 8006600:	40014000 	.word	0x40014000
 8006604:	40001800 	.word	0x40001800

08006608 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006622:	2302      	movs	r3, #2
 8006624:	e0ae      	b.n	8006784 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b0c      	cmp	r3, #12
 8006632:	f200 809f 	bhi.w	8006774 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006636:	a201      	add	r2, pc, #4	; (adr r2, 800663c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	08006671 	.word	0x08006671
 8006640:	08006775 	.word	0x08006775
 8006644:	08006775 	.word	0x08006775
 8006648:	08006775 	.word	0x08006775
 800664c:	080066b1 	.word	0x080066b1
 8006650:	08006775 	.word	0x08006775
 8006654:	08006775 	.word	0x08006775
 8006658:	08006775 	.word	0x08006775
 800665c:	080066f3 	.word	0x080066f3
 8006660:	08006775 	.word	0x08006775
 8006664:	08006775 	.word	0x08006775
 8006668:	08006775 	.word	0x08006775
 800666c:	08006733 	.word	0x08006733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68b9      	ldr	r1, [r7, #8]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f9f0 	bl	8006a5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0208 	orr.w	r2, r2, #8
 800668a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	699a      	ldr	r2, [r3, #24]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 0204 	bic.w	r2, r2, #4
 800669a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6999      	ldr	r1, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	619a      	str	r2, [r3, #24]
      break;
 80066ae:	e064      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fa40 	bl	8006b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	699a      	ldr	r2, [r3, #24]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6999      	ldr	r1, [r3, #24]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	021a      	lsls	r2, r3, #8
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	619a      	str	r2, [r3, #24]
      break;
 80066f0:	e043      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 fa95 	bl	8006c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f042 0208 	orr.w	r2, r2, #8
 800670c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0204 	bic.w	r2, r2, #4
 800671c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	69d9      	ldr	r1, [r3, #28]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	691a      	ldr	r2, [r3, #16]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	61da      	str	r2, [r3, #28]
      break;
 8006730:	e023      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68b9      	ldr	r1, [r7, #8]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fae9 	bl	8006d10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	69da      	ldr	r2, [r3, #28]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800674c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800675c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	69d9      	ldr	r1, [r3, #28]
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	021a      	lsls	r2, r3, #8
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	61da      	str	r2, [r3, #28]
      break;
 8006772:	e002      	b.n	800677a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	75fb      	strb	r3, [r7, #23]
      break;
 8006778:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006782:	7dfb      	ldrb	r3, [r7, #23]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d101      	bne.n	80067a8 <HAL_TIM_ConfigClockSource+0x1c>
 80067a4:	2302      	movs	r3, #2
 80067a6:	e0b4      	b.n	8006912 <HAL_TIM_ConfigClockSource+0x186>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e0:	d03e      	beq.n	8006860 <HAL_TIM_ConfigClockSource+0xd4>
 80067e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e6:	f200 8087 	bhi.w	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
 80067ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ee:	f000 8086 	beq.w	80068fe <HAL_TIM_ConfigClockSource+0x172>
 80067f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067f6:	d87f      	bhi.n	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
 80067f8:	2b70      	cmp	r3, #112	; 0x70
 80067fa:	d01a      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0xa6>
 80067fc:	2b70      	cmp	r3, #112	; 0x70
 80067fe:	d87b      	bhi.n	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006800:	2b60      	cmp	r3, #96	; 0x60
 8006802:	d050      	beq.n	80068a6 <HAL_TIM_ConfigClockSource+0x11a>
 8006804:	2b60      	cmp	r3, #96	; 0x60
 8006806:	d877      	bhi.n	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006808:	2b50      	cmp	r3, #80	; 0x50
 800680a:	d03c      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0xfa>
 800680c:	2b50      	cmp	r3, #80	; 0x50
 800680e:	d873      	bhi.n	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006810:	2b40      	cmp	r3, #64	; 0x40
 8006812:	d058      	beq.n	80068c6 <HAL_TIM_ConfigClockSource+0x13a>
 8006814:	2b40      	cmp	r3, #64	; 0x40
 8006816:	d86f      	bhi.n	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006818:	2b30      	cmp	r3, #48	; 0x30
 800681a:	d064      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0x15a>
 800681c:	2b30      	cmp	r3, #48	; 0x30
 800681e:	d86b      	bhi.n	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006820:	2b20      	cmp	r3, #32
 8006822:	d060      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006824:	2b20      	cmp	r3, #32
 8006826:	d867      	bhi.n	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d05c      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0x15a>
 800682c:	2b10      	cmp	r3, #16
 800682e:	d05a      	beq.n	80068e6 <HAL_TIM_ConfigClockSource+0x15a>
 8006830:	e062      	b.n	80068f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6899      	ldr	r1, [r3, #8]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	f000 fb35 	bl	8006eb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	609a      	str	r2, [r3, #8]
      break;
 800685e:	e04f      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	6899      	ldr	r1, [r3, #8]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f000 fb1e 	bl	8006eb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006882:	609a      	str	r2, [r3, #8]
      break;
 8006884:	e03c      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6818      	ldr	r0, [r3, #0]
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	6859      	ldr	r1, [r3, #4]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	461a      	mov	r2, r3
 8006894:	f000 fa92 	bl	8006dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2150      	movs	r1, #80	; 0x50
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 faeb 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 80068a4:	e02c      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6818      	ldr	r0, [r3, #0]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	6859      	ldr	r1, [r3, #4]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f000 fab1 	bl	8006e1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2160      	movs	r1, #96	; 0x60
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fadb 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 80068c4:	e01c      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6859      	ldr	r1, [r3, #4]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	461a      	mov	r2, r3
 80068d4:	f000 fa72 	bl	8006dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2140      	movs	r1, #64	; 0x40
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 facb 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 80068e4:	e00c      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	4610      	mov	r0, r2
 80068f2:	f000 fac2 	bl	8006e7a <TIM_ITRx_SetConfig>
      break;
 80068f6:	e003      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
      break;
 80068fc:	e000      	b.n	8006900 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006910:	7bfb      	ldrb	r3, [r7, #15]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a40      	ldr	r2, [pc, #256]	; (8006a30 <TIM_Base_SetConfig+0x114>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d013      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800693a:	d00f      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a3d      	ldr	r2, [pc, #244]	; (8006a34 <TIM_Base_SetConfig+0x118>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00b      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a3c      	ldr	r2, [pc, #240]	; (8006a38 <TIM_Base_SetConfig+0x11c>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d007      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a3b      	ldr	r2, [pc, #236]	; (8006a3c <TIM_Base_SetConfig+0x120>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_Base_SetConfig+0x40>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a3a      	ldr	r2, [pc, #232]	; (8006a40 <TIM_Base_SetConfig+0x124>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d108      	bne.n	800696e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	4313      	orrs	r3, r2
 800696c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2f      	ldr	r2, [pc, #188]	; (8006a30 <TIM_Base_SetConfig+0x114>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d02b      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800697c:	d027      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a2c      	ldr	r2, [pc, #176]	; (8006a34 <TIM_Base_SetConfig+0x118>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d023      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a2b      	ldr	r2, [pc, #172]	; (8006a38 <TIM_Base_SetConfig+0x11c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01f      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a2a      	ldr	r2, [pc, #168]	; (8006a3c <TIM_Base_SetConfig+0x120>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01b      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a29      	ldr	r2, [pc, #164]	; (8006a40 <TIM_Base_SetConfig+0x124>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d017      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a28      	ldr	r2, [pc, #160]	; (8006a44 <TIM_Base_SetConfig+0x128>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a27      	ldr	r2, [pc, #156]	; (8006a48 <TIM_Base_SetConfig+0x12c>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00f      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a26      	ldr	r2, [pc, #152]	; (8006a4c <TIM_Base_SetConfig+0x130>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d00b      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a25      	ldr	r2, [pc, #148]	; (8006a50 <TIM_Base_SetConfig+0x134>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d007      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a24      	ldr	r2, [pc, #144]	; (8006a54 <TIM_Base_SetConfig+0x138>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_Base_SetConfig+0xb2>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a23      	ldr	r2, [pc, #140]	; (8006a58 <TIM_Base_SetConfig+0x13c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d108      	bne.n	80069e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	4313      	orrs	r3, r2
 80069de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a0a      	ldr	r2, [pc, #40]	; (8006a30 <TIM_Base_SetConfig+0x114>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_Base_SetConfig+0xf8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <TIM_Base_SetConfig+0x124>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d103      	bne.n	8006a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	615a      	str	r2, [r3, #20]
}
 8006a22:	bf00      	nop
 8006a24:	3714      	adds	r7, #20
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40000400 	.word	0x40000400
 8006a38:	40000800 	.word	0x40000800
 8006a3c:	40000c00 	.word	0x40000c00
 8006a40:	40010400 	.word	0x40010400
 8006a44:	40014000 	.word	0x40014000
 8006a48:	40014400 	.word	0x40014400
 8006a4c:	40014800 	.word	0x40014800
 8006a50:	40001800 	.word	0x40001800
 8006a54:	40001c00 	.word	0x40001c00
 8006a58:	40002000 	.word	0x40002000

08006a5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	f023 0201 	bic.w	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a1b      	ldr	r3, [r3, #32]
 8006a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 0303 	bic.w	r3, r3, #3
 8006a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f023 0302 	bic.w	r3, r3, #2
 8006aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <TIM_OC1_SetConfig+0xd8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC1_SetConfig+0x64>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a1f      	ldr	r2, [pc, #124]	; (8006b38 <TIM_OC1_SetConfig+0xdc>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d10c      	bne.n	8006ada <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 0308 	bic.w	r3, r3, #8
 8006ac6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f023 0304 	bic.w	r3, r3, #4
 8006ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a15      	ldr	r2, [pc, #84]	; (8006b34 <TIM_OC1_SetConfig+0xd8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d003      	beq.n	8006aea <TIM_OC1_SetConfig+0x8e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a14      	ldr	r2, [pc, #80]	; (8006b38 <TIM_OC1_SetConfig+0xdc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d111      	bne.n	8006b0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	621a      	str	r2, [r3, #32]
}
 8006b28:	bf00      	nop
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40010400 	.word	0x40010400

08006b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	f023 0210 	bic.w	r2, r3, #16
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	021b      	lsls	r3, r3, #8
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f023 0320 	bic.w	r3, r3, #32
 8006b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a22      	ldr	r2, [pc, #136]	; (8006c20 <TIM_OC2_SetConfig+0xe4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d003      	beq.n	8006ba4 <TIM_OC2_SetConfig+0x68>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a21      	ldr	r2, [pc, #132]	; (8006c24 <TIM_OC2_SetConfig+0xe8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d10d      	bne.n	8006bc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	011b      	lsls	r3, r3, #4
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bbe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a17      	ldr	r2, [pc, #92]	; (8006c20 <TIM_OC2_SetConfig+0xe4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_OC2_SetConfig+0x94>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a16      	ldr	r2, [pc, #88]	; (8006c24 <TIM_OC2_SetConfig+0xe8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d113      	bne.n	8006bf8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	621a      	str	r2, [r3, #32]
}
 8006c12:	bf00      	nop
 8006c14:	371c      	adds	r7, #28
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	40010000 	.word	0x40010000
 8006c24:	40010400 	.word	0x40010400

08006c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
 8006c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	021b      	lsls	r3, r3, #8
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a21      	ldr	r2, [pc, #132]	; (8006d08 <TIM_OC3_SetConfig+0xe0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d003      	beq.n	8006c8e <TIM_OC3_SetConfig+0x66>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a20      	ldr	r2, [pc, #128]	; (8006d0c <TIM_OC3_SetConfig+0xe4>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d10d      	bne.n	8006caa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	021b      	lsls	r3, r3, #8
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a16      	ldr	r2, [pc, #88]	; (8006d08 <TIM_OC3_SetConfig+0xe0>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d003      	beq.n	8006cba <TIM_OC3_SetConfig+0x92>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a15      	ldr	r2, [pc, #84]	; (8006d0c <TIM_OC3_SetConfig+0xe4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d113      	bne.n	8006ce2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	621a      	str	r2, [r3, #32]
}
 8006cfc:	bf00      	nop
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	40010000 	.word	0x40010000
 8006d0c:	40010400 	.word	0x40010400

08006d10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	031b      	lsls	r3, r3, #12
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a12      	ldr	r2, [pc, #72]	; (8006db4 <TIM_OC4_SetConfig+0xa4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC4_SetConfig+0x68>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a11      	ldr	r2, [pc, #68]	; (8006db8 <TIM_OC4_SetConfig+0xa8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d109      	bne.n	8006d8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	019b      	lsls	r3, r3, #6
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	621a      	str	r2, [r3, #32]
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40010400 	.word	0x40010400

08006dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f023 0201 	bic.w	r2, r3, #1
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	011b      	lsls	r3, r3, #4
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f023 030a 	bic.w	r3, r3, #10
 8006df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	621a      	str	r2, [r3, #32]
}
 8006e0e:	bf00      	nop
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b087      	sub	sp, #28
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f023 0210 	bic.w	r2, r3, #16
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	031b      	lsls	r3, r3, #12
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	621a      	str	r2, [r3, #32]
}
 8006e6e:	bf00      	nop
 8006e70:	371c      	adds	r7, #28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	f043 0307 	orr.w	r3, r3, #7
 8006e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	609a      	str	r2, [r3, #8]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b087      	sub	sp, #28
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	021a      	lsls	r2, r3, #8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	609a      	str	r2, [r3, #8]
}
 8006ee4:	bf00      	nop
 8006ee6:	371c      	adds	r7, #28
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	2201      	movs	r2, #1
 8006f04:	fa02 f303 	lsl.w	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6a1a      	ldr	r2, [r3, #32]
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	43db      	mvns	r3, r3
 8006f12:	401a      	ands	r2, r3
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6a1a      	ldr	r2, [r3, #32]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	fa01 f303 	lsl.w	r3, r1, r3
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	621a      	str	r2, [r3, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	371c      	adds	r7, #28
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e05a      	b.n	800700a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a21      	ldr	r2, [pc, #132]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d022      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa0:	d01d      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a1d      	ldr	r2, [pc, #116]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d018      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a1b      	ldr	r2, [pc, #108]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d013      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a1a      	ldr	r2, [pc, #104]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d00e      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a18      	ldr	r2, [pc, #96]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d009      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a17      	ldr	r2, [pc, #92]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d004      	beq.n	8006fde <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a15      	ldr	r2, [pc, #84]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d10c      	bne.n	8006ff8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	40010000 	.word	0x40010000
 800701c:	40000400 	.word	0x40000400
 8007020:	40000800 	.word	0x40000800
 8007024:	40000c00 	.word	0x40000c00
 8007028:	40010400 	.word	0x40010400
 800702c:	40014000 	.word	0x40014000
 8007030:	40001800 	.word	0x40001800

08007034 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007034:	b084      	sub	sp, #16
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	f107 001c 	add.w	r0, r7, #28
 8007042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	2b01      	cmp	r3, #1
 800704a:	d122      	bne.n	8007092 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007076:	2b01      	cmp	r3, #1
 8007078:	d105      	bne.n	8007086 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f9c0 	bl	800740c <USB_CoreReset>
 800708c:	4603      	mov	r3, r0
 800708e:	73fb      	strb	r3, [r7, #15]
 8007090:	e01a      	b.n	80070c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f9b4 	bl	800740c <USB_CoreReset>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80070a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	639a      	str	r2, [r3, #56]	; 0x38
 80070ba:	e005      	b.n	80070c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d10b      	bne.n	80070e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f043 0206 	orr.w	r2, r3, #6
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f043 0220 	orr.w	r2, r3, #32
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f2:	b004      	add	sp, #16
 80070f4:	4770      	bx	lr

080070f6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f023 0201 	bic.w	r2, r3, #1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr

0800713a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007156:	78fb      	ldrb	r3, [r7, #3]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d115      	bne.n	8007188 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007168:	2001      	movs	r0, #1
 800716a:	f7fa fbc9 	bl	8001900 <HAL_Delay>
      ms++;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	3301      	adds	r3, #1
 8007172:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f93a 	bl	80073ee <USB_GetMode>
 800717a:	4603      	mov	r3, r0
 800717c:	2b01      	cmp	r3, #1
 800717e:	d01e      	beq.n	80071be <USB_SetCurrentMode+0x84>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2b31      	cmp	r3, #49	; 0x31
 8007184:	d9f0      	bls.n	8007168 <USB_SetCurrentMode+0x2e>
 8007186:	e01a      	b.n	80071be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d115      	bne.n	80071ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800719a:	2001      	movs	r0, #1
 800719c:	f7fa fbb0 	bl	8001900 <HAL_Delay>
      ms++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f921 	bl	80073ee <USB_GetMode>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <USB_SetCurrentMode+0x84>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b31      	cmp	r3, #49	; 0x31
 80071b6:	d9f0      	bls.n	800719a <USB_SetCurrentMode+0x60>
 80071b8:	e001      	b.n	80071be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e005      	b.n	80071ca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2b32      	cmp	r3, #50	; 0x32
 80071c2:	d101      	bne.n	80071c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e000      	b.n	80071ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a13      	ldr	r2, [pc, #76]	; (8007238 <USB_FlushTxFifo+0x64>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d901      	bls.n	80071f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e01b      	b.n	800722c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	daf2      	bge.n	80071e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	019b      	lsls	r3, r3, #6
 8007204:	f043 0220 	orr.w	r2, r3, #32
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4a08      	ldr	r2, [pc, #32]	; (8007238 <USB_FlushTxFifo+0x64>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d901      	bls.n	800721e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e006      	b.n	800722c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f003 0320 	and.w	r3, r3, #32
 8007226:	2b20      	cmp	r3, #32
 8007228:	d0f0      	beq.n	800720c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	00030d40 	.word	0x00030d40

0800723c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	3301      	adds	r3, #1
 800724c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4a11      	ldr	r2, [pc, #68]	; (8007298 <USB_FlushRxFifo+0x5c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d901      	bls.n	800725a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e018      	b.n	800728c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	daf2      	bge.n	8007248 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2210      	movs	r2, #16
 800726a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a08      	ldr	r2, [pc, #32]	; (8007298 <USB_FlushRxFifo+0x5c>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d901      	bls.n	800727e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e006      	b.n	800728c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b10      	cmp	r3, #16
 8007288:	d0f0      	beq.n	800726c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	00030d40 	.word	0x00030d40

0800729c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800729c:	b480      	push	{r7}
 800729e:	b089      	sub	sp, #36	; 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	460b      	mov	r3, r1
 80072ac:	71fb      	strb	r3, [r7, #7]
 80072ae:	4613      	mov	r3, r2
 80072b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80072ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d123      	bne.n	800730a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072c2:	88bb      	ldrh	r3, [r7, #4]
 80072c4:	3303      	adds	r3, #3
 80072c6:	089b      	lsrs	r3, r3, #2
 80072c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	61bb      	str	r3, [r7, #24]
 80072ce:	e018      	b.n	8007302 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	031a      	lsls	r2, r3, #12
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072dc:	461a      	mov	r2, r3
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	3301      	adds	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	3301      	adds	r3, #1
 80072ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	3301      	adds	r3, #1
 80072f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	3301      	adds	r3, #1
 80072fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	3301      	adds	r3, #1
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	69ba      	ldr	r2, [r7, #24]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	429a      	cmp	r2, r3
 8007308:	d3e2      	bcc.n	80072d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3724      	adds	r7, #36	; 0x24
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007318:	b480      	push	{r7}
 800731a:	b08b      	sub	sp, #44	; 0x2c
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	4613      	mov	r3, r2
 8007324:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	089b      	lsrs	r3, r3, #2
 8007332:	b29b      	uxth	r3, r3
 8007334:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007336:	88fb      	ldrh	r3, [r7, #6]
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800733e:	2300      	movs	r3, #0
 8007340:	623b      	str	r3, [r7, #32]
 8007342:	e014      	b.n	800736e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	3301      	adds	r3, #1
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	3301      	adds	r3, #1
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	3301      	adds	r3, #1
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	3301      	adds	r3, #1
 8007366:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	3301      	adds	r3, #1
 800736c:	623b      	str	r3, [r7, #32]
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	429a      	cmp	r2, r3
 8007374:	d3e6      	bcc.n	8007344 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007376:	8bfb      	ldrh	r3, [r7, #30]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01e      	beq.n	80073ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007386:	461a      	mov	r2, r3
 8007388:	f107 0310 	add.w	r3, r7, #16
 800738c:	6812      	ldr	r2, [r2, #0]
 800738e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	6a3b      	ldr	r3, [r7, #32]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
 800739c:	b2da      	uxtb	r2, r3
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	701a      	strb	r2, [r3, #0]
      i++;
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	3301      	adds	r3, #1
 80073a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073aa:	3301      	adds	r3, #1
 80073ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80073ae:	8bfb      	ldrh	r3, [r7, #30]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80073b4:	8bfb      	ldrh	r3, [r7, #30]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1ea      	bne.n	8007390 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073bc:	4618      	mov	r0, r3
 80073be:	372c      	adds	r7, #44	; 0x2c
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4013      	ands	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073e0:	68fb      	ldr	r3, [r7, #12]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	695b      	ldr	r3, [r3, #20]
 80073fa:	f003 0301 	and.w	r3, r3, #1
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
	...

0800740c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4a13      	ldr	r2, [pc, #76]	; (8007470 <USB_CoreReset+0x64>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d901      	bls.n	800742a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e01b      	b.n	8007462 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	daf2      	bge.n	8007418 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f043 0201 	orr.w	r2, r3, #1
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	4a09      	ldr	r2, [pc, #36]	; (8007470 <USB_CoreReset+0x64>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d901      	bls.n	8007454 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e006      	b.n	8007462 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b01      	cmp	r3, #1
 800745e:	d0f0      	beq.n	8007442 <USB_CoreReset+0x36>

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	00030d40 	.word	0x00030d40

08007474 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007474:	b084      	sub	sp, #16
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007494:	461a      	mov	r2, r3
 8007496:	2300      	movs	r3, #0
 8007498:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d018      	beq.n	80074fc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80074ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d10a      	bne.n	80074e6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074de:	f043 0304 	orr.w	r3, r3, #4
 80074e2:	6013      	str	r3, [r2, #0]
 80074e4:	e014      	b.n	8007510 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80074f4:	f023 0304 	bic.w	r3, r3, #4
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	e009      	b.n	8007510 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800750a:	f023 0304 	bic.w	r3, r3, #4
 800750e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007510:	2110      	movs	r1, #16
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7ff fe5e 	bl	80071d4 <USB_FlushTxFifo>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7ff fe8a 	bl	800723c <USB_FlushRxFifo>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
 8007536:	e015      	b.n	8007564 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007544:	461a      	mov	r2, r3
 8007546:	f04f 33ff 	mov.w	r3, #4294967295
 800754a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007558:	461a      	mov	r2, r3
 800755a:	2300      	movs	r3, #0
 800755c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	3301      	adds	r3, #1
 8007562:	613b      	str	r3, [r7, #16]
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	429a      	cmp	r2, r3
 800756a:	d3e5      	bcc.n	8007538 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f04f 32ff 	mov.w	r2, #4294967295
 8007578:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00b      	beq.n	800759e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800758c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a13      	ldr	r2, [pc, #76]	; (80075e0 <USB_HostInit+0x16c>)
 8007592:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a13      	ldr	r2, [pc, #76]	; (80075e4 <USB_HostInit+0x170>)
 8007598:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800759c:	e009      	b.n	80075b2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2280      	movs	r2, #128	; 0x80
 80075a2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a10      	ldr	r2, [pc, #64]	; (80075e8 <USB_HostInit+0x174>)
 80075a8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	4a0f      	ldr	r2, [pc, #60]	; (80075ec <USB_HostInit+0x178>)
 80075ae:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f043 0210 	orr.w	r2, r3, #16
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <USB_HostInit+0x17c>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075dc:	b004      	add	sp, #16
 80075de:	4770      	bx	lr
 80075e0:	01000200 	.word	0x01000200
 80075e4:	00e00300 	.word	0x00e00300
 80075e8:	00600080 	.word	0x00600080
 80075ec:	004000e0 	.word	0x004000e0
 80075f0:	a3200008 	.word	0xa3200008

080075f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007612:	f023 0303 	bic.w	r3, r3, #3
 8007616:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	68f9      	ldr	r1, [r7, #12]
 8007628:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800762c:	4313      	orrs	r3, r2
 800762e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d107      	bne.n	8007646 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800763c:	461a      	mov	r2, r3
 800763e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007642:	6053      	str	r3, [r2, #4]
 8007644:	e009      	b.n	800765a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	2b02      	cmp	r3, #2
 800764a:	d106      	bne.n	800765a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007652:	461a      	mov	r2, r3
 8007654:	f241 7370 	movw	r3, #6000	; 0x1770
 8007658:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr

08007668 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007688:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007696:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007698:	2064      	movs	r0, #100	; 0x64
 800769a:	f7fa f931 	bl	8001900 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80076a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80076ac:	200a      	movs	r0, #10
 80076ae:	f7fa f927 	bl	8001900 <HAL_Delay>

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80076e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <USB_DriveVbus+0x44>
 80076ec:	78fb      	ldrb	r3, [r7, #3]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d106      	bne.n	8007700 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80076fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770a:	d109      	bne.n	8007720 <USB_DriveVbus+0x64>
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800771a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800771e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	0c5b      	lsrs	r3, r3, #17
 800774c:	f003 0303 	and.w	r3, r3, #3
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	b29b      	uxth	r3, r3
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	461a      	mov	r2, r3
 800778e:	4603      	mov	r3, r0
 8007790:	70fb      	strb	r3, [r7, #3]
 8007792:	460b      	mov	r3, r1
 8007794:	70bb      	strb	r3, [r7, #2]
 8007796:	4613      	mov	r3, r2
 8007798:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	015a      	lsls	r2, r3, #5
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	4413      	add	r3, r2
 80077aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ae:	461a      	mov	r2, r3
 80077b0:	f04f 33ff 	mov.w	r3, #4294967295
 80077b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80077b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d87e      	bhi.n	80078bc <USB_HC_Init+0x13c>
 80077be:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <USB_HC_Init+0x44>)
 80077c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c4:	080077d5 	.word	0x080077d5
 80077c8:	0800787f 	.word	0x0800787f
 80077cc:	080077d5 	.word	0x080077d5
 80077d0:	08007841 	.word	0x08007841
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077e0:	461a      	mov	r2, r3
 80077e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80077e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80077e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da10      	bge.n	8007812 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	440a      	add	r2, r1
 8007806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800780a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800780e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007810:	e057      	b.n	80078c2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800781a:	2b00      	cmp	r3, #0
 800781c:	d051      	beq.n	80078c2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	4413      	add	r3, r2
 8007826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	0151      	lsls	r1, r2, #5
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	440a      	add	r2, r1
 8007834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007838:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800783c:	60d3      	str	r3, [r2, #12]
      break;
 800783e:	e040      	b.n	80078c2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007840:	78fb      	ldrb	r3, [r7, #3]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	4413      	add	r3, r2
 8007848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800784c:	461a      	mov	r2, r3
 800784e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007852:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007854:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007858:	2b00      	cmp	r3, #0
 800785a:	da34      	bge.n	80078c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800785c:	78fb      	ldrb	r3, [r7, #3]
 800785e:	015a      	lsls	r2, r3, #5
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	4413      	add	r3, r2
 8007864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	78fa      	ldrb	r2, [r7, #3]
 800786c:	0151      	lsls	r1, r2, #5
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	440a      	add	r2, r1
 8007872:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800787a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800787c:	e023      	b.n	80078c6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800788a:	461a      	mov	r2, r3
 800788c:	f240 2325 	movw	r3, #549	; 0x225
 8007890:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007892:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007896:	2b00      	cmp	r3, #0
 8007898:	da17      	bge.n	80078ca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800789a:	78fb      	ldrb	r3, [r7, #3]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	78fa      	ldrb	r2, [r7, #3]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078b4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80078b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80078ba:	e006      	b.n	80078ca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	77fb      	strb	r3, [r7, #31]
      break;
 80078c0:	e004      	b.n	80078cc <USB_HC_Init+0x14c>
      break;
 80078c2:	bf00      	nop
 80078c4:	e002      	b.n	80078cc <USB_HC_Init+0x14c>
      break;
 80078c6:	bf00      	nop
 80078c8:	e000      	b.n	80078cc <USB_HC_Init+0x14c>
      break;
 80078ca:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80078cc:	78fb      	ldrb	r3, [r7, #3]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	78fa      	ldrb	r2, [r7, #3]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078e6:	f043 0302 	orr.w	r3, r3, #2
 80078ea:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f2:	699a      	ldr	r2, [r3, #24]
 80078f4:	78fb      	ldrb	r3, [r7, #3]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	2101      	movs	r1, #1
 80078fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007900:	6939      	ldr	r1, [r7, #16]
 8007902:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007906:	4313      	orrs	r3, r2
 8007908:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007916:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800791a:	2b00      	cmp	r3, #0
 800791c:	da03      	bge.n	8007926 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800791e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	e001      	b.n	800792a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff feff 	bl	800772e <USB_GetHostSpeed>
 8007930:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007932:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007936:	2b02      	cmp	r3, #2
 8007938:	d106      	bne.n	8007948 <USB_HC_Init+0x1c8>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d003      	beq.n	8007948 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007944:	617b      	str	r3, [r7, #20]
 8007946:	e001      	b.n	800794c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800794c:	787b      	ldrb	r3, [r7, #1]
 800794e:	059b      	lsls	r3, r3, #22
 8007950:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007954:	78bb      	ldrb	r3, [r7, #2]
 8007956:	02db      	lsls	r3, r3, #11
 8007958:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800795c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800795e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007962:	049b      	lsls	r3, r3, #18
 8007964:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007968:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800796a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800796c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007970:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	0159      	lsls	r1, r3, #5
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	440b      	add	r3, r1
 800797e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007982:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007988:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800798a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800798e:	2b03      	cmp	r3, #3
 8007990:	d003      	beq.n	800799a <USB_HC_Init+0x21a>
 8007992:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007996:	2b01      	cmp	r3, #1
 8007998:	d10f      	bne.n	80079ba <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800799a:	78fb      	ldrb	r3, [r7, #3]
 800799c:	015a      	lsls	r2, r3, #5
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	4413      	add	r3, r2
 80079a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80079ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08c      	sub	sp, #48	; 0x30
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80079dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d02d      	beq.n	8007a4a <USB_HC_StartXfer+0x86>
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	791b      	ldrb	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d129      	bne.n	8007a4a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80079f6:	79fb      	ldrb	r3, [r7, #7]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d117      	bne.n	8007a2c <USB_HC_StartXfer+0x68>
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	79db      	ldrb	r3, [r3, #7]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d003      	beq.n	8007a0c <USB_HC_StartXfer+0x48>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	79db      	ldrb	r3, [r3, #7]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d10f      	bne.n	8007a2c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	0151      	lsls	r1, r2, #5
 8007a1e:	6a3a      	ldr	r2, [r7, #32]
 8007a20:	440a      	add	r2, r1
 8007a22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10b      	bne.n	8007a4a <USB_HC_StartXfer+0x86>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	795b      	ldrb	r3, [r3, #5]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d107      	bne.n	8007a4a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 fa0f 	bl	8007e64 <USB_DoPing>
      return HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	e0f8      	b.n	8007c3c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d018      	beq.n	8007a84 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	8912      	ldrh	r2, [r2, #8]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	8912      	ldrh	r2, [r2, #8]
 8007a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a66:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007a68:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007a6a:	8b7b      	ldrh	r3, [r7, #26]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d90b      	bls.n	8007a88 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007a70:	8b7b      	ldrh	r3, [r7, #26]
 8007a72:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	8912      	ldrh	r2, [r2, #8]
 8007a7a:	fb03 f202 	mul.w	r2, r3, r2
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	611a      	str	r2, [r3, #16]
 8007a82:	e001      	b.n	8007a88 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007a84:	2301      	movs	r3, #1
 8007a86:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	78db      	ldrb	r3, [r3, #3]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	8912      	ldrh	r2, [r2, #8]
 8007a96:	fb03 f202 	mul.w	r2, r3, r2
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	611a      	str	r2, [r3, #16]
 8007a9e:	e003      	b.n	8007aa8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	695a      	ldr	r2, [r3, #20]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ab2:	04d9      	lsls	r1, r3, #19
 8007ab4:	4b63      	ldr	r3, [pc, #396]	; (8007c44 <USB_HC_StartXfer+0x280>)
 8007ab6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ab8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	7a9b      	ldrb	r3, [r3, #10]
 8007abe:	075b      	lsls	r3, r3, #29
 8007ac0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ac4:	69f9      	ldr	r1, [r7, #28]
 8007ac6:	0148      	lsls	r0, r1, #5
 8007ac8:	6a39      	ldr	r1, [r7, #32]
 8007aca:	4401      	add	r1, r0
 8007acc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ad0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ad2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	68d9      	ldr	r1, [r3, #12]
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aea:	460a      	mov	r2, r1
 8007aec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bf0c      	ite	eq
 8007afe:	2301      	moveq	r3, #1
 8007b00:	2300      	movne	r3, #0
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	6a3a      	ldr	r2, [r7, #32]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b24:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	015a      	lsls	r2, r3, #5
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	7e7b      	ldrb	r3, [r7, #25]
 8007b36:	075b      	lsls	r3, r3, #29
 8007b38:	69f9      	ldr	r1, [r7, #28]
 8007b3a:	0148      	lsls	r0, r1, #5
 8007b3c:	6a39      	ldr	r1, [r7, #32]
 8007b3e:	4401      	add	r1, r0
 8007b40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007b44:	4313      	orrs	r3, r2
 8007b46:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	015a      	lsls	r2, r3, #5
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b5e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d004      	beq.n	8007b72 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	e003      	b.n	8007b7a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007b78:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b80:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8e:	461a      	mov	r2, r3
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e04e      	b.n	8007c3c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	78db      	ldrb	r3, [r3, #3]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d149      	bne.n	8007c3a <USB_HC_StartXfer+0x276>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d045      	beq.n	8007c3a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	79db      	ldrb	r3, [r3, #7]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d830      	bhi.n	8007c18 <USB_HC_StartXfer+0x254>
 8007bb6:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <USB_HC_StartXfer+0x1f8>)
 8007bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bf1 	.word	0x08007bf1
 8007bc4:	08007bcd 	.word	0x08007bcd
 8007bc8:	08007bf1 	.word	0x08007bf1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	3303      	adds	r3, #3
 8007bd2:	089b      	lsrs	r3, r3, #2
 8007bd4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007bd6:	8afa      	ldrh	r2, [r7, #22]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d91c      	bls.n	8007c1c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	f043 0220 	orr.w	r2, r3, #32
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	619a      	str	r2, [r3, #24]
        }
        break;
 8007bee:	e015      	b.n	8007c1c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	3303      	adds	r3, #3
 8007bf6:	089b      	lsrs	r3, r3, #2
 8007bf8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007bfa:	8afa      	ldrh	r2, [r7, #22]
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d90a      	bls.n	8007c20 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c16:	e003      	b.n	8007c20 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007c18:	bf00      	nop
 8007c1a:	e002      	b.n	8007c22 <USB_HC_StartXfer+0x25e>
        break;
 8007c1c:	bf00      	nop
 8007c1e:	e000      	b.n	8007c22 <USB_HC_StartXfer+0x25e>
        break;
 8007c20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	68d9      	ldr	r1, [r3, #12]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	785a      	ldrb	r2, [r3, #1]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	2000      	movs	r0, #0
 8007c32:	9000      	str	r0, [sp, #0]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f7ff fb31 	bl	800729c <USB_WritePacket>
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3728      	adds	r7, #40	; 0x28
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	1ff80000 	.word	0x1ff80000

08007c48 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	b29b      	uxth	r3, r3
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3714      	adds	r7, #20
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b089      	sub	sp, #36	; 0x24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	460b      	mov	r3, r1
 8007c74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	0c9b      	lsrs	r3, r3, #18
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	0fdb      	lsrs	r3, r3, #31
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d104      	bne.n	8007cc4 <USB_HC_Halt+0x5a>
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e0c8      	b.n	8007e56 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <USB_HC_Halt+0x66>
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d163      	bne.n	8007d98 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	0151      	lsls	r1, r2, #5
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007cea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f003 0320 	and.w	r3, r3, #32
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f040 80ab 	bne.w	8007e54 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d133      	bne.n	8007d72 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	0151      	lsls	r1, r2, #5
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	440a      	add	r2, r1
 8007d20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d28:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d48:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d56:	d81d      	bhi.n	8007d94 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d58:	69bb      	ldr	r3, [r7, #24]
 8007d5a:	015a      	lsls	r2, r3, #5
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	4413      	add	r3, r2
 8007d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d6e:	d0ec      	beq.n	8007d4a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d70:	e070      	b.n	8007e54 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	0151      	lsls	r1, r2, #5
 8007d84:	69fa      	ldr	r2, [r7, #28]
 8007d86:	440a      	add	r2, r1
 8007d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d90:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d92:	e05f      	b.n	8007e54 <USB_HC_Halt+0x1ea>
            break;
 8007d94:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d96:	e05d      	b.n	8007e54 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	0151      	lsls	r1, r2, #5
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	440a      	add	r2, r1
 8007dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007db2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007db6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d133      	bne.n	8007e30 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007de2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007de6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	0151      	lsls	r1, r2, #5
 8007dfa:	69fa      	ldr	r2, [r7, #28]
 8007dfc:	440a      	add	r2, r1
 8007dfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e06:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e14:	d81d      	bhi.n	8007e52 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	015a      	lsls	r2, r3, #5
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e2c:	d0ec      	beq.n	8007e08 <USB_HC_Halt+0x19e>
 8007e2e:	e011      	b.n	8007e54 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	0151      	lsls	r1, r2, #5
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	440a      	add	r2, r1
 8007e46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	e000      	b.n	8007e54 <USB_HC_Halt+0x1ea>
          break;
 8007e52:	bf00      	nop
    }
  }

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3724      	adds	r7, #36	; 0x24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
	...

08007e64 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b087      	sub	sp, #28
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	04da      	lsls	r2, r3, #19
 8007e80:	4b15      	ldr	r3, [pc, #84]	; (8007ed8 <USB_DoPing+0x74>)
 8007e82:	4013      	ands	r3, r2
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e94:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	015a      	lsls	r2, r3, #5
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007eac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007eb4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	015a      	lsls	r2, r3, #5
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	371c      	adds	r7, #28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	1ff80000 	.word	0x1ff80000

08007edc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007eec:	2300      	movs	r3, #0
 8007eee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7ff f911 	bl	8007118 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ef6:	2110      	movs	r1, #16
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff f96b 	bl	80071d4 <USB_FlushTxFifo>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff f997 	bl	800723c <USB_FlushRxFifo>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	e01f      	b.n	8007f5e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007f46:	69bb      	ldr	r3, [r7, #24]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f52:	461a      	mov	r2, r3
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	61bb      	str	r3, [r7, #24]
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b0f      	cmp	r3, #15
 8007f62:	d9dc      	bls.n	8007f1e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	61bb      	str	r3, [r7, #24]
 8007f68:	e034      	b.n	8007fd4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fb0:	d80c      	bhi.n	8007fcc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fc8:	d0ec      	beq.n	8007fa4 <USB_StopHost+0xc8>
 8007fca:	e000      	b.n	8007fce <USB_StopHost+0xf2>
        break;
 8007fcc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	61bb      	str	r3, [r7, #24]
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	2b0f      	cmp	r3, #15
 8007fd8:	d9c7      	bls.n	8007f6a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f04f 32ff 	mov.w	r2, #4294967295
 8007fee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff f880 	bl	80070f6 <USB_EnableGlobalInt>

  return ret;
 8007ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008000:	b590      	push	{r4, r7, lr}
 8008002:	b089      	sub	sp, #36	; 0x24
 8008004:	af04      	add	r7, sp, #16
 8008006:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008008:	2301      	movs	r3, #1
 800800a:	2202      	movs	r2, #2
 800800c:	2102      	movs	r1, #2
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fc66 	bl	80088e0 <USBH_FindInterface>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	2bff      	cmp	r3, #255	; 0xff
 800801c:	d002      	beq.n	8008024 <USBH_CDC_InterfaceInit+0x24>
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d901      	bls.n	8008028 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008024:	2302      	movs	r3, #2
 8008026:	e13d      	b.n	80082a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fc3b 	bl	80088a8 <USBH_SelectInterface>
 8008032:	4603      	mov	r3, r0
 8008034:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008036:	7bbb      	ldrb	r3, [r7, #14]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800803c:	2302      	movs	r3, #2
 800803e:	e131      	b.n	80082a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008046:	2050      	movs	r0, #80	; 0x50
 8008048:	f002 fafa 	bl	800a640 <malloc>
 800804c:	4603      	mov	r3, r0
 800804e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008056:	69db      	ldr	r3, [r3, #28]
 8008058:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008060:	2302      	movs	r3, #2
 8008062:	e11f      	b.n	80082a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008064:	2250      	movs	r2, #80	; 0x50
 8008066:	2100      	movs	r1, #0
 8008068:	68b8      	ldr	r0, [r7, #8]
 800806a:	f002 faf9 	bl	800a660 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800806e:	7bfb      	ldrb	r3, [r7, #15]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	211a      	movs	r1, #26
 8008074:	fb01 f303 	mul.w	r3, r1, r3
 8008078:	4413      	add	r3, r2
 800807a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b25b      	sxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	da15      	bge.n	80080b2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008086:	7bfb      	ldrb	r3, [r7, #15]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	211a      	movs	r1, #26
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	4413      	add	r3, r2
 8008092:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008096:	781a      	ldrb	r2, [r3, #0]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	211a      	movs	r1, #26
 80080a2:	fb01 f303 	mul.w	r3, r1, r3
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80080ac:	881a      	ldrh	r2, [r3, #0]
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f001 ff2c 	bl	8009f16 <USBH_AllocPipe>
 80080be:	4603      	mov	r3, r0
 80080c0:	461a      	mov	r2, r3
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	7819      	ldrb	r1, [r3, #0]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	7858      	ldrb	r0, [r3, #1]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	8952      	ldrh	r2, [r2, #10]
 80080de:	9202      	str	r2, [sp, #8]
 80080e0:	2203      	movs	r2, #3
 80080e2:	9201      	str	r2, [sp, #4]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	4623      	mov	r3, r4
 80080e8:	4602      	mov	r2, r0
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fee4 	bl	8009eb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2200      	movs	r2, #0
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f002 f9f3 	bl	800a4e4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80080fe:	2300      	movs	r3, #0
 8008100:	2200      	movs	r2, #0
 8008102:	210a      	movs	r1, #10
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fbeb 	bl	80088e0 <USBH_FindInterface>
 800810a:	4603      	mov	r3, r0
 800810c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800810e:	7bfb      	ldrb	r3, [r7, #15]
 8008110:	2bff      	cmp	r3, #255	; 0xff
 8008112:	d002      	beq.n	800811a <USBH_CDC_InterfaceInit+0x11a>
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d901      	bls.n	800811e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800811a:	2302      	movs	r3, #2
 800811c:	e0c2      	b.n	80082a4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	211a      	movs	r1, #26
 8008124:	fb01 f303 	mul.w	r3, r1, r3
 8008128:	4413      	add	r3, r2
 800812a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	b25b      	sxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	da16      	bge.n	8008164 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	211a      	movs	r1, #26
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	4413      	add	r3, r2
 8008142:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008146:	781a      	ldrb	r2, [r3, #0]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	211a      	movs	r1, #26
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	4413      	add	r3, r2
 8008158:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800815c:	881a      	ldrh	r2, [r3, #0]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	835a      	strh	r2, [r3, #26]
 8008162:	e015      	b.n	8008190 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	211a      	movs	r1, #26
 800816a:	fb01 f303 	mul.w	r3, r1, r3
 800816e:	4413      	add	r3, r2
 8008170:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008174:	781a      	ldrb	r2, [r3, #0]
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	211a      	movs	r1, #26
 8008180:	fb01 f303 	mul.w	r3, r1, r3
 8008184:	4413      	add	r3, r2
 8008186:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800818a:	881a      	ldrh	r2, [r3, #0]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	211a      	movs	r1, #26
 8008196:	fb01 f303 	mul.w	r3, r1, r3
 800819a:	4413      	add	r3, r2
 800819c:	f203 3356 	addw	r3, r3, #854	; 0x356
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	b25b      	sxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	da16      	bge.n	80081d6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	211a      	movs	r1, #26
 80081ae:	fb01 f303 	mul.w	r3, r1, r3
 80081b2:	4413      	add	r3, r2
 80081b4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80081b8:	781a      	ldrb	r2, [r3, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	211a      	movs	r1, #26
 80081c4:	fb01 f303 	mul.w	r3, r1, r3
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80081ce:	881a      	ldrh	r2, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	835a      	strh	r2, [r3, #26]
 80081d4:	e015      	b.n	8008202 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	211a      	movs	r1, #26
 80081dc:	fb01 f303 	mul.w	r3, r1, r3
 80081e0:	4413      	add	r3, r2
 80081e2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80081e6:	781a      	ldrb	r2, [r3, #0]
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	211a      	movs	r1, #26
 80081f2:	fb01 f303 	mul.w	r3, r1, r3
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80081fc:	881a      	ldrh	r2, [r3, #0]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	7b9b      	ldrb	r3, [r3, #14]
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 fe84 	bl	8009f16 <USBH_AllocPipe>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	7bdb      	ldrb	r3, [r3, #15]
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fe7a 	bl	8009f16 <USBH_AllocPipe>
 8008222:	4603      	mov	r3, r0
 8008224:	461a      	mov	r2, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	7b59      	ldrb	r1, [r3, #13]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	7b98      	ldrb	r0, [r3, #14]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	8b12      	ldrh	r2, [r2, #24]
 8008242:	9202      	str	r2, [sp, #8]
 8008244:	2202      	movs	r2, #2
 8008246:	9201      	str	r2, [sp, #4]
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	4623      	mov	r3, r4
 800824c:	4602      	mov	r2, r0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 fe32 	bl	8009eb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	7b19      	ldrb	r1, [r3, #12]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	7bd8      	ldrb	r0, [r3, #15]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	8b52      	ldrh	r2, [r2, #26]
 800826c:	9202      	str	r2, [sp, #8]
 800826e:	2202      	movs	r2, #2
 8008270:	9201      	str	r2, [sp, #4]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	4623      	mov	r3, r4
 8008276:	4602      	mov	r2, r0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 fe1d 	bl	8009eb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	7b5b      	ldrb	r3, [r3, #13]
 800828a:	2200      	movs	r2, #0
 800828c:	4619      	mov	r1, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f002 f928 	bl	800a4e4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	7b1b      	ldrb	r3, [r3, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f002 f921 	bl	800a4e4 <USBH_LL_SetToggle>

  return USBH_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd90      	pop	{r4, r7, pc}

080082ac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00e      	beq.n	80082e4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f001 fe12 	bl	8009ef6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 fe3d 	bl	8009f58 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	7b1b      	ldrb	r3, [r3, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00e      	beq.n	800830a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	7b1b      	ldrb	r3, [r3, #12]
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fdff 	bl	8009ef6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	7b1b      	ldrb	r3, [r3, #12]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fe2a 	bl	8009f58 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	7b5b      	ldrb	r3, [r3, #13]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00e      	beq.n	8008330 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	7b5b      	ldrb	r3, [r3, #13]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f001 fdec 	bl	8009ef6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	7b5b      	ldrb	r3, [r3, #13]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fe17 	bl	8009f58 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00b      	beq.n	8008354 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	4618      	mov	r0, r3
 8008346:	f002 f983 	bl	800a650 <free>
    phost->pActiveClass->pData = 0U;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008350:	2200      	movs	r2, #0
 8008352:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800836c:	69db      	ldr	r3, [r3, #28]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	3340      	adds	r3, #64	; 0x40
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f8b1 	bl	80084de <GetLineCoding>
 800837c:	4603      	mov	r3, r0
 800837e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d105      	bne.n	8008392 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800838c:	2102      	movs	r1, #2
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008392:	7afb      	ldrb	r3, [r7, #11]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80083a4:	2301      	movs	r3, #1
 80083a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80083bc:	2b04      	cmp	r3, #4
 80083be:	d877      	bhi.n	80084b0 <USBH_CDC_Process+0x114>
 80083c0:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <USBH_CDC_Process+0x2c>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083dd 	.word	0x080083dd
 80083cc:	080083e3 	.word	0x080083e3
 80083d0:	08008413 	.word	0x08008413
 80083d4:	08008487 	.word	0x08008487
 80083d8:	08008495 	.word	0x08008495
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
      break;
 80083e0:	e06d      	b.n	80084be <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f897 	bl	800851c <SetLineCoding>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008400:	e058      	b.n	80084b4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008402:	7bbb      	ldrb	r3, [r7, #14]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d055      	beq.n	80084b4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2204      	movs	r2, #4
 800840c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008410:	e050      	b.n	80084b4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	3340      	adds	r3, #64	; 0x40
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f860 	bl	80084de <GetLineCoding>
 800841e:	4603      	mov	r3, r0
 8008420:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d126      	bne.n	8008476 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800843a:	791b      	ldrb	r3, [r3, #4]
 800843c:	429a      	cmp	r2, r3
 800843e:	d13b      	bne.n	80084b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800844a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800844c:	429a      	cmp	r2, r3
 800844e:	d133      	bne.n	80084b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800845a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800845c:	429a      	cmp	r2, r3
 800845e:	d12b      	bne.n	80084b8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008468:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800846a:	429a      	cmp	r2, r3
 800846c:	d124      	bne.n	80084b8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f958 	bl	8008724 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008474:	e020      	b.n	80084b8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008476:	7bbb      	ldrb	r3, [r7, #14]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d01d      	beq.n	80084b8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2204      	movs	r2, #4
 8008480:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008484:	e018      	b.n	80084b8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f867 	bl	800855a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f8da 	bl	8008646 <CDC_ProcessReception>
      break;
 8008492:	e014      	b.n	80084be <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008494:	2100      	movs	r1, #0
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 ffef 	bl	800947a <USBH_ClrFeature>
 800849c:	4603      	mov	r3, r0
 800849e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80084a0:	7bbb      	ldrb	r3, [r7, #14]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80084ae:	e005      	b.n	80084bc <USBH_CDC_Process+0x120>

    default:
      break;
 80084b0:	bf00      	nop
 80084b2:	e004      	b.n	80084be <USBH_CDC_Process+0x122>
      break;
 80084b4:	bf00      	nop
 80084b6:	e002      	b.n	80084be <USBH_CDC_Process+0x122>
      break;
 80084b8:	bf00      	nop
 80084ba:	e000      	b.n	80084be <USBH_CDC_Process+0x122>
      break;
 80084bc:	bf00      	nop

  }

  return status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	22a1      	movs	r2, #161	; 0xa1
 80084ec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2221      	movs	r2, #33	; 0x21
 80084f2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2207      	movs	r2, #7
 8008504:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2207      	movs	r2, #7
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fa81 	bl	8009a14 <USBH_CtlReq>
 8008512:	4603      	mov	r3, r0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2221      	movs	r2, #33	; 0x21
 800852a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2220      	movs	r2, #32
 8008530:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2207      	movs	r2, #7
 8008542:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2207      	movs	r2, #7
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f001 fa62 	bl	8009a14 <USBH_CtlReq>
 8008550:	4603      	mov	r3, r0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3708      	adds	r7, #8
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b086      	sub	sp, #24
 800855e:	af02      	add	r7, sp, #8
 8008560:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800856c:	2300      	movs	r3, #0
 800856e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008576:	2b01      	cmp	r3, #1
 8008578:	d002      	beq.n	8008580 <CDC_ProcessTransmission+0x26>
 800857a:	2b02      	cmp	r3, #2
 800857c:	d023      	beq.n	80085c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800857e:	e05e      	b.n	800863e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	8b12      	ldrh	r2, [r2, #24]
 8008588:	4293      	cmp	r3, r2
 800858a:	d90b      	bls.n	80085a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	69d9      	ldr	r1, [r3, #28]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8b1a      	ldrh	r2, [r3, #24]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	7b5b      	ldrb	r3, [r3, #13]
 8008598:	2001      	movs	r0, #1
 800859a:	9000      	str	r0, [sp, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 fc48 	bl	8009e32 <USBH_BulkSendData>
 80085a2:	e00b      	b.n	80085bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	7b5b      	ldrb	r3, [r3, #13]
 80085b2:	2001      	movs	r0, #1
 80085b4:	9000      	str	r0, [sp, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 fc3b 	bl	8009e32 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2202      	movs	r2, #2
 80085c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80085c4:	e03b      	b.n	800863e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	7b5b      	ldrb	r3, [r3, #13]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f001 ff5f 	bl	800a490 <USBH_LL_GetURBState>
 80085d2:	4603      	mov	r3, r0
 80085d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80085d6:	7afb      	ldrb	r3, [r7, #11]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d128      	bne.n	800862e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	8b12      	ldrh	r2, [r2, #24]
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d90e      	bls.n	8008606 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	8b12      	ldrh	r2, [r2, #24]
 80085f0:	1a9a      	subs	r2, r3, r2
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	8b12      	ldrh	r2, [r2, #24]
 80085fe:	441a      	add	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	61da      	str	r2, [r3, #28]
 8008604:	e002      	b.n	800860c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008610:	2b00      	cmp	r3, #0
 8008612:	d004      	beq.n	800861e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800861c:	e00e      	b.n	800863c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f868 	bl	80086fc <USBH_CDC_TransmitCallback>
      break;
 800862c:	e006      	b.n	800863c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800862e:	7afb      	ldrb	r3, [r7, #11]
 8008630:	2b02      	cmp	r3, #2
 8008632:	d103      	bne.n	800863c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800863c:	bf00      	nop
  }
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b086      	sub	sp, #24
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008654:	69db      	ldr	r3, [r3, #28]
 8008656:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008658:	2300      	movs	r3, #0
 800865a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008662:	2b03      	cmp	r3, #3
 8008664:	d002      	beq.n	800866c <CDC_ProcessReception+0x26>
 8008666:	2b04      	cmp	r3, #4
 8008668:	d00e      	beq.n	8008688 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800866a:	e043      	b.n	80086f4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	6a19      	ldr	r1, [r3, #32]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	8b5a      	ldrh	r2, [r3, #26]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	7b1b      	ldrb	r3, [r3, #12]
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fbff 	bl	8009e7c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	2204      	movs	r2, #4
 8008682:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008686:	e035      	b.n	80086f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	7b1b      	ldrb	r3, [r3, #12]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f001 fefe 	bl	800a490 <USBH_LL_GetURBState>
 8008694:	4603      	mov	r3, r0
 8008696:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008698:	7cfb      	ldrb	r3, [r7, #19]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d129      	bne.n	80086f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	7b1b      	ldrb	r3, [r3, #12]
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f001 fe61 	bl	800a36c <USBH_LL_GetLastXferSize>
 80086aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d016      	beq.n	80086e4 <CDC_ProcessReception+0x9e>
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	8b5b      	ldrh	r3, [r3, #26]
 80086ba:	461a      	mov	r2, r3
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4293      	cmp	r3, r2
 80086c0:	d910      	bls.n	80086e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	1ad2      	subs	r2, r2, r3
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	6a1a      	ldr	r2, [r3, #32]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	441a      	add	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2203      	movs	r2, #3
 80086de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80086e2:	e006      	b.n	80086f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f80f 	bl	8008710 <USBH_CDC_ReceiveCallback>
      break;
 80086f2:	bf00      	nop
  }
}
 80086f4:	bf00      	nop
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008704:	bf00      	nop
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	4613      	mov	r3, r2
 8008744:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d101      	bne.n	8008750 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800874c:	2302      	movs	r3, #2
 800874e:	e029      	b.n	80087a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	79fa      	ldrb	r2, [r7, #7]
 8008754:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 f81f 	bl	80087ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d003      	beq.n	800879c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f001 fd31 	bl	800a204 <USBH_LL_Init>

  return USBH_OK;
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	3710      	adds	r7, #16
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bd80      	pop	{r7, pc}

080087ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80087b8:	2300      	movs	r3, #0
 80087ba:	60fb      	str	r3, [r7, #12]
 80087bc:	e009      	b.n	80087d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	33e0      	adds	r3, #224	; 0xe0
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	2200      	movs	r2, #0
 80087ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3301      	adds	r3, #1
 80087d0:	60fb      	str	r3, [r7, #12]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b0f      	cmp	r3, #15
 80087d6:	d9f2      	bls.n	80087be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]
 80087dc:	e009      	b.n	80087f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	4413      	add	r3, r2
 80087e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087f8:	d3f1      	bcc.n	80087de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2201      	movs	r2, #1
 800880a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2240      	movs	r2, #64	; 0x40
 800881e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3714      	adds	r7, #20
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d016      	beq.n	8008896 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10e      	bne.n	8008890 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008878:	1c59      	adds	r1, r3, #1
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	33de      	adds	r3, #222	; 0xde
 8008884:	6839      	ldr	r1, [r7, #0]
 8008886:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73fb      	strb	r3, [r7, #15]
 800888e:	e004      	b.n	800889a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008890:	2302      	movs	r3, #2
 8008892:	73fb      	strb	r3, [r7, #15]
 8008894:	e001      	b.n	800889a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008896:	2302      	movs	r3, #2
 8008898:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80088be:	78fa      	ldrb	r2, [r7, #3]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d204      	bcs.n	80088ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80088cc:	e001      	b.n	80088d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80088ce:	2302      	movs	r3, #2
 80088d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	4608      	mov	r0, r1
 80088ea:	4611      	mov	r1, r2
 80088ec:	461a      	mov	r2, r3
 80088ee:	4603      	mov	r3, r0
 80088f0:	70fb      	strb	r3, [r7, #3]
 80088f2:	460b      	mov	r3, r1
 80088f4:	70bb      	strb	r3, [r7, #2]
 80088f6:	4613      	mov	r3, r2
 80088f8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008908:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800890a:	e025      	b.n	8008958 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800890c:	7dfb      	ldrb	r3, [r7, #23]
 800890e:	221a      	movs	r2, #26
 8008910:	fb02 f303 	mul.w	r3, r2, r3
 8008914:	3308      	adds	r3, #8
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	3302      	adds	r3, #2
 800891c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	795b      	ldrb	r3, [r3, #5]
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	429a      	cmp	r2, r3
 8008926:	d002      	beq.n	800892e <USBH_FindInterface+0x4e>
 8008928:	78fb      	ldrb	r3, [r7, #3]
 800892a:	2bff      	cmp	r3, #255	; 0xff
 800892c:	d111      	bne.n	8008952 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008932:	78ba      	ldrb	r2, [r7, #2]
 8008934:	429a      	cmp	r2, r3
 8008936:	d002      	beq.n	800893e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008938:	78bb      	ldrb	r3, [r7, #2]
 800893a:	2bff      	cmp	r3, #255	; 0xff
 800893c:	d109      	bne.n	8008952 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008942:	787a      	ldrb	r2, [r7, #1]
 8008944:	429a      	cmp	r2, r3
 8008946:	d002      	beq.n	800894e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008948:	787b      	ldrb	r3, [r7, #1]
 800894a:	2bff      	cmp	r3, #255	; 0xff
 800894c:	d101      	bne.n	8008952 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	e006      	b.n	8008960 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	3301      	adds	r3, #1
 8008956:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008958:	7dfb      	ldrb	r3, [r7, #23]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d9d6      	bls.n	800890c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800895e:	23ff      	movs	r3, #255	; 0xff
}
 8008960:	4618      	mov	r0, r3
 8008962:	371c      	adds	r7, #28
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 fc81 	bl	800a27c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800897a:	2101      	movs	r1, #1
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 fd9a 	bl	800a4b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af04      	add	r7, sp, #16
 8008992:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008994:	2302      	movs	r3, #2
 8008996:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d102      	bne.n	80089ae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2203      	movs	r2, #3
 80089ac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	2b0b      	cmp	r3, #11
 80089b6:	f200 81be 	bhi.w	8008d36 <USBH_Process+0x3aa>
 80089ba:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <USBH_Process+0x34>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089f1 	.word	0x080089f1
 80089c4:	08008a23 	.word	0x08008a23
 80089c8:	08008a8b 	.word	0x08008a8b
 80089cc:	08008cd1 	.word	0x08008cd1
 80089d0:	08008d37 	.word	0x08008d37
 80089d4:	08008b2f 	.word	0x08008b2f
 80089d8:	08008c77 	.word	0x08008c77
 80089dc:	08008b65 	.word	0x08008b65
 80089e0:	08008b85 	.word	0x08008b85
 80089e4:	08008ba5 	.word	0x08008ba5
 80089e8:	08008be9 	.word	0x08008be9
 80089ec:	08008cb9 	.word	0x08008cb9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 819e 	beq.w	8008d3a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008a04:	20c8      	movs	r0, #200	; 0xc8
 8008a06:	f001 fd9d 	bl	800a544 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f001 fc93 	bl	800a336 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a20:	e18b      	b.n	8008d3a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d107      	bne.n	8008a3c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a3a:	e18d      	b.n	8008d58 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a46:	d914      	bls.n	8008a72 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a4e:	3301      	adds	r3, #1
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d903      	bls.n	8008a6a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	220d      	movs	r2, #13
 8008a66:	701a      	strb	r2, [r3, #0]
      break;
 8008a68:	e176      	b.n	8008d58 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
      break;
 8008a70:	e172      	b.n	8008d58 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008a78:	f103 020a 	add.w	r2, r3, #10
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008a82:	200a      	movs	r0, #10
 8008a84:	f001 fd5e 	bl	800a544 <USBH_Delay>
      break;
 8008a88:	e166      	b.n	8008d58 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d005      	beq.n	8008aa0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a9a:	2104      	movs	r1, #4
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008aa0:	2064      	movs	r0, #100	; 0x64
 8008aa2:	f001 fd4f 	bl	800a544 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fc1e 	bl	800a2e8 <USBH_LL_GetSpeed>
 8008aac:	4603      	mov	r3, r0
 8008aae:	461a      	mov	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2205      	movs	r2, #5
 8008aba:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fa29 	bl	8009f16 <USBH_AllocPipe>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008acc:	2180      	movs	r1, #128	; 0x80
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f001 fa21 	bl	8009f16 <USBH_AllocPipe>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7919      	ldrb	r1, [r3, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008af0:	b292      	uxth	r2, r2
 8008af2:	9202      	str	r2, [sp, #8]
 8008af4:	2200      	movs	r2, #0
 8008af6:	9201      	str	r2, [sp, #4]
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	4603      	mov	r3, r0
 8008afc:	2280      	movs	r2, #128	; 0x80
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 f9da 	bl	8009eb8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	7959      	ldrb	r1, [r3, #5]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b18:	b292      	uxth	r2, r2
 8008b1a:	9202      	str	r2, [sp, #8]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	9201      	str	r2, [sp, #4]
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4603      	mov	r3, r0
 8008b24:	2200      	movs	r2, #0
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 f9c6 	bl	8009eb8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b2c:	e114      	b.n	8008d58 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f918 	bl	8008d64 <USBH_HandleEnum>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008b38:	7bbb      	ldrb	r3, [r7, #14]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f040 80fe 	bne.w	8008d3e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d103      	bne.n	8008b5c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2208      	movs	r2, #8
 8008b58:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b5a:	e0f0      	b.n	8008d3e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2207      	movs	r2, #7
 8008b60:	701a      	strb	r2, [r3, #0]
      break;
 8008b62:	e0ec      	b.n	8008d3e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f000 80e9 	beq.w	8008d42 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008b76:	2101      	movs	r1, #1
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2208      	movs	r2, #8
 8008b80:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008b82:	e0de      	b.n	8008d42 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fc2c 	bl	80093ec <USBH_SetCfg>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f040 80d5 	bne.w	8008d46 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2209      	movs	r2, #9
 8008ba0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ba2:	e0d0      	b.n	8008d46 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008baa:	f003 0320 	and.w	r3, r3, #32
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d016      	beq.n	8008be0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fc3c 	bl	8009432 <USBH_SetFeature>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d103      	bne.n	8008bce <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	220a      	movs	r2, #10
 8008bca:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008bcc:	e0bd      	b.n	8008d4a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	f040 80b9 	bne.w	8008d4a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	220a      	movs	r2, #10
 8008bdc:	701a      	strb	r2, [r3, #0]
      break;
 8008bde:	e0b4      	b.n	8008d4a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	220a      	movs	r2, #10
 8008be4:	701a      	strb	r2, [r3, #0]
      break;
 8008be6:	e0b0      	b.n	8008d4a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	f000 80ad 	beq.w	8008d4e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	73fb      	strb	r3, [r7, #15]
 8008c00:	e016      	b.n	8008c30 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008c02:	7bfa      	ldrb	r2, [r7, #15]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	32de      	adds	r2, #222	; 0xde
 8008c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0c:	791a      	ldrb	r2, [r3, #4]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d108      	bne.n	8008c2a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008c18:	7bfa      	ldrb	r2, [r7, #15]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	32de      	adds	r2, #222	; 0xde
 8008c1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008c28:	e005      	b.n	8008c36 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0e5      	beq.n	8008c02 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d016      	beq.n	8008c6e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	4798      	blx	r3
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d109      	bne.n	8008c66 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2206      	movs	r2, #6
 8008c56:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c5e:	2103      	movs	r1, #3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c64:	e073      	b.n	8008d4e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	220d      	movs	r2, #13
 8008c6a:	701a      	strb	r2, [r3, #0]
      break;
 8008c6c:	e06f      	b.n	8008d4e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	220d      	movs	r2, #13
 8008c72:	701a      	strb	r2, [r3, #0]
      break;
 8008c74:	e06b      	b.n	8008d4e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d017      	beq.n	8008cb0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	4798      	blx	r3
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d103      	bne.n	8008ca0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	220b      	movs	r2, #11
 8008c9c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c9e:	e058      	b.n	8008d52 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d154      	bne.n	8008d52 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	220d      	movs	r2, #13
 8008cac:	701a      	strb	r2, [r3, #0]
      break;
 8008cae:	e050      	b.n	8008d52 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	220d      	movs	r2, #13
 8008cb4:	701a      	strb	r2, [r3, #0]
      break;
 8008cb6:	e04c      	b.n	8008d52 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d049      	beq.n	8008d56 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	4798      	blx	r3
      }
      break;
 8008cce:	e042      	b.n	8008d56 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f7ff fd67 	bl	80087ac <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d009      	beq.n	8008cfc <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d0c:	2105      	movs	r1, #5
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d107      	bne.n	8008d2e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff fe20 	bl	800896c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d2c:	e014      	b.n	8008d58 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 faa4 	bl	800a27c <USBH_LL_Start>
      break;
 8008d34:	e010      	b.n	8008d58 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8008d36:	bf00      	nop
 8008d38:	e00e      	b.n	8008d58 <USBH_Process+0x3cc>
      break;
 8008d3a:	bf00      	nop
 8008d3c:	e00c      	b.n	8008d58 <USBH_Process+0x3cc>
      break;
 8008d3e:	bf00      	nop
 8008d40:	e00a      	b.n	8008d58 <USBH_Process+0x3cc>
    break;
 8008d42:	bf00      	nop
 8008d44:	e008      	b.n	8008d58 <USBH_Process+0x3cc>
      break;
 8008d46:	bf00      	nop
 8008d48:	e006      	b.n	8008d58 <USBH_Process+0x3cc>
      break;
 8008d4a:	bf00      	nop
 8008d4c:	e004      	b.n	8008d58 <USBH_Process+0x3cc>
      break;
 8008d4e:	bf00      	nop
 8008d50:	e002      	b.n	8008d58 <USBH_Process+0x3cc>
      break;
 8008d52:	bf00      	nop
 8008d54:	e000      	b.n	8008d58 <USBH_Process+0x3cc>
      break;
 8008d56:	bf00      	nop
  }
  return USBH_OK;
 8008d58:	2300      	movs	r3, #0
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop

08008d64 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af04      	add	r7, sp, #16
 8008d6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008d70:	2301      	movs	r3, #1
 8008d72:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	785b      	ldrb	r3, [r3, #1]
 8008d78:	2b07      	cmp	r3, #7
 8008d7a:	f200 81c1 	bhi.w	8009100 <USBH_HandleEnum+0x39c>
 8008d7e:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <USBH_HandleEnum+0x20>)
 8008d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d84:	08008da5 	.word	0x08008da5
 8008d88:	08008e63 	.word	0x08008e63
 8008d8c:	08008ecd 	.word	0x08008ecd
 8008d90:	08008f5b 	.word	0x08008f5b
 8008d94:	08008fc5 	.word	0x08008fc5
 8008d98:	08009035 	.word	0x08009035
 8008d9c:	0800907b 	.word	0x0800907b
 8008da0:	080090c1 	.word	0x080090c1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008da4:	2108      	movs	r1, #8
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa50 	bl	800924c <USBH_Get_DevDesc>
 8008dac:	4603      	mov	r3, r0
 8008dae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d130      	bne.n	8008e18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	7919      	ldrb	r1, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008dda:	b292      	uxth	r2, r2
 8008ddc:	9202      	str	r2, [sp, #8]
 8008dde:	2200      	movs	r2, #0
 8008de0:	9201      	str	r2, [sp, #4]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	4603      	mov	r3, r0
 8008de6:	2280      	movs	r2, #128	; 0x80
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 f865 	bl	8009eb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	7959      	ldrb	r1, [r3, #5]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e02:	b292      	uxth	r2, r2
 8008e04:	9202      	str	r2, [sp, #8]
 8008e06:	2200      	movs	r2, #0
 8008e08:	9201      	str	r2, [sp, #4]
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2200      	movs	r2, #0
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 f851 	bl	8009eb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008e16:	e175      	b.n	8009104 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	f040 8172 	bne.w	8009104 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e26:	3301      	adds	r3, #1
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	d903      	bls.n	8008e42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	220d      	movs	r2, #13
 8008e3e:	701a      	strb	r2, [r3, #0]
      break;
 8008e40:	e160      	b.n	8009104 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	795b      	ldrb	r3, [r3, #5]
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f001 f885 	bl	8009f58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	791b      	ldrb	r3, [r3, #4]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 f87f 	bl	8009f58 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
      break;
 8008e60:	e150      	b.n	8009104 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008e62:	2112      	movs	r1, #18
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f9f1 	bl	800924c <USBH_Get_DevDesc>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d103      	bne.n	8008e7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2202      	movs	r2, #2
 8008e78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e7a:	e145      	b.n	8009108 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	f040 8142 	bne.w	8009108 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d903      	bls.n	8008ea6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	220d      	movs	r2, #13
 8008ea2:	701a      	strb	r2, [r3, #0]
      break;
 8008ea4:	e130      	b.n	8009108 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	795b      	ldrb	r3, [r3, #5]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 f853 	bl	8009f58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	791b      	ldrb	r3, [r3, #4]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f001 f84d 	bl	8009f58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	701a      	strb	r2, [r3, #0]
      break;
 8008eca:	e11d      	b.n	8009108 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008ecc:	2101      	movs	r1, #1
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa68 	bl	80093a4 <USBH_SetAddress>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d132      	bne.n	8008f44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008ede:	2002      	movs	r0, #2
 8008ee0:	f001 fb30 	bl	800a544 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2203      	movs	r2, #3
 8008ef0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	7919      	ldrb	r1, [r3, #4]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f06:	b292      	uxth	r2, r2
 8008f08:	9202      	str	r2, [sp, #8]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	9201      	str	r2, [sp, #4]
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	4603      	mov	r3, r0
 8008f12:	2280      	movs	r2, #128	; 0x80
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 ffcf 	bl	8009eb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	7959      	ldrb	r1, [r3, #5]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008f2e:	b292      	uxth	r2, r2
 8008f30:	9202      	str	r2, [sp, #8]
 8008f32:	2200      	movs	r2, #0
 8008f34:	9201      	str	r2, [sp, #4]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 ffbb 	bl	8009eb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f42:	e0e3      	b.n	800910c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	f040 80e0 	bne.w	800910c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	220d      	movs	r2, #13
 8008f50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	705a      	strb	r2, [r3, #1]
      break;
 8008f58:	e0d8      	b.n	800910c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008f5a:	2109      	movs	r1, #9
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 f99d 	bl	800929c <USBH_Get_CfgDesc>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d103      	bne.n	8008f74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2204      	movs	r2, #4
 8008f70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f72:	e0cd      	b.n	8009110 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	f040 80ca 	bne.w	8009110 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f82:	3301      	adds	r3, #1
 8008f84:	b2da      	uxtb	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d903      	bls.n	8008f9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	220d      	movs	r2, #13
 8008f9a:	701a      	strb	r2, [r3, #0]
      break;
 8008f9c:	e0b8      	b.n	8009110 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	795b      	ldrb	r3, [r3, #5]
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 ffd7 	bl	8009f58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	791b      	ldrb	r3, [r3, #4]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 ffd1 	bl	8009f58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	701a      	strb	r2, [r3, #0]
      break;
 8008fc2:	e0a5      	b.n	8009110 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f965 	bl	800929c <USBH_Get_CfgDesc>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d103      	bne.n	8008fe4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2205      	movs	r2, #5
 8008fe0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008fe2:	e097      	b.n	8009114 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	2b03      	cmp	r3, #3
 8008fe8:	f040 8094 	bne.w	8009114 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009002:	2b03      	cmp	r3, #3
 8009004:	d903      	bls.n	800900e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	220d      	movs	r2, #13
 800900a:	701a      	strb	r2, [r3, #0]
      break;
 800900c:	e082      	b.n	8009114 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	795b      	ldrb	r3, [r3, #5]
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 ff9f 	bl	8009f58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	791b      	ldrb	r3, [r3, #4]
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 ff99 	bl	8009f58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	701a      	strb	r2, [r3, #0]
      break;
 8009032:	e06f      	b.n	8009114 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800903a:	2b00      	cmp	r3, #0
 800903c:	d019      	beq.n	8009072 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800904a:	23ff      	movs	r3, #255	; 0xff
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 f949 	bl	80092e4 <USBH_Get_StringDesc>
 8009052:	4603      	mov	r3, r0
 8009054:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d103      	bne.n	8009064 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2206      	movs	r2, #6
 8009060:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009062:	e059      	b.n	8009118 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b03      	cmp	r3, #3
 8009068:	d156      	bne.n	8009118 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2206      	movs	r2, #6
 800906e:	705a      	strb	r2, [r3, #1]
      break;
 8009070:	e052      	b.n	8009118 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2206      	movs	r2, #6
 8009076:	705a      	strb	r2, [r3, #1]
      break;
 8009078:	e04e      	b.n	8009118 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009080:	2b00      	cmp	r3, #0
 8009082:	d019      	beq.n	80090b8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009090:	23ff      	movs	r3, #255	; 0xff
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f926 	bl	80092e4 <USBH_Get_StringDesc>
 8009098:	4603      	mov	r3, r0
 800909a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d103      	bne.n	80090aa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2207      	movs	r2, #7
 80090a6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80090a8:	e038      	b.n	800911c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	2b03      	cmp	r3, #3
 80090ae:	d135      	bne.n	800911c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2207      	movs	r2, #7
 80090b4:	705a      	strb	r2, [r3, #1]
      break;
 80090b6:	e031      	b.n	800911c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2207      	movs	r2, #7
 80090bc:	705a      	strb	r2, [r3, #1]
      break;
 80090be:	e02d      	b.n	800911c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d017      	beq.n	80090fa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80090d6:	23ff      	movs	r3, #255	; 0xff
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f903 	bl	80092e4 <USBH_Get_StringDesc>
 80090de:	4603      	mov	r3, r0
 80090e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d102      	bne.n	80090ee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80090ec:	e018      	b.n	8009120 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d115      	bne.n	8009120 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80090f4:	2300      	movs	r3, #0
 80090f6:	73fb      	strb	r3, [r7, #15]
      break;
 80090f8:	e012      	b.n	8009120 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80090fa:	2300      	movs	r3, #0
 80090fc:	73fb      	strb	r3, [r7, #15]
      break;
 80090fe:	e00f      	b.n	8009120 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009100:	bf00      	nop
 8009102:	e00e      	b.n	8009122 <USBH_HandleEnum+0x3be>
      break;
 8009104:	bf00      	nop
 8009106:	e00c      	b.n	8009122 <USBH_HandleEnum+0x3be>
      break;
 8009108:	bf00      	nop
 800910a:	e00a      	b.n	8009122 <USBH_HandleEnum+0x3be>
      break;
 800910c:	bf00      	nop
 800910e:	e008      	b.n	8009122 <USBH_HandleEnum+0x3be>
      break;
 8009110:	bf00      	nop
 8009112:	e006      	b.n	8009122 <USBH_HandleEnum+0x3be>
      break;
 8009114:	bf00      	nop
 8009116:	e004      	b.n	8009122 <USBH_HandleEnum+0x3be>
      break;
 8009118:	bf00      	nop
 800911a:	e002      	b.n	8009122 <USBH_HandleEnum+0x3be>
      break;
 800911c:	bf00      	nop
 800911e:	e000      	b.n	8009122 <USBH_HandleEnum+0x3be>
      break;
 8009120:	bf00      	nop
  }
  return Status;
 8009122:	7bfb      	ldrb	r3, [r7, #15]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}

0800912c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800913e:	bf00      	nop
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b082      	sub	sp, #8
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f804 	bl	800916e <USBH_HandleSof>
}
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b0b      	cmp	r3, #11
 800917e:	d10a      	bne.n	8009196 <USBH_HandleSof+0x28>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
  }
}
 8009196:	bf00      	nop
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80091ae:	bf00      	nop
}
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80091ba:	b480      	push	{r7}
 80091bc:	b083      	sub	sp, #12
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80091ca:	bf00      	nop
}
 80091cc:	370c      	adds	r7, #12
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr

080091d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80091d6:	b480      	push	{r7}
 80091d8:	b083      	sub	sp, #12
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f844 	bl	800a2b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	791b      	ldrb	r3, [r3, #4]
 800922e:	4619      	mov	r1, r3
 8009230:	6878      	ldr	r0, [r7, #4]
 8009232:	f000 fe91 	bl	8009f58 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	795b      	ldrb	r3, [r3, #5]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fe8b 	bl	8009f58 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b086      	sub	sp, #24
 8009250:	af02      	add	r7, sp, #8
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800925e:	78fb      	ldrb	r3, [r7, #3]
 8009260:	b29b      	uxth	r3, r3
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	4613      	mov	r3, r2
 8009266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800926a:	2100      	movs	r1, #0
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f864 	bl	800933a <USBH_GetDescriptor>
 8009272:	4603      	mov	r3, r0
 8009274:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009288:	78fa      	ldrb	r2, [r7, #3]
 800928a:	b292      	uxth	r2, r2
 800928c:	4619      	mov	r1, r3
 800928e:	f000 f918 	bl	80094c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800929c:	b580      	push	{r7, lr}
 800929e:	b086      	sub	sp, #24
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	331c      	adds	r3, #28
 80092ac:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80092ae:	887b      	ldrh	r3, [r7, #2]
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092b8:	2100      	movs	r1, #0
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f83d 	bl	800933a <USBH_GetDescriptor>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d107      	bne.n	80092da <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80092ca:	887b      	ldrh	r3, [r7, #2]
 80092cc:	461a      	mov	r2, r3
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f987 	bl	80095e4 <USBH_ParseCfgDesc>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092da:	7bfb      	ldrb	r3, [r7, #15]
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b088      	sub	sp, #32
 80092e8:	af02      	add	r7, sp, #8
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	607a      	str	r2, [r7, #4]
 80092ee:	461a      	mov	r2, r3
 80092f0:	460b      	mov	r3, r1
 80092f2:	72fb      	strb	r3, [r7, #11]
 80092f4:	4613      	mov	r3, r2
 80092f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009300:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009308:	893b      	ldrh	r3, [r7, #8]
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	460b      	mov	r3, r1
 800930e:	2100      	movs	r1, #0
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 f812 	bl	800933a <USBH_GetDescriptor>
 8009316:	4603      	mov	r3, r0
 8009318:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800931a:	7dfb      	ldrb	r3, [r7, #23]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d107      	bne.n	8009330 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009326:	893a      	ldrh	r2, [r7, #8]
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	4618      	mov	r0, r3
 800932c:	f000 fb24 	bl	8009978 <USBH_ParseStringDesc>
  }

  return status;
 8009330:	7dfb      	ldrb	r3, [r7, #23]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b084      	sub	sp, #16
 800933e:	af00      	add	r7, sp, #0
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	607b      	str	r3, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	72fb      	strb	r3, [r7, #11]
 8009348:	4613      	mov	r3, r2
 800934a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	789b      	ldrb	r3, [r3, #2]
 8009350:	2b01      	cmp	r3, #1
 8009352:	d11c      	bne.n	800938e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009354:	7afb      	ldrb	r3, [r7, #11]
 8009356:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800935a:	b2da      	uxtb	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2206      	movs	r2, #6
 8009364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	893a      	ldrh	r2, [r7, #8]
 800936a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800936c:	893b      	ldrh	r3, [r7, #8]
 800936e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009376:	d104      	bne.n	8009382 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f240 4209 	movw	r2, #1033	; 0x409
 800937e:	829a      	strh	r2, [r3, #20]
 8009380:	e002      	b.n	8009388 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8b3a      	ldrh	r2, [r7, #24]
 800938c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800938e:	8b3b      	ldrh	r3, [r7, #24]
 8009390:	461a      	mov	r2, r3
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 fb3d 	bl	8009a14 <USBH_CtlReq>
 800939a:	4603      	mov	r3, r0
}
 800939c:	4618      	mov	r0, r3
 800939e:	3710      	adds	r7, #16
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	460b      	mov	r3, r1
 80093ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	789b      	ldrb	r3, [r3, #2]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d10f      	bne.n	80093d8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2205      	movs	r2, #5
 80093c2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80093d8:	2200      	movs	r2, #0
 80093da:	2100      	movs	r1, #0
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fb19 	bl	8009a14 <USBH_CtlReq>
 80093e2:	4603      	mov	r3, r0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	789b      	ldrb	r3, [r3, #2]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d10e      	bne.n	800941e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2209      	movs	r2, #9
 800940a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	887a      	ldrh	r2, [r7, #2]
 8009410:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800941e:	2200      	movs	r2, #0
 8009420:	2100      	movs	r1, #0
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 faf6 	bl	8009a14 <USBH_CtlReq>
 8009428:	4603      	mov	r3, r0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	460b      	mov	r3, r1
 800943c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	789b      	ldrb	r3, [r3, #2]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d10f      	bne.n	8009466 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2203      	movs	r2, #3
 8009450:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009452:	78fb      	ldrb	r3, [r7, #3]
 8009454:	b29a      	uxth	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fad2 	bl	8009a14 <USBH_CtlReq>
 8009470:	4603      	mov	r3, r0
}
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b082      	sub	sp, #8
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
 8009482:	460b      	mov	r3, r1
 8009484:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	789b      	ldrb	r3, [r3, #2]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d10f      	bne.n	80094ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2202      	movs	r2, #2
 8009492:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80094ae:	2200      	movs	r2, #0
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 faae 	bl	8009a14 <USBH_CtlReq>
 80094b8:	4603      	mov	r3, r0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b085      	sub	sp, #20
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	60b9      	str	r1, [r7, #8]
 80094cc:	4613      	mov	r3, r2
 80094ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	781a      	ldrb	r2, [r3, #0]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	785a      	ldrb	r2, [r3, #1]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	3302      	adds	r3, #2
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3303      	adds	r3, #3
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	021b      	lsls	r3, r3, #8
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	4313      	orrs	r3, r2
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	791a      	ldrb	r2, [r3, #4]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	795a      	ldrb	r2, [r3, #5]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	799a      	ldrb	r2, [r3, #6]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	79da      	ldrb	r2, [r3, #7]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	79db      	ldrb	r3, [r3, #7]
 8009520:	2b20      	cmp	r3, #32
 8009522:	dc11      	bgt.n	8009548 <USBH_ParseDevDesc+0x86>
 8009524:	2b08      	cmp	r3, #8
 8009526:	db16      	blt.n	8009556 <USBH_ParseDevDesc+0x94>
 8009528:	3b08      	subs	r3, #8
 800952a:	2201      	movs	r2, #1
 800952c:	fa02 f303 	lsl.w	r3, r2, r3
 8009530:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009538:	2b00      	cmp	r3, #0
 800953a:	bf14      	ite	ne
 800953c:	2301      	movne	r3, #1
 800953e:	2300      	moveq	r3, #0
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	d102      	bne.n	800954c <USBH_ParseDevDesc+0x8a>
 8009546:	e006      	b.n	8009556 <USBH_ParseDevDesc+0x94>
 8009548:	2b40      	cmp	r3, #64	; 0x40
 800954a:	d104      	bne.n	8009556 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	79da      	ldrb	r2, [r3, #7]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	71da      	strb	r2, [r3, #7]
      break;
 8009554:	e003      	b.n	800955e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2240      	movs	r2, #64	; 0x40
 800955a:	71da      	strb	r2, [r3, #7]
      break;
 800955c:	bf00      	nop
  }

  if (length > 8U)
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	2b08      	cmp	r3, #8
 8009562:	d939      	bls.n	80095d8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	3308      	adds	r3, #8
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	b29a      	uxth	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	3309      	adds	r3, #9
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	b29b      	uxth	r3, r3
 8009574:	021b      	lsls	r3, r3, #8
 8009576:	b29b      	uxth	r3, r3
 8009578:	4313      	orrs	r3, r2
 800957a:	b29a      	uxth	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	330a      	adds	r3, #10
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	b29a      	uxth	r2, r3
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	330b      	adds	r3, #11
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	b29b      	uxth	r3, r3
 8009590:	021b      	lsls	r3, r3, #8
 8009592:	b29b      	uxth	r3, r3
 8009594:	4313      	orrs	r3, r2
 8009596:	b29a      	uxth	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	330c      	adds	r3, #12
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	330d      	adds	r3, #13
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	4313      	orrs	r3, r2
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	7b9a      	ldrb	r2, [r3, #14]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	7bda      	ldrb	r2, [r3, #15]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	7c1a      	ldrb	r2, [r3, #16]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	7c5a      	ldrb	r2, [r3, #17]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	745a      	strb	r2, [r3, #17]
  }
}
 80095d8:	bf00      	nop
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08c      	sub	sp, #48	; 0x30
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80095f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	781a      	ldrb	r2, [r3, #0]
 8009618:	6a3b      	ldr	r3, [r7, #32]
 800961a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	785a      	ldrb	r2, [r3, #1]
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	3302      	adds	r3, #2
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	b29a      	uxth	r2, r3
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	3303      	adds	r3, #3
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	021b      	lsls	r3, r3, #8
 8009636:	b29b      	uxth	r3, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009640:	bf28      	it	cs
 8009642:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009646:	b29a      	uxth	r2, r3
 8009648:	6a3b      	ldr	r3, [r7, #32]
 800964a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	791a      	ldrb	r2, [r3, #4]
 8009650:	6a3b      	ldr	r3, [r7, #32]
 8009652:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	795a      	ldrb	r2, [r3, #5]
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	799a      	ldrb	r2, [r3, #6]
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	79da      	ldrb	r2, [r3, #7]
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	7a1a      	ldrb	r2, [r3, #8]
 8009670:	6a3b      	ldr	r3, [r7, #32]
 8009672:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	2b09      	cmp	r3, #9
 800967a:	d002      	beq.n	8009682 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	2209      	movs	r2, #9
 8009680:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009682:	88fb      	ldrh	r3, [r7, #6]
 8009684:	2b09      	cmp	r3, #9
 8009686:	f240 809d 	bls.w	80097c4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800968a:	2309      	movs	r3, #9
 800968c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800968e:	2300      	movs	r3, #0
 8009690:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009692:	e081      	b.n	8009798 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009694:	f107 0316 	add.w	r3, r7, #22
 8009698:	4619      	mov	r1, r3
 800969a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800969c:	f000 f99f 	bl	80099de <USBH_GetNextDesc>
 80096a0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80096a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a4:	785b      	ldrb	r3, [r3, #1]
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d176      	bne.n	8009798 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80096aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	2b09      	cmp	r3, #9
 80096b0:	d002      	beq.n	80096b8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	2209      	movs	r2, #9
 80096b6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80096b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096bc:	221a      	movs	r2, #26
 80096be:	fb02 f303 	mul.w	r3, r2, r3
 80096c2:	3308      	adds	r3, #8
 80096c4:	6a3a      	ldr	r2, [r7, #32]
 80096c6:	4413      	add	r3, r2
 80096c8:	3302      	adds	r3, #2
 80096ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80096cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096ce:	69f8      	ldr	r0, [r7, #28]
 80096d0:	f000 f87e 	bl	80097d0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80096d4:	2300      	movs	r3, #0
 80096d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80096da:	2300      	movs	r3, #0
 80096dc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80096de:	e043      	b.n	8009768 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80096e0:	f107 0316 	add.w	r3, r7, #22
 80096e4:	4619      	mov	r1, r3
 80096e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e8:	f000 f979 	bl	80099de <USBH_GetNextDesc>
 80096ec:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f0:	785b      	ldrb	r3, [r3, #1]
 80096f2:	2b05      	cmp	r3, #5
 80096f4:	d138      	bne.n	8009768 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	795b      	ldrb	r3, [r3, #5]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d10f      	bne.n	800971e <USBH_ParseCfgDesc+0x13a>
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	799b      	ldrb	r3, [r3, #6]
 8009702:	2b02      	cmp	r3, #2
 8009704:	d10b      	bne.n	800971e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	79db      	ldrb	r3, [r3, #7]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10f      	bne.n	800972e <USBH_ParseCfgDesc+0x14a>
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b09      	cmp	r3, #9
 8009714:	d00b      	beq.n	800972e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	2209      	movs	r2, #9
 800971a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800971c:	e007      	b.n	800972e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b07      	cmp	r3, #7
 8009724:	d004      	beq.n	8009730 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009728:	2207      	movs	r2, #7
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	e000      	b.n	8009730 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800972e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009734:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009738:	3201      	adds	r2, #1
 800973a:	00d2      	lsls	r2, r2, #3
 800973c:	211a      	movs	r1, #26
 800973e:	fb01 f303 	mul.w	r3, r1, r3
 8009742:	4413      	add	r3, r2
 8009744:	3308      	adds	r3, #8
 8009746:	6a3a      	ldr	r2, [r7, #32]
 8009748:	4413      	add	r3, r2
 800974a:	3304      	adds	r3, #4
 800974c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800974e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009750:	69b9      	ldr	r1, [r7, #24]
 8009752:	68f8      	ldr	r0, [r7, #12]
 8009754:	f000 f86b 	bl	800982e <USBH_ParseEPDesc>
 8009758:	4603      	mov	r3, r0
 800975a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800975e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009762:	3301      	adds	r3, #1
 8009764:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	791b      	ldrb	r3, [r3, #4]
 800976c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009770:	429a      	cmp	r2, r3
 8009772:	d204      	bcs.n	800977e <USBH_ParseCfgDesc+0x19a>
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	885a      	ldrh	r2, [r3, #2]
 8009778:	8afb      	ldrh	r3, [r7, #22]
 800977a:	429a      	cmp	r2, r3
 800977c:	d8b0      	bhi.n	80096e0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	791b      	ldrb	r3, [r3, #4]
 8009782:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009786:	429a      	cmp	r2, r3
 8009788:	d201      	bcs.n	800978e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800978a:	2303      	movs	r3, #3
 800978c:	e01c      	b.n	80097c8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800978e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009792:	3301      	adds	r3, #1
 8009794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800979c:	2b01      	cmp	r3, #1
 800979e:	d805      	bhi.n	80097ac <USBH_ParseCfgDesc+0x1c8>
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	885a      	ldrh	r2, [r3, #2]
 80097a4:	8afb      	ldrh	r3, [r7, #22]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	f63f af74 	bhi.w	8009694 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	791b      	ldrb	r3, [r3, #4]
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	bf28      	it	cs
 80097b4:	2302      	movcs	r3, #2
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80097bc:	429a      	cmp	r2, r3
 80097be:	d201      	bcs.n	80097c4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e001      	b.n	80097c8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80097c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3730      	adds	r7, #48	; 0x30
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	781a      	ldrb	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	785a      	ldrb	r2, [r3, #1]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	789a      	ldrb	r2, [r3, #2]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	78da      	ldrb	r2, [r3, #3]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	791a      	ldrb	r2, [r3, #4]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	795a      	ldrb	r2, [r3, #5]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	799a      	ldrb	r2, [r3, #6]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	79da      	ldrb	r2, [r3, #7]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	7a1a      	ldrb	r2, [r3, #8]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	721a      	strb	r2, [r3, #8]
}
 8009822:	bf00      	nop
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800982e:	b480      	push	{r7}
 8009830:	b087      	sub	sp, #28
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	785a      	ldrb	r2, [r3, #1]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	789a      	ldrb	r2, [r3, #2]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	78da      	ldrb	r2, [r3, #3]
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	3304      	adds	r3, #4
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	b29a      	uxth	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3305      	adds	r3, #5
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	b29b      	uxth	r3, r3
 800986e:	021b      	lsls	r3, r3, #8
 8009870:	b29b      	uxth	r3, r3
 8009872:	4313      	orrs	r3, r2
 8009874:	b29a      	uxth	r2, r3
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	799a      	ldrb	r2, [r3, #6]
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	889b      	ldrh	r3, [r3, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d102      	bne.n	8009890 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800988a:	2303      	movs	r3, #3
 800988c:	75fb      	strb	r3, [r7, #23]
 800988e:	e033      	b.n	80098f8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	889b      	ldrh	r3, [r3, #4]
 8009894:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009898:	f023 0307 	bic.w	r3, r3, #7
 800989c:	b29a      	uxth	r2, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	889b      	ldrh	r3, [r3, #4]
 80098a6:	b21a      	sxth	r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3304      	adds	r3, #4
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	b299      	uxth	r1, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	3305      	adds	r3, #5
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	430b      	orrs	r3, r1
 80098be:	b29b      	uxth	r3, r3
 80098c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d110      	bne.n	80098ea <USBH_ParseEPDesc+0xbc>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3304      	adds	r3, #4
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	b299      	uxth	r1, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	3305      	adds	r3, #5
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	b29b      	uxth	r3, r3
 80098dc:	430b      	orrs	r3, r1
 80098de:	b29b      	uxth	r3, r3
 80098e0:	b21b      	sxth	r3, r3
 80098e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098e6:	b21b      	sxth	r3, r3
 80098e8:	e001      	b.n	80098ee <USBH_ParseEPDesc+0xc0>
 80098ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098ee:	4313      	orrs	r3, r2
 80098f0:	b21b      	sxth	r3, r3
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d116      	bne.n	8009930 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	78db      	ldrb	r3, [r3, #3]
 8009906:	f003 0303 	and.w	r3, r3, #3
 800990a:	2b01      	cmp	r3, #1
 800990c:	d005      	beq.n	800991a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	78db      	ldrb	r3, [r3, #3]
 8009912:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009916:	2b03      	cmp	r3, #3
 8009918:	d127      	bne.n	800996a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	799b      	ldrb	r3, [r3, #6]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <USBH_ParseEPDesc+0xfc>
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	799b      	ldrb	r3, [r3, #6]
 8009926:	2b10      	cmp	r3, #16
 8009928:	d91f      	bls.n	800996a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800992a:	2303      	movs	r3, #3
 800992c:	75fb      	strb	r3, [r7, #23]
 800992e:	e01c      	b.n	800996a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	78db      	ldrb	r3, [r3, #3]
 8009934:	f003 0303 	and.w	r3, r3, #3
 8009938:	2b01      	cmp	r3, #1
 800993a:	d10a      	bne.n	8009952 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	799b      	ldrb	r3, [r3, #6]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d003      	beq.n	800994c <USBH_ParseEPDesc+0x11e>
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	799b      	ldrb	r3, [r3, #6]
 8009948:	2b10      	cmp	r3, #16
 800994a:	d90e      	bls.n	800996a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800994c:	2303      	movs	r3, #3
 800994e:	75fb      	strb	r3, [r7, #23]
 8009950:	e00b      	b.n	800996a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	78db      	ldrb	r3, [r3, #3]
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	2b03      	cmp	r3, #3
 800995c:	d105      	bne.n	800996a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	799b      	ldrb	r3, [r3, #6]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009966:	2303      	movs	r3, #3
 8009968:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800996a:	7dfb      	ldrb	r3, [r7, #23]
}
 800996c:	4618      	mov	r0, r3
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	4613      	mov	r3, r2
 8009984:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3301      	adds	r3, #1
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b03      	cmp	r3, #3
 800998e:	d120      	bne.n	80099d2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	1e9a      	subs	r2, r3, #2
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	4293      	cmp	r3, r2
 800999a:	bf28      	it	cs
 800999c:	4613      	movcs	r3, r2
 800999e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	3302      	adds	r3, #2
 80099a4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80099a6:	2300      	movs	r3, #0
 80099a8:	82fb      	strh	r3, [r7, #22]
 80099aa:	e00b      	b.n	80099c4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80099ac:	8afb      	ldrh	r3, [r7, #22]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	4413      	add	r3, r2
 80099b2:	781a      	ldrb	r2, [r3, #0]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	3301      	adds	r3, #1
 80099bc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80099be:	8afb      	ldrh	r3, [r7, #22]
 80099c0:	3302      	adds	r3, #2
 80099c2:	82fb      	strh	r3, [r7, #22]
 80099c4:	8afa      	ldrh	r2, [r7, #22]
 80099c6:	8abb      	ldrh	r3, [r7, #20]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d3ef      	bcc.n	80099ac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2200      	movs	r2, #0
 80099d0:	701a      	strb	r2, [r3, #0]
  }
}
 80099d2:	bf00      	nop
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80099de:	b480      	push	{r7}
 80099e0:	b085      	sub	sp, #20
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	881a      	ldrh	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	4413      	add	r3, r2
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4413      	add	r3, r2
 8009a04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a06:	68fb      	ldr	r3, [r7, #12]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b086      	sub	sp, #24
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009a22:	2301      	movs	r3, #1
 8009a24:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	789b      	ldrb	r3, [r3, #2]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d002      	beq.n	8009a34 <USBH_CtlReq+0x20>
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d00f      	beq.n	8009a52 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009a32:	e027      	b.n	8009a84 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	88fa      	ldrh	r2, [r7, #6]
 8009a3e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2201      	movs	r2, #1
 8009a44:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2202      	movs	r2, #2
 8009a4a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a50:	e018      	b.n	8009a84 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f000 f81c 	bl	8009a90 <USBH_HandleControl>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d002      	beq.n	8009a68 <USBH_CtlReq+0x54>
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
 8009a64:	2b03      	cmp	r3, #3
 8009a66:	d106      	bne.n	8009a76 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	761a      	strb	r2, [r3, #24]
      break;
 8009a74:	e005      	b.n	8009a82 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009a76:	7dfb      	ldrb	r3, [r7, #23]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d102      	bne.n	8009a82 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	709a      	strb	r2, [r3, #2]
      break;
 8009a82:	bf00      	nop
  }
  return status;
 8009a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
	...

08009a90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	7e1b      	ldrb	r3, [r3, #24]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	2b0a      	cmp	r3, #10
 8009aa8:	f200 8156 	bhi.w	8009d58 <USBH_HandleControl+0x2c8>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <USBH_HandleControl+0x24>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ae1 	.word	0x08009ae1
 8009ab8:	08009afb 	.word	0x08009afb
 8009abc:	08009b65 	.word	0x08009b65
 8009ac0:	08009b8b 	.word	0x08009b8b
 8009ac4:	08009bc3 	.word	0x08009bc3
 8009ac8:	08009bed 	.word	0x08009bed
 8009acc:	08009c3f 	.word	0x08009c3f
 8009ad0:	08009c61 	.word	0x08009c61
 8009ad4:	08009c9d 	.word	0x08009c9d
 8009ad8:	08009cc3 	.word	0x08009cc3
 8009adc:	08009d01 	.word	0x08009d01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f103 0110 	add.w	r1, r3, #16
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	795b      	ldrb	r3, [r3, #5]
 8009aea:	461a      	mov	r2, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 f943 	bl	8009d78 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2202      	movs	r2, #2
 8009af6:	761a      	strb	r2, [r3, #24]
      break;
 8009af8:	e139      	b.n	8009d6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	795b      	ldrb	r3, [r3, #5]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fcc5 	bl	800a490 <USBH_LL_GetURBState>
 8009b06:	4603      	mov	r3, r0
 8009b08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d11e      	bne.n	8009b4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	7c1b      	ldrb	r3, [r3, #16]
 8009b14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	8adb      	ldrh	r3, [r3, #22]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009b22:	7b7b      	ldrb	r3, [r7, #13]
 8009b24:	2b80      	cmp	r3, #128	; 0x80
 8009b26:	d103      	bne.n	8009b30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2203      	movs	r2, #3
 8009b2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b2e:	e115      	b.n	8009d5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2205      	movs	r2, #5
 8009b34:	761a      	strb	r2, [r3, #24]
      break;
 8009b36:	e111      	b.n	8009d5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009b38:	7b7b      	ldrb	r3, [r7, #13]
 8009b3a:	2b80      	cmp	r3, #128	; 0x80
 8009b3c:	d103      	bne.n	8009b46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2209      	movs	r2, #9
 8009b42:	761a      	strb	r2, [r3, #24]
      break;
 8009b44:	e10a      	b.n	8009d5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2207      	movs	r2, #7
 8009b4a:	761a      	strb	r2, [r3, #24]
      break;
 8009b4c:	e106      	b.n	8009d5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b04      	cmp	r3, #4
 8009b52:	d003      	beq.n	8009b5c <USBH_HandleControl+0xcc>
 8009b54:	7bbb      	ldrb	r3, [r7, #14]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	f040 8100 	bne.w	8009d5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	220b      	movs	r2, #11
 8009b60:	761a      	strb	r2, [r3, #24]
      break;
 8009b62:	e0fb      	b.n	8009d5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6899      	ldr	r1, [r3, #8]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	899a      	ldrh	r2, [r3, #12]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	791b      	ldrb	r3, [r3, #4]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f93a 	bl	8009df6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2204      	movs	r2, #4
 8009b86:	761a      	strb	r2, [r3, #24]
      break;
 8009b88:	e0f1      	b.n	8009d6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	791b      	ldrb	r3, [r3, #4]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 fc7d 	bl	800a490 <USBH_LL_GetURBState>
 8009b96:	4603      	mov	r3, r0
 8009b98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b9a:	7bbb      	ldrb	r3, [r7, #14]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d102      	bne.n	8009ba6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2209      	movs	r2, #9
 8009ba4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	2b05      	cmp	r3, #5
 8009baa:	d102      	bne.n	8009bb2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009bac:	2303      	movs	r3, #3
 8009bae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bb0:	e0d6      	b.n	8009d60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	f040 80d3 	bne.w	8009d60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	220b      	movs	r2, #11
 8009bbe:	761a      	strb	r2, [r3, #24]
      break;
 8009bc0:	e0ce      	b.n	8009d60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6899      	ldr	r1, [r3, #8]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	899a      	ldrh	r2, [r3, #12]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	795b      	ldrb	r3, [r3, #5]
 8009bce:	2001      	movs	r0, #1
 8009bd0:	9000      	str	r0, [sp, #0]
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f8ea 	bl	8009dac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2206      	movs	r2, #6
 8009be8:	761a      	strb	r2, [r3, #24]
      break;
 8009bea:	e0c0      	b.n	8009d6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	795b      	ldrb	r3, [r3, #5]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fc4c 	bl	800a490 <USBH_LL_GetURBState>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d103      	bne.n	8009c0a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2207      	movs	r2, #7
 8009c06:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c08:	e0ac      	b.n	8009d64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	2b05      	cmp	r3, #5
 8009c0e:	d105      	bne.n	8009c1c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	220c      	movs	r2, #12
 8009c14:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009c16:	2303      	movs	r3, #3
 8009c18:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1a:	e0a3      	b.n	8009d64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d103      	bne.n	8009c2a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2205      	movs	r2, #5
 8009c26:	761a      	strb	r2, [r3, #24]
      break;
 8009c28:	e09c      	b.n	8009d64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009c2a:	7bbb      	ldrb	r3, [r7, #14]
 8009c2c:	2b04      	cmp	r3, #4
 8009c2e:	f040 8099 	bne.w	8009d64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	220b      	movs	r2, #11
 8009c36:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009c38:	2302      	movs	r3, #2
 8009c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009c3c:	e092      	b.n	8009d64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	791b      	ldrb	r3, [r3, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	2100      	movs	r1, #0
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f8d5 	bl	8009df6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2208      	movs	r2, #8
 8009c5c:	761a      	strb	r2, [r3, #24]

      break;
 8009c5e:	e086      	b.n	8009d6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	791b      	ldrb	r3, [r3, #4]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fc12 	bl	800a490 <USBH_LL_GetURBState>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c70:	7bbb      	ldrb	r3, [r7, #14]
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d105      	bne.n	8009c82 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	220d      	movs	r2, #13
 8009c7a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c80:	e072      	b.n	8009d68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	2b04      	cmp	r3, #4
 8009c86:	d103      	bne.n	8009c90 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	220b      	movs	r2, #11
 8009c8c:	761a      	strb	r2, [r3, #24]
      break;
 8009c8e:	e06b      	b.n	8009d68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009c90:	7bbb      	ldrb	r3, [r7, #14]
 8009c92:	2b05      	cmp	r3, #5
 8009c94:	d168      	bne.n	8009d68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009c96:	2303      	movs	r3, #3
 8009c98:	73fb      	strb	r3, [r7, #15]
      break;
 8009c9a:	e065      	b.n	8009d68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	795b      	ldrb	r3, [r3, #5]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	9200      	str	r2, [sp, #0]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f87f 	bl	8009dac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	220a      	movs	r2, #10
 8009cbe:	761a      	strb	r2, [r3, #24]
      break;
 8009cc0:	e055      	b.n	8009d6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	795b      	ldrb	r3, [r3, #5]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fbe1 	bl	800a490 <USBH_LL_GetURBState>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d105      	bne.n	8009ce4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	220d      	movs	r2, #13
 8009ce0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ce2:	e043      	b.n	8009d6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d103      	bne.n	8009cf2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2209      	movs	r2, #9
 8009cee:	761a      	strb	r2, [r3, #24]
      break;
 8009cf0:	e03c      	b.n	8009d6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009cf2:	7bbb      	ldrb	r3, [r7, #14]
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d139      	bne.n	8009d6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	220b      	movs	r2, #11
 8009cfc:	761a      	strb	r2, [r3, #24]
      break;
 8009cfe:	e035      	b.n	8009d6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	7e5b      	ldrb	r3, [r3, #25]
 8009d04:	3301      	adds	r3, #1
 8009d06:	b2da      	uxtb	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	765a      	strb	r2, [r3, #25]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	7e5b      	ldrb	r3, [r3, #25]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d806      	bhi.n	8009d22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009d20:	e025      	b.n	8009d6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d28:	2106      	movs	r1, #6
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	795b      	ldrb	r3, [r3, #5]
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f90c 	bl	8009f58 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	791b      	ldrb	r3, [r3, #4]
 8009d44:	4619      	mov	r1, r3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 f906 	bl	8009f58 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009d52:	2302      	movs	r3, #2
 8009d54:	73fb      	strb	r3, [r7, #15]
      break;
 8009d56:	e00a      	b.n	8009d6e <USBH_HandleControl+0x2de>

    default:
      break;
 8009d58:	bf00      	nop
 8009d5a:	e008      	b.n	8009d6e <USBH_HandleControl+0x2de>
      break;
 8009d5c:	bf00      	nop
 8009d5e:	e006      	b.n	8009d6e <USBH_HandleControl+0x2de>
      break;
 8009d60:	bf00      	nop
 8009d62:	e004      	b.n	8009d6e <USBH_HandleControl+0x2de>
      break;
 8009d64:	bf00      	nop
 8009d66:	e002      	b.n	8009d6e <USBH_HandleControl+0x2de>
      break;
 8009d68:	bf00      	nop
 8009d6a:	e000      	b.n	8009d6e <USBH_HandleControl+0x2de>
      break;
 8009d6c:	bf00      	nop
  }

  return status;
 8009d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b088      	sub	sp, #32
 8009d7c:	af04      	add	r7, sp, #16
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	4613      	mov	r3, r2
 8009d84:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d86:	79f9      	ldrb	r1, [r7, #7]
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9303      	str	r3, [sp, #12]
 8009d8c:	2308      	movs	r3, #8
 8009d8e:	9302      	str	r3, [sp, #8]
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	9301      	str	r3, [sp, #4]
 8009d94:	2300      	movs	r3, #0
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 fb46 	bl	800a42e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009da2:	2300      	movs	r3, #0
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af04      	add	r7, sp, #16
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4611      	mov	r1, r2
 8009db8:	461a      	mov	r2, r3
 8009dba:	460b      	mov	r3, r1
 8009dbc:	80fb      	strh	r3, [r7, #6]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009dd0:	7979      	ldrb	r1, [r7, #5]
 8009dd2:	7e3b      	ldrb	r3, [r7, #24]
 8009dd4:	9303      	str	r3, [sp, #12]
 8009dd6:	88fb      	ldrh	r3, [r7, #6]
 8009dd8:	9302      	str	r3, [sp, #8]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	2301      	movs	r3, #1
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	2300      	movs	r3, #0
 8009de4:	2200      	movs	r2, #0
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f000 fb21 	bl	800a42e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b088      	sub	sp, #32
 8009dfa:	af04      	add	r7, sp, #16
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	4611      	mov	r1, r2
 8009e02:	461a      	mov	r2, r3
 8009e04:	460b      	mov	r3, r1
 8009e06:	80fb      	strh	r3, [r7, #6]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e0c:	7979      	ldrb	r1, [r7, #5]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9303      	str	r3, [sp, #12]
 8009e12:	88fb      	ldrh	r3, [r7, #6]
 8009e14:	9302      	str	r3, [sp, #8]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2201      	movs	r2, #1
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f000 fb03 	bl	800a42e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009e28:	2300      	movs	r3, #0

}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b088      	sub	sp, #32
 8009e36:	af04      	add	r7, sp, #16
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	461a      	mov	r2, r3
 8009e40:	460b      	mov	r3, r1
 8009e42:	80fb      	strh	r3, [r7, #6]
 8009e44:	4613      	mov	r3, r2
 8009e46:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e56:	7979      	ldrb	r1, [r7, #5]
 8009e58:	7e3b      	ldrb	r3, [r7, #24]
 8009e5a:	9303      	str	r3, [sp, #12]
 8009e5c:	88fb      	ldrh	r3, [r7, #6]
 8009e5e:	9302      	str	r3, [sp, #8]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	9301      	str	r3, [sp, #4]
 8009e64:	2301      	movs	r3, #1
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	2302      	movs	r3, #2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fade 	bl	800a42e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af04      	add	r7, sp, #16
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	4611      	mov	r1, r2
 8009e88:	461a      	mov	r2, r3
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	80fb      	strh	r3, [r7, #6]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e92:	7979      	ldrb	r1, [r7, #5]
 8009e94:	2300      	movs	r3, #0
 8009e96:	9303      	str	r3, [sp, #12]
 8009e98:	88fb      	ldrh	r3, [r7, #6]
 8009e9a:	9302      	str	r3, [sp, #8]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 fac0 	bl	800a42e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b086      	sub	sp, #24
 8009ebc:	af04      	add	r7, sp, #16
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	70fb      	strb	r3, [r7, #3]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70bb      	strb	r3, [r7, #2]
 8009ece:	4613      	mov	r3, r2
 8009ed0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009ed2:	7878      	ldrb	r0, [r7, #1]
 8009ed4:	78ba      	ldrb	r2, [r7, #2]
 8009ed6:	78f9      	ldrb	r1, [r7, #3]
 8009ed8:	8b3b      	ldrh	r3, [r7, #24]
 8009eda:	9302      	str	r3, [sp, #8]
 8009edc:	7d3b      	ldrb	r3, [r7, #20]
 8009ede:	9301      	str	r3, [sp, #4]
 8009ee0:	7c3b      	ldrb	r3, [r7, #16]
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fa53 	bl	800a392 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	460b      	mov	r3, r1
 8009f00:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009f02:	78fb      	ldrb	r3, [r7, #3]
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fa72 	bl	800a3f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b084      	sub	sp, #16
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	460b      	mov	r3, r1
 8009f20:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f836 	bl	8009f94 <USBH_GetFreePipe>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009f2c:	89fb      	ldrh	r3, [r7, #14]
 8009f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d00a      	beq.n	8009f4c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009f36:	78fa      	ldrb	r2, [r7, #3]
 8009f38:	89fb      	ldrh	r3, [r7, #14]
 8009f3a:	f003 030f 	and.w	r3, r3, #15
 8009f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f42:	6879      	ldr	r1, [r7, #4]
 8009f44:	33e0      	adds	r3, #224	; 0xe0
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	440b      	add	r3, r1
 8009f4a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009f4c:	89fb      	ldrh	r3, [r7, #14]
 8009f4e:	b2db      	uxtb	r3, r3
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3710      	adds	r7, #16
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	2b0f      	cmp	r3, #15
 8009f68:	d80d      	bhi.n	8009f86 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	33e0      	adds	r3, #224	; 0xe0
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	78fb      	ldrb	r3, [r7, #3]
 8009f78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	33e0      	adds	r3, #224	; 0xe0
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	440b      	add	r3, r1
 8009f84:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]
 8009fa4:	e00f      	b.n	8009fc6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	33e0      	adds	r3, #224	; 0xe0
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d102      	bne.n	8009fc0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	e007      	b.n	8009fd0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	73fb      	strb	r3, [r7, #15]
 8009fc6:	7bfb      	ldrb	r3, [r7, #15]
 8009fc8:	2b0f      	cmp	r3, #15
 8009fca:	d9ec      	bls.n	8009fa6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	490e      	ldr	r1, [pc, #56]	; (800a01c <MX_USB_HOST_Init+0x40>)
 8009fe4:	480e      	ldr	r0, [pc, #56]	; (800a020 <MX_USB_HOST_Init+0x44>)
 8009fe6:	f7fe fba7 	bl	8008738 <USBH_Init>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009ff0:	f7f7 f940 	bl	8001274 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009ff4:	490b      	ldr	r1, [pc, #44]	; (800a024 <MX_USB_HOST_Init+0x48>)
 8009ff6:	480a      	ldr	r0, [pc, #40]	; (800a020 <MX_USB_HOST_Init+0x44>)
 8009ff8:	f7fe fc2c 	bl	8008854 <USBH_RegisterClass>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a002:	f7f7 f937 	bl	8001274 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a006:	4806      	ldr	r0, [pc, #24]	; (800a020 <MX_USB_HOST_Init+0x44>)
 800a008:	f7fe fcb0 	bl	800896c <USBH_Start>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d001      	beq.n	800a016 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a012:	f7f7 f92f 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a016:	bf00      	nop
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	0800a03d 	.word	0x0800a03d
 800a020:	200002a4 	.word	0x200002a4
 800a024:	2000000c 	.word	0x2000000c

0800a028 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a02c:	4802      	ldr	r0, [pc, #8]	; (800a038 <MX_USB_HOST_Process+0x10>)
 800a02e:	f7fe fcad 	bl	800898c <USBH_Process>
}
 800a032:	bf00      	nop
 800a034:	bd80      	pop	{r7, pc}
 800a036:	bf00      	nop
 800a038:	200002a4 	.word	0x200002a4

0800a03c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	460b      	mov	r3, r1
 800a046:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a048:	78fb      	ldrb	r3, [r7, #3]
 800a04a:	3b01      	subs	r3, #1
 800a04c:	2b04      	cmp	r3, #4
 800a04e:	d819      	bhi.n	800a084 <USBH_UserProcess+0x48>
 800a050:	a201      	add	r2, pc, #4	; (adr r2, 800a058 <USBH_UserProcess+0x1c>)
 800a052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a056:	bf00      	nop
 800a058:	0800a085 	.word	0x0800a085
 800a05c:	0800a075 	.word	0x0800a075
 800a060:	0800a085 	.word	0x0800a085
 800a064:	0800a07d 	.word	0x0800a07d
 800a068:	0800a06d 	.word	0x0800a06d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a06c:	4b09      	ldr	r3, [pc, #36]	; (800a094 <USBH_UserProcess+0x58>)
 800a06e:	2203      	movs	r2, #3
 800a070:	701a      	strb	r2, [r3, #0]
  break;
 800a072:	e008      	b.n	800a086 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a074:	4b07      	ldr	r3, [pc, #28]	; (800a094 <USBH_UserProcess+0x58>)
 800a076:	2202      	movs	r2, #2
 800a078:	701a      	strb	r2, [r3, #0]
  break;
 800a07a:	e004      	b.n	800a086 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <USBH_UserProcess+0x58>)
 800a07e:	2201      	movs	r2, #1
 800a080:	701a      	strb	r2, [r3, #0]
  break;
 800a082:	e000      	b.n	800a086 <USBH_UserProcess+0x4a>

  default:
  break;
 800a084:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	2000067c 	.word	0x2000067c

0800a098 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	; 0x28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0a0:	f107 0314 	add.w	r3, r7, #20
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
 800a0a8:	605a      	str	r2, [r3, #4]
 800a0aa:	609a      	str	r2, [r3, #8]
 800a0ac:	60da      	str	r2, [r3, #12]
 800a0ae:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0b8:	d147      	bne.n	800a14a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	613b      	str	r3, [r7, #16]
 800a0be:	4b25      	ldr	r3, [pc, #148]	; (800a154 <HAL_HCD_MspInit+0xbc>)
 800a0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c2:	4a24      	ldr	r2, [pc, #144]	; (800a154 <HAL_HCD_MspInit+0xbc>)
 800a0c4:	f043 0301 	orr.w	r3, r3, #1
 800a0c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a0ca:	4b22      	ldr	r3, [pc, #136]	; (800a154 <HAL_HCD_MspInit+0xbc>)
 800a0cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	613b      	str	r3, [r7, #16]
 800a0d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a0d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a0e4:	f107 0314 	add.w	r3, r7, #20
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	481b      	ldr	r0, [pc, #108]	; (800a158 <HAL_HCD_MspInit+0xc0>)
 800a0ec:	f7f8 fec2 	bl	8002e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a0f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a0f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0fe:	2300      	movs	r3, #0
 800a100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a102:	230a      	movs	r3, #10
 800a104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a106:	f107 0314 	add.w	r3, r7, #20
 800a10a:	4619      	mov	r1, r3
 800a10c:	4812      	ldr	r0, [pc, #72]	; (800a158 <HAL_HCD_MspInit+0xc0>)
 800a10e:	f7f8 feb1 	bl	8002e74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a112:	4b10      	ldr	r3, [pc, #64]	; (800a154 <HAL_HCD_MspInit+0xbc>)
 800a114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a116:	4a0f      	ldr	r2, [pc, #60]	; (800a154 <HAL_HCD_MspInit+0xbc>)
 800a118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a11c:	6353      	str	r3, [r2, #52]	; 0x34
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	4b0c      	ldr	r3, [pc, #48]	; (800a154 <HAL_HCD_MspInit+0xbc>)
 800a124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a126:	4a0b      	ldr	r2, [pc, #44]	; (800a154 <HAL_HCD_MspInit+0xbc>)
 800a128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a12c:	6453      	str	r3, [r2, #68]	; 0x44
 800a12e:	4b09      	ldr	r3, [pc, #36]	; (800a154 <HAL_HCD_MspInit+0xbc>)
 800a130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a136:	60fb      	str	r3, [r7, #12]
 800a138:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	2043      	movs	r0, #67	; 0x43
 800a140:	f7f8 fb77 	bl	8002832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a144:	2043      	movs	r0, #67	; 0x43
 800a146:	f7f8 fb90 	bl	800286a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a14a:	bf00      	nop
 800a14c:	3728      	adds	r7, #40	; 0x28
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	40023800 	.word	0x40023800
 800a158:	40020000 	.word	0x40020000

0800a15c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b082      	sub	sp, #8
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe ffed 	bl	800914a <USBH_LL_IncTimer>
}
 800a170:	bf00      	nop
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff f825 	bl	80091d6 <USBH_LL_Connect>
}
 800a18c:	bf00      	nop
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff f82e 	bl	8009204 <USBH_LL_Disconnect>
}
 800a1a8:	bf00      	nop
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b083      	sub	sp, #12
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	70fb      	strb	r3, [r7, #3]
 800a1bc:	4613      	mov	r3, r2
 800a1be:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7fe ffdf 	bl	800919e <USBH_LL_PortEnabled>
}
 800a1e0:	bf00      	nop
 800a1e2:	3708      	adds	r7, #8
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fe ffdf 	bl	80091ba <USBH_LL_PortDisabled>
}
 800a1fc:	bf00      	nop
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a212:	2b01      	cmp	r3, #1
 800a214:	d12a      	bne.n	800a26c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a216:	4a18      	ldr	r2, [pc, #96]	; (800a278 <USBH_LL_Init+0x74>)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a15      	ldr	r2, [pc, #84]	; (800a278 <USBH_LL_Init+0x74>)
 800a222:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a226:	4b14      	ldr	r3, [pc, #80]	; (800a278 <USBH_LL_Init+0x74>)
 800a228:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a22c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a22e:	4b12      	ldr	r3, [pc, #72]	; (800a278 <USBH_LL_Init+0x74>)
 800a230:	2208      	movs	r2, #8
 800a232:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a234:	4b10      	ldr	r3, [pc, #64]	; (800a278 <USBH_LL_Init+0x74>)
 800a236:	2201      	movs	r2, #1
 800a238:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a23a:	4b0f      	ldr	r3, [pc, #60]	; (800a278 <USBH_LL_Init+0x74>)
 800a23c:	2200      	movs	r2, #0
 800a23e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a240:	4b0d      	ldr	r3, [pc, #52]	; (800a278 <USBH_LL_Init+0x74>)
 800a242:	2202      	movs	r2, #2
 800a244:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a246:	4b0c      	ldr	r3, [pc, #48]	; (800a278 <USBH_LL_Init+0x74>)
 800a248:	2200      	movs	r2, #0
 800a24a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a24c:	480a      	ldr	r0, [pc, #40]	; (800a278 <USBH_LL_Init+0x74>)
 800a24e:	f7f8 ffc6 	bl	80031de <HAL_HCD_Init>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d001      	beq.n	800a25c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a258:	f7f7 f80c 	bl	8001274 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a25c:	4806      	ldr	r0, [pc, #24]	; (800a278 <USBH_LL_Init+0x74>)
 800a25e:	f7f9 fbaa 	bl	80039b6 <HAL_HCD_GetCurrentFrame>
 800a262:	4603      	mov	r3, r0
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7fe ff60 	bl	800912c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3708      	adds	r7, #8
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	20000680 	.word	0x20000680

0800a27c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a292:	4618      	mov	r0, r3
 800a294:	f7f9 fb19 	bl	80038ca <HAL_HCD_Start>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f95c 	bl	800a55c <USBH_Get_USB_Status>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7f9 fb21 	bl	8003910 <HAL_HCD_Stop>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 f941 	bl	800a55c <USBH_Get_USB_Status>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b084      	sub	sp, #16
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7f9 fb69 	bl	80039d2 <HAL_HCD_GetCurrentSpeed>
 800a300:	4603      	mov	r3, r0
 800a302:	2b02      	cmp	r3, #2
 800a304:	d00c      	beq.n	800a320 <USBH_LL_GetSpeed+0x38>
 800a306:	2b02      	cmp	r3, #2
 800a308:	d80d      	bhi.n	800a326 <USBH_LL_GetSpeed+0x3e>
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <USBH_LL_GetSpeed+0x2c>
 800a30e:	2b01      	cmp	r3, #1
 800a310:	d003      	beq.n	800a31a <USBH_LL_GetSpeed+0x32>
 800a312:	e008      	b.n	800a326 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a314:	2300      	movs	r3, #0
 800a316:	73fb      	strb	r3, [r7, #15]
    break;
 800a318:	e008      	b.n	800a32c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a31a:	2301      	movs	r3, #1
 800a31c:	73fb      	strb	r3, [r7, #15]
    break;
 800a31e:	e005      	b.n	800a32c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a320:	2302      	movs	r3, #2
 800a322:	73fb      	strb	r3, [r7, #15]
    break;
 800a324:	e002      	b.n	800a32c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a326:	2301      	movs	r3, #1
 800a328:	73fb      	strb	r3, [r7, #15]
    break;
 800a32a:	bf00      	nop
  }
  return  speed;
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b084      	sub	sp, #16
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a342:	2300      	movs	r3, #0
 800a344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7f9 fafc 	bl	800394a <HAL_HCD_ResetPort>
 800a352:	4603      	mov	r3, r0
 800a354:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	4618      	mov	r0, r3
 800a35a:	f000 f8ff 	bl	800a55c <USBH_Get_USB_Status>
 800a35e:	4603      	mov	r3, r0
 800a360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a362:	7bbb      	ldrb	r3, [r7, #14]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	460b      	mov	r3, r1
 800a376:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a37e:	78fa      	ldrb	r2, [r7, #3]
 800a380:	4611      	mov	r1, r2
 800a382:	4618      	mov	r0, r3
 800a384:	f7f9 fb03 	bl	800398e <HAL_HCD_HC_GetXferCount>
 800a388:	4603      	mov	r3, r0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a392:	b590      	push	{r4, r7, lr}
 800a394:	b089      	sub	sp, #36	; 0x24
 800a396:	af04      	add	r7, sp, #16
 800a398:	6078      	str	r0, [r7, #4]
 800a39a:	4608      	mov	r0, r1
 800a39c:	4611      	mov	r1, r2
 800a39e:	461a      	mov	r2, r3
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	70fb      	strb	r3, [r7, #3]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70bb      	strb	r3, [r7, #2]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a3ba:	787c      	ldrb	r4, [r7, #1]
 800a3bc:	78ba      	ldrb	r2, [r7, #2]
 800a3be:	78f9      	ldrb	r1, [r7, #3]
 800a3c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3c2:	9302      	str	r3, [sp, #8]
 800a3c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a3c8:	9301      	str	r3, [sp, #4]
 800a3ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	4623      	mov	r3, r4
 800a3d2:	f7f8 ff66 	bl	80032a2 <HAL_HCD_HC_Init>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 f8bd 	bl	800a55c <USBH_Get_USB_Status>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd90      	pop	{r4, r7, pc}

0800a3f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a40a:	78fa      	ldrb	r2, [r7, #3]
 800a40c:	4611      	mov	r1, r2
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f8 ffd6 	bl	80033c0 <HAL_HCD_HC_Halt>
 800a414:	4603      	mov	r3, r0
 800a416:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 f89e 	bl	800a55c <USBH_Get_USB_Status>
 800a420:	4603      	mov	r3, r0
 800a422:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a424:	7bbb      	ldrb	r3, [r7, #14]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a42e:	b590      	push	{r4, r7, lr}
 800a430:	b089      	sub	sp, #36	; 0x24
 800a432:	af04      	add	r7, sp, #16
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	4608      	mov	r0, r1
 800a438:	4611      	mov	r1, r2
 800a43a:	461a      	mov	r2, r3
 800a43c:	4603      	mov	r3, r0
 800a43e:	70fb      	strb	r3, [r7, #3]
 800a440:	460b      	mov	r3, r1
 800a442:	70bb      	strb	r3, [r7, #2]
 800a444:	4613      	mov	r3, r2
 800a446:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800a456:	787c      	ldrb	r4, [r7, #1]
 800a458:	78ba      	ldrb	r2, [r7, #2]
 800a45a:	78f9      	ldrb	r1, [r7, #3]
 800a45c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a460:	9303      	str	r3, [sp, #12]
 800a462:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	9301      	str	r3, [sp, #4]
 800a46a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	4623      	mov	r3, r4
 800a472:	f7f8 ffc9 	bl	8003408 <HAL_HCD_HC_SubmitRequest>
 800a476:	4603      	mov	r3, r0
 800a478:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a47a:	7bfb      	ldrb	r3, [r7, #15]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f000 f86d 	bl	800a55c <USBH_Get_USB_Status>
 800a482:	4603      	mov	r3, r0
 800a484:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a486:	7bbb      	ldrb	r3, [r7, #14]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}

0800a490 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4a2:	78fa      	ldrb	r2, [r7, #3]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7f9 fa5d 	bl	8003966 <HAL_HCD_HC_GetURBState>
 800a4ac:	4603      	mov	r3, r0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b082      	sub	sp, #8
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d103      	bne.n	800a4d4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a4cc:	78fb      	ldrb	r3, [r7, #3]
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f000 f870 	bl	800a5b4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a4d4:	20c8      	movs	r0, #200	; 0xc8
 800a4d6:	f7f7 fa13 	bl	8001900 <HAL_Delay>
  return USBH_OK;
 800a4da:	2300      	movs	r3, #0
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800a4fa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a4fc:	78fb      	ldrb	r3, [r7, #3]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	212c      	movs	r1, #44	; 0x2c
 800a502:	fb01 f303 	mul.w	r3, r1, r3
 800a506:	4413      	add	r3, r2
 800a508:	333b      	adds	r3, #59	; 0x3b
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d009      	beq.n	800a524 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	68fa      	ldr	r2, [r7, #12]
 800a514:	212c      	movs	r1, #44	; 0x2c
 800a516:	fb01 f303 	mul.w	r3, r1, r3
 800a51a:	4413      	add	r3, r2
 800a51c:	3354      	adds	r3, #84	; 0x54
 800a51e:	78ba      	ldrb	r2, [r7, #2]
 800a520:	701a      	strb	r2, [r3, #0]
 800a522:	e008      	b.n	800a536 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a524:	78fb      	ldrb	r3, [r7, #3]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	212c      	movs	r1, #44	; 0x2c
 800a52a:	fb01 f303 	mul.w	r3, r1, r3
 800a52e:	4413      	add	r3, r2
 800a530:	3355      	adds	r3, #85	; 0x55
 800a532:	78ba      	ldrb	r2, [r7, #2]
 800a534:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f7f7 f9d7 	bl	8001900 <HAL_Delay>
}
 800a552:	bf00      	nop
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d817      	bhi.n	800a5a0 <USBH_Get_USB_Status+0x44>
 800a570:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <USBH_Get_USB_Status+0x1c>)
 800a572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a576:	bf00      	nop
 800a578:	0800a589 	.word	0x0800a589
 800a57c:	0800a58f 	.word	0x0800a58f
 800a580:	0800a595 	.word	0x0800a595
 800a584:	0800a59b 	.word	0x0800a59b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
    break;
 800a58c:	e00b      	b.n	800a5a6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a58e:	2302      	movs	r3, #2
 800a590:	73fb      	strb	r3, [r7, #15]
    break;
 800a592:	e008      	b.n	800a5a6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a594:	2301      	movs	r3, #1
 800a596:	73fb      	strb	r3, [r7, #15]
    break;
 800a598:	e005      	b.n	800a5a6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a59a:	2302      	movs	r3, #2
 800a59c:	73fb      	strb	r3, [r7, #15]
    break;
 800a59e:	e002      	b.n	800a5a6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a5a0:	2302      	movs	r3, #2
 800a5a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a5a4:	bf00      	nop
  }
  return usb_status;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d102      	bne.n	800a5ce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73fb      	strb	r3, [r7, #15]
 800a5cc:	e001      	b.n	800a5d2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	4803      	ldr	r0, [pc, #12]	; (800a5e8 <MX_DriverVbusFS+0x34>)
 800a5da:	f7f8 fde7 	bl	80031ac <HAL_GPIO_WritePin>
}
 800a5de:	bf00      	nop
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	40020800 	.word	0x40020800

0800a5ec <__errno>:
 800a5ec:	4b01      	ldr	r3, [pc, #4]	; (800a5f4 <__errno+0x8>)
 800a5ee:	6818      	ldr	r0, [r3, #0]
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	2000002c 	.word	0x2000002c

0800a5f8 <__libc_init_array>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	4d0d      	ldr	r5, [pc, #52]	; (800a630 <__libc_init_array+0x38>)
 800a5fc:	4c0d      	ldr	r4, [pc, #52]	; (800a634 <__libc_init_array+0x3c>)
 800a5fe:	1b64      	subs	r4, r4, r5
 800a600:	10a4      	asrs	r4, r4, #2
 800a602:	2600      	movs	r6, #0
 800a604:	42a6      	cmp	r6, r4
 800a606:	d109      	bne.n	800a61c <__libc_init_array+0x24>
 800a608:	4d0b      	ldr	r5, [pc, #44]	; (800a638 <__libc_init_array+0x40>)
 800a60a:	4c0c      	ldr	r4, [pc, #48]	; (800a63c <__libc_init_array+0x44>)
 800a60c:	f000 f92e 	bl	800a86c <_init>
 800a610:	1b64      	subs	r4, r4, r5
 800a612:	10a4      	asrs	r4, r4, #2
 800a614:	2600      	movs	r6, #0
 800a616:	42a6      	cmp	r6, r4
 800a618:	d105      	bne.n	800a626 <__libc_init_array+0x2e>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a620:	4798      	blx	r3
 800a622:	3601      	adds	r6, #1
 800a624:	e7ee      	b.n	800a604 <__libc_init_array+0xc>
 800a626:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62a:	4798      	blx	r3
 800a62c:	3601      	adds	r6, #1
 800a62e:	e7f2      	b.n	800a616 <__libc_init_array+0x1e>
 800a630:	0800a8b0 	.word	0x0800a8b0
 800a634:	0800a8b0 	.word	0x0800a8b0
 800a638:	0800a8b0 	.word	0x0800a8b0
 800a63c:	0800a8b4 	.word	0x0800a8b4

0800a640 <malloc>:
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <malloc+0xc>)
 800a642:	4601      	mov	r1, r0
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	f000 b87f 	b.w	800a748 <_malloc_r>
 800a64a:	bf00      	nop
 800a64c:	2000002c 	.word	0x2000002c

0800a650 <free>:
 800a650:	4b02      	ldr	r3, [pc, #8]	; (800a65c <free+0xc>)
 800a652:	4601      	mov	r1, r0
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	f000 b80b 	b.w	800a670 <_free_r>
 800a65a:	bf00      	nop
 800a65c:	2000002c 	.word	0x2000002c

0800a660 <memset>:
 800a660:	4402      	add	r2, r0
 800a662:	4603      	mov	r3, r0
 800a664:	4293      	cmp	r3, r2
 800a666:	d100      	bne.n	800a66a <memset+0xa>
 800a668:	4770      	bx	lr
 800a66a:	f803 1b01 	strb.w	r1, [r3], #1
 800a66e:	e7f9      	b.n	800a664 <memset+0x4>

0800a670 <_free_r>:
 800a670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a672:	2900      	cmp	r1, #0
 800a674:	d044      	beq.n	800a700 <_free_r+0x90>
 800a676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a67a:	9001      	str	r0, [sp, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f1a1 0404 	sub.w	r4, r1, #4
 800a682:	bfb8      	it	lt
 800a684:	18e4      	addlt	r4, r4, r3
 800a686:	f000 f8e3 	bl	800a850 <__malloc_lock>
 800a68a:	4a1e      	ldr	r2, [pc, #120]	; (800a704 <_free_r+0x94>)
 800a68c:	9801      	ldr	r0, [sp, #4]
 800a68e:	6813      	ldr	r3, [r2, #0]
 800a690:	b933      	cbnz	r3, 800a6a0 <_free_r+0x30>
 800a692:	6063      	str	r3, [r4, #4]
 800a694:	6014      	str	r4, [r2, #0]
 800a696:	b003      	add	sp, #12
 800a698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a69c:	f000 b8de 	b.w	800a85c <__malloc_unlock>
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	d908      	bls.n	800a6b6 <_free_r+0x46>
 800a6a4:	6825      	ldr	r5, [r4, #0]
 800a6a6:	1961      	adds	r1, r4, r5
 800a6a8:	428b      	cmp	r3, r1
 800a6aa:	bf01      	itttt	eq
 800a6ac:	6819      	ldreq	r1, [r3, #0]
 800a6ae:	685b      	ldreq	r3, [r3, #4]
 800a6b0:	1949      	addeq	r1, r1, r5
 800a6b2:	6021      	streq	r1, [r4, #0]
 800a6b4:	e7ed      	b.n	800a692 <_free_r+0x22>
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	b10b      	cbz	r3, 800a6c0 <_free_r+0x50>
 800a6bc:	42a3      	cmp	r3, r4
 800a6be:	d9fa      	bls.n	800a6b6 <_free_r+0x46>
 800a6c0:	6811      	ldr	r1, [r2, #0]
 800a6c2:	1855      	adds	r5, r2, r1
 800a6c4:	42a5      	cmp	r5, r4
 800a6c6:	d10b      	bne.n	800a6e0 <_free_r+0x70>
 800a6c8:	6824      	ldr	r4, [r4, #0]
 800a6ca:	4421      	add	r1, r4
 800a6cc:	1854      	adds	r4, r2, r1
 800a6ce:	42a3      	cmp	r3, r4
 800a6d0:	6011      	str	r1, [r2, #0]
 800a6d2:	d1e0      	bne.n	800a696 <_free_r+0x26>
 800a6d4:	681c      	ldr	r4, [r3, #0]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	6053      	str	r3, [r2, #4]
 800a6da:	4421      	add	r1, r4
 800a6dc:	6011      	str	r1, [r2, #0]
 800a6de:	e7da      	b.n	800a696 <_free_r+0x26>
 800a6e0:	d902      	bls.n	800a6e8 <_free_r+0x78>
 800a6e2:	230c      	movs	r3, #12
 800a6e4:	6003      	str	r3, [r0, #0]
 800a6e6:	e7d6      	b.n	800a696 <_free_r+0x26>
 800a6e8:	6825      	ldr	r5, [r4, #0]
 800a6ea:	1961      	adds	r1, r4, r5
 800a6ec:	428b      	cmp	r3, r1
 800a6ee:	bf04      	itt	eq
 800a6f0:	6819      	ldreq	r1, [r3, #0]
 800a6f2:	685b      	ldreq	r3, [r3, #4]
 800a6f4:	6063      	str	r3, [r4, #4]
 800a6f6:	bf04      	itt	eq
 800a6f8:	1949      	addeq	r1, r1, r5
 800a6fa:	6021      	streq	r1, [r4, #0]
 800a6fc:	6054      	str	r4, [r2, #4]
 800a6fe:	e7ca      	b.n	800a696 <_free_r+0x26>
 800a700:	b003      	add	sp, #12
 800a702:	bd30      	pop	{r4, r5, pc}
 800a704:	20000984 	.word	0x20000984

0800a708 <sbrk_aligned>:
 800a708:	b570      	push	{r4, r5, r6, lr}
 800a70a:	4e0e      	ldr	r6, [pc, #56]	; (800a744 <sbrk_aligned+0x3c>)
 800a70c:	460c      	mov	r4, r1
 800a70e:	6831      	ldr	r1, [r6, #0]
 800a710:	4605      	mov	r5, r0
 800a712:	b911      	cbnz	r1, 800a71a <sbrk_aligned+0x12>
 800a714:	f000 f88c 	bl	800a830 <_sbrk_r>
 800a718:	6030      	str	r0, [r6, #0]
 800a71a:	4621      	mov	r1, r4
 800a71c:	4628      	mov	r0, r5
 800a71e:	f000 f887 	bl	800a830 <_sbrk_r>
 800a722:	1c43      	adds	r3, r0, #1
 800a724:	d00a      	beq.n	800a73c <sbrk_aligned+0x34>
 800a726:	1cc4      	adds	r4, r0, #3
 800a728:	f024 0403 	bic.w	r4, r4, #3
 800a72c:	42a0      	cmp	r0, r4
 800a72e:	d007      	beq.n	800a740 <sbrk_aligned+0x38>
 800a730:	1a21      	subs	r1, r4, r0
 800a732:	4628      	mov	r0, r5
 800a734:	f000 f87c 	bl	800a830 <_sbrk_r>
 800a738:	3001      	adds	r0, #1
 800a73a:	d101      	bne.n	800a740 <sbrk_aligned+0x38>
 800a73c:	f04f 34ff 	mov.w	r4, #4294967295
 800a740:	4620      	mov	r0, r4
 800a742:	bd70      	pop	{r4, r5, r6, pc}
 800a744:	20000988 	.word	0x20000988

0800a748 <_malloc_r>:
 800a748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74c:	1ccd      	adds	r5, r1, #3
 800a74e:	f025 0503 	bic.w	r5, r5, #3
 800a752:	3508      	adds	r5, #8
 800a754:	2d0c      	cmp	r5, #12
 800a756:	bf38      	it	cc
 800a758:	250c      	movcc	r5, #12
 800a75a:	2d00      	cmp	r5, #0
 800a75c:	4607      	mov	r7, r0
 800a75e:	db01      	blt.n	800a764 <_malloc_r+0x1c>
 800a760:	42a9      	cmp	r1, r5
 800a762:	d905      	bls.n	800a770 <_malloc_r+0x28>
 800a764:	230c      	movs	r3, #12
 800a766:	603b      	str	r3, [r7, #0]
 800a768:	2600      	movs	r6, #0
 800a76a:	4630      	mov	r0, r6
 800a76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a770:	4e2e      	ldr	r6, [pc, #184]	; (800a82c <_malloc_r+0xe4>)
 800a772:	f000 f86d 	bl	800a850 <__malloc_lock>
 800a776:	6833      	ldr	r3, [r6, #0]
 800a778:	461c      	mov	r4, r3
 800a77a:	bb34      	cbnz	r4, 800a7ca <_malloc_r+0x82>
 800a77c:	4629      	mov	r1, r5
 800a77e:	4638      	mov	r0, r7
 800a780:	f7ff ffc2 	bl	800a708 <sbrk_aligned>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	4604      	mov	r4, r0
 800a788:	d14d      	bne.n	800a826 <_malloc_r+0xde>
 800a78a:	6834      	ldr	r4, [r6, #0]
 800a78c:	4626      	mov	r6, r4
 800a78e:	2e00      	cmp	r6, #0
 800a790:	d140      	bne.n	800a814 <_malloc_r+0xcc>
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	4631      	mov	r1, r6
 800a796:	4638      	mov	r0, r7
 800a798:	eb04 0803 	add.w	r8, r4, r3
 800a79c:	f000 f848 	bl	800a830 <_sbrk_r>
 800a7a0:	4580      	cmp	r8, r0
 800a7a2:	d13a      	bne.n	800a81a <_malloc_r+0xd2>
 800a7a4:	6821      	ldr	r1, [r4, #0]
 800a7a6:	3503      	adds	r5, #3
 800a7a8:	1a6d      	subs	r5, r5, r1
 800a7aa:	f025 0503 	bic.w	r5, r5, #3
 800a7ae:	3508      	adds	r5, #8
 800a7b0:	2d0c      	cmp	r5, #12
 800a7b2:	bf38      	it	cc
 800a7b4:	250c      	movcc	r5, #12
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f7ff ffa5 	bl	800a708 <sbrk_aligned>
 800a7be:	3001      	adds	r0, #1
 800a7c0:	d02b      	beq.n	800a81a <_malloc_r+0xd2>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	442b      	add	r3, r5
 800a7c6:	6023      	str	r3, [r4, #0]
 800a7c8:	e00e      	b.n	800a7e8 <_malloc_r+0xa0>
 800a7ca:	6822      	ldr	r2, [r4, #0]
 800a7cc:	1b52      	subs	r2, r2, r5
 800a7ce:	d41e      	bmi.n	800a80e <_malloc_r+0xc6>
 800a7d0:	2a0b      	cmp	r2, #11
 800a7d2:	d916      	bls.n	800a802 <_malloc_r+0xba>
 800a7d4:	1961      	adds	r1, r4, r5
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	6025      	str	r5, [r4, #0]
 800a7da:	bf18      	it	ne
 800a7dc:	6059      	strne	r1, [r3, #4]
 800a7de:	6863      	ldr	r3, [r4, #4]
 800a7e0:	bf08      	it	eq
 800a7e2:	6031      	streq	r1, [r6, #0]
 800a7e4:	5162      	str	r2, [r4, r5]
 800a7e6:	604b      	str	r3, [r1, #4]
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f104 060b 	add.w	r6, r4, #11
 800a7ee:	f000 f835 	bl	800a85c <__malloc_unlock>
 800a7f2:	f026 0607 	bic.w	r6, r6, #7
 800a7f6:	1d23      	adds	r3, r4, #4
 800a7f8:	1af2      	subs	r2, r6, r3
 800a7fa:	d0b6      	beq.n	800a76a <_malloc_r+0x22>
 800a7fc:	1b9b      	subs	r3, r3, r6
 800a7fe:	50a3      	str	r3, [r4, r2]
 800a800:	e7b3      	b.n	800a76a <_malloc_r+0x22>
 800a802:	6862      	ldr	r2, [r4, #4]
 800a804:	42a3      	cmp	r3, r4
 800a806:	bf0c      	ite	eq
 800a808:	6032      	streq	r2, [r6, #0]
 800a80a:	605a      	strne	r2, [r3, #4]
 800a80c:	e7ec      	b.n	800a7e8 <_malloc_r+0xa0>
 800a80e:	4623      	mov	r3, r4
 800a810:	6864      	ldr	r4, [r4, #4]
 800a812:	e7b2      	b.n	800a77a <_malloc_r+0x32>
 800a814:	4634      	mov	r4, r6
 800a816:	6876      	ldr	r6, [r6, #4]
 800a818:	e7b9      	b.n	800a78e <_malloc_r+0x46>
 800a81a:	230c      	movs	r3, #12
 800a81c:	603b      	str	r3, [r7, #0]
 800a81e:	4638      	mov	r0, r7
 800a820:	f000 f81c 	bl	800a85c <__malloc_unlock>
 800a824:	e7a1      	b.n	800a76a <_malloc_r+0x22>
 800a826:	6025      	str	r5, [r4, #0]
 800a828:	e7de      	b.n	800a7e8 <_malloc_r+0xa0>
 800a82a:	bf00      	nop
 800a82c:	20000984 	.word	0x20000984

0800a830 <_sbrk_r>:
 800a830:	b538      	push	{r3, r4, r5, lr}
 800a832:	4d06      	ldr	r5, [pc, #24]	; (800a84c <_sbrk_r+0x1c>)
 800a834:	2300      	movs	r3, #0
 800a836:	4604      	mov	r4, r0
 800a838:	4608      	mov	r0, r1
 800a83a:	602b      	str	r3, [r5, #0]
 800a83c:	f7f6 ff7c 	bl	8001738 <_sbrk>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d102      	bne.n	800a84a <_sbrk_r+0x1a>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	b103      	cbz	r3, 800a84a <_sbrk_r+0x1a>
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	2000098c 	.word	0x2000098c

0800a850 <__malloc_lock>:
 800a850:	4801      	ldr	r0, [pc, #4]	; (800a858 <__malloc_lock+0x8>)
 800a852:	f000 b809 	b.w	800a868 <__retarget_lock_acquire_recursive>
 800a856:	bf00      	nop
 800a858:	20000990 	.word	0x20000990

0800a85c <__malloc_unlock>:
 800a85c:	4801      	ldr	r0, [pc, #4]	; (800a864 <__malloc_unlock+0x8>)
 800a85e:	f000 b804 	b.w	800a86a <__retarget_lock_release_recursive>
 800a862:	bf00      	nop
 800a864:	20000990 	.word	0x20000990

0800a868 <__retarget_lock_acquire_recursive>:
 800a868:	4770      	bx	lr

0800a86a <__retarget_lock_release_recursive>:
 800a86a:	4770      	bx	lr

0800a86c <_init>:
 800a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a86e:	bf00      	nop
 800a870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a872:	bc08      	pop	{r3}
 800a874:	469e      	mov	lr, r3
 800a876:	4770      	bx	lr

0800a878 <_fini>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr

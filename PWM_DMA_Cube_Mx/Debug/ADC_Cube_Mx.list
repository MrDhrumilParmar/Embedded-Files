
ADC_Cube_Mx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fe0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800a168  0800a168  0001a168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a18c  0800a18c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a194  0800a194  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a198  0800a198  0001a198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800a19c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          0000095c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200009f0  200009f0  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c5cb  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c1  00000000  00000000  0003c68f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  00040750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001660  00000000  00000000  00041f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f9b  00000000  00000000  000435c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f47a  00000000  00000000  0006955b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e07cf  00000000  00000000  000889d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001691a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006868  00000000  00000000  001691f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000094 	.word	0x20000094
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a150 	.word	0x0800a150

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000098 	.word	0x20000098
 80001c4:	0800a150 	.word	0x0800a150

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 ff12 	bl	80012f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f834 	bl	8000540 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fb00 	bl	8000adc <MX_GPIO_Init>
  MX_DMA_Init();
 80004dc:	f000 fac8 	bl	8000a70 <MX_DMA_Init>
  MX_I2C1_Init();
 80004e0:	f000 f9a6 	bl	8000830 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e4:	f000 f9d2 	bl	800088c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e8:	f000 fa00 	bl	80008ec <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ec:	f009 f9e8 	bl	80098c0 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004f0:	f000 f898 	bl	8000624 <MX_ADC1_Init>
  MX_TIM4_Init();
 80004f4:	f000 fa30 	bl	8000958 <MX_TIM4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f8:	f009 fa08 	bl	800990c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004fc:	2104      	movs	r1, #4
 80004fe:	480d      	ldr	r0, [pc, #52]	; (8000534 <main+0x68>)
 8000500:	f005 f976 	bl	80057f0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2, &buffer, 1);
 8000504:	2301      	movs	r3, #1
 8000506:	4a0c      	ldr	r2, [pc, #48]	; (8000538 <main+0x6c>)
 8000508:	2104      	movs	r1, #4
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x68>)
 800050c:	f005 fa38 	bl	8005980 <HAL_TIM_PWM_Start_DMA>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000510:	2108      	movs	r1, #8
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <main+0x68>)
 8000514:	f005 f96c 	bl	80057f0 <HAL_TIM_PWM_Start>

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 500);
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <main+0x68>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000520:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, DUTY2);
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <main+0x68>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a05      	ldr	r2, [pc, #20]	; (800053c <main+0x70>)
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	63da      	str	r2, [r3, #60]	; 0x3c
 800052c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000024c 	.word	0x2000024c
 8000538:	200002f4 	.word	0x200002f4
 800053c:	20000000 	.word	0x20000000

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f009 fcf8 	bl	8009f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <SystemClock_Config+0xdc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a2b      	ldr	r2, [pc, #172]	; (800061c <SystemClock_Config+0xdc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemClock_Config+0xdc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <SystemClock_Config+0xe0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a25      	ldr	r2, [pc, #148]	; (8000620 <SystemClock_Config+0xe0>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <SystemClock_Config+0xe0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800059c:	2303      	movs	r3, #3
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a6:	2301      	movs	r3, #1
 80005a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005aa:	2310      	movs	r3, #16
 80005ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b8:	2304      	movs	r3, #4
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005bc:	23a8      	movs	r3, #168	; 0xa8
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f9b1 	bl	8004934 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005d8:	f000 fb8e 	bl	8000cf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2105      	movs	r1, #5
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 fc12 	bl	8004e24 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000606:	f000 fb77 	bl	8000cf8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2000      	movs	r0, #0
 8000610:	f004 fcee 	bl	8004ff0 <HAL_RCC_MCOConfig>
}
 8000614:	bf00      	nop
 8000616:	3750      	adds	r7, #80	; 0x50
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */
  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	463b      	mov	r3, r7
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000636:	4b7b      	ldr	r3, [pc, #492]	; (8000824 <MX_ADC1_Init+0x200>)
 8000638:	4a7b      	ldr	r2, [pc, #492]	; (8000828 <MX_ADC1_Init+0x204>)
 800063a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800063c:	4b79      	ldr	r3, [pc, #484]	; (8000824 <MX_ADC1_Init+0x200>)
 800063e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000642:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000644:	4b77      	ldr	r3, [pc, #476]	; (8000824 <MX_ADC1_Init+0x200>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800064a:	4b76      	ldr	r3, [pc, #472]	; (8000824 <MX_ADC1_Init+0x200>)
 800064c:	2201      	movs	r2, #1
 800064e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000650:	4b74      	ldr	r3, [pc, #464]	; (8000824 <MX_ADC1_Init+0x200>)
 8000652:	2201      	movs	r2, #1
 8000654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000656:	4b73      	ldr	r3, [pc, #460]	; (8000824 <MX_ADC1_Init+0x200>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800065e:	4b71      	ldr	r3, [pc, #452]	; (8000824 <MX_ADC1_Init+0x200>)
 8000660:	2200      	movs	r2, #0
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b6f      	ldr	r3, [pc, #444]	; (8000824 <MX_ADC1_Init+0x200>)
 8000666:	4a71      	ldr	r2, [pc, #452]	; (800082c <MX_ADC1_Init+0x208>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066a:	4b6e      	ldr	r3, [pc, #440]	; (8000824 <MX_ADC1_Init+0x200>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 8000670:	4b6c      	ldr	r3, [pc, #432]	; (8000824 <MX_ADC1_Init+0x200>)
 8000672:	2210      	movs	r2, #16
 8000674:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000676:	4b6b      	ldr	r3, [pc, #428]	; (8000824 <MX_ADC1_Init+0x200>)
 8000678:	2201      	movs	r2, #1
 800067a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067e:	4b69      	ldr	r3, [pc, #420]	; (8000824 <MX_ADC1_Init+0x200>)
 8000680:	2201      	movs	r2, #1
 8000682:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	4867      	ldr	r0, [pc, #412]	; (8000824 <MX_ADC1_Init+0x200>)
 8000686:	f000 fecd 	bl	8001424 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000690:	f000 fb32 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000694:	2301      	movs	r3, #1
 8000696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800069c:	2300      	movs	r3, #0
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	485f      	ldr	r0, [pc, #380]	; (8000824 <MX_ADC1_Init+0x200>)
 80006a6:	f000 ff01 	bl	80014ac <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006b0:	f000 fb22 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4859      	ldr	r0, [pc, #356]	; (8000824 <MX_ADC1_Init+0x200>)
 80006be:	f000 fef5 	bl	80014ac <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80006c8:	f000 fb16 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 80006cc:	2303      	movs	r3, #3
 80006ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	4853      	ldr	r0, [pc, #332]	; (8000824 <MX_ADC1_Init+0x200>)
 80006d6:	f000 fee9 	bl	80014ac <HAL_ADC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80006e0:	f000 fb0a 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 80006e4:	2304      	movs	r3, #4
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	484d      	ldr	r0, [pc, #308]	; (8000824 <MX_ADC1_Init+0x200>)
 80006ee:	f000 fedd 	bl	80014ac <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006f8:	f000 fafe 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 80006fc:	2305      	movs	r3, #5
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4847      	ldr	r0, [pc, #284]	; (8000824 <MX_ADC1_Init+0x200>)
 8000706:	f000 fed1 	bl	80014ac <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000710:	f000 faf2 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8000714:	2306      	movs	r3, #6
 8000716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4841      	ldr	r0, [pc, #260]	; (8000824 <MX_ADC1_Init+0x200>)
 800071e:	f000 fec5 	bl	80014ac <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000728:	f000 fae6 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 800072c:	2307      	movs	r3, #7
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	483b      	ldr	r0, [pc, #236]	; (8000824 <MX_ADC1_Init+0x200>)
 8000736:	f000 feb9 	bl	80014ac <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8000740:	f000 fada 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4619      	mov	r1, r3
 800074c:	4835      	ldr	r0, [pc, #212]	; (8000824 <MX_ADC1_Init+0x200>)
 800074e:	f000 fead 	bl	80014ac <HAL_ADC_ConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000758:	f000 face 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 800075c:	2309      	movs	r3, #9
 800075e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000760:	463b      	mov	r3, r7
 8000762:	4619      	mov	r1, r3
 8000764:	482f      	ldr	r0, [pc, #188]	; (8000824 <MX_ADC1_Init+0x200>)
 8000766:	f000 fea1 	bl	80014ac <HAL_ADC_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8000770:	f000 fac2 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 8000774:	230a      	movs	r3, #10
 8000776:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000778:	463b      	mov	r3, r7
 800077a:	4619      	mov	r1, r3
 800077c:	4829      	ldr	r0, [pc, #164]	; (8000824 <MX_ADC1_Init+0x200>)
 800077e:	f000 fe95 	bl	80014ac <HAL_ADC_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x168>
  {
    Error_Handler();
 8000788:	f000 fab6 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 800078c:	230b      	movs	r3, #11
 800078e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4823      	ldr	r0, [pc, #140]	; (8000824 <MX_ADC1_Init+0x200>)
 8000796:	f000 fe89 	bl	80014ac <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x180>
  {
    Error_Handler();
 80007a0:	f000 faaa 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 80007a4:	230c      	movs	r3, #12
 80007a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	481d      	ldr	r0, [pc, #116]	; (8000824 <MX_ADC1_Init+0x200>)
 80007ae:	f000 fe7d 	bl	80014ac <HAL_ADC_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 80007b8:	f000 fa9e 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 13;
 80007bc:	230d      	movs	r3, #13
 80007be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	4619      	mov	r1, r3
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <MX_ADC1_Init+0x200>)
 80007c6:	f000 fe71 	bl	80014ac <HAL_ADC_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_ADC1_Init+0x1b0>
  {
    Error_Handler();
 80007d0:	f000 fa92 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 14;
 80007d4:	230e      	movs	r3, #14
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4811      	ldr	r0, [pc, #68]	; (8000824 <MX_ADC1_Init+0x200>)
 80007de:	f000 fe65 	bl	80014ac <HAL_ADC_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x1c8>
  {
    Error_Handler();
 80007e8:	f000 fa86 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 15;
 80007ec:	230f      	movs	r3, #15
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	480b      	ldr	r0, [pc, #44]	; (8000824 <MX_ADC1_Init+0x200>)
 80007f6:	f000 fe59 	bl	80014ac <HAL_ADC_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8000800:	f000 fa7a 	bl	8000cf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 16;
 8000804:	2310      	movs	r3, #16
 8000806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000808:	463b      	mov	r3, r7
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_ADC1_Init+0x200>)
 800080e:	f000 fe4d 	bl	80014ac <HAL_ADC_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0x1f8>
  {
    Error_Handler();
 8000818:	f000 fa6e 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3710      	adds	r7, #16
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200000b0 	.word	0x200000b0
 8000828:	40012000 	.word	0x40012000
 800082c:	0f000001 	.word	0x0f000001

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	; (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f003 fa7d 	bl	8003d6c <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 fa3e 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000158 	.word	0x20000158
 8000884:	40005400 	.word	0x40005400
 8000888:	000186a0 	.word	0x000186a0

0800088c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2S3_Init 0 */
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */
  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_I2S3_Init+0x54>)
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <MX_I2S3_Init+0x58>)
 8000894:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_I2S3_Init+0x54>)
 8000898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <MX_I2S3_Init+0x5c>)
 80008b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008b8:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_I2S3_Init+0x54>)
 80008cc:	f003 fb92 	bl	8003ff4 <HAL_I2S_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008d6:	f000 fa0f 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */
  /* USER CODE END I2S3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001ac 	.word	0x200001ac
 80008e4:	40003c00 	.word	0x40003c00
 80008e8:	00017700 	.word	0x00017700

080008ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f0:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_SPI1_Init+0x64>)
 80008f2:	4a18      	ldr	r2, [pc, #96]	; (8000954 <MX_SPI1_Init+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_SPI1_Init+0x64>)
 80008f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_SPI1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_SPI1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_SPI1_Init+0x64>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091e:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SPI1_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <MX_SPI1_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SPI1_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <MX_SPI1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SPI1_Init+0x64>)
 8000938:	220a      	movs	r2, #10
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800093c:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_SPI1_Init+0x64>)
 800093e:	f004 fe25 	bl	800558c <HAL_SPI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f9d6 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200001f4 	.word	0x200001f4
 8000954:	40013000 	.word	0x40013000

08000958 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08e      	sub	sp, #56	; 0x38
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800095e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096c:	f107 0320 	add.w	r3, r7, #32
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]
 8000986:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000988:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <MX_TIM4_Init+0x110>)
 800098a:	4a38      	ldr	r2, [pc, #224]	; (8000a6c <MX_TIM4_Init+0x114>)
 800098c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 31;
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <MX_TIM4_Init+0x110>)
 8000990:	221f      	movs	r2, #31
 8000992:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b34      	ldr	r3, [pc, #208]	; (8000a68 <MX_TIM4_Init+0x110>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <MX_TIM4_Init+0x110>)
 800099c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b31      	ldr	r3, [pc, #196]	; (8000a68 <MX_TIM4_Init+0x110>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a8:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <MX_TIM4_Init+0x110>)
 80009aa:	2280      	movs	r2, #128	; 0x80
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009ae:	482e      	ldr	r0, [pc, #184]	; (8000a68 <MX_TIM4_Init+0x110>)
 80009b0:	f004 fe75 	bl	800569e <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009ba:	f000 f99d 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4827      	ldr	r0, [pc, #156]	; (8000a68 <MX_TIM4_Init+0x110>)
 80009cc:	f005 fa62 	bl	8005e94 <HAL_TIM_ConfigClockSource>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80009d6:	f000 f98f 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009da:	4823      	ldr	r0, [pc, #140]	; (8000a68 <MX_TIM4_Init+0x110>)
 80009dc:	f004 feae 	bl	800573c <HAL_TIM_PWM_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80009e6:	f000 f987 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4619      	mov	r1, r3
 80009f8:	481b      	ldr	r0, [pc, #108]	; (8000a68 <MX_TIM4_Init+0x110>)
 80009fa:	f005 ff11 	bl	8006820 <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a04:	f000 f978 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a08:	2360      	movs	r3, #96	; 0x60
 8000a0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8000a0c:	2364      	movs	r3, #100	; 0x64
 8000a0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4812      	ldr	r0, [pc, #72]	; (8000a68 <MX_TIM4_Init+0x110>)
 8000a20:	f005 f976 	bl	8005d10 <HAL_TIM_PWM_ConfigChannel>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a2a:	f000 f965 	bl	8000cf8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_2);
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_TIM4_Init+0x110>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_TIM4_Init+0x110>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a3c:	619a      	str	r2, [r3, #24]
  sConfigOC.Pulse = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	2208      	movs	r2, #8
 8000a46:	4619      	mov	r1, r3
 8000a48:	4807      	ldr	r0, [pc, #28]	; (8000a68 <MX_TIM4_Init+0x110>)
 8000a4a:	f005 f961 	bl	8005d10 <HAL_TIM_PWM_ConfigChannel>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM4_Init+0x100>
  {
    Error_Handler();
 8000a54:	f000 f950 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a58:	4803      	ldr	r0, [pc, #12]	; (8000a68 <MX_TIM4_Init+0x110>)
 8000a5a:	f000 fb59 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000a5e:	bf00      	nop
 8000a60:	3738      	adds	r7, #56	; 0x38
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000024c 	.word	0x2000024c
 8000a6c:	40000800 	.word	0x40000800

08000a70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_DMA_Init+0x68>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <MX_DMA_Init+0x68>)
 8000a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_DMA_Init+0x68>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_DMA_Init+0x68>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <MX_DMA_Init+0x68>)
 8000a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_DMA_Init+0x68>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	200e      	movs	r0, #14
 8000ab4:	f000 fff3 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ab8:	200e      	movs	r0, #14
 8000aba:	f001 f80c 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2038      	movs	r0, #56	; 0x38
 8000ac4:	f000 ffeb 	bl	8001a9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ac8:	2038      	movs	r0, #56	; 0x38
 8000aca:	f001 f804 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08c      	sub	sp, #48	; 0x30
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	61bb      	str	r3, [r7, #24]
 8000af6:	4b7a      	ldr	r3, [pc, #488]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a79      	ldr	r2, [pc, #484]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b77      	ldr	r3, [pc, #476]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0310 	and.w	r3, r3, #16
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	4b73      	ldr	r3, [pc, #460]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a72      	ldr	r2, [pc, #456]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b70      	ldr	r3, [pc, #448]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	4b6c      	ldr	r3, [pc, #432]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a6b      	ldr	r2, [pc, #428]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b69      	ldr	r3, [pc, #420]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b65      	ldr	r3, [pc, #404]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a64      	ldr	r2, [pc, #400]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b62      	ldr	r3, [pc, #392]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a5d      	ldr	r2, [pc, #372]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b6c:	f043 0302 	orr.w	r3, r3, #2
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b5b      	ldr	r3, [pc, #364]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b57      	ldr	r3, [pc, #348]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a56      	ldr	r2, [pc, #344]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b88:	f043 0308 	orr.w	r3, r3, #8
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b54      	ldr	r3, [pc, #336]	; (8000ce0 <MX_GPIO_Init+0x204>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0308 	and.w	r3, r3, #8
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4851      	ldr	r0, [pc, #324]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000ba0:	f001 fcc0 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	484f      	ldr	r0, [pc, #316]	; (8000ce8 <MX_GPIO_Init+0x20c>)
 8000baa:	f001 fcbb 	bl	8002524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bb4:	484d      	ldr	r0, [pc, #308]	; (8000cec <MX_GPIO_Init+0x210>)
 8000bb6:	f001 fcb5 	bl	8002524 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4844      	ldr	r0, [pc, #272]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000bd2:	f001 fb0b 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	483e      	ldr	r0, [pc, #248]	; (8000ce8 <MX_GPIO_Init+0x20c>)
 8000bee:	f001 fafd 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c02:	2305      	movs	r3, #5
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4836      	ldr	r0, [pc, #216]	; (8000ce8 <MX_GPIO_Init+0x20c>)
 8000c0e:	f001 faed 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c16:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4832      	ldr	r0, [pc, #200]	; (8000cf0 <MX_GPIO_Init+0x214>)
 8000c28:	f001 fae0 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 031c 	add.w	r3, r7, #28
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	482d      	ldr	r0, [pc, #180]	; (8000cf4 <MX_GPIO_Init+0x218>)
 8000c40:	f001 fad4 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c56:	2305      	movs	r3, #5
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4824      	ldr	r0, [pc, #144]	; (8000cf4 <MX_GPIO_Init+0x218>)
 8000c62:	f001 fac3 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c66:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c6a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481b      	ldr	r0, [pc, #108]	; (8000cec <MX_GPIO_Init+0x210>)
 8000c80:	f001 fab4 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <MX_GPIO_Init+0x214>)
 8000ca2:	f001 faa3 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ca6:	2320      	movs	r3, #32
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_GPIO_Init+0x210>)
 8000cba:	f001 fa97 	bl	80021ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_GPIO_Init+0x208>)
 8000cd4:	f001 fa8a 	bl	80021ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cd8:	bf00      	nop
 8000cda:	3730      	adds	r7, #48	; 0x30
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020400 	.word	0x40020400

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f000 fe9e 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a2f      	ldr	r2, [pc, #188]	; (8000e34 <HAL_ADC_MspInit+0xdc>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d157      	bne.n	8000e2a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <HAL_ADC_MspInit+0xe0>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a2d      	ldr	r2, [pc, #180]	; (8000e38 <HAL_ADC_MspInit+0xe0>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b2b      	ldr	r3, [pc, #172]	; (8000e38 <HAL_ADC_MspInit+0xe0>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_ADC_MspInit+0xe0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <HAL_ADC_MspInit+0xe0>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_ADC_MspInit+0xe0>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000db2:	2302      	movs	r3, #2
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	481d      	ldr	r0, [pc, #116]	; (8000e3c <HAL_ADC_MspInit+0xe4>)
 8000dc6:	f001 fa11 	bl	80021ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_ADC_MspInit+0xec>)
 8000dce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ddc:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000df0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000df4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000df8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e00:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e0e:	480c      	ldr	r0, [pc, #48]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000e10:	f000 fe7c 	bl	8001b0c <HAL_DMA_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e1a:	f7ff ff6d 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000e22:	639a      	str	r2, [r3, #56]	; 0x38
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <HAL_ADC_MspInit+0xe8>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3728      	adds	r7, #40	; 0x28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40012000 	.word	0x40012000
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	200000f8 	.word	0x200000f8
 8000e44:	40026410 	.word	0x40026410

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_I2C_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12c      	bne.n	8000ec4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e86:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <HAL_I2C_MspInit+0x8c>)
 8000ea4:	f001 f9a2 	bl	80021ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3728      	adds	r7, #40	; 0x28
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08e      	sub	sp, #56	; 0x38
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a31      	ldr	r2, [pc, #196]	; (8000fc8 <HAL_I2S_MspInit+0xf0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d15a      	bne.n	8000fbe <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000f0c:	2332      	movs	r3, #50	; 0x32
 8000f0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 f9f7 	bl	800530c <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f24:	f7ff fee8 	bl	8000cf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	4a26      	ldr	r2, [pc, #152]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f36:	6413      	str	r3, [r2, #64]	; 0x40
 8000f38:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6313      	str	r3, [r2, #48]	; 0x30
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f60:	2300      	movs	r3, #0
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f68:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_I2S_MspInit+0xf4>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f7c:	2310      	movs	r3, #16
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f8c:	2306      	movs	r3, #6
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	480e      	ldr	r0, [pc, #56]	; (8000fd0 <HAL_I2S_MspInit+0xf8>)
 8000f98:	f001 f928 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f9c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <HAL_I2S_MspInit+0xfc>)
 8000fba:	f001 f917 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3738      	adds	r7, #56	; 0x38
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40003c00 	.word	0x40003c00
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000
 8000fd4:	40020800 	.word	0x40020800

08000fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_SPI_MspInit+0x84>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d12b      	bne.n	8001052 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_SPI_MspInit+0x88>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	4a17      	ldr	r2, [pc, #92]	; (8001060 <HAL_SPI_MspInit+0x88>)
 8001004:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001008:	6453      	str	r3, [r2, #68]	; 0x44
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <HAL_SPI_MspInit+0x88>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <HAL_SPI_MspInit+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <HAL_SPI_MspInit+0x88>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_SPI_MspInit+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001032:	23e0      	movs	r3, #224	; 0xe0
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001042:	2305      	movs	r3, #5
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <HAL_SPI_MspInit+0x8c>)
 800104e:	f001 f8cd 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3728      	adds	r7, #40	; 0x28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40013000 	.word	0x40013000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000

08001068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a22      	ldr	r2, [pc, #136]	; (8001100 <HAL_TIM_Base_MspInit+0x98>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d13e      	bne.n	80010f8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_TIM_Base_MspInit+0x9c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a20      	ldr	r2, [pc, #128]	; (8001104 <HAL_TIM_Base_MspInit+0x9c>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <HAL_TIM_Base_MspInit+0x9c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Stream3;
 8001096:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 8001098:	4a1c      	ldr	r2, [pc, #112]	; (800110c <HAL_TIM_Base_MspInit+0xa4>)
 800109a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Channel = DMA_CHANNEL_2;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 800109e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010be:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_NORMAL;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010d4:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 80010dc:	480a      	ldr	r0, [pc, #40]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010de:	f000 fd15 	bl	8001b0c <HAL_DMA_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 80010e8:	f7ff fe06 	bl	8000cf8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <HAL_TIM_Base_MspInit+0xa0>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40000800 	.word	0x40000800
 8001104:	40023800 	.word	0x40023800
 8001108:	20000294 	.word	0x20000294
 800110c:	40026058 	.word	0x40026058

08001110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_TIM_MspPostInit+0x68>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d11e      	bne.n	8001170 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_TIM_MspPostInit+0x6c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_TIM_MspPostInit+0x6c>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_TIM_MspPostInit+0x6c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800114e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001152:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001160:	2302      	movs	r3, #2
 8001162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_TIM_MspPostInit+0x70>)
 800116c:	f001 f83e 	bl	80021ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40000800 	.word	0x40000800
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f000 f8e4 	bl	800139c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <DMA1_Stream3_IRQHandler+0x10>)
 80011de:	f000 fd9b 	bl	8001d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000294 	.word	0x20000294

080011ec <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <DMA2_Stream0_IRQHandler+0x10>)
 80011f2:	f000 fd91 	bl	8001d18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200000f8 	.word	0x200000f8

08001200 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <OTG_FS_IRQHandler+0x10>)
 8001206:	f001 fc11 	bl	8002a2c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200006dc 	.word	0x200006dc

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f008 fe44 	bl	8009ed0 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	220c      	movs	r2, #12
 800124c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20020000 	.word	0x20020000
 8001274:	00000400 	.word	0x00000400
 8001278:	200002f8 	.word	0x200002f8
 800127c:	200009f0 	.word	0x200009f0

08001280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x20>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <SystemInit+0x20>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  



  ldr   sp, =_estack     /* set stack pointer */
 80012a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012aa:	490e      	ldr	r1, [pc, #56]	; (80012e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012ac:	4a0e      	ldr	r2, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0b      	ldr	r2, [pc, #44]	; (80012ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c0:	4c0b      	ldr	r4, [pc, #44]	; (80012f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ce:	f7ff ffd7 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d2:	f008 fe03 	bl	8009edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d6:	f7ff f8f9 	bl	80004cc <main>
  bx  lr    
 80012da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80012e8:	0800a19c 	.word	0x0800a19c
  ldr r2, =_sbss
 80012ec:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80012f0:	200009f0 	.word	0x200009f0

080012f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f4:	e7fe      	b.n	80012f4 <ADC_IRQHandler>
	...

080012f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_Init+0x40>)
 8001302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_Init+0x40>)
 800130e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x40>)
 800131a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 fbb1 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f808 	bl	800133c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fcec 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023c00 	.word	0x40023c00

0800133c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x54>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_InitTick+0x58>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001352:	fbb3 f3f1 	udiv	r3, r3, r1
 8001356:	fbb2 f3f3 	udiv	r3, r2, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f000 fbc9 	bl	8001af2 <HAL_SYSTICK_Config>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e00e      	b.n	8001388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b0f      	cmp	r3, #15
 800136e:	d80a      	bhi.n	8001386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001370:	2200      	movs	r2, #0
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f000 fb91 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800137c:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_InitTick+0x5c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e000      	b.n	8001388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000004 	.word	0x20000004
 8001394:	2000000c 	.word	0x2000000c
 8001398:	20000008 	.word	0x20000008

0800139c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x20>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_IncTick+0x24>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_IncTick+0x24>)
 80013ae:	6013      	str	r3, [r2, #0]
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	2000000c 	.word	0x2000000c
 80013c0:	200002fc 	.word	0x200002fc

080013c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	200002fc 	.word	0x200002fc

080013dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e4:	f7ff ffee 	bl	80013c4 <HAL_GetTick>
 80013e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013f4:	d005      	beq.n	8001402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_Delay+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	4413      	add	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001402:	bf00      	nop
 8001404:	f7ff ffde 	bl	80013c4 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	429a      	cmp	r2, r3
 8001412:	d8f7      	bhi.n	8001404 <HAL_Delay+0x28>
  {
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	2000000c 	.word	0x2000000c

08001424 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e033      	b.n	80014a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fc88 	bl	8000d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 0310 	and.w	r3, r3, #16
 800145e:	2b00      	cmp	r3, #0
 8001460:	d118      	bne.n	8001494 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800146a:	f023 0302 	bic.w	r3, r3, #2
 800146e:	f043 0202 	orr.w	r2, r3, #2
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f93a 	bl	80016f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f023 0303 	bic.w	r3, r3, #3
 800148a:	f043 0201 	orr.w	r2, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
 8001492:	e001      	b.n	8001498 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_ConfigChannel+0x1c>
 80014c4:	2302      	movs	r3, #2
 80014c6:	e105      	b.n	80016d4 <HAL_ADC_ConfigChannel+0x228>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b09      	cmp	r3, #9
 80014d6:	d925      	bls.n	8001524 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68d9      	ldr	r1, [r3, #12]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	3b1e      	subs	r3, #30
 80014ee:	2207      	movs	r2, #7
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43da      	mvns	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	400a      	ands	r2, r1
 80014fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68d9      	ldr	r1, [r3, #12]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	b29b      	uxth	r3, r3
 800150e:	4618      	mov	r0, r3
 8001510:	4603      	mov	r3, r0
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4403      	add	r3, r0
 8001516:	3b1e      	subs	r3, #30
 8001518:	409a      	lsls	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	e022      	b.n	800156a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6919      	ldr	r1, [r3, #16]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	461a      	mov	r2, r3
 8001532:	4613      	mov	r3, r2
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4413      	add	r3, r2
 8001538:	2207      	movs	r2, #7
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	400a      	ands	r2, r1
 8001546:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6919      	ldr	r1, [r3, #16]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4618      	mov	r0, r3
 800155a:	4603      	mov	r3, r0
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4403      	add	r3, r0
 8001560:	409a      	lsls	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b06      	cmp	r3, #6
 8001570:	d824      	bhi.n	80015bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	4613      	mov	r3, r2
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	3b05      	subs	r3, #5
 8001584:	221f      	movs	r2, #31
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	400a      	ands	r2, r1
 8001592:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b29b      	uxth	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3b05      	subs	r3, #5
 80015ae:	fa00 f203 	lsl.w	r2, r0, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
 80015ba:	e04c      	b.n	8001656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	d824      	bhi.n	800160e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	3b23      	subs	r3, #35	; 0x23
 80015d6:	221f      	movs	r2, #31
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43da      	mvns	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	400a      	ands	r2, r1
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	3b23      	subs	r3, #35	; 0x23
 8001600:	fa00 f203 	lsl.w	r2, r0, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	631a      	str	r2, [r3, #48]	; 0x30
 800160c:	e023      	b.n	8001656 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	3b41      	subs	r3, #65	; 0x41
 8001620:	221f      	movs	r2, #31
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	400a      	ands	r2, r1
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	3b41      	subs	r3, #65	; 0x41
 800164a:	fa00 f203 	lsl.w	r2, r0, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_ADC_ConfigChannel+0x234>)
 8001658:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a21      	ldr	r2, [pc, #132]	; (80016e4 <HAL_ADC_ConfigChannel+0x238>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d109      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1cc>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2b12      	cmp	r3, #18
 800166a:	d105      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a19      	ldr	r2, [pc, #100]	; (80016e4 <HAL_ADC_ConfigChannel+0x238>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d123      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x21e>
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b10      	cmp	r3, #16
 8001688:	d003      	beq.n	8001692 <HAL_ADC_ConfigChannel+0x1e6>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b11      	cmp	r3, #17
 8001690:	d11b      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d111      	bne.n	80016ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <HAL_ADC_ConfigChannel+0x23c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a10      	ldr	r2, [pc, #64]	; (80016ec <HAL_ADC_ConfigChannel+0x240>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9a      	lsrs	r2, r3, #18
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	40012300 	.word	0x40012300
 80016e4:	40012000 	.word	0x40012000
 80016e8:	20000004 	.word	0x20000004
 80016ec:	431bde83 	.word	0x431bde83

080016f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f8:	4b79      	ldr	r3, [pc, #484]	; (80018e0 <ADC_Init+0x1f0>)
 80016fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	431a      	orrs	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001724:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	021a      	lsls	r2, r3, #8
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001748:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800176a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <ADC_Init+0x1f4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d022      	beq.n	80017ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001796:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6899      	ldr	r1, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6899      	ldr	r1, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	e00f      	b.n	80017ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0202 	bic.w	r2, r2, #2
 80017fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6899      	ldr	r1, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7e1b      	ldrb	r3, [r3, #24]
 8001808:	005a      	lsls	r2, r3, #1
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d01b      	beq.n	8001854 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800182a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800183a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6859      	ldr	r1, [r3, #4]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	3b01      	subs	r3, #1
 8001848:	035a      	lsls	r2, r3, #13
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	e007      	b.n	8001864 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001862:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	3b01      	subs	r3, #1
 8001880:	051a      	lsls	r2, r3, #20
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001898:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6899      	ldr	r1, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a6:	025a      	lsls	r2, r3, #9
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6899      	ldr	r1, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	029a      	lsls	r2, r3, #10
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	609a      	str	r2, [r3, #8]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40012300 	.word	0x40012300
 80018e4:	0f000001 	.word	0x0f000001

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4907      	ldr	r1, [pc, #28]	; (8001984 <__NVIC_EnableIRQ+0x38>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e100 	.word	0xe000e100

08001988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	2b00      	cmp	r3, #0
 800199a:	db0a      	blt.n	80019b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	490c      	ldr	r1, [pc, #48]	; (80019d4 <__NVIC_SetPriority+0x4c>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	440b      	add	r3, r1
 80019ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b0:	e00a      	b.n	80019c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4908      	ldr	r1, [pc, #32]	; (80019d8 <__NVIC_SetPriority+0x50>)
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	3b04      	subs	r3, #4
 80019c0:	0112      	lsls	r2, r2, #4
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	440b      	add	r3, r1
 80019c6:	761a      	strb	r2, [r3, #24]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000e100 	.word	0xe000e100
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f1c3 0307 	rsb	r3, r3, #7
 80019f6:	2b04      	cmp	r3, #4
 80019f8:	bf28      	it	cs
 80019fa:	2304      	movcs	r3, #4
 80019fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3304      	adds	r3, #4
 8001a02:	2b06      	cmp	r3, #6
 8001a04:	d902      	bls.n	8001a0c <NVIC_EncodePriority+0x30>
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3b03      	subs	r3, #3
 8001a0a:	e000      	b.n	8001a0e <NVIC_EncodePriority+0x32>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a10:	f04f 32ff 	mov.w	r2, #4294967295
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a24:	f04f 31ff 	mov.w	r1, #4294967295
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43d9      	mvns	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	4313      	orrs	r3, r2
         );
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff8e 	bl	8001988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff29 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff3e 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff8e 	bl	80019dc <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5d 	bl	8001988 <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff31 	bl	800194c <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
	...

08001b0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff fc54 	bl	80013c4 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e099      	b.n	8001c5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b48:	e00f      	b.n	8001b6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b4a:	f7ff fc3b 	bl	80013c4 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d908      	bls.n	8001b6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2203      	movs	r2, #3
 8001b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e078      	b.n	8001c5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1e8      	bne.n	8001b4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_DMA_Init+0x158>)
 8001b84:	4013      	ands	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ba2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2b04      	cmp	r3, #4
 8001bc2:	d107      	bne.n	8001bd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f023 0307 	bic.w	r3, r3, #7
 8001bea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	2b04      	cmp	r3, #4
 8001bfc:	d117      	bne.n	8001c2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00e      	beq.n	8001c2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 fa6f 	bl	80020f4 <DMA_CheckFifoParam>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d008      	beq.n	8001c2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2240      	movs	r2, #64	; 0x40
 8001c20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e016      	b.n	8001c5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa26 	bl	8002088 <DMA_CalcBaseAndBitshift>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c44:	223f      	movs	r2, #63	; 0x3f
 8001c46:	409a      	lsls	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	f010803f 	.word	0xf010803f

08001c68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_DMA_Start_IT+0x26>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e040      	b.n	8001d10 <HAL_DMA_Start_IT+0xa8>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d12f      	bne.n	8001d02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f9b8 	bl	800202c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	223f      	movs	r2, #63	; 0x3f
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0216 	orr.w	r2, r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0208 	orr.w	r2, r2, #8
 8001cee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	e005      	b.n	8001d0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d24:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <HAL_DMA_IRQHandler+0x248>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a8e      	ldr	r2, [pc, #568]	; (8001f64 <HAL_DMA_IRQHandler+0x24c>)
 8001d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2e:	0a9b      	lsrs	r3, r3, #10
 8001d30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	2208      	movs	r2, #8
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d01a      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 0204 	bic.w	r2, r2, #4
 8001d6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d70:	2208      	movs	r2, #8
 8001d72:	409a      	lsls	r2, r3
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d88:	2201      	movs	r2, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d012      	beq.n	8001dba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2201      	movs	r2, #1
 8001da8:	409a      	lsls	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	f043 0202 	orr.w	r2, r3, #2
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d012      	beq.n	8001df0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00b      	beq.n	8001df0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ddc:	2204      	movs	r2, #4
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f043 0204 	orr.w	r2, r3, #4
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	2210      	movs	r2, #16
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d043      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d03c      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2210      	movs	r2, #16
 8001e14:	409a      	lsls	r2, r3
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d018      	beq.n	8001e5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d108      	bne.n	8001e48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d024      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	4798      	blx	r3
 8001e46:	e01f      	b.n	8001e88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d01b      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	4798      	blx	r3
 8001e58:	e016      	b.n	8001e88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0208 	bic.w	r2, r2, #8
 8001e76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 808f 	beq.w	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0310 	and.w	r3, r3, #16
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8087 	beq.w	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2220      	movs	r2, #32
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b05      	cmp	r3, #5
 8001ec0:	d136      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0216 	bic.w	r2, r2, #22
 8001ed0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d103      	bne.n	8001ef2 <HAL_DMA_IRQHandler+0x1da>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d007      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0208 	bic.w	r2, r2, #8
 8001f00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	223f      	movs	r2, #63	; 0x3f
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d07e      	beq.n	8002024 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
        }
        return;
 8001f2e:	e079      	b.n	8002024 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01d      	beq.n	8001f7a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10d      	bne.n	8001f68 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d031      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e02c      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
 8001f5e:	bf00      	nop
 8001f60:	20000004 	.word	0x20000004
 8001f64:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	4798      	blx	r3
 8001f78:	e01e      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10f      	bne.n	8001fa8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0210 	bic.w	r2, r2, #16
 8001f96:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d032      	beq.n	8002026 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d022      	beq.n	8002012 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2205      	movs	r2, #5
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0201 	bic.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d307      	bcc.n	8002000 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f2      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x2cc>
 8001ffe:	e000      	b.n	8002002 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002000:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
 8002022:	e000      	b.n	8002026 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002024:	bf00      	nop
    }
  }
}
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002048:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b40      	cmp	r3, #64	; 0x40
 8002058:	d108      	bne.n	800206c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800206a:	e007      	b.n	800207c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	60da      	str	r2, [r3, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3b10      	subs	r3, #16
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <DMA_CalcBaseAndBitshift+0x64>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	091b      	lsrs	r3, r3, #4
 80020a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020a2:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <DMA_CalcBaseAndBitshift+0x68>)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d909      	bls.n	80020ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020be:	f023 0303 	bic.w	r3, r3, #3
 80020c2:	1d1a      	adds	r2, r3, #4
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	659a      	str	r2, [r3, #88]	; 0x58
 80020c8:	e007      	b.n	80020da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020d2:	f023 0303 	bic.w	r3, r3, #3
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	aaaaaaab 	.word	0xaaaaaaab
 80020f0:	0800a184 	.word	0x0800a184

080020f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d11f      	bne.n	800214e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d856      	bhi.n	80021c2 <DMA_CheckFifoParam+0xce>
 8002114:	a201      	add	r2, pc, #4	; (adr r2, 800211c <DMA_CheckFifoParam+0x28>)
 8002116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211a:	bf00      	nop
 800211c:	0800212d 	.word	0x0800212d
 8002120:	0800213f 	.word	0x0800213f
 8002124:	0800212d 	.word	0x0800212d
 8002128:	080021c3 	.word	0x080021c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d046      	beq.n	80021c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213c:	e043      	b.n	80021c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002146:	d140      	bne.n	80021ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214c:	e03d      	b.n	80021ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002156:	d121      	bne.n	800219c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d837      	bhi.n	80021ce <DMA_CheckFifoParam+0xda>
 800215e:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <DMA_CheckFifoParam+0x70>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	08002175 	.word	0x08002175
 8002168:	0800217b 	.word	0x0800217b
 800216c:	08002175 	.word	0x08002175
 8002170:	0800218d 	.word	0x0800218d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	73fb      	strb	r3, [r7, #15]
      break;
 8002178:	e030      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d025      	beq.n	80021d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800218a:	e022      	b.n	80021d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002190:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002194:	d11f      	bne.n	80021d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800219a:	e01c      	b.n	80021d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d903      	bls.n	80021aa <DMA_CheckFifoParam+0xb6>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d003      	beq.n	80021b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021a8:	e018      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	73fb      	strb	r3, [r7, #15]
      break;
 80021ae:	e015      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00e      	beq.n	80021da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      break;
 80021c0:	e00b      	b.n	80021da <DMA_CheckFifoParam+0xe6>
      break;
 80021c2:	bf00      	nop
 80021c4:	e00a      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e008      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e006      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021ce:	bf00      	nop
 80021d0:	e004      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
 80021d4:	e002      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;   
 80021d6:	bf00      	nop
 80021d8:	e000      	b.n	80021dc <DMA_CheckFifoParam+0xe8>
      break;
 80021da:	bf00      	nop
    }
  } 
  
  return status; 
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	e16b      	b.n	80024e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002208:	2201      	movs	r2, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	429a      	cmp	r2, r3
 8002222:	f040 815a 	bne.w	80024da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800223a:	2b02      	cmp	r3, #2
 800223c:	d130      	bne.n	80022a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	2203      	movs	r2, #3
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002274:	2201      	movs	r2, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	091b      	lsrs	r3, r3, #4
 800228a:	f003 0201 	and.w	r2, r3, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d017      	beq.n	80022dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	2203      	movs	r2, #3
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d123      	bne.n	8002330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	08da      	lsrs	r2, r3, #3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3208      	adds	r2, #8
 80022f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	220f      	movs	r2, #15
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	08da      	lsrs	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3208      	adds	r2, #8
 800232a:	69b9      	ldr	r1, [r7, #24]
 800232c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0203 	and.w	r2, r3, #3
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80b4 	beq.w	80024da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b60      	ldr	r3, [pc, #384]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a5f      	ldr	r2, [pc, #380]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800238e:	4a5b      	ldr	r2, [pc, #364]	; (80024fc <HAL_GPIO_Init+0x310>)
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	089b      	lsrs	r3, r3, #2
 8002394:	3302      	adds	r3, #2
 8002396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a52      	ldr	r2, [pc, #328]	; (8002500 <HAL_GPIO_Init+0x314>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d02b      	beq.n	8002412 <HAL_GPIO_Init+0x226>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a51      	ldr	r2, [pc, #324]	; (8002504 <HAL_GPIO_Init+0x318>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x222>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a50      	ldr	r2, [pc, #320]	; (8002508 <HAL_GPIO_Init+0x31c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x21e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4f      	ldr	r2, [pc, #316]	; (800250c <HAL_GPIO_Init+0x320>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x21a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4e      	ldr	r2, [pc, #312]	; (8002510 <HAL_GPIO_Init+0x324>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x216>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4d      	ldr	r2, [pc, #308]	; (8002514 <HAL_GPIO_Init+0x328>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x212>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <HAL_GPIO_Init+0x32c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x20e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_GPIO_Init+0x330>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x20a>
 80023f2:	2307      	movs	r3, #7
 80023f4:	e00e      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023f6:	2308      	movs	r3, #8
 80023f8:	e00c      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fa:	2306      	movs	r3, #6
 80023fc:	e00a      	b.n	8002414 <HAL_GPIO_Init+0x228>
 80023fe:	2305      	movs	r3, #5
 8002400:	e008      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002402:	2304      	movs	r3, #4
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002406:	2303      	movs	r3, #3
 8002408:	e004      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240a:	2302      	movs	r3, #2
 800240c:	e002      	b.n	8002414 <HAL_GPIO_Init+0x228>
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <HAL_GPIO_Init+0x228>
 8002412:	2300      	movs	r3, #0
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	f002 0203 	and.w	r2, r2, #3
 800241a:	0092      	lsls	r2, r2, #2
 800241c:	4093      	lsls	r3, r2
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002424:	4935      	ldr	r1, [pc, #212]	; (80024fc <HAL_GPIO_Init+0x310>)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	089b      	lsrs	r3, r3, #2
 800242a:	3302      	adds	r3, #2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002456:	4a32      	ldr	r2, [pc, #200]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <HAL_GPIO_Init+0x334>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	43db      	mvns	r3, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4013      	ands	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002480:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002486:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HAL_GPIO_Init+0x334>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024aa:	4a1d      	ldr	r2, [pc, #116]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <HAL_GPIO_Init+0x334>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	f67f ae90 	bls.w	8002208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e8:	bf00      	nop
 80024ea:	bf00      	nop
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40013800 	.word	0x40013800
 8002500:	40020000 	.word	0x40020000
 8002504:	40020400 	.word	0x40020400
 8002508:	40020800 	.word	0x40020800
 800250c:	40020c00 	.word	0x40020c00
 8002510:	40021000 	.word	0x40021000
 8002514:	40021400 	.word	0x40021400
 8002518:	40021800 	.word	0x40021800
 800251c:	40021c00 	.word	0x40021c00
 8002520:	40013c00 	.word	0x40013c00

08002524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
 8002530:	4613      	mov	r3, r2
 8002532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002534:	787b      	ldrb	r3, [r7, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253a:	887a      	ldrh	r2, [r7, #2]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002540:	e003      	b.n	800254a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002542:	887b      	ldrh	r3, [r7, #2]
 8002544:	041a      	lsls	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	619a      	str	r2, [r3, #24]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002558:	b08f      	sub	sp, #60	; 0x3c
 800255a:	af0a      	add	r7, sp, #40	; 0x28
 800255c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e054      	b.n	8002612 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d106      	bne.n	8002588 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f007 f9fa 	bl	800997c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2203      	movs	r2, #3
 800258c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fa28 	bl	80069fc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	687e      	ldr	r6, [r7, #4]
 80025b4:	466d      	mov	r5, sp
 80025b6:	f106 0410 	add.w	r4, r6, #16
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ca:	1d33      	adds	r3, r6, #4
 80025cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ce:	6838      	ldr	r0, [r7, #0]
 80025d0:	f004 f9a2 	bl	8006918 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2101      	movs	r1, #1
 80025da:	4618      	mov	r0, r3
 80025dc:	f004 fa1f 	bl	8006a1e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	687e      	ldr	r6, [r7, #4]
 80025e8:	466d      	mov	r5, sp
 80025ea:	f106 0410 	add.w	r4, r6, #16
 80025ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80025fe:	1d33      	adds	r3, r6, #4
 8002600:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002602:	6838      	ldr	r0, [r7, #0]
 8002604:	f004 fba8 	bl	8006d58 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800261a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800261a:	b590      	push	{r4, r7, lr}
 800261c:	b089      	sub	sp, #36	; 0x24
 800261e:	af04      	add	r7, sp, #16
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	461a      	mov	r2, r3
 8002628:	4603      	mov	r3, r0
 800262a:	70fb      	strb	r3, [r7, #3]
 800262c:	460b      	mov	r3, r1
 800262e:	70bb      	strb	r3, [r7, #2]
 8002630:	4613      	mov	r3, r2
 8002632:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_HCD_HC_Init+0x28>
 800263e:	2302      	movs	r3, #2
 8002640:	e076      	b.n	8002730 <HAL_HCD_HC_Init+0x116>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	333d      	adds	r3, #61	; 0x3d
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800265c:	78fb      	ldrb	r3, [r7, #3]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	3338      	adds	r3, #56	; 0x38
 800266a:	787a      	ldrb	r2, [r7, #1]
 800266c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800266e:	78fb      	ldrb	r3, [r7, #3]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3340      	adds	r3, #64	; 0x40
 800267c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800267e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3339      	adds	r3, #57	; 0x39
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	333f      	adds	r3, #63	; 0x3f
 80026a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80026a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026a6:	78fb      	ldrb	r3, [r7, #3]
 80026a8:	78ba      	ldrb	r2, [r7, #2]
 80026aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ae:	b2d0      	uxtb	r0, r2
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	333a      	adds	r3, #58	; 0x3a
 80026bc:	4602      	mov	r2, r0
 80026be:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80026c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da09      	bge.n	80026dc <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	333b      	adds	r3, #59	; 0x3b
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e008      	b.n	80026ee <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	333b      	adds	r3, #59	; 0x3b
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80026ee:	78fb      	ldrb	r3, [r7, #3]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	333c      	adds	r3, #60	; 0x3c
 80026fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002700:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	787c      	ldrb	r4, [r7, #1]
 8002708:	78ba      	ldrb	r2, [r7, #2]
 800270a:	78f9      	ldrb	r1, [r7, #3]
 800270c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800270e:	9302      	str	r3, [sp, #8]
 8002710:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	f897 3020 	ldrb.w	r3, [r7, #32]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4623      	mov	r3, r4
 800271e:	f004 fca1 	bl	8007064 <USB_HC_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	bd90      	pop	{r4, r7, pc}

08002738 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_HCD_HC_Halt+0x1e>
 8002752:	2302      	movs	r3, #2
 8002754:	e00f      	b.n	8002776 <HAL_HCD_HC_Halt+0x3e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f004 fef1 	bl	800754e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002774:	7bfb      	ldrb	r3, [r7, #15]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	461a      	mov	r2, r3
 800278e:	4603      	mov	r3, r0
 8002790:	70fb      	strb	r3, [r7, #3]
 8002792:	460b      	mov	r3, r1
 8002794:	70bb      	strb	r3, [r7, #2]
 8002796:	4613      	mov	r3, r2
 8002798:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800279a:	78fb      	ldrb	r3, [r7, #3]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	333b      	adds	r3, #59	; 0x3b
 80027a8:	78ba      	ldrb	r2, [r7, #2]
 80027aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	212c      	movs	r1, #44	; 0x2c
 80027b2:	fb01 f303 	mul.w	r3, r1, r3
 80027b6:	4413      	add	r3, r2
 80027b8:	333f      	adds	r3, #63	; 0x3f
 80027ba:	787a      	ldrb	r2, [r7, #1]
 80027bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80027be:	7c3b      	ldrb	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d112      	bne.n	80027ea <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3342      	adds	r3, #66	; 0x42
 80027d2:	2203      	movs	r2, #3
 80027d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333d      	adds	r3, #61	; 0x3d
 80027e4:	7f3a      	ldrb	r2, [r7, #28]
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e008      	b.n	80027fc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3342      	adds	r3, #66	; 0x42
 80027f8:	2202      	movs	r2, #2
 80027fa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b03      	cmp	r3, #3
 8002800:	f200 80c6 	bhi.w	8002990 <HAL_HCD_HC_SubmitRequest+0x210>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	0800281d 	.word	0x0800281d
 8002810:	0800297d 	.word	0x0800297d
 8002814:	08002881 	.word	0x08002881
 8002818:	080028ff 	.word	0x080028ff
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800281c:	7c3b      	ldrb	r3, [r7, #16]
 800281e:	2b01      	cmp	r3, #1
 8002820:	f040 80b8 	bne.w	8002994 <HAL_HCD_HC_SubmitRequest+0x214>
 8002824:	78bb      	ldrb	r3, [r7, #2]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 80b4 	bne.w	8002994 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800282c:	8b3b      	ldrh	r3, [r7, #24]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d108      	bne.n	8002844 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3355      	adds	r3, #85	; 0x55
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	3355      	adds	r3, #85	; 0x55
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	212c      	movs	r1, #44	; 0x2c
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	3342      	adds	r3, #66	; 0x42
 8002866:	2200      	movs	r2, #0
 8002868:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800286a:	e093      	b.n	8002994 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3342      	adds	r3, #66	; 0x42
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
      break;
 800287e:	e089      	b.n	8002994 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002880:	78bb      	ldrb	r3, [r7, #2]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d11d      	bne.n	80028c2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	3355      	adds	r3, #85	; 0x55
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	3342      	adds	r3, #66	; 0x42
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80028ac:	e073      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3342      	adds	r3, #66	; 0x42
 80028bc:	2202      	movs	r2, #2
 80028be:	701a      	strb	r2, [r3, #0]
      break;
 80028c0:	e069      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3354      	adds	r3, #84	; 0x54
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	3342      	adds	r3, #66	; 0x42
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
      break;
 80028e8:	e055      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ea:	78fb      	ldrb	r3, [r7, #3]
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	212c      	movs	r1, #44	; 0x2c
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3342      	adds	r3, #66	; 0x42
 80028f8:	2202      	movs	r2, #2
 80028fa:	701a      	strb	r2, [r3, #0]
      break;
 80028fc:	e04b      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80028fe:	78bb      	ldrb	r3, [r7, #2]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d11d      	bne.n	8002940 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3355      	adds	r3, #85	; 0x55
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	212c      	movs	r1, #44	; 0x2c
 800291e:	fb01 f303 	mul.w	r3, r1, r3
 8002922:	4413      	add	r3, r2
 8002924:	3342      	adds	r3, #66	; 0x42
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800292a:	e034      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	212c      	movs	r1, #44	; 0x2c
 8002932:	fb01 f303 	mul.w	r3, r1, r3
 8002936:	4413      	add	r3, r2
 8002938:	3342      	adds	r3, #66	; 0x42
 800293a:	2202      	movs	r2, #2
 800293c:	701a      	strb	r2, [r3, #0]
      break;
 800293e:	e02a      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3354      	adds	r3, #84	; 0x54
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3342      	adds	r3, #66	; 0x42
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
      break;
 8002966:	e016      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	212c      	movs	r1, #44	; 0x2c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	3342      	adds	r3, #66	; 0x42
 8002976:	2202      	movs	r2, #2
 8002978:	701a      	strb	r2, [r3, #0]
      break;
 800297a:	e00c      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	212c      	movs	r1, #44	; 0x2c
 8002982:	fb01 f303 	mul.w	r3, r1, r3
 8002986:	4413      	add	r3, r2
 8002988:	3342      	adds	r3, #66	; 0x42
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
      break;
 800298e:	e002      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002994:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3344      	adds	r3, #68	; 0x44
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	8b3a      	ldrh	r2, [r7, #24]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	202c      	movs	r0, #44	; 0x2c
 80029b0:	fb00 f303 	mul.w	r3, r0, r3
 80029b4:	440b      	add	r3, r1
 80029b6:	334c      	adds	r3, #76	; 0x4c
 80029b8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3360      	adds	r3, #96	; 0x60
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	212c      	movs	r1, #44	; 0x2c
 80029d2:	fb01 f303 	mul.w	r3, r1, r3
 80029d6:	4413      	add	r3, r2
 80029d8:	3350      	adds	r3, #80	; 0x50
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3339      	adds	r3, #57	; 0x39
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3361      	adds	r3, #97	; 0x61
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	222c      	movs	r2, #44	; 0x2c
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	3338      	adds	r3, #56	; 0x38
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	18d1      	adds	r1, r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	f004 fc44 	bl	80072a8 <USB_HC_StartXfer>
 8002a20:	4603      	mov	r3, r0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop

08002a2c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 f945 	bl	8006cd2 <USB_GetMode>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	f040 80f6 	bne.w	8002c3c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 f929 	bl	8006cac <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80ec 	beq.w	8002c3a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 f920 	bl	8006cac <USB_ReadInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a76:	d104      	bne.n	8002a82 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 f910 	bl	8006cac <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a96:	d104      	bne.n	8002aa2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002aa0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 f900 	bl	8006cac <USB_ReadInterrupts>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab6:	d104      	bne.n	8002ac2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ac0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 f8f0 	bl	8006cac <USB_ReadInterrupts>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d103      	bne.n	8002ade <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2202      	movs	r2, #2
 8002adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f004 f8e2 	bl	8006cac <USB_ReadInterrupts>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af2:	d11c      	bne.n	8002b2e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002afc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002b0e:	2110      	movs	r1, #16
 8002b10:	6938      	ldr	r0, [r7, #16]
 8002b12:	f003 ffd1 	bl	8006ab8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002b16:	6938      	ldr	r0, [r7, #16]
 8002b18:	f004 f802 	bl	8006b20 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2101      	movs	r1, #1
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 f9d8 	bl	8006ed8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f006 ffa5 	bl	8009a78 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f004 f8ba 	bl	8006cac <USB_ReadInterrupts>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b42:	d102      	bne.n	8002b4a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f001 f89e 	bl	8003c86 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f004 f8ac 	bl	8006cac <USB_ReadInterrupts>
 8002b54:	4603      	mov	r3, r0
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d106      	bne.n	8002b6c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f006 ff6e 	bl	8009a40 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2208      	movs	r2, #8
 8002b6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 f89b 	bl	8006cac <USB_ReadInterrupts>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d101      	bne.n	8002b84 <HAL_HCD_IRQHandler+0x158>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <HAL_HCD_IRQHandler+0x15a>
 8002b84:	2300      	movs	r3, #0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d012      	beq.n	8002bb0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699a      	ldr	r2, [r3, #24]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0210 	bic.w	r2, r2, #16
 8002b98:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 ffa1 	bl	8003ae2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699a      	ldr	r2, [r3, #24]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0210 	orr.w	r2, r2, #16
 8002bae:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f004 f879 	bl	8006cac <USB_ReadInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bc4:	d13a      	bne.n	8002c3c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 fcae 	bl	800752c <USB_HC_ReadInterrupt>
 8002bd0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e025      	b.n	8002c24 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d018      	beq.n	8002c1e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c02:	d106      	bne.n	8002c12 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f8ab 	bl	8002d66 <HCD_HC_IN_IRQHandler>
 8002c10:	e005      	b.n	8002c1e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	4619      	mov	r1, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 fbf9 	bl	8003410 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	3301      	adds	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d3d4      	bcc.n	8002bd8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c36:	615a      	str	r2, [r3, #20]
 8002c38:	e000      	b.n	8002c3c <HAL_HCD_IRQHandler+0x210>
      return;
 8002c3a:	bf00      	nop
    }
  }
}
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_HCD_Start+0x16>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e013      	b.n	8002c80 <HAL_HCD_Start+0x3e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f004 f99a 	bl	8006fa0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 feb2 	bl	80069da <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_HCD_Stop+0x16>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e00d      	b.n	8002cba <HAL_HCD_Stop+0x32>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f004 fd88 	bl	80077c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 f93c 	bl	8006f4c <USB_ResetPort>
 8002cd4:	4603      	mov	r3, r0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b083      	sub	sp, #12
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3360      	adds	r3, #96	; 0x60
 8002cf8:	781b      	ldrb	r3, [r3, #0]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002d12:	78fb      	ldrb	r3, [r7, #3]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3350      	adds	r3, #80	; 0x50
 8002d20:	681b      	ldr	r3, [r3, #0]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 f980 	bl	8007040 <USB_GetCurrentFrame>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f004 f95b 	bl	8007012 <USB_GetHostSpeed>
 8002d5c:	4603      	mov	r3, r0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d11a      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2304      	movs	r3, #4
 8002da6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3361      	adds	r3, #97	; 0x61
 8002db6:	2206      	movs	r2, #6
 8002db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f004 fbc2 	bl	800754e <USB_HC_Halt>
 8002dca:	e0af      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002de2:	d11b      	bne.n	8002e1c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	461a      	mov	r2, r3
 8002df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	2207      	movs	r2, #7
 8002e08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f004 fb9a 	bl	800754e <USB_HC_Halt>
 8002e1a:	e087      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b20      	cmp	r3, #32
 8002e30:	d109      	bne.n	8002e46 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2320      	movs	r3, #32
 8002e42:	6093      	str	r3, [r2, #8]
 8002e44:	e072      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d11a      	bne.n	8002e92 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e68:	461a      	mov	r2, r3
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3361      	adds	r3, #97	; 0x61
 8002e7c:	2205      	movs	r2, #5
 8002e7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fb5f 	bl	800754e <USB_HC_Halt>
 8002e90:	e04c      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea8:	d11b      	bne.n	8002ee2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3361      	adds	r3, #97	; 0x61
 8002ecc:	2208      	movs	r2, #8
 8002ece:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f004 fb37 	bl	800754e <USB_HC_Halt>
 8002ee0:	e024      	b.n	8002f2c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	015a      	lsls	r2, r3, #5
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	4413      	add	r3, r2
 8002eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b80      	cmp	r3, #128	; 0x80
 8002ef6:	d119      	bne.n	8002f2c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	212c      	movs	r1, #44	; 0x2c
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	3361      	adds	r3, #97	; 0x61
 8002f18:	2206      	movs	r2, #6
 8002f1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 fb11 	bl	800754e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f42:	d112      	bne.n	8002f6a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f004 fafd 	bl	800754e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f66:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f68:	e24e      	b.n	8003408 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	f040 80df 	bne.w	8003140 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d019      	beq.n	8002fbe <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	3348      	adds	r3, #72	; 0x48
 8002f98:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	0159      	lsls	r1, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	440b      	add	r3, r1
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fac:	1ad2      	subs	r2, r2, r3
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	202c      	movs	r0, #44	; 0x2c
 8002fb4:	fb00 f303 	mul.w	r3, r0, r3
 8002fb8:	440b      	add	r3, r1
 8002fba:	3350      	adds	r3, #80	; 0x50
 8002fbc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	212c      	movs	r1, #44	; 0x2c
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	4413      	add	r3, r2
 8002fca:	3361      	adds	r3, #97	; 0x61
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	335c      	adds	r3, #92	; 0x5c
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	212c      	movs	r1, #44	; 0x2c
 8002ffa:	fb01 f303 	mul.w	r3, r1, r3
 8002ffe:	4413      	add	r3, r2
 8003000:	333f      	adds	r3, #63	; 0x3f
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	333f      	adds	r3, #63	; 0x3f
 8003016:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003018:	2b02      	cmp	r3, #2
 800301a:	d111      	bne.n	8003040 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f004 fa91 	bl	800754e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	461a      	mov	r2, r3
 800303a:	2310      	movs	r3, #16
 800303c:	6093      	str	r3, [r2, #8]
 800303e:	e03a      	b.n	80030b6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	212c      	movs	r1, #44	; 0x2c
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	333f      	adds	r3, #63	; 0x3f
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d009      	beq.n	8003068 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	333f      	adds	r3, #63	; 0x3f
 8003062:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003064:	2b01      	cmp	r3, #1
 8003066:	d126      	bne.n	80030b6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	0151      	lsls	r1, r2, #5
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	440a      	add	r2, r1
 800307e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003086:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3360      	adds	r3, #96	; 0x60
 8003096:	2201      	movs	r2, #1
 8003098:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	b2d9      	uxtb	r1, r3
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	202c      	movs	r0, #44	; 0x2c
 80030a4:	fb00 f303 	mul.w	r3, r0, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3360      	adds	r3, #96	; 0x60
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f006 fcef 	bl	8009a94 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d12b      	bne.n	8003116 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	3348      	adds	r3, #72	; 0x48
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	202c      	movs	r0, #44	; 0x2c
 80030d4:	fb00 f202 	mul.w	r2, r0, r2
 80030d8:	440a      	add	r2, r1
 80030da:	3240      	adds	r2, #64	; 0x40
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	fbb3 f3f2 	udiv	r3, r3, r2
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 818e 	beq.w	8003408 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3354      	adds	r3, #84	; 0x54
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	f083 0301 	eor.w	r3, r3, #1
 8003100:	b2d8      	uxtb	r0, r3
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3354      	adds	r3, #84	; 0x54
 8003110:	4602      	mov	r2, r0
 8003112:	701a      	strb	r2, [r3, #0]
}
 8003114:	e178      	b.n	8003408 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3354      	adds	r3, #84	; 0x54
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	f083 0301 	eor.w	r3, r3, #1
 800312a:	b2d8      	uxtb	r0, r3
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	3354      	adds	r3, #84	; 0x54
 800313a:	4602      	mov	r2, r0
 800313c:	701a      	strb	r2, [r3, #0]
}
 800313e:	e163      	b.n	8003408 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	f040 80f6 	bne.w	8003344 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	3361      	adds	r3, #97	; 0x61
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d109      	bne.n	8003180 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3360      	adds	r3, #96	; 0x60
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
 800317e:	e0c9      	b.n	8003314 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3361      	adds	r3, #97	; 0x61
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b05      	cmp	r3, #5
 8003192:	d109      	bne.n	80031a8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	212c      	movs	r1, #44	; 0x2c
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	4413      	add	r3, r2
 80031a0:	3360      	adds	r3, #96	; 0x60
 80031a2:	2205      	movs	r2, #5
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e0b5      	b.n	8003314 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3361      	adds	r3, #97	; 0x61
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b06      	cmp	r3, #6
 80031ba:	d009      	beq.n	80031d0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3361      	adds	r3, #97	; 0x61
 80031ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d150      	bne.n	8003272 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	212c      	movs	r1, #44	; 0x2c
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	4413      	add	r3, r2
 80031dc:	335c      	adds	r3, #92	; 0x5c
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	202c      	movs	r0, #44	; 0x2c
 80031e8:	fb00 f303 	mul.w	r3, r0, r3
 80031ec:	440b      	add	r3, r1
 80031ee:	335c      	adds	r3, #92	; 0x5c
 80031f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	335c      	adds	r3, #92	; 0x5c
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d912      	bls.n	800322c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	212c      	movs	r1, #44	; 0x2c
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	335c      	adds	r3, #92	; 0x5c
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	3360      	adds	r3, #96	; 0x60
 8003226:	2204      	movs	r2, #4
 8003228:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800322a:	e073      	b.n	8003314 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	212c      	movs	r1, #44	; 0x2c
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	4413      	add	r3, r2
 8003238:	3360      	adds	r3, #96	; 0x60
 800323a:	2202      	movs	r2, #2
 800323c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003254:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800325c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	461a      	mov	r2, r3
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003270:	e050      	b.n	8003314 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3361      	adds	r3, #97	; 0x61
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d122      	bne.n	80032cc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3360      	adds	r3, #96	; 0x60
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	015a      	lsls	r2, r3, #5
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4413      	add	r3, r2
 80032a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e023      	b.n	8003314 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	212c      	movs	r1, #44	; 0x2c
 80032d2:	fb01 f303 	mul.w	r3, r1, r3
 80032d6:	4413      	add	r3, r2
 80032d8:	3361      	adds	r3, #97	; 0x61
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b07      	cmp	r3, #7
 80032de:	d119      	bne.n	8003314 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	212c      	movs	r1, #44	; 0x2c
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	335c      	adds	r3, #92	; 0x5c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	202c      	movs	r0, #44	; 0x2c
 80032f8:	fb00 f303 	mul.w	r3, r0, r3
 80032fc:	440b      	add	r3, r1
 80032fe:	335c      	adds	r3, #92	; 0x5c
 8003300:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	3360      	adds	r3, #96	; 0x60
 8003310:	2204      	movs	r2, #4
 8003312:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	461a      	mov	r2, r3
 8003322:	2302      	movs	r3, #2
 8003324:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	b2d9      	uxtb	r1, r3
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	202c      	movs	r0, #44	; 0x2c
 8003330:	fb00 f303 	mul.w	r3, r0, r3
 8003334:	4413      	add	r3, r2
 8003336:	3360      	adds	r3, #96	; 0x60
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f006 fba9 	bl	8009a94 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003342:	e061      	b.n	8003408 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4413      	add	r3, r2
 800334c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b10      	cmp	r3, #16
 8003358:	d156      	bne.n	8003408 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	333f      	adds	r3, #63	; 0x3f
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b03      	cmp	r3, #3
 800336c:	d111      	bne.n	8003392 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	212c      	movs	r1, #44	; 0x2c
 8003374:	fb01 f303 	mul.w	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	335c      	adds	r3, #92	; 0x5c
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f004 f8df 	bl	800754e <USB_HC_Halt>
 8003390:	e031      	b.n	80033f6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	333f      	adds	r3, #63	; 0x3f
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d009      	beq.n	80033ba <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	212c      	movs	r1, #44	; 0x2c
 80033ac:	fb01 f303 	mul.w	r3, r1, r3
 80033b0:	4413      	add	r3, r2
 80033b2:	333f      	adds	r3, #63	; 0x3f
 80033b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d11d      	bne.n	80033f6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	212c      	movs	r1, #44	; 0x2c
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	4413      	add	r3, r2
 80033c6:	335c      	adds	r3, #92	; 0x5c
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d110      	bne.n	80033f6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3361      	adds	r3, #97	; 0x61
 80033e2:	2203      	movs	r2, #3
 80033e4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 f8ac 	bl	800754e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003402:	461a      	mov	r2, r3
 8003404:	2310      	movs	r3, #16
 8003406:	6093      	str	r3, [r2, #8]
}
 8003408:	bf00      	nop
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b04      	cmp	r3, #4
 800343e:	d11a      	bne.n	8003476 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344c:	461a      	mov	r2, r3
 800344e:	2304      	movs	r3, #4
 8003450:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	212c      	movs	r1, #44	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	4413      	add	r3, r2
 800345e:	3361      	adds	r3, #97	; 0x61
 8003460:	2206      	movs	r2, #6
 8003462:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f004 f86d 	bl	800754e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003474:	e331      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b20      	cmp	r3, #32
 800348a:	d12e      	bne.n	80034ea <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	461a      	mov	r2, r3
 800349a:	2320      	movs	r3, #32
 800349c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	333d      	adds	r3, #61	; 0x3d
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	f040 8313 	bne.w	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	212c      	movs	r1, #44	; 0x2c
 80034ba:	fb01 f303 	mul.w	r3, r1, r3
 80034be:	4413      	add	r3, r2
 80034c0:	333d      	adds	r3, #61	; 0x3d
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	212c      	movs	r1, #44	; 0x2c
 80034cc:	fb01 f303 	mul.w	r3, r1, r3
 80034d0:	4413      	add	r3, r2
 80034d2:	3360      	adds	r3, #96	; 0x60
 80034d4:	2202      	movs	r2, #2
 80034d6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f004 f833 	bl	800754e <USB_HC_Halt>
}
 80034e8:	e2f7      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d112      	bne.n	8003528 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350e:	461a      	mov	r2, r3
 8003510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003514:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f004 f814 	bl	800754e <USB_HC_Halt>
}
 8003526:	e2d8      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d140      	bne.n	80035c0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	335c      	adds	r3, #92	; 0x5c
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d111      	bne.n	800358a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	212c      	movs	r1, #44	; 0x2c
 800356c:	fb01 f303 	mul.w	r3, r1, r3
 8003570:	4413      	add	r3, r2
 8003572:	333d      	adds	r3, #61	; 0x3d
 8003574:	2201      	movs	r2, #1
 8003576:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	461a      	mov	r2, r3
 8003598:	2301      	movs	r3, #1
 800359a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	212c      	movs	r1, #44	; 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	3361      	adds	r3, #97	; 0x61
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	4611      	mov	r1, r2
 80035b8:	4618      	mov	r0, r3
 80035ba:	f003 ffc8 	bl	800754e <USB_HC_Halt>
}
 80035be:	e28c      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d12c      	bne.n	8003630 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	212c      	movs	r1, #44	; 0x2c
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	3361      	adds	r3, #97	; 0x61
 80035e4:	2204      	movs	r2, #4
 80035e6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	212c      	movs	r1, #44	; 0x2c
 80035ee:	fb01 f303 	mul.w	r3, r1, r3
 80035f2:	4413      	add	r3, r2
 80035f4:	333d      	adds	r3, #61	; 0x3d
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	212c      	movs	r1, #44	; 0x2c
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4413      	add	r3, r2
 8003606:	335c      	adds	r3, #92	; 0x5c
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f003 ff99 	bl	800754e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	2340      	movs	r3, #64	; 0x40
 800362c:	6093      	str	r3, [r2, #8]
}
 800362e:	e254      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	d11a      	bne.n	800367c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	2308      	movs	r3, #8
 8003656:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3361      	adds	r3, #97	; 0x61
 8003666:	2205      	movs	r2, #5
 8003668:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f003 ff6a 	bl	800754e <USB_HC_Halt>
}
 800367a:	e22e      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 0310 	and.w	r3, r3, #16
 800368e:	2b10      	cmp	r3, #16
 8003690:	d140      	bne.n	8003714 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	212c      	movs	r1, #44	; 0x2c
 8003698:	fb01 f303 	mul.w	r3, r1, r3
 800369c:	4413      	add	r3, r2
 800369e:	335c      	adds	r3, #92	; 0x5c
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3361      	adds	r3, #97	; 0x61
 80036b2:	2203      	movs	r2, #3
 80036b4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	333d      	adds	r3, #61	; 0x3d
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d112      	bne.n	80036f0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	212c      	movs	r1, #44	; 0x2c
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	4413      	add	r3, r2
 80036d6:	333c      	adds	r3, #60	; 0x3c
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	333d      	adds	r3, #61	; 0x3d
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 ff27 	bl	800754e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	2310      	movs	r3, #16
 8003710:	6093      	str	r3, [r2, #8]
}
 8003712:	e1e2      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	2b80      	cmp	r3, #128	; 0x80
 8003728:	d164      	bne.n	80037f4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d111      	bne.n	8003756 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	212c      	movs	r1, #44	; 0x2c
 8003738:	fb01 f303 	mul.w	r3, r1, r3
 800373c:	4413      	add	r3, r2
 800373e:	3361      	adds	r3, #97	; 0x61
 8003740:	2206      	movs	r2, #6
 8003742:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f003 fefd 	bl	800754e <USB_HC_Halt>
 8003754:	e044      	b.n	80037e0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	335c      	adds	r3, #92	; 0x5c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	202c      	movs	r0, #44	; 0x2c
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	440b      	add	r3, r1
 8003774:	335c      	adds	r3, #92	; 0x5c
 8003776:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	335c      	adds	r3, #92	; 0x5c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b02      	cmp	r3, #2
 800378a:	d920      	bls.n	80037ce <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	335c      	adds	r3, #92	; 0x5c
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	3360      	adds	r3, #96	; 0x60
 80037ac:	2204      	movs	r2, #4
 80037ae:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	b2d9      	uxtb	r1, r3
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	202c      	movs	r0, #44	; 0x2c
 80037ba:	fb00 f303 	mul.w	r3, r0, r3
 80037be:	4413      	add	r3, r2
 80037c0:	3360      	adds	r3, #96	; 0x60
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	461a      	mov	r2, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f006 f964 	bl	8009a94 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037cc:	e008      	b.n	80037e0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	212c      	movs	r1, #44	; 0x2c
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	4413      	add	r3, r2
 80037da:	3360      	adds	r3, #96	; 0x60
 80037dc:	2202      	movs	r2, #2
 80037de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ec:	461a      	mov	r2, r3
 80037ee:	2380      	movs	r3, #128	; 0x80
 80037f0:	6093      	str	r3, [r2, #8]
}
 80037f2:	e172      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380a:	d11b      	bne.n	8003844 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	3361      	adds	r3, #97	; 0x61
 800381a:	2208      	movs	r2, #8
 800381c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	4611      	mov	r1, r2
 8003828:	4618      	mov	r0, r3
 800382a:	f003 fe90 	bl	800754e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800383a:	461a      	mov	r2, r3
 800383c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003840:	6093      	str	r3, [r2, #8]
}
 8003842:	e14a      	b.n	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	4413      	add	r3, r2
 800384c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	f040 813f 	bne.w	8003ada <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3361      	adds	r3, #97	; 0x61
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d17d      	bne.n	800396c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	212c      	movs	r1, #44	; 0x2c
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3360      	adds	r3, #96	; 0x60
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	333f      	adds	r3, #63	; 0x3f
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d00a      	beq.n	80038ac <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	333f      	adds	r3, #63	; 0x3f
 80038a4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	f040 8100 	bne.w	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d113      	bne.n	80038dc <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3355      	adds	r3, #85	; 0x55
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	f083 0301 	eor.w	r3, r3, #1
 80038c8:	b2d8      	uxtb	r0, r3
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3355      	adds	r3, #85	; 0x55
 80038d8:	4602      	mov	r2, r0
 80038da:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 80e3 	bne.w	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	334c      	adds	r3, #76	; 0x4c
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80d8 	beq.w	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	334c      	adds	r3, #76	; 0x4c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	202c      	movs	r0, #44	; 0x2c
 8003912:	fb00 f202 	mul.w	r2, r0, r2
 8003916:	440a      	add	r2, r1
 8003918:	3240      	adds	r2, #64	; 0x40
 800391a:	8812      	ldrh	r2, [r2, #0]
 800391c:	4413      	add	r3, r2
 800391e:	3b01      	subs	r3, #1
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	202c      	movs	r0, #44	; 0x2c
 8003926:	fb00 f202 	mul.w	r2, r0, r2
 800392a:	440a      	add	r2, r1
 800392c:	3240      	adds	r2, #64	; 0x40
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	fbb3 f3f2 	udiv	r3, r3, r2
 8003934:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 80b5 	beq.w	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	3355      	adds	r3, #85	; 0x55
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	f083 0301 	eor.w	r3, r3, #1
 8003956:	b2d8      	uxtb	r0, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	212c      	movs	r1, #44	; 0x2c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	3355      	adds	r3, #85	; 0x55
 8003966:	4602      	mov	r2, r0
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e09f      	b.n	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	212c      	movs	r1, #44	; 0x2c
 8003972:	fb01 f303 	mul.w	r3, r1, r3
 8003976:	4413      	add	r3, r2
 8003978:	3361      	adds	r3, #97	; 0x61
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d109      	bne.n	8003994 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	212c      	movs	r1, #44	; 0x2c
 8003986:	fb01 f303 	mul.w	r3, r1, r3
 800398a:	4413      	add	r3, r2
 800398c:	3360      	adds	r3, #96	; 0x60
 800398e:	2202      	movs	r2, #2
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	e08b      	b.n	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3361      	adds	r3, #97	; 0x61
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d109      	bne.n	80039bc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3360      	adds	r3, #96	; 0x60
 80039b6:	2202      	movs	r2, #2
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e077      	b.n	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	3361      	adds	r3, #97	; 0x61
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d109      	bne.n	80039e4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	212c      	movs	r1, #44	; 0x2c
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	4413      	add	r3, r2
 80039dc:	3360      	adds	r3, #96	; 0x60
 80039de:	2205      	movs	r2, #5
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	e063      	b.n	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	212c      	movs	r1, #44	; 0x2c
 80039ea:	fb01 f303 	mul.w	r3, r1, r3
 80039ee:	4413      	add	r3, r2
 80039f0:	3361      	adds	r3, #97	; 0x61
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d009      	beq.n	8003a0c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	3361      	adds	r3, #97	; 0x61
 8003a06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d14f      	bne.n	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	212c      	movs	r1, #44	; 0x2c
 8003a12:	fb01 f303 	mul.w	r3, r1, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	335c      	adds	r3, #92	; 0x5c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	202c      	movs	r0, #44	; 0x2c
 8003a24:	fb00 f303 	mul.w	r3, r0, r3
 8003a28:	440b      	add	r3, r1
 8003a2a:	335c      	adds	r3, #92	; 0x5c
 8003a2c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	212c      	movs	r1, #44	; 0x2c
 8003a34:	fb01 f303 	mul.w	r3, r1, r3
 8003a38:	4413      	add	r3, r2
 8003a3a:	335c      	adds	r3, #92	; 0x5c
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d912      	bls.n	8003a68 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	212c      	movs	r1, #44	; 0x2c
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	4413      	add	r3, r2
 8003a4e:	335c      	adds	r3, #92	; 0x5c
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	212c      	movs	r1, #44	; 0x2c
 8003a5a:	fb01 f303 	mul.w	r3, r1, r3
 8003a5e:	4413      	add	r3, r2
 8003a60:	3360      	adds	r3, #96	; 0x60
 8003a62:	2204      	movs	r2, #4
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	e021      	b.n	8003aac <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3360      	adds	r3, #96	; 0x60
 8003a76:	2202      	movs	r2, #2
 8003a78:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	015a      	lsls	r2, r3, #5
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	4413      	add	r3, r2
 8003a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a90:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a98:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2302      	movs	r3, #2
 8003abc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	b2d9      	uxtb	r1, r3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	202c      	movs	r0, #44	; 0x2c
 8003ac8:	fb00 f303 	mul.w	r3, r0, r3
 8003acc:	4413      	add	r3, r2
 8003ace:	3360      	adds	r3, #96	; 0x60
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f005 ffdd 	bl	8009a94 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ada:	bf00      	nop
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b08a      	sub	sp, #40	; 0x28
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	0c5b      	lsrs	r3, r3, #17
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	091b      	lsrs	r3, r3, #4
 8003b12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b16:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d004      	beq.n	8003b28 <HCD_RXQLVL_IRQHandler+0x46>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b05      	cmp	r3, #5
 8003b22:	f000 80a9 	beq.w	8003c78 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b26:	e0aa      	b.n	8003c7e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80a6 	beq.w	8003c7c <HCD_RXQLVL_IRQHandler+0x19a>
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	212c      	movs	r1, #44	; 0x2c
 8003b36:	fb01 f303 	mul.w	r3, r1, r3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	3344      	adds	r3, #68	; 0x44
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 809b 	beq.w	8003c7c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3350      	adds	r3, #80	; 0x50
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	441a      	add	r2, r3
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	202c      	movs	r0, #44	; 0x2c
 8003b60:	fb00 f303 	mul.w	r3, r0, r3
 8003b64:	440b      	add	r3, r1
 8003b66:	334c      	adds	r3, #76	; 0x4c
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d87a      	bhi.n	8003c64 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	212c      	movs	r1, #44	; 0x2c
 8003b78:	fb01 f303 	mul.w	r3, r1, r3
 8003b7c:	4413      	add	r3, r2
 8003b7e:	3344      	adds	r3, #68	; 0x44
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	b292      	uxth	r2, r2
 8003b86:	4619      	mov	r1, r3
 8003b88:	f003 f838 	bl	8006bfc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	3344      	adds	r3, #68	; 0x44
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	202c      	movs	r0, #44	; 0x2c
 8003ba6:	fb00 f303 	mul.w	r3, r0, r3
 8003baa:	440b      	add	r3, r1
 8003bac:	3344      	adds	r3, #68	; 0x44
 8003bae:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3350      	adds	r3, #80	; 0x50
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	441a      	add	r2, r3
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	202c      	movs	r0, #44	; 0x2c
 8003bca:	fb00 f303 	mul.w	r3, r0, r3
 8003bce:	440b      	add	r3, r1
 8003bd0:	3350      	adds	r3, #80	; 0x50
 8003bd2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	0cdb      	lsrs	r3, r3, #19
 8003be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	212c      	movs	r1, #44	; 0x2c
 8003bf0:	fb01 f303 	mul.w	r3, r1, r3
 8003bf4:	4413      	add	r3, r2
 8003bf6:	3340      	adds	r3, #64	; 0x40
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d13c      	bne.n	8003c7c <HCD_RXQLVL_IRQHandler+0x19a>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d039      	beq.n	8003c7c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c1e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c26:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	461a      	mov	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	212c      	movs	r1, #44	; 0x2c
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	3354      	adds	r3, #84	; 0x54
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	f083 0301 	eor.w	r3, r3, #1
 8003c4e:	b2d8      	uxtb	r0, r3
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3354      	adds	r3, #84	; 0x54
 8003c5e:	4602      	mov	r2, r0
 8003c60:	701a      	strb	r2, [r3, #0]
      break;
 8003c62:	e00b      	b.n	8003c7c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	212c      	movs	r1, #44	; 0x2c
 8003c6a:	fb01 f303 	mul.w	r3, r1, r3
 8003c6e:	4413      	add	r3, r2
 8003c70:	3360      	adds	r3, #96	; 0x60
 8003c72:	2204      	movs	r2, #4
 8003c74:	701a      	strb	r2, [r3, #0]
      break;
 8003c76:	e001      	b.n	8003c7c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003c78:	bf00      	nop
 8003c7a:	e000      	b.n	8003c7e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003c7c:	bf00      	nop
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3728      	adds	r7, #40	; 0x28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003cb2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d10b      	bne.n	8003cd6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d102      	bne.n	8003cce <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f005 fec7 	bl	8009a5c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	f043 0302 	orr.w	r3, r3, #2
 8003cd4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d132      	bne.n	8003d46 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	f043 0308 	orr.w	r3, r3, #8
 8003ce6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d126      	bne.n	8003d40 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d113      	bne.n	8003d22 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003d00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d04:	d106      	bne.n	8003d14 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f003 f8e3 	bl	8006ed8 <USB_InitFSLSPClkSel>
 8003d12:	e011      	b.n	8003d38 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 f8dc 	bl	8006ed8 <USB_InitFSLSPClkSel>
 8003d20:	e00a      	b.n	8003d38 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d106      	bne.n	8003d38 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d30:	461a      	mov	r2, r3
 8003d32:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003d36:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f005 feb9 	bl	8009ab0 <HAL_HCD_PortEnabled_Callback>
 8003d3e:	e002      	b.n	8003d46 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f005 fec3 	bl	8009acc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b20      	cmp	r3, #32
 8003d4e:	d103      	bne.n	8003d58 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f043 0320 	orr.w	r3, r3, #32
 8003d56:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6013      	str	r3, [r2, #0]
}
 8003d64:	bf00      	nop
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e12b      	b.n	8003fd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd f858 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2224      	movs	r2, #36	; 0x24
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0201 	bic.w	r2, r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003dd0:	f001 fa88 	bl	80052e4 <HAL_RCC_GetPCLK1Freq>
 8003dd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	4a81      	ldr	r2, [pc, #516]	; (8003fe0 <HAL_I2C_Init+0x274>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d807      	bhi.n	8003df0 <HAL_I2C_Init+0x84>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a80      	ldr	r2, [pc, #512]	; (8003fe4 <HAL_I2C_Init+0x278>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	bf94      	ite	ls
 8003de8:	2301      	movls	r3, #1
 8003dea:	2300      	movhi	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e006      	b.n	8003dfe <HAL_I2C_Init+0x92>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a7d      	ldr	r2, [pc, #500]	; (8003fe8 <HAL_I2C_Init+0x27c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	bf94      	ite	ls
 8003df8:	2301      	movls	r3, #1
 8003dfa:	2300      	movhi	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0e7      	b.n	8003fd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a78      	ldr	r2, [pc, #480]	; (8003fec <HAL_I2C_Init+0x280>)
 8003e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0e:	0c9b      	lsrs	r3, r3, #18
 8003e10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	4a6a      	ldr	r2, [pc, #424]	; (8003fe0 <HAL_I2C_Init+0x274>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d802      	bhi.n	8003e40 <HAL_I2C_Init+0xd4>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	e009      	b.n	8003e54 <HAL_I2C_Init+0xe8>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	4a69      	ldr	r2, [pc, #420]	; (8003ff0 <HAL_I2C_Init+0x284>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	099b      	lsrs	r3, r3, #6
 8003e52:	3301      	adds	r3, #1
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	69db      	ldr	r3, [r3, #28]
 8003e62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	495c      	ldr	r1, [pc, #368]	; (8003fe0 <HAL_I2C_Init+0x274>)
 8003e70:	428b      	cmp	r3, r1
 8003e72:	d819      	bhi.n	8003ea8 <HAL_I2C_Init+0x13c>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	1e59      	subs	r1, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e82:	1c59      	adds	r1, r3, #1
 8003e84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e88:	400b      	ands	r3, r1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00a      	beq.n	8003ea4 <HAL_I2C_Init+0x138>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1e59      	subs	r1, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea2:	e051      	b.n	8003f48 <HAL_I2C_Init+0x1dc>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	e04f      	b.n	8003f48 <HAL_I2C_Init+0x1dc>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d111      	bne.n	8003ed4 <HAL_I2C_Init+0x168>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6859      	ldr	r1, [r3, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	440b      	add	r3, r1
 8003ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e012      	b.n	8003efa <HAL_I2C_Init+0x18e>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1e58      	subs	r0, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	0099      	lsls	r1, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eea:	3301      	adds	r3, #1
 8003eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2301      	moveq	r3, #1
 8003ef6:	2300      	movne	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Init+0x196>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e022      	b.n	8003f48 <HAL_I2C_Init+0x1dc>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10e      	bne.n	8003f28 <HAL_I2C_Init+0x1bc>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1e58      	subs	r0, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	440b      	add	r3, r1
 8003f18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f26:	e00f      	b.n	8003f48 <HAL_I2C_Init+0x1dc>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1e58      	subs	r0, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6859      	ldr	r1, [r3, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	0099      	lsls	r1, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	6809      	ldr	r1, [r1, #0]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6911      	ldr	r1, [r2, #16]
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68d2      	ldr	r2, [r2, #12]
 8003f82:	4311      	orrs	r1, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0201 	orr.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2220      	movs	r2, #32
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	000186a0 	.word	0x000186a0
 8003fe4:	001e847f 	.word	0x001e847f
 8003fe8:	003d08ff 	.word	0x003d08ff
 8003fec:	431bde83 	.word	0x431bde83
 8003ff0:	10624dd3 	.word	0x10624dd3

08003ff4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e128      	b.n	8004258 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a90      	ldr	r2, [pc, #576]	; (8004260 <HAL_I2S_Init+0x26c>)
 800401e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7fc ff59 	bl	8000ed8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2202      	movs	r2, #2
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6812      	ldr	r2, [r2, #0]
 8004038:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800403c:	f023 030f 	bic.w	r3, r3, #15
 8004040:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2202      	movs	r2, #2
 8004048:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d060      	beq.n	8004114 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d102      	bne.n	8004060 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800405a:	2310      	movs	r3, #16
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e001      	b.n	8004064 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004060:	2320      	movs	r3, #32
 8004062:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b20      	cmp	r3, #32
 800406a:	d802      	bhi.n	8004072 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004072:	2001      	movs	r0, #1
 8004074:	f001 fa2c 	bl	80054d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004078:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004082:	d125      	bne.n	80040d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	fbb2 f2f3 	udiv	r2, r2, r3
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	461a      	mov	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	3305      	adds	r3, #5
 80040aa:	613b      	str	r3, [r7, #16]
 80040ac:	e01f      	b.n	80040ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	461a      	mov	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	3305      	adds	r3, #5
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e00e      	b.n	80040ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	3305      	adds	r3, #5
 80040ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4a5c      	ldr	r2, [pc, #368]	; (8004264 <HAL_I2S_Init+0x270>)
 80040f2:	fba2 2303 	umull	r2, r3, r2, r3
 80040f6:	08db      	lsrs	r3, r3, #3
 80040f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	085b      	lsrs	r3, r3, #1
 800410a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	021b      	lsls	r3, r3, #8
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e003      	b.n	800411c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004114:	2302      	movs	r3, #2
 8004116:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d902      	bls.n	8004128 <HAL_I2S_Init+0x134>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2bff      	cmp	r3, #255	; 0xff
 8004126:	d907      	bls.n	8004138 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412c:	f043 0210 	orr.w	r2, r3, #16
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e08f      	b.n	8004258 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	ea42 0103 	orr.w	r1, r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	430a      	orrs	r2, r1
 800414a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004156:	f023 030f 	bic.w	r3, r3, #15
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6851      	ldr	r1, [r2, #4]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6892      	ldr	r2, [r2, #8]
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68d2      	ldr	r2, [r2, #12]
 8004168:	4311      	orrs	r1, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6992      	ldr	r2, [r2, #24]
 800416e:	430a      	orrs	r2, r1
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d161      	bne.n	8004248 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a38      	ldr	r2, [pc, #224]	; (8004268 <HAL_I2S_Init+0x274>)
 8004188:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a37      	ldr	r2, [pc, #220]	; (800426c <HAL_I2S_Init+0x278>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_I2S_Init+0x1a4>
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <HAL_I2S_Init+0x27c>)
 8004196:	e001      	b.n	800419c <HAL_I2S_Init+0x1a8>
 8004198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	4932      	ldr	r1, [pc, #200]	; (800426c <HAL_I2S_Init+0x278>)
 80041a4:	428a      	cmp	r2, r1
 80041a6:	d101      	bne.n	80041ac <HAL_I2S_Init+0x1b8>
 80041a8:	4a31      	ldr	r2, [pc, #196]	; (8004270 <HAL_I2S_Init+0x27c>)
 80041aa:	e001      	b.n	80041b0 <HAL_I2S_Init+0x1bc>
 80041ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80041b0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80041b4:	f023 030f 	bic.w	r3, r3, #15
 80041b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2b      	ldr	r2, [pc, #172]	; (800426c <HAL_I2S_Init+0x278>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d101      	bne.n	80041c8 <HAL_I2S_Init+0x1d4>
 80041c4:	4b2a      	ldr	r3, [pc, #168]	; (8004270 <HAL_I2S_Init+0x27c>)
 80041c6:	e001      	b.n	80041cc <HAL_I2S_Init+0x1d8>
 80041c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041cc:	2202      	movs	r2, #2
 80041ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a25      	ldr	r2, [pc, #148]	; (800426c <HAL_I2S_Init+0x278>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <HAL_I2S_Init+0x1ea>
 80041da:	4b25      	ldr	r3, [pc, #148]	; (8004270 <HAL_I2S_Init+0x27c>)
 80041dc:	e001      	b.n	80041e2 <HAL_I2S_Init+0x1ee>
 80041de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ee:	d003      	beq.n	80041f8 <HAL_I2S_Init+0x204>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d103      	bne.n	8004200 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80041f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	e001      	b.n	8004204 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004200:	2300      	movs	r3, #0
 8004202:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800420e:	4313      	orrs	r3, r2
 8004210:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004218:	4313      	orrs	r3, r2
 800421a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004222:	4313      	orrs	r3, r2
 8004224:	b29a      	uxth	r2, r3
 8004226:	897b      	ldrh	r3, [r7, #10]
 8004228:	4313      	orrs	r3, r2
 800422a:	b29b      	uxth	r3, r3
 800422c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004230:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a0d      	ldr	r2, [pc, #52]	; (800426c <HAL_I2S_Init+0x278>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_I2S_Init+0x24c>
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <HAL_I2S_Init+0x27c>)
 800423e:	e001      	b.n	8004244 <HAL_I2S_Init+0x250>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004244:	897a      	ldrh	r2, [r7, #10]
 8004246:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	0800436b 	.word	0x0800436b
 8004264:	cccccccd 	.word	0xcccccccd
 8004268:	08004481 	.word	0x08004481
 800426c:	40003800 	.word	0x40003800
 8004270:	40003400 	.word	0x40003400

08004274 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	881a      	ldrh	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	1c9a      	adds	r2, r3, #2
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10e      	bne.n	8004304 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ffb8 	bl	8004274 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	b292      	uxth	r2, r2
 8004320:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	1c9a      	adds	r2, r3, #2
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004330:	b29b      	uxth	r3, r3
 8004332:	3b01      	subs	r3, #1
 8004334:	b29a      	uxth	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10e      	bne.n	8004362 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004352:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff93 	bl	8004288 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b04      	cmp	r3, #4
 8004384:	d13a      	bne.n	80043fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d109      	bne.n	80043a4 <I2S_IRQHandler+0x3a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d102      	bne.n	80043a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff ffb4 	bl	800430c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d126      	bne.n	80043fc <I2S_IRQHandler+0x92>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	d11f      	bne.n	80043fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ee:	f043 0202 	orr.w	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff ff50 	bl	800429c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b03      	cmp	r3, #3
 8004406:	d136      	bne.n	8004476 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d109      	bne.n	8004426 <I2S_IRQHandler+0xbc>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d102      	bne.n	8004426 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7ff ff45 	bl	80042b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b08      	cmp	r3, #8
 800442e:	d122      	bne.n	8004476 <I2S_IRQHandler+0x10c>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d11b      	bne.n	8004476 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800444c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	f043 0204 	orr.w	r2, r3, #4
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ff13 	bl	800429c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004476:	bf00      	nop
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b088      	sub	sp, #32
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a92      	ldr	r2, [pc, #584]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d101      	bne.n	800449e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800449a:	4b92      	ldr	r3, [pc, #584]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800449c:	e001      	b.n	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800449e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a8b      	ldr	r2, [pc, #556]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d101      	bne.n	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80044b8:	4b8a      	ldr	r3, [pc, #552]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044ba:	e001      	b.n	80044c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80044bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044cc:	d004      	beq.n	80044d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	f040 8099 	bne.w	800460a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d107      	bne.n	80044f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f925 	bl	800473c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d107      	bne.n	800450c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b00      	cmp	r3, #0
 8004504:	d002      	beq.n	800450c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f9c8 	bl	800489c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d13a      	bne.n	800458c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d035      	beq.n	800458c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d101      	bne.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800452a:	4b6e      	ldr	r3, [pc, #440]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800452c:	e001      	b.n	8004532 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800452e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4969      	ldr	r1, [pc, #420]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800453a:	428b      	cmp	r3, r1
 800453c:	d101      	bne.n	8004542 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800453e:	4b69      	ldr	r3, [pc, #420]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004540:	e001      	b.n	8004546 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800454a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800455a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800455c:	2300      	movs	r3, #0
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f043 0202 	orr.w	r2, r3, #2
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff fe88 	bl	800429c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	f040 80c3 	bne.w	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 80bd 	beq.w	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80045b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a49      	ldr	r2, [pc, #292]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80045be:	4b49      	ldr	r3, [pc, #292]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045c0:	e001      	b.n	80045c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80045c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4944      	ldr	r1, [pc, #272]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045ce:	428b      	cmp	r3, r1
 80045d0:	d101      	bne.n	80045d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80045d2:	4b44      	ldr	r3, [pc, #272]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045d4:	e001      	b.n	80045da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80045d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80045de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80045e0:	2300      	movs	r3, #0
 80045e2:	60bb      	str	r3, [r7, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f043 0204 	orr.w	r2, r3, #4
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff fe4a 	bl	800429c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004608:	e089      	b.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d107      	bne.n	8004624 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8be 	bl	80047a0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b01      	cmp	r3, #1
 800462c:	d107      	bne.n	800463e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f8fd 	bl	8004838 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b40      	cmp	r3, #64	; 0x40
 8004646:	d12f      	bne.n	80046a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d02a      	beq.n	80046a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004660:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d101      	bne.n	8004670 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800466c:	4b1d      	ldr	r3, [pc, #116]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800466e:	e001      	b.n	8004674 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004670:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4919      	ldr	r1, [pc, #100]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800467c:	428b      	cmp	r3, r1
 800467e:	d101      	bne.n	8004684 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004680:	4b18      	ldr	r3, [pc, #96]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004682:	e001      	b.n	8004688 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004688:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800468c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff fdfa 	bl	800429c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d136      	bne.n	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d031      	beq.n	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d101      	bne.n	80046ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c8:	e001      	b.n	80046ce <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80046ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4902      	ldr	r1, [pc, #8]	; (80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046d6:	428b      	cmp	r3, r1
 80046d8:	d106      	bne.n	80046e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80046da:	4b02      	ldr	r3, [pc, #8]	; (80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046dc:	e006      	b.n	80046ec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80046de:	bf00      	nop
 80046e0:	40003800 	.word	0x40003800
 80046e4:	40003400 	.word	0x40003400
 80046e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046f0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004700:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f043 0204 	orr.w	r2, r3, #4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fdc0 	bl	800429c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800471c:	e000      	b.n	8004720 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800471e:	bf00      	nop
}
 8004720:	bf00      	nop
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	1c99      	adds	r1, r3, #2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6251      	str	r1, [r2, #36]	; 0x24
 800474e:	881a      	ldrh	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d113      	bne.n	8004796 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800477c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ffc9 	bl	8004728 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c99      	adds	r1, r3, #2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	6251      	str	r1, [r2, #36]	; 0x24
 80047b2:	8819      	ldrh	r1, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1d      	ldr	r2, [pc, #116]	; (8004830 <I2SEx_TxISR_I2SExt+0x90>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d101      	bne.n	80047c2 <I2SEx_TxISR_I2SExt+0x22>
 80047be:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <I2SEx_TxISR_I2SExt+0x94>)
 80047c0:	e001      	b.n	80047c6 <I2SEx_TxISR_I2SExt+0x26>
 80047c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c6:	460a      	mov	r2, r1
 80047c8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	3b01      	subs	r3, #1
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047dc:	b29b      	uxth	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d121      	bne.n	8004826 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a12      	ldr	r2, [pc, #72]	; (8004830 <I2SEx_TxISR_I2SExt+0x90>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <I2SEx_TxISR_I2SExt+0x50>
 80047ec:	4b11      	ldr	r3, [pc, #68]	; (8004834 <I2SEx_TxISR_I2SExt+0x94>)
 80047ee:	e001      	b.n	80047f4 <I2SEx_TxISR_I2SExt+0x54>
 80047f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	490d      	ldr	r1, [pc, #52]	; (8004830 <I2SEx_TxISR_I2SExt+0x90>)
 80047fc:	428b      	cmp	r3, r1
 80047fe:	d101      	bne.n	8004804 <I2SEx_TxISR_I2SExt+0x64>
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <I2SEx_TxISR_I2SExt+0x94>)
 8004802:	e001      	b.n	8004808 <I2SEx_TxISR_I2SExt+0x68>
 8004804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004808:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800480c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004812:	b29b      	uxth	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f7ff ff81 	bl	8004728 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	40003800 	.word	0x40003800
 8004834:	40003400 	.word	0x40003400

08004838 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68d8      	ldr	r0, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	1c99      	adds	r1, r3, #2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004850:	b282      	uxth	r2, r0
 8004852:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004858:	b29b      	uxth	r3, r3
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d113      	bne.n	8004894 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800487a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7ff ff4a 	bl	8004728 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004894:	bf00      	nop
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a20      	ldr	r2, [pc, #128]	; (800492c <I2SEx_RxISR_I2SExt+0x90>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <I2SEx_RxISR_I2SExt+0x16>
 80048ae:	4b20      	ldr	r3, [pc, #128]	; (8004930 <I2SEx_RxISR_I2SExt+0x94>)
 80048b0:	e001      	b.n	80048b6 <I2SEx_RxISR_I2SExt+0x1a>
 80048b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048b6:	68d8      	ldr	r0, [r3, #12]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048bc:	1c99      	adds	r1, r3, #2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048c2:	b282      	uxth	r2, r0
 80048c4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80048d8:	b29b      	uxth	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d121      	bne.n	8004922 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a12      	ldr	r2, [pc, #72]	; (800492c <I2SEx_RxISR_I2SExt+0x90>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <I2SEx_RxISR_I2SExt+0x50>
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <I2SEx_RxISR_I2SExt+0x94>)
 80048ea:	e001      	b.n	80048f0 <I2SEx_RxISR_I2SExt+0x54>
 80048ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	490d      	ldr	r1, [pc, #52]	; (800492c <I2SEx_RxISR_I2SExt+0x90>)
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d101      	bne.n	8004900 <I2SEx_RxISR_I2SExt+0x64>
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <I2SEx_RxISR_I2SExt+0x94>)
 80048fe:	e001      	b.n	8004904 <I2SEx_RxISR_I2SExt+0x68>
 8004900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004904:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004908:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff ff03 	bl	8004728 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40003800 	.word	0x40003800
 8004930:	40003400 	.word	0x40003400

08004934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e267      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d075      	beq.n	8004a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004952:	4b88      	ldr	r3, [pc, #544]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b04      	cmp	r3, #4
 800495c:	d00c      	beq.n	8004978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495e:	4b85      	ldr	r3, [pc, #532]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004966:	2b08      	cmp	r3, #8
 8004968:	d112      	bne.n	8004990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496a:	4b82      	ldr	r3, [pc, #520]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004972:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004976:	d10b      	bne.n	8004990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	4b7e      	ldr	r3, [pc, #504]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d05b      	beq.n	8004a3c <HAL_RCC_OscConfig+0x108>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d157      	bne.n	8004a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e242      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004998:	d106      	bne.n	80049a8 <HAL_RCC_OscConfig+0x74>
 800499a:	4b76      	ldr	r3, [pc, #472]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a75      	ldr	r2, [pc, #468]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e01d      	b.n	80049e4 <HAL_RCC_OscConfig+0xb0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x98>
 80049b2:	4b70      	ldr	r3, [pc, #448]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6f      	ldr	r2, [pc, #444]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	4b6d      	ldr	r3, [pc, #436]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6c      	ldr	r2, [pc, #432]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0xb0>
 80049cc:	4b69      	ldr	r3, [pc, #420]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a68      	ldr	r2, [pc, #416]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4b66      	ldr	r3, [pc, #408]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a65      	ldr	r2, [pc, #404]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fc fcea 	bl	80013c4 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fc fce6 	bl	80013c4 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e207      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	4b5b      	ldr	r3, [pc, #364]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0xc0>
 8004a12:	e014      	b.n	8004a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fc fcd6 	bl	80013c4 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fc fcd2 	bl	80013c4 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	; 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1f3      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2e:	4b51      	ldr	r3, [pc, #324]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0xe8>
 8004a3a:	e000      	b.n	8004a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d063      	beq.n	8004b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a4a:	4b4a      	ldr	r3, [pc, #296]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a56:	4b47      	ldr	r3, [pc, #284]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d11c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a62:	4b44      	ldr	r3, [pc, #272]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d116      	bne.n	8004a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6e:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_RCC_OscConfig+0x152>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e1c7      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a86:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4937      	ldr	r1, [pc, #220]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a9a:	e03a      	b.n	8004b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa4:	4b34      	ldr	r3, [pc, #208]	; (8004b78 <HAL_RCC_OscConfig+0x244>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fc fc8b 	bl	80013c4 <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ab2:	f7fc fc87 	bl	80013c4 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e1a8      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4925      	ldr	r1, [pc, #148]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
 8004ae4:	e015      	b.n	8004b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <HAL_RCC_OscConfig+0x244>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fc fc6a 	bl	80013c4 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af4:	f7fc fc66 	bl	80013c4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e187      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b06:	4b1b      	ldr	r3, [pc, #108]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d036      	beq.n	8004b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d016      	beq.n	8004b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <HAL_RCC_OscConfig+0x248>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fc fc4a 	bl	80013c4 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b34:	f7fc fc46 	bl	80013c4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e167      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x200>
 8004b52:	e01b      	b.n	8004b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b54:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <HAL_RCC_OscConfig+0x248>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5a:	f7fc fc33 	bl	80013c4 <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b60:	e00e      	b.n	8004b80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b62:	f7fc fc2f 	bl	80013c4 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d907      	bls.n	8004b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e150      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
 8004b74:	40023800 	.word	0x40023800
 8004b78:	42470000 	.word	0x42470000
 8004b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b80:	4b88      	ldr	r3, [pc, #544]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ea      	bne.n	8004b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8097 	beq.w	8004cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9e:	4b81      	ldr	r3, [pc, #516]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	4b7d      	ldr	r3, [pc, #500]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a7c      	ldr	r2, [pc, #496]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b7a      	ldr	r3, [pc, #488]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b77      	ldr	r3, [pc, #476]	; (8004da8 <HAL_RCC_OscConfig+0x474>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d118      	bne.n	8004c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd6:	4b74      	ldr	r3, [pc, #464]	; (8004da8 <HAL_RCC_OscConfig+0x474>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a73      	ldr	r2, [pc, #460]	; (8004da8 <HAL_RCC_OscConfig+0x474>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be2:	f7fc fbef 	bl	80013c4 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bea:	f7fc fbeb 	bl	80013c4 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e10c      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	4b6a      	ldr	r3, [pc, #424]	; (8004da8 <HAL_RCC_OscConfig+0x474>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x2ea>
 8004c10:	4b64      	ldr	r3, [pc, #400]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a63      	ldr	r2, [pc, #396]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	e01c      	b.n	8004c58 <HAL_RCC_OscConfig+0x324>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x30c>
 8004c26:	4b5f      	ldr	r3, [pc, #380]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	4a5e      	ldr	r2, [pc, #376]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	f043 0304 	orr.w	r3, r3, #4
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70
 8004c32:	4b5c      	ldr	r3, [pc, #368]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	4a5b      	ldr	r2, [pc, #364]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3e:	e00b      	b.n	8004c58 <HAL_RCC_OscConfig+0x324>
 8004c40:	4b58      	ldr	r3, [pc, #352]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	4a57      	ldr	r2, [pc, #348]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4c:	4b55      	ldr	r3, [pc, #340]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	4a54      	ldr	r2, [pc, #336]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fc fbb0 	bl	80013c4 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fc fbac 	bl	80013c4 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0cb      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7e:	4b49      	ldr	r3, [pc, #292]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0ee      	beq.n	8004c68 <HAL_RCC_OscConfig+0x334>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8c:	f7fc fb9a 	bl	80013c4 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f7fc fb96 	bl	80013c4 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e0b5      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004caa:	4b3e      	ldr	r3, [pc, #248]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1ee      	bne.n	8004c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cbc:	4b39      	ldr	r3, [pc, #228]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	4a38      	ldr	r2, [pc, #224]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80a1 	beq.w	8004e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cd2:	4b34      	ldr	r3, [pc, #208]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d05c      	beq.n	8004d98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d141      	bne.n	8004d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce6:	4b31      	ldr	r3, [pc, #196]	; (8004dac <HAL_RCC_OscConfig+0x478>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fc fb6a 	bl	80013c4 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf4:	f7fc fb66 	bl	80013c4 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e087      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	4b27      	ldr	r3, [pc, #156]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69da      	ldr	r2, [r3, #28]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	019b      	lsls	r3, r3, #6
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	491b      	ldr	r1, [pc, #108]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_RCC_OscConfig+0x478>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d42:	f7fc fb3f 	bl	80013c4 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d4a:	f7fc fb3b 	bl	80013c4 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e05c      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x416>
 8004d68:	e054      	b.n	8004e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_RCC_OscConfig+0x478>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fc fb28 	bl	80013c4 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fc fb24 	bl	80013c4 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e045      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x444>
 8004d96:	e03d      	b.n	8004e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e038      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40007000 	.word	0x40007000
 8004dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db0:	4b1b      	ldr	r3, [pc, #108]	; (8004e20 <HAL_RCC_OscConfig+0x4ec>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d028      	beq.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d121      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d11a      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d111      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800

08004e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0cc      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b68      	ldr	r3, [pc, #416]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d90c      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b65      	ldr	r3, [pc, #404]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b63      	ldr	r3, [pc, #396]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0b8      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d020      	beq.n	8004eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e78:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4a58      	ldr	r2, [pc, #352]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e90:	4b53      	ldr	r3, [pc, #332]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4a52      	ldr	r2, [pc, #328]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b50      	ldr	r3, [pc, #320]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	494d      	ldr	r1, [pc, #308]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d044      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b47      	ldr	r3, [pc, #284]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d119      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e07f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d107      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee2:	4b3f      	ldr	r3, [pc, #252]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e06f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef2:	4b3b      	ldr	r3, [pc, #236]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e067      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f02:	4b37      	ldr	r3, [pc, #220]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f023 0203 	bic.w	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4934      	ldr	r1, [pc, #208]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f14:	f7fc fa56 	bl	80013c4 <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1c:	f7fc fa52 	bl	80013c4 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e04f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 020c 	and.w	r2, r3, #12
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d1eb      	bne.n	8004f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f44:	4b25      	ldr	r3, [pc, #148]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d20c      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b22      	ldr	r3, [pc, #136]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e032      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4916      	ldr	r1, [pc, #88]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f96:	4b12      	ldr	r3, [pc, #72]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	490e      	ldr	r1, [pc, #56]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004faa:	f000 f889 	bl	80050c0 <HAL_RCC_GetSysClockFreq>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	; (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	490a      	ldr	r1, [pc, #40]	; (8004fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8004fbc:	5ccb      	ldrb	r3, [r1, r3]
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fc6:	4b09      	ldr	r3, [pc, #36]	; (8004fec <HAL_RCC_ClockConfig+0x1c8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fc f9b6 	bl	800133c <HAL_InitTick>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023c00 	.word	0x40023c00
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	0800a16c 	.word	0x0800a16c
 8004fe8:	20000004 	.word	0x20000004
 8004fec:	20000008 	.word	0x20000008

08004ff0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08c      	sub	sp, #48	; 0x30
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d129      	bne.n	8005056 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8005002:	2300      	movs	r3, #0
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 8005008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500a:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 800500c:	f043 0301 	orr.w	r3, r3, #1
 8005010:	6313      	str	r3, [r2, #48]	; 0x30
 8005012:	4b28      	ldr	r3, [pc, #160]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	61bb      	str	r3, [r7, #24]
 800501c:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800501e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005024:	2302      	movs	r3, #2
 8005026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005028:	2303      	movs	r3, #3
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502c:	2300      	movs	r3, #0
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005030:	2300      	movs	r3, #0
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005034:	f107 031c 	add.w	r3, r7, #28
 8005038:	4619      	mov	r1, r3
 800503a:	481f      	ldr	r0, [pc, #124]	; (80050b8 <HAL_RCC_MCOConfig+0xc8>)
 800503c:	f7fd f8d6 	bl	80021ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005040:	4b1c      	ldr	r3, [pc, #112]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	430b      	orrs	r3, r1
 800504e:	4919      	ldr	r1, [pc, #100]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 8005050:	4313      	orrs	r3, r2
 8005052:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8005054:	e029      	b.n	80050aa <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 8005060:	f043 0304 	orr.w	r3, r3, #4
 8005064:	6313      	str	r3, [r2, #48]	; 0x30
 8005066:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005072:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005076:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005078:	2302      	movs	r3, #2
 800507a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800507c:	2303      	movs	r3, #3
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005084:	2300      	movs	r3, #0
 8005086:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005088:	f107 031c 	add.w	r3, r7, #28
 800508c:	4619      	mov	r1, r3
 800508e:	480b      	ldr	r0, [pc, #44]	; (80050bc <HAL_RCC_MCOConfig+0xcc>)
 8005090:	f7fd f8ac 	bl	80021ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	00d9      	lsls	r1, r3, #3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	430b      	orrs	r3, r1
 80050a4:	4903      	ldr	r1, [pc, #12]	; (80050b4 <HAL_RCC_MCOConfig+0xc4>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	608b      	str	r3, [r1, #8]
}
 80050aa:	bf00      	nop
 80050ac:	3730      	adds	r7, #48	; 0x30
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40023800 	.word	0x40023800
 80050b8:	40020000 	.word	0x40020000
 80050bc:	40020800 	.word	0x40020800

080050c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050c4:	b094      	sub	sp, #80	; 0x50
 80050c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	647b      	str	r3, [r7, #68]	; 0x44
 80050cc:	2300      	movs	r3, #0
 80050ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d0:	2300      	movs	r3, #0
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050d8:	4b79      	ldr	r3, [pc, #484]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 030c 	and.w	r3, r3, #12
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d00d      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x40>
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	f200 80e1 	bhi.w	80052ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_RCC_GetSysClockFreq+0x34>
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d003      	beq.n	80050fa <HAL_RCC_GetSysClockFreq+0x3a>
 80050f2:	e0db      	b.n	80052ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050f4:	4b73      	ldr	r3, [pc, #460]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80050f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80050f8:	e0db      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050fa:	4b73      	ldr	r3, [pc, #460]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050fe:	e0d8      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005100:	4b6f      	ldr	r3, [pc, #444]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005108:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800510a:	4b6d      	ldr	r3, [pc, #436]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d063      	beq.n	80051de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005116:	4b6a      	ldr	r3, [pc, #424]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	2200      	movs	r2, #0
 800511e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005120:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005128:	633b      	str	r3, [r7, #48]	; 0x30
 800512a:	2300      	movs	r3, #0
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
 800512e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005132:	4622      	mov	r2, r4
 8005134:	462b      	mov	r3, r5
 8005136:	f04f 0000 	mov.w	r0, #0
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	0159      	lsls	r1, r3, #5
 8005140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005144:	0150      	lsls	r0, r2, #5
 8005146:	4602      	mov	r2, r0
 8005148:	460b      	mov	r3, r1
 800514a:	4621      	mov	r1, r4
 800514c:	1a51      	subs	r1, r2, r1
 800514e:	6139      	str	r1, [r7, #16]
 8005150:	4629      	mov	r1, r5
 8005152:	eb63 0301 	sbc.w	r3, r3, r1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	f04f 0300 	mov.w	r3, #0
 8005160:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005164:	4659      	mov	r1, fp
 8005166:	018b      	lsls	r3, r1, #6
 8005168:	4651      	mov	r1, sl
 800516a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800516e:	4651      	mov	r1, sl
 8005170:	018a      	lsls	r2, r1, #6
 8005172:	4651      	mov	r1, sl
 8005174:	ebb2 0801 	subs.w	r8, r2, r1
 8005178:	4659      	mov	r1, fp
 800517a:	eb63 0901 	sbc.w	r9, r3, r1
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800518a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800518e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005192:	4690      	mov	r8, r2
 8005194:	4699      	mov	r9, r3
 8005196:	4623      	mov	r3, r4
 8005198:	eb18 0303 	adds.w	r3, r8, r3
 800519c:	60bb      	str	r3, [r7, #8]
 800519e:	462b      	mov	r3, r5
 80051a0:	eb49 0303 	adc.w	r3, r9, r3
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051b2:	4629      	mov	r1, r5
 80051b4:	024b      	lsls	r3, r1, #9
 80051b6:	4621      	mov	r1, r4
 80051b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051bc:	4621      	mov	r1, r4
 80051be:	024a      	lsls	r2, r1, #9
 80051c0:	4610      	mov	r0, r2
 80051c2:	4619      	mov	r1, r3
 80051c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051c6:	2200      	movs	r2, #0
 80051c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051d0:	f7fa fffa 	bl	80001c8 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4613      	mov	r3, r2
 80051da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051dc:	e058      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051de:	4b38      	ldr	r3, [pc, #224]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	2200      	movs	r2, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	4611      	mov	r1, r2
 80051ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051ee:	623b      	str	r3, [r7, #32]
 80051f0:	2300      	movs	r3, #0
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
 80051f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	f04f 0000 	mov.w	r0, #0
 8005200:	f04f 0100 	mov.w	r1, #0
 8005204:	0159      	lsls	r1, r3, #5
 8005206:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800520a:	0150      	lsls	r0, r2, #5
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4641      	mov	r1, r8
 8005212:	ebb2 0a01 	subs.w	sl, r2, r1
 8005216:	4649      	mov	r1, r9
 8005218:	eb63 0b01 	sbc.w	fp, r3, r1
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005228:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800522c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005230:	ebb2 040a 	subs.w	r4, r2, sl
 8005234:	eb63 050b 	sbc.w	r5, r3, fp
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	f04f 0300 	mov.w	r3, #0
 8005240:	00eb      	lsls	r3, r5, #3
 8005242:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005246:	00e2      	lsls	r2, r4, #3
 8005248:	4614      	mov	r4, r2
 800524a:	461d      	mov	r5, r3
 800524c:	4643      	mov	r3, r8
 800524e:	18e3      	adds	r3, r4, r3
 8005250:	603b      	str	r3, [r7, #0]
 8005252:	464b      	mov	r3, r9
 8005254:	eb45 0303 	adc.w	r3, r5, r3
 8005258:	607b      	str	r3, [r7, #4]
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005266:	4629      	mov	r1, r5
 8005268:	028b      	lsls	r3, r1, #10
 800526a:	4621      	mov	r1, r4
 800526c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005270:	4621      	mov	r1, r4
 8005272:	028a      	lsls	r2, r1, #10
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800527a:	2200      	movs	r2, #0
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	61fa      	str	r2, [r7, #28]
 8005280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005284:	f7fa ffa0 	bl	80001c8 <__aeabi_uldivmod>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4613      	mov	r3, r2
 800528e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	3301      	adds	r3, #1
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052aa:	e002      	b.n	80052b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3750      	adds	r7, #80	; 0x50
 80052b8:	46bd      	mov	sp, r7
 80052ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052be:	bf00      	nop
 80052c0:	40023800 	.word	0x40023800
 80052c4:	00f42400 	.word	0x00f42400
 80052c8:	007a1200 	.word	0x007a1200

080052cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d0:	4b03      	ldr	r3, [pc, #12]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000004 	.word	0x20000004

080052e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052e8:	f7ff fff0 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0a9b      	lsrs	r3, r3, #10
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4903      	ldr	r1, [pc, #12]	; (8005308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40023800 	.word	0x40023800
 8005308:	0800a17c 	.word	0x0800a17c

0800530c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d105      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005330:	2b00      	cmp	r3, #0
 8005332:	d035      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005334:	4b62      	ldr	r3, [pc, #392]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800533a:	f7fc f843 	bl	80013c4 <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005340:	e008      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005342:	f7fc f83f 	bl	80013c4 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e0b0      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005354:	4b5b      	ldr	r3, [pc, #364]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f0      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	019a      	lsls	r2, r3, #6
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	071b      	lsls	r3, r3, #28
 800536c:	4955      	ldr	r1, [pc, #340]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005374:	4b52      	ldr	r3, [pc, #328]	; (80054c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800537a:	f7fc f823 	bl	80013c4 <HAL_GetTick>
 800537e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005380:	e008      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005382:	f7fc f81f 	bl	80013c4 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d901      	bls.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e090      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005394:	4b4b      	ldr	r3, [pc, #300]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0f0      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8083 	beq.w	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	4b44      	ldr	r3, [pc, #272]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	4a43      	ldr	r2, [pc, #268]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053bc:	6413      	str	r3, [r2, #64]	; 0x40
 80053be:	4b41      	ldr	r3, [pc, #260]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80053ca:	4b3f      	ldr	r3, [pc, #252]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a3e      	ldr	r2, [pc, #248]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053d6:	f7fb fff5 	bl	80013c4 <HAL_GetTick>
 80053da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80053de:	f7fb fff1 	bl	80013c4 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e062      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053f0:	4b35      	ldr	r3, [pc, #212]	; (80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053fc:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005404:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02f      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	429a      	cmp	r2, r3
 8005418:	d028      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800541a:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800541c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005422:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005424:	4b29      	ldr	r3, [pc, #164]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800542a:	4b28      	ldr	r3, [pc, #160]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005430:	4a24      	ldr	r2, [pc, #144]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005436:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d114      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005442:	f7fb ffbf 	bl	80013c4 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	e00a      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800544a:	f7fb ffbb 	bl	80013c4 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	f241 3288 	movw	r2, #5000	; 0x1388
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e02a      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005460:	4b18      	ldr	r3, [pc, #96]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0ee      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005478:	d10d      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800548a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548e:	490d      	ldr	r1, [pc, #52]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005490:	4313      	orrs	r3, r2
 8005492:	608b      	str	r3, [r1, #8]
 8005494:	e005      	b.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005496:	4b0b      	ldr	r3, [pc, #44]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4a0a      	ldr	r2, [pc, #40]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800549c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054a0:	6093      	str	r3, [r2, #8]
 80054a2:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ae:	4905      	ldr	r1, [pc, #20]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3718      	adds	r7, #24
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	42470068 	.word	0x42470068
 80054c4:	40023800 	.word	0x40023800
 80054c8:	40007000 	.word	0x40007000
 80054cc:	42470e40 	.word	0x42470e40

080054d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b087      	sub	sp, #28
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80054d8:	2300      	movs	r3, #0
 80054da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d13e      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80054ee:	4b23      	ldr	r3, [pc, #140]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d12f      	bne.n	8005564 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005506:	617b      	str	r3, [r7, #20]
          break;
 8005508:	e02f      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800550a:	4b1c      	ldr	r3, [pc, #112]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005512:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005516:	d108      	bne.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005518:	4b18      	ldr	r3, [pc, #96]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005520:	4a18      	ldr	r2, [pc, #96]	; (8005584 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e007      	b.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800552a:	4b14      	ldr	r3, [pc, #80]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800553a:	4b10      	ldr	r3, [pc, #64]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800553c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005540:	099b      	lsrs	r3, r3, #6
 8005542:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	fb02 f303 	mul.w	r3, r2, r3
 800554c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005554:	0f1b      	lsrs	r3, r3, #28
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	617b      	str	r3, [r7, #20]
          break;
 8005562:	e002      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]
          break;
 8005568:	bf00      	nop
        }
      }
      break;
 800556a:	bf00      	nop
    }
  }
  return frequency;
 800556c:	697b      	ldr	r3, [r7, #20]
}
 800556e:	4618      	mov	r0, r3
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40023800 	.word	0x40023800
 8005580:	00bb8000 	.word	0x00bb8000
 8005584:	007a1200 	.word	0x007a1200
 8005588:	00f42400 	.word	0x00f42400

0800558c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e07b      	b.n	8005696 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d108      	bne.n	80055b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ae:	d009      	beq.n	80055c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	61da      	str	r2, [r3, #28]
 80055b6:	e005      	b.n	80055c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fb fcfa 	bl	8000fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005616:	431a      	orrs	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005648:	ea42 0103 	orr.w	r1, r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	f003 0104 	and.w	r1, r3, #4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	f003 0210 	and.w	r2, r3, #16
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005684:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b082      	sub	sp, #8
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e041      	b.n	8005734 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f7fb fccf 	bl	8001068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	3304      	adds	r3, #4
 80056da:	4619      	mov	r1, r3
 80056dc:	4610      	mov	r0, r2
 80056de:	f000 fd8f 	bl	8006200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e041      	b.n	80057d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f839 	bl	80057da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	4619      	mov	r1, r3
 800577a:	4610      	mov	r0, r2
 800577c:	f000 fd40 	bl	8006200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
	...

080057f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_TIM_PWM_Start+0x24>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	bf14      	ite	ne
 800580c:	2301      	movne	r3, #1
 800580e:	2300      	moveq	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	e022      	b.n	800585a <HAL_TIM_PWM_Start+0x6a>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b04      	cmp	r3, #4
 8005818:	d109      	bne.n	800582e <HAL_TIM_PWM_Start+0x3e>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	e015      	b.n	800585a <HAL_TIM_PWM_Start+0x6a>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b08      	cmp	r3, #8
 8005832:	d109      	bne.n	8005848 <HAL_TIM_PWM_Start+0x58>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	e008      	b.n	800585a <HAL_TIM_PWM_Start+0x6a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b01      	cmp	r3, #1
 8005852:	bf14      	ite	ne
 8005854:	2301      	movne	r3, #1
 8005856:	2300      	moveq	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e07c      	b.n	800595c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <HAL_TIM_PWM_Start+0x82>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005870:	e013      	b.n	800589a <HAL_TIM_PWM_Start+0xaa>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b04      	cmp	r3, #4
 8005876:	d104      	bne.n	8005882 <HAL_TIM_PWM_Start+0x92>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005880:	e00b      	b.n	800589a <HAL_TIM_PWM_Start+0xaa>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d104      	bne.n	8005892 <HAL_TIM_PWM_Start+0xa2>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2202      	movs	r2, #2
 800588c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005890:	e003      	b.n	800589a <HAL_TIM_PWM_Start+0xaa>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2201      	movs	r2, #1
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 ff96 	bl	80067d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2d      	ldr	r2, [pc, #180]	; (8005964 <HAL_TIM_PWM_Start+0x174>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <HAL_TIM_PWM_Start+0xcc>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2c      	ldr	r2, [pc, #176]	; (8005968 <HAL_TIM_PWM_Start+0x178>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <HAL_TIM_PWM_Start+0xd0>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <HAL_TIM_PWM_Start+0xd2>
 80058c0:	2300      	movs	r3, #0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a22      	ldr	r2, [pc, #136]	; (8005964 <HAL_TIM_PWM_Start+0x174>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_TIM_PWM_Start+0x136>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d01d      	beq.n	8005926 <HAL_TIM_PWM_Start+0x136>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1f      	ldr	r2, [pc, #124]	; (800596c <HAL_TIM_PWM_Start+0x17c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_TIM_PWM_Start+0x136>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <HAL_TIM_PWM_Start+0x180>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_TIM_PWM_Start+0x136>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <HAL_TIM_PWM_Start+0x184>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_TIM_PWM_Start+0x136>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a16      	ldr	r2, [pc, #88]	; (8005968 <HAL_TIM_PWM_Start+0x178>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_TIM_PWM_Start+0x136>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_TIM_PWM_Start+0x188>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIM_PWM_Start+0x136>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a16      	ldr	r2, [pc, #88]	; (800597c <HAL_TIM_PWM_Start+0x18c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d111      	bne.n	800594a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 0307 	and.w	r3, r3, #7
 8005930:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2b06      	cmp	r3, #6
 8005936:	d010      	beq.n	800595a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005948:	e007      	b.n	800595a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0201 	orr.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	40010000 	.word	0x40010000
 8005968:	40010400 	.word	0x40010400
 800596c:	40000400 	.word	0x40000400
 8005970:	40000800 	.word	0x40000800
 8005974:	40000c00 	.word	0x40000c00
 8005978:	40014000 	.word	0x40014000
 800597c:	40001800 	.word	0x40001800

08005980 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800598e:	2300      	movs	r3, #0
 8005990:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d109      	bne.n	80059ac <HAL_TIM_PWM_Start_DMA+0x2c>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	e022      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b04      	cmp	r3, #4
 80059b0:	d109      	bne.n	80059c6 <HAL_TIM_PWM_Start_DMA+0x46>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	bf0c      	ite	eq
 80059be:	2301      	moveq	r3, #1
 80059c0:	2300      	movne	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	e015      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d109      	bne.n	80059e0 <HAL_TIM_PWM_Start_DMA+0x60>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	e008      	b.n	80059f2 <HAL_TIM_PWM_Start_DMA+0x72>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80059f6:	2302      	movs	r3, #2
 80059f8:	e171      	b.n	8005cde <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d109      	bne.n	8005a14 <HAL_TIM_PWM_Start_DMA+0x94>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	e022      	b.n	8005a5a <HAL_TIM_PWM_Start_DMA+0xda>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d109      	bne.n	8005a2e <HAL_TIM_PWM_Start_DMA+0xae>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	e015      	b.n	8005a5a <HAL_TIM_PWM_Start_DMA+0xda>
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d109      	bne.n	8005a48 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	bf0c      	ite	eq
 8005a40:	2301      	moveq	r3, #1
 8005a42:	2300      	movne	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	e008      	b.n	8005a5a <HAL_TIM_PWM_Start_DMA+0xda>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	bf0c      	ite	eq
 8005a54:	2301      	moveq	r3, #1
 8005a56:	2300      	movne	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d024      	beq.n	8005aa8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_PWM_Start_DMA+0xee>
 8005a64:	887b      	ldrh	r3, [r7, #2]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d001      	beq.n	8005a6e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e137      	b.n	8005cde <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_PWM_Start_DMA+0xfe>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a7c:	e016      	b.n	8005aac <HAL_TIM_PWM_Start_DMA+0x12c>
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_PWM_Start_DMA+0x10e>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a8c:	e00e      	b.n	8005aac <HAL_TIM_PWM_Start_DMA+0x12c>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_PWM_Start_DMA+0x11e>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a9c:	e006      	b.n	8005aac <HAL_TIM_PWM_Start_DMA+0x12c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005aa6:	e001      	b.n	8005aac <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e118      	b.n	8005cde <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	2b0c      	cmp	r3, #12
 8005ab0:	f200 80ae 	bhi.w	8005c10 <HAL_TIM_PWM_Start_DMA+0x290>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005af1 	.word	0x08005af1
 8005ac0:	08005c11 	.word	0x08005c11
 8005ac4:	08005c11 	.word	0x08005c11
 8005ac8:	08005c11 	.word	0x08005c11
 8005acc:	08005b39 	.word	0x08005b39
 8005ad0:	08005c11 	.word	0x08005c11
 8005ad4:	08005c11 	.word	0x08005c11
 8005ad8:	08005c11 	.word	0x08005c11
 8005adc:	08005b81 	.word	0x08005b81
 8005ae0:	08005c11 	.word	0x08005c11
 8005ae4:	08005c11 	.word	0x08005c11
 8005ae8:	08005c11 	.word	0x08005c11
 8005aec:	08005bc9 	.word	0x08005bc9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	4a7c      	ldr	r2, [pc, #496]	; (8005ce8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005af6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	4a7b      	ldr	r2, [pc, #492]	; (8005cec <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005afe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	4a7a      	ldr	r2, [pc, #488]	; (8005cf0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005b06:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3334      	adds	r3, #52	; 0x34
 8005b14:	461a      	mov	r2, r3
 8005b16:	887b      	ldrh	r3, [r7, #2]
 8005b18:	f7fc f8a6 	bl	8001c68 <HAL_DMA_Start_IT>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e0db      	b.n	8005cde <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b34:	60da      	str	r2, [r3, #12]
      break;
 8005b36:	e06e      	b.n	8005c16 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	4a6a      	ldr	r2, [pc, #424]	; (8005ce8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005b3e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b44:	4a69      	ldr	r2, [pc, #420]	; (8005cec <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4c:	4a68      	ldr	r2, [pc, #416]	; (8005cf0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005b4e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3338      	adds	r3, #56	; 0x38
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	887b      	ldrh	r3, [r7, #2]
 8005b60:	f7fc f882 	bl	8001c68 <HAL_DMA_Start_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e0b7      	b.n	8005cde <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b7c:	60da      	str	r2, [r3, #12]
      break;
 8005b7e:	e04a      	b.n	8005c16 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	4a58      	ldr	r2, [pc, #352]	; (8005ce8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005b86:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8c:	4a57      	ldr	r2, [pc, #348]	; (8005cec <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	4a56      	ldr	r2, [pc, #344]	; (8005cf0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005b96:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	333c      	adds	r3, #60	; 0x3c
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	887b      	ldrh	r3, [r7, #2]
 8005ba8:	f7fc f85e 	bl	8001c68 <HAL_DMA_Start_IT>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e093      	b.n	8005cde <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bc4:	60da      	str	r2, [r3, #12]
      break;
 8005bc6:	e026      	b.n	8005c16 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	4a46      	ldr	r2, [pc, #280]	; (8005ce8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005bce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	4a45      	ldr	r2, [pc, #276]	; (8005cec <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	4a44      	ldr	r2, [pc, #272]	; (8005cf0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005bde:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005be4:	6879      	ldr	r1, [r7, #4]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3340      	adds	r3, #64	; 0x40
 8005bec:	461a      	mov	r2, r3
 8005bee:	887b      	ldrh	r3, [r7, #2]
 8005bf0:	f7fc f83a 	bl	8001c68 <HAL_DMA_Start_IT>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e06f      	b.n	8005cde <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c0c:	60da      	str	r2, [r3, #12]
      break;
 8005c0e:	e002      	b.n	8005c16 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
      break;
 8005c14:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c16:	7dfb      	ldrb	r3, [r7, #23]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d15f      	bne.n	8005cdc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fdd5 	bl	80067d4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a31      	ldr	r2, [pc, #196]	; (8005cf4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_TIM_PWM_Start_DMA+0x2be>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a2f      	ldr	r2, [pc, #188]	; (8005cf8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c56:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a25      	ldr	r2, [pc, #148]	; (8005cf4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d022      	beq.n	8005ca8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6a:	d01d      	beq.n	8005ca8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a22      	ldr	r2, [pc, #136]	; (8005cfc <HAL_TIM_PWM_Start_DMA+0x37c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d018      	beq.n	8005ca8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a21      	ldr	r2, [pc, #132]	; (8005d00 <HAL_TIM_PWM_Start_DMA+0x380>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d013      	beq.n	8005ca8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_TIM_PWM_Start_DMA+0x384>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d00e      	beq.n	8005ca8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d009      	beq.n	8005ca8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1b      	ldr	r2, [pc, #108]	; (8005d08 <HAL_TIM_PWM_Start_DMA+0x388>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_TIM_PWM_Start_DMA+0x328>
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1a      	ldr	r2, [pc, #104]	; (8005d0c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d111      	bne.n	8005ccc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b06      	cmp	r3, #6
 8005cb8:	d010      	beq.n	8005cdc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f042 0201 	orr.w	r2, r2, #1
 8005cc8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cca:	e007      	b.n	8005cdc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 0201 	orr.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	080060f1 	.word	0x080060f1
 8005cec:	08006199 	.word	0x08006199
 8005cf0:	0800605f 	.word	0x0800605f
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
 8005d08:	40014000 	.word	0x40014000
 8005d0c:	40001800 	.word	0x40001800

08005d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e0ae      	b.n	8005e8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b0c      	cmp	r3, #12
 8005d3a:	f200 809f 	bhi.w	8005e7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d3e:	a201      	add	r2, pc, #4	; (adr r2, 8005d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005d79 	.word	0x08005d79
 8005d48:	08005e7d 	.word	0x08005e7d
 8005d4c:	08005e7d 	.word	0x08005e7d
 8005d50:	08005e7d 	.word	0x08005e7d
 8005d54:	08005db9 	.word	0x08005db9
 8005d58:	08005e7d 	.word	0x08005e7d
 8005d5c:	08005e7d 	.word	0x08005e7d
 8005d60:	08005e7d 	.word	0x08005e7d
 8005d64:	08005dfb 	.word	0x08005dfb
 8005d68:	08005e7d 	.word	0x08005e7d
 8005d6c:	08005e7d 	.word	0x08005e7d
 8005d70:	08005e7d 	.word	0x08005e7d
 8005d74:	08005e3b 	.word	0x08005e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68b9      	ldr	r1, [r7, #8]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fade 	bl	8006340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0208 	orr.w	r2, r2, #8
 8005d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0204 	bic.w	r2, r2, #4
 8005da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6999      	ldr	r1, [r3, #24]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	619a      	str	r2, [r3, #24]
      break;
 8005db6:	e064      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fb2e 	bl	8006420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	699a      	ldr	r2, [r3, #24]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	699a      	ldr	r2, [r3, #24]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6999      	ldr	r1, [r3, #24]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	021a      	lsls	r2, r3, #8
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	619a      	str	r2, [r3, #24]
      break;
 8005df8:	e043      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fb83 	bl	800650c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	69da      	ldr	r2, [r3, #28]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0208 	orr.w	r2, r2, #8
 8005e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0204 	bic.w	r2, r2, #4
 8005e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	69d9      	ldr	r1, [r3, #28]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	61da      	str	r2, [r3, #28]
      break;
 8005e38:	e023      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f000 fbd7 	bl	80065f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	69da      	ldr	r2, [r3, #28]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69d9      	ldr	r1, [r3, #28]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	021a      	lsls	r2, r3, #8
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	61da      	str	r2, [r3, #28]
      break;
 8005e7a:	e002      	b.n	8005e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e0b4      	b.n	800601a <HAL_TIM_ConfigClockSource+0x186>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee8:	d03e      	beq.n	8005f68 <HAL_TIM_ConfigClockSource+0xd4>
 8005eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eee:	f200 8087 	bhi.w	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef6:	f000 8086 	beq.w	8006006 <HAL_TIM_ConfigClockSource+0x172>
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efe:	d87f      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f00:	2b70      	cmp	r3, #112	; 0x70
 8005f02:	d01a      	beq.n	8005f3a <HAL_TIM_ConfigClockSource+0xa6>
 8005f04:	2b70      	cmp	r3, #112	; 0x70
 8005f06:	d87b      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f08:	2b60      	cmp	r3, #96	; 0x60
 8005f0a:	d050      	beq.n	8005fae <HAL_TIM_ConfigClockSource+0x11a>
 8005f0c:	2b60      	cmp	r3, #96	; 0x60
 8005f0e:	d877      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f10:	2b50      	cmp	r3, #80	; 0x50
 8005f12:	d03c      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0xfa>
 8005f14:	2b50      	cmp	r3, #80	; 0x50
 8005f16:	d873      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d058      	beq.n	8005fce <HAL_TIM_ConfigClockSource+0x13a>
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d86f      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f20:	2b30      	cmp	r3, #48	; 0x30
 8005f22:	d064      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x15a>
 8005f24:	2b30      	cmp	r3, #48	; 0x30
 8005f26:	d86b      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f28:	2b20      	cmp	r3, #32
 8005f2a:	d060      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x15a>
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d867      	bhi.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d05c      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x15a>
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	d05a      	beq.n	8005fee <HAL_TIM_ConfigClockSource+0x15a>
 8005f38:	e062      	b.n	8006000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6818      	ldr	r0, [r3, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6899      	ldr	r1, [r3, #8]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f000 fc23 	bl	8006794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	609a      	str	r2, [r3, #8]
      break;
 8005f66:	e04f      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	6899      	ldr	r1, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f000 fc0c 	bl	8006794 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f8a:	609a      	str	r2, [r3, #8]
      break;
 8005f8c:	e03c      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	6859      	ldr	r1, [r3, #4]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f000 fb80 	bl	80066a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2150      	movs	r1, #80	; 0x50
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 fbd9 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005fac:	e02c      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6859      	ldr	r1, [r3, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f000 fb9f 	bl	80066fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2160      	movs	r1, #96	; 0x60
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fbc9 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005fcc:	e01c      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	6859      	ldr	r1, [r3, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f000 fb60 	bl	80066a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2140      	movs	r1, #64	; 0x40
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fbb9 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005fec:	e00c      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f000 fbb0 	bl	800675e <TIM_ITRx_SetConfig>
      break;
 8005ffe:	e003      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	73fb      	strb	r3, [r7, #15]
      break;
 8006004:	e000      	b.n	8006008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006052:	bf00      	nop
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	429a      	cmp	r2, r3
 8006074:	d107      	bne.n	8006086 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006084:	e02a      	b.n	80060dc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	d107      	bne.n	80060a0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2202      	movs	r2, #2
 8006094:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609e:	e01d      	b.n	80060dc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d107      	bne.n	80060ba <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2204      	movs	r2, #4
 80060ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060b8:	e010      	b.n	80060dc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d107      	bne.n	80060d4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2208      	movs	r2, #8
 80060c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060d2:	e003      	b.n	80060dc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff ffb4 	bl	800604a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
}
 80060e8:	bf00      	nop
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	429a      	cmp	r2, r3
 8006106:	d10b      	bne.n	8006120 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d136      	bne.n	8006184 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800611e:	e031      	b.n	8006184 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d10b      	bne.n	8006142 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2202      	movs	r2, #2
 800612e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d125      	bne.n	8006184 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006140:	e020      	b.n	8006184 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	429a      	cmp	r2, r3
 800614a:	d10b      	bne.n	8006164 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2204      	movs	r2, #4
 8006150:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d114      	bne.n	8006184 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006162:	e00f      	b.n	8006184 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	429a      	cmp	r2, r3
 800616c:	d10a      	bne.n	8006184 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2208      	movs	r2, #8
 8006172:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d103      	bne.n	8006184 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f7ff ff4c 	bl	8006022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	771a      	strb	r2, [r3, #28]
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d103      	bne.n	80061b8 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	771a      	strb	r2, [r3, #28]
 80061b6:	e019      	b.n	80061ec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d103      	bne.n	80061ca <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2202      	movs	r2, #2
 80061c6:	771a      	strb	r2, [r3, #28]
 80061c8:	e010      	b.n	80061ec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d103      	bne.n	80061dc <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2204      	movs	r2, #4
 80061d8:	771a      	strb	r2, [r3, #28]
 80061da:	e007      	b.n	80061ec <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d102      	bne.n	80061ec <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2208      	movs	r2, #8
 80061ea:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ff22 	bl	8006036 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	771a      	strb	r2, [r3, #28]
}
 80061f8:	bf00      	nop
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a40      	ldr	r2, [pc, #256]	; (8006314 <TIM_Base_SetConfig+0x114>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621e:	d00f      	beq.n	8006240 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a3d      	ldr	r2, [pc, #244]	; (8006318 <TIM_Base_SetConfig+0x118>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00b      	beq.n	8006240 <TIM_Base_SetConfig+0x40>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a3c      	ldr	r2, [pc, #240]	; (800631c <TIM_Base_SetConfig+0x11c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <TIM_Base_SetConfig+0x40>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a3b      	ldr	r2, [pc, #236]	; (8006320 <TIM_Base_SetConfig+0x120>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d003      	beq.n	8006240 <TIM_Base_SetConfig+0x40>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a3a      	ldr	r2, [pc, #232]	; (8006324 <TIM_Base_SetConfig+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d108      	bne.n	8006252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2f      	ldr	r2, [pc, #188]	; (8006314 <TIM_Base_SetConfig+0x114>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d02b      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006260:	d027      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a2c      	ldr	r2, [pc, #176]	; (8006318 <TIM_Base_SetConfig+0x118>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d023      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a2b      	ldr	r2, [pc, #172]	; (800631c <TIM_Base_SetConfig+0x11c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d01f      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a2a      	ldr	r2, [pc, #168]	; (8006320 <TIM_Base_SetConfig+0x120>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d01b      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a29      	ldr	r2, [pc, #164]	; (8006324 <TIM_Base_SetConfig+0x124>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d017      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a28      	ldr	r2, [pc, #160]	; (8006328 <TIM_Base_SetConfig+0x128>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a27      	ldr	r2, [pc, #156]	; (800632c <TIM_Base_SetConfig+0x12c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d00f      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a26      	ldr	r2, [pc, #152]	; (8006330 <TIM_Base_SetConfig+0x130>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00b      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a25      	ldr	r2, [pc, #148]	; (8006334 <TIM_Base_SetConfig+0x134>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d007      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a24      	ldr	r2, [pc, #144]	; (8006338 <TIM_Base_SetConfig+0x138>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d003      	beq.n	80062b2 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4a23      	ldr	r2, [pc, #140]	; (800633c <TIM_Base_SetConfig+0x13c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d108      	bne.n	80062c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a0a      	ldr	r2, [pc, #40]	; (8006314 <TIM_Base_SetConfig+0x114>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_Base_SetConfig+0xf8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a0c      	ldr	r2, [pc, #48]	; (8006324 <TIM_Base_SetConfig+0x124>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d103      	bne.n	8006300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	691a      	ldr	r2, [r3, #16]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	615a      	str	r2, [r3, #20]
}
 8006306:	bf00      	nop
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40010000 	.word	0x40010000
 8006318:	40000400 	.word	0x40000400
 800631c:	40000800 	.word	0x40000800
 8006320:	40000c00 	.word	0x40000c00
 8006324:	40010400 	.word	0x40010400
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800
 8006334:	40001800 	.word	0x40001800
 8006338:	40001c00 	.word	0x40001c00
 800633c:	40002000 	.word	0x40002000

08006340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f023 0201 	bic.w	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f023 0302 	bic.w	r3, r3, #2
 8006388:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	4313      	orrs	r3, r2
 8006392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a20      	ldr	r2, [pc, #128]	; (8006418 <TIM_OC1_SetConfig+0xd8>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <TIM_OC1_SetConfig+0x64>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a1f      	ldr	r2, [pc, #124]	; (800641c <TIM_OC1_SetConfig+0xdc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d10c      	bne.n	80063be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f023 0308 	bic.w	r3, r3, #8
 80063aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f023 0304 	bic.w	r3, r3, #4
 80063bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a15      	ldr	r2, [pc, #84]	; (8006418 <TIM_OC1_SetConfig+0xd8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d003      	beq.n	80063ce <TIM_OC1_SetConfig+0x8e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a14      	ldr	r2, [pc, #80]	; (800641c <TIM_OC1_SetConfig+0xdc>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d111      	bne.n	80063f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	693a      	ldr	r2, [r7, #16]
 80063f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	621a      	str	r2, [r3, #32]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	40010000 	.word	0x40010000
 800641c:	40010400 	.word	0x40010400

08006420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0210 	bic.w	r2, r3, #16
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800644e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	021b      	lsls	r3, r3, #8
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0320 	bic.w	r3, r3, #32
 800646a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	011b      	lsls	r3, r3, #4
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a22      	ldr	r2, [pc, #136]	; (8006504 <TIM_OC2_SetConfig+0xe4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_OC2_SetConfig+0x68>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a21      	ldr	r2, [pc, #132]	; (8006508 <TIM_OC2_SetConfig+0xe8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d10d      	bne.n	80064a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800648e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	68db      	ldr	r3, [r3, #12]
 8006494:	011b      	lsls	r3, r3, #4
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <TIM_OC2_SetConfig+0xe4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_OC2_SetConfig+0x94>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a16      	ldr	r2, [pc, #88]	; (8006508 <TIM_OC2_SetConfig+0xe8>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d113      	bne.n	80064dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	621a      	str	r2, [r3, #32]
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40010000 	.word	0x40010000
 8006508:	40010400 	.word	0x40010400

0800650c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a21      	ldr	r2, [pc, #132]	; (80065ec <TIM_OC3_SetConfig+0xe0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_OC3_SetConfig+0x66>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a20      	ldr	r2, [pc, #128]	; (80065f0 <TIM_OC3_SetConfig+0xe4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d10d      	bne.n	800658e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800658c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a16      	ldr	r2, [pc, #88]	; (80065ec <TIM_OC3_SetConfig+0xe0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_OC3_SetConfig+0x92>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a15      	ldr	r2, [pc, #84]	; (80065f0 <TIM_OC3_SetConfig+0xe4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d113      	bne.n	80065c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	011b      	lsls	r3, r3, #4
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	697a      	ldr	r2, [r7, #20]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40010000 	.word	0x40010000
 80065f0:	40010400 	.word	0x40010400

080065f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800662a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800663e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	031b      	lsls	r3, r3, #12
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a12      	ldr	r2, [pc, #72]	; (8006698 <TIM_OC4_SetConfig+0xa4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC4_SetConfig+0x68>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a11      	ldr	r2, [pc, #68]	; (800669c <TIM_OC4_SetConfig+0xa8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d109      	bne.n	8006670 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	019b      	lsls	r3, r3, #6
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	621a      	str	r2, [r3, #32]
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40010000 	.word	0x40010000
 800669c:	40010400 	.word	0x40010400

080066a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 030a 	bic.w	r3, r3, #10
 80066dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066fe:	b480      	push	{r7}
 8006700:	b087      	sub	sp, #28
 8006702:	af00      	add	r7, sp, #0
 8006704:	60f8      	str	r0, [r7, #12]
 8006706:	60b9      	str	r1, [r7, #8]
 8006708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f023 0210 	bic.w	r2, r3, #16
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	699b      	ldr	r3, [r3, #24]
 800671a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	031b      	lsls	r3, r3, #12
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800673a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006774:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	f043 0307 	orr.w	r3, r3, #7
 8006780:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	609a      	str	r2, [r3, #8]
}
 8006788:	bf00      	nop
 800678a:	3714      	adds	r7, #20
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	021a      	lsls	r2, r3, #8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	609a      	str	r2, [r3, #8]
}
 80067c8:	bf00      	nop
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 031f 	and.w	r3, r3, #31
 80067e6:	2201      	movs	r2, #1
 80067e8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1a      	ldr	r2, [r3, #32]
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	43db      	mvns	r3, r3
 80067f6:	401a      	ands	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a1a      	ldr	r2, [r3, #32]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 031f 	and.w	r3, r3, #31
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	fa01 f303 	lsl.w	r3, r1, r3
 800680c:	431a      	orrs	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	621a      	str	r2, [r3, #32]
}
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
	...

08006820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006830:	2b01      	cmp	r3, #1
 8006832:	d101      	bne.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006834:	2302      	movs	r3, #2
 8006836:	e05a      	b.n	80068ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a21      	ldr	r2, [pc, #132]	; (80068fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d022      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006884:	d01d      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a1d      	ldr	r2, [pc, #116]	; (8006900 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d018      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a1b      	ldr	r2, [pc, #108]	; (8006904 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d013      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1a      	ldr	r2, [pc, #104]	; (8006908 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00e      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a18      	ldr	r2, [pc, #96]	; (800690c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d009      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a17      	ldr	r2, [pc, #92]	; (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d004      	beq.n	80068c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a15      	ldr	r2, [pc, #84]	; (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d10c      	bne.n	80068dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40010000 	.word	0x40010000
 8006900:	40000400 	.word	0x40000400
 8006904:	40000800 	.word	0x40000800
 8006908:	40000c00 	.word	0x40000c00
 800690c:	40010400 	.word	0x40010400
 8006910:	40014000 	.word	0x40014000
 8006914:	40001800 	.word	0x40001800

08006918 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006918:	b084      	sub	sp, #16
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
 8006922:	f107 001c 	add.w	r0, r7, #28
 8006926:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	2b01      	cmp	r3, #1
 800692e:	d122      	bne.n	8006976 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695a:	2b01      	cmp	r3, #1
 800695c:	d105      	bne.n	800696a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9c0 	bl	8006cf0 <USB_CoreReset>
 8006970:	4603      	mov	r3, r0
 8006972:	73fb      	strb	r3, [r7, #15]
 8006974:	e01a      	b.n	80069ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9b4 	bl	8006cf0 <USB_CoreReset>
 8006988:	4603      	mov	r3, r0
 800698a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800698c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	639a      	str	r2, [r3, #56]	; 0x38
 800699e:	e005      	b.n	80069ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d10b      	bne.n	80069ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f043 0206 	orr.w	r2, r3, #6
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f043 0220 	orr.w	r2, r3, #32
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069d6:	b004      	add	sp, #16
 80069d8:	4770      	bx	lr

080069da <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f043 0201 	orr.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f023 0201 	bic.w	r2, r3, #1
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	460b      	mov	r3, r1
 8006a28:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d115      	bne.n	8006a6c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a4c:	2001      	movs	r0, #1
 8006a4e:	f7fa fcc5 	bl	80013dc <HAL_Delay>
      ms++;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3301      	adds	r3, #1
 8006a56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f93a 	bl	8006cd2 <USB_GetMode>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d01e      	beq.n	8006aa2 <USB_SetCurrentMode+0x84>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b31      	cmp	r3, #49	; 0x31
 8006a68:	d9f0      	bls.n	8006a4c <USB_SetCurrentMode+0x2e>
 8006a6a:	e01a      	b.n	8006aa2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a6c:	78fb      	ldrb	r3, [r7, #3]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d115      	bne.n	8006a9e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a7e:	2001      	movs	r0, #1
 8006a80:	f7fa fcac 	bl	80013dc <HAL_Delay>
      ms++;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f921 	bl	8006cd2 <USB_GetMode>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <USB_SetCurrentMode+0x84>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b31      	cmp	r3, #49	; 0x31
 8006a9a:	d9f0      	bls.n	8006a7e <USB_SetCurrentMode+0x60>
 8006a9c:	e001      	b.n	8006aa2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e005      	b.n	8006aae <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b32      	cmp	r3, #50	; 0x32
 8006aa6:	d101      	bne.n	8006aac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e000      	b.n	8006aae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a13      	ldr	r2, [pc, #76]	; (8006b1c <USB_FlushTxFifo+0x64>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d901      	bls.n	8006ad8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e01b      	b.n	8006b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	daf2      	bge.n	8006ac6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	019b      	lsls	r3, r3, #6
 8006ae8:	f043 0220 	orr.w	r2, r3, #32
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <USB_FlushTxFifo+0x64>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d901      	bls.n	8006b02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e006      	b.n	8006b10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d0f0      	beq.n	8006af0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	00030d40 	.word	0x00030d40

08006b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	4a11      	ldr	r2, [pc, #68]	; (8006b7c <USB_FlushRxFifo+0x5c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d901      	bls.n	8006b3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e018      	b.n	8006b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	daf2      	bge.n	8006b2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2210      	movs	r2, #16
 8006b4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	3301      	adds	r3, #1
 8006b54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	4a08      	ldr	r2, [pc, #32]	; (8006b7c <USB_FlushRxFifo+0x5c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e006      	b.n	8006b70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0310 	and.w	r3, r3, #16
 8006b6a:	2b10      	cmp	r3, #16
 8006b6c:	d0f0      	beq.n	8006b50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	00030d40 	.word	0x00030d40

08006b80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b089      	sub	sp, #36	; 0x24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	460b      	mov	r3, r1
 8006b90:	71fb      	strb	r3, [r7, #7]
 8006b92:	4613      	mov	r3, r2
 8006b94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d123      	bne.n	8006bee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ba6:	88bb      	ldrh	r3, [r7, #4]
 8006ba8:	3303      	adds	r3, #3
 8006baa:	089b      	lsrs	r3, r3, #2
 8006bac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	e018      	b.n	8006be6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	031a      	lsls	r2, r3, #12
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	3301      	adds	r3, #1
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d3e2      	bcc.n	8006bb4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3724      	adds	r7, #36	; 0x24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b08b      	sub	sp, #44	; 0x2c
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	089b      	lsrs	r3, r3, #2
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c1a:	88fb      	ldrh	r3, [r7, #6]
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c22:	2300      	movs	r3, #0
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	e014      	b.n	8006c52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	3301      	adds	r3, #1
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	3301      	adds	r3, #1
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	3301      	adds	r3, #1
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d3e6      	bcc.n	8006c28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c5a:	8bfb      	ldrh	r3, [r7, #30]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01e      	beq.n	8006c9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f107 0310 	add.w	r3, r7, #16
 8006c70:	6812      	ldr	r2, [r2, #0]
 8006c72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	701a      	strb	r2, [r3, #0]
      i++;
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	3301      	adds	r3, #1
 8006c90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c92:	8bfb      	ldrh	r3, [r7, #30]
 8006c94:	3b01      	subs	r3, #1
 8006c96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c98:	8bfb      	ldrh	r3, [r7, #30]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1ea      	bne.n	8006c74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	372c      	adds	r7, #44	; 0x2c
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f003 0301 	and.w	r3, r3, #1
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	4a13      	ldr	r2, [pc, #76]	; (8006d54 <USB_CoreReset+0x64>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d901      	bls.n	8006d0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e01b      	b.n	8006d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	daf2      	bge.n	8006cfc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f043 0201 	orr.w	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <USB_CoreReset+0x64>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d901      	bls.n	8006d38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e006      	b.n	8006d46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d0f0      	beq.n	8006d26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	00030d40 	.word	0x00030d40

08006d58 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d58:	b084      	sub	sp, #16
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d78:	461a      	mov	r2, r3
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d018      	beq.n	8006de0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d10a      	bne.n	8006dca <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dc2:	f043 0304 	orr.w	r3, r3, #4
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	e014      	b.n	8006df4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dd8:	f023 0304 	bic.w	r3, r3, #4
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e009      	b.n	8006df4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006dee:	f023 0304 	bic.w	r3, r3, #4
 8006df2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006df4:	2110      	movs	r1, #16
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fe5e 	bl	8006ab8 <USB_FlushTxFifo>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff fe8a 	bl	8006b20 <USB_FlushRxFifo>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	e015      	b.n	8006e48 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e28:	461a      	mov	r2, r3
 8006e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e2e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	3301      	adds	r3, #1
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d3e5      	bcc.n	8006e1c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e70:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a13      	ldr	r2, [pc, #76]	; (8006ec4 <USB_HostInit+0x16c>)
 8006e76:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <USB_HostInit+0x170>)
 8006e7c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006e80:	e009      	b.n	8006e96 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2280      	movs	r2, #128	; 0x80
 8006e86:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <USB_HostInit+0x174>)
 8006e8c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a0f      	ldr	r2, [pc, #60]	; (8006ed0 <USB_HostInit+0x178>)
 8006e92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f043 0210 	orr.w	r2, r3, #16
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699a      	ldr	r2, [r3, #24]
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <USB_HostInit+0x17c>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3718      	adds	r7, #24
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ec0:	b004      	add	sp, #16
 8006ec2:	4770      	bx	lr
 8006ec4:	01000200 	.word	0x01000200
 8006ec8:	00e00300 	.word	0x00e00300
 8006ecc:	00600080 	.word	0x00600080
 8006ed0:	004000e0 	.word	0x004000e0
 8006ed4:	a3200008 	.word	0xa3200008

08006ed8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006ef6:	f023 0303 	bic.w	r3, r3, #3
 8006efa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f10:	4313      	orrs	r3, r2
 8006f12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d107      	bne.n	8006f2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f20:	461a      	mov	r2, r3
 8006f22:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006f26:	6053      	str	r3, [r2, #4]
 8006f28:	e009      	b.n	8006f3e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006f2a:	78fb      	ldrb	r3, [r7, #3]
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d106      	bne.n	8006f3e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f36:	461a      	mov	r2, r3
 8006f38:	f241 7370 	movw	r3, #6000	; 0x1770
 8006f3c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006f6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006f7c:	2064      	movs	r0, #100	; 0x64
 8006f7e:	f7fa fa2d 	bl	80013dc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006f8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006f90:	200a      	movs	r0, #10
 8006f92:	f7fa fa23 	bl	80013dc <HAL_Delay>

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006fc4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <USB_DriveVbus+0x44>
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d106      	bne.n	8006fe4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006fde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006fe2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fee:	d109      	bne.n	8007004 <USB_DriveVbus+0x64>
 8006ff0:	78fb      	ldrb	r3, [r7, #3]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006ffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007002:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr

08007012 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007012:	b480      	push	{r7}
 8007014:	b085      	sub	sp, #20
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	0c5b      	lsrs	r3, r3, #17
 8007030:	f003 0303 	and.w	r3, r3, #3
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	b29b      	uxth	r3, r3
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b088      	sub	sp, #32
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4603      	mov	r3, r0
 8007074:	70fb      	strb	r3, [r7, #3]
 8007076:	460b      	mov	r3, r1
 8007078:	70bb      	strb	r3, [r7, #2]
 800707a:	4613      	mov	r3, r2
 800707c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800707e:	2300      	movs	r3, #0
 8007080:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	4413      	add	r3, r2
 800708e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007092:	461a      	mov	r2, r3
 8007094:	f04f 33ff 	mov.w	r3, #4294967295
 8007098:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800709a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d87e      	bhi.n	80071a0 <USB_HC_Init+0x13c>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <USB_HC_Init+0x44>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070b9 	.word	0x080070b9
 80070ac:	08007163 	.word	0x08007163
 80070b0:	080070b9 	.word	0x080070b9
 80070b4:	08007125 	.word	0x08007125
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80070b8:	78fb      	ldrb	r3, [r7, #3]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c4:	461a      	mov	r2, r3
 80070c6:	f240 439d 	movw	r3, #1181	; 0x49d
 80070ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80070cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da10      	bge.n	80070f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80070d4:	78fb      	ldrb	r3, [r7, #3]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80070f4:	e057      	b.n	80071a6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d051      	beq.n	80071a6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	4413      	add	r3, r2
 800710a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	0151      	lsls	r1, r2, #5
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	440a      	add	r2, r1
 8007118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800711c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007120:	60d3      	str	r3, [r2, #12]
      break;
 8007122:	e040      	b.n	80071a6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	4413      	add	r3, r2
 800712c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007130:	461a      	mov	r2, r3
 8007132:	f240 639d 	movw	r3, #1693	; 0x69d
 8007136:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007138:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800713c:	2b00      	cmp	r3, #0
 800713e:	da34      	bge.n	80071aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4413      	add	r3, r2
 8007148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	440a      	add	r2, r1
 8007156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800715a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800715e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007160:	e023      	b.n	80071aa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	461a      	mov	r2, r3
 8007170:	f240 2325 	movw	r3, #549	; 0x225
 8007174:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007176:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800717a:	2b00      	cmp	r3, #0
 800717c:	da17      	bge.n	80071ae <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800717e:	78fb      	ldrb	r3, [r7, #3]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	4413      	add	r3, r2
 8007186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	78fa      	ldrb	r2, [r7, #3]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	440a      	add	r2, r1
 8007194:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007198:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800719c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800719e:	e006      	b.n	80071ae <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	77fb      	strb	r3, [r7, #31]
      break;
 80071a4:	e004      	b.n	80071b0 <USB_HC_Init+0x14c>
      break;
 80071a6:	bf00      	nop
 80071a8:	e002      	b.n	80071b0 <USB_HC_Init+0x14c>
      break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <USB_HC_Init+0x14c>
      break;
 80071ae:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	0151      	lsls	r1, r2, #5
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	440a      	add	r2, r1
 80071c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ca:	f043 0302 	orr.w	r3, r3, #2
 80071ce:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	2101      	movs	r1, #1
 80071e0:	fa01 f303 	lsl.w	r3, r1, r3
 80071e4:	6939      	ldr	r1, [r7, #16]
 80071e6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80071ea:	4313      	orrs	r3, r2
 80071ec:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80071fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	da03      	bge.n	800720a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	e001      	b.n	800720e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff feff 	bl	8007012 <USB_GetHostSpeed>
 8007214:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007216:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800721a:	2b02      	cmp	r3, #2
 800721c:	d106      	bne.n	800722c <USB_HC_Init+0x1c8>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b02      	cmp	r3, #2
 8007222:	d003      	beq.n	800722c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007224:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	e001      	b.n	8007230 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007230:	787b      	ldrb	r3, [r7, #1]
 8007232:	059b      	lsls	r3, r3, #22
 8007234:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007238:	78bb      	ldrb	r3, [r7, #2]
 800723a:	02db      	lsls	r3, r3, #11
 800723c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007240:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007246:	049b      	lsls	r3, r3, #18
 8007248:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800724c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800724e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007250:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007254:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	0159      	lsls	r1, r3, #5
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	440b      	add	r3, r1
 8007262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007266:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800726c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800726e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007272:	2b03      	cmp	r3, #3
 8007274:	d003      	beq.n	800727e <USB_HC_Init+0x21a>
 8007276:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800727a:	2b01      	cmp	r3, #1
 800727c:	d10f      	bne.n	800729e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4413      	add	r3, r2
 8007286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	78fa      	ldrb	r2, [r7, #3]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	440a      	add	r2, r1
 8007294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800729c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800729e:	7ffb      	ldrb	r3, [r7, #31]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b08c      	sub	sp, #48	; 0x30
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	785b      	ldrb	r3, [r3, #1]
 80072be:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80072c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072c4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d02d      	beq.n	800732e <USB_HC_StartXfer+0x86>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	791b      	ldrb	r3, [r3, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d129      	bne.n	800732e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d117      	bne.n	8007310 <USB_HC_StartXfer+0x68>
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	79db      	ldrb	r3, [r3, #7]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <USB_HC_StartXfer+0x48>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	79db      	ldrb	r3, [r3, #7]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d10f      	bne.n	8007310 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	6a3b      	ldr	r3, [r7, #32]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	6a3a      	ldr	r2, [r7, #32]
 8007304:	440a      	add	r2, r1
 8007306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800730a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007310:	79fb      	ldrb	r3, [r7, #7]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10b      	bne.n	800732e <USB_HC_StartXfer+0x86>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	795b      	ldrb	r3, [r3, #5]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d107      	bne.n	800732e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	785b      	ldrb	r3, [r3, #1]
 8007322:	4619      	mov	r1, r3
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fa0f 	bl	8007748 <USB_DoPing>
      return HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	e0f8      	b.n	8007520 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d018      	beq.n	8007368 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	8912      	ldrh	r2, [r2, #8]
 800733e:	4413      	add	r3, r2
 8007340:	3b01      	subs	r3, #1
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	8912      	ldrh	r2, [r2, #8]
 8007346:	fbb3 f3f2 	udiv	r3, r3, r2
 800734a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800734c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800734e:	8b7b      	ldrh	r3, [r7, #26]
 8007350:	429a      	cmp	r2, r3
 8007352:	d90b      	bls.n	800736c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007354:	8b7b      	ldrh	r3, [r7, #26]
 8007356:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007358:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	8912      	ldrh	r2, [r2, #8]
 800735e:	fb03 f202 	mul.w	r2, r3, r2
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	611a      	str	r2, [r3, #16]
 8007366:	e001      	b.n	800736c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007368:	2301      	movs	r3, #1
 800736a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	78db      	ldrb	r3, [r3, #3]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007374:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	8912      	ldrh	r2, [r2, #8]
 800737a:	fb03 f202 	mul.w	r2, r3, r2
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	611a      	str	r2, [r3, #16]
 8007382:	e003      	b.n	800738c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	695a      	ldr	r2, [r3, #20]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007394:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007396:	04d9      	lsls	r1, r3, #19
 8007398:	4b63      	ldr	r3, [pc, #396]	; (8007528 <USB_HC_StartXfer+0x280>)
 800739a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800739c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	7a9b      	ldrb	r3, [r3, #10]
 80073a2:	075b      	lsls	r3, r3, #29
 80073a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073a8:	69f9      	ldr	r1, [r7, #28]
 80073aa:	0148      	lsls	r0, r1, #5
 80073ac:	6a39      	ldr	r1, [r7, #32]
 80073ae:	4401      	add	r1, r0
 80073b0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80073b4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80073b6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	68d9      	ldr	r1, [r3, #12]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ce:	460a      	mov	r2, r1
 80073d0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bf0c      	ite	eq
 80073e2:	2301      	moveq	r3, #1
 80073e4:	2300      	movne	r3, #0
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	6a3a      	ldr	r2, [r7, #32]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007404:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007408:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	6a3b      	ldr	r3, [r7, #32]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	7e7b      	ldrb	r3, [r7, #25]
 800741a:	075b      	lsls	r3, r3, #29
 800741c:	69f9      	ldr	r1, [r7, #28]
 800741e:	0148      	lsls	r0, r1, #5
 8007420:	6a39      	ldr	r1, [r7, #32]
 8007422:	4401      	add	r1, r0
 8007424:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007428:	4313      	orrs	r3, r2
 800742a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	4413      	add	r3, r2
 8007434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007442:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	78db      	ldrb	r3, [r3, #3]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007452:	613b      	str	r3, [r7, #16]
 8007454:	e003      	b.n	800745e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800745c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007464:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	4413      	add	r3, r2
 800746e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007472:	461a      	mov	r2, r3
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	e04e      	b.n	8007520 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	78db      	ldrb	r3, [r3, #3]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d149      	bne.n	800751e <USB_HC_StartXfer+0x276>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d045      	beq.n	800751e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	79db      	ldrb	r3, [r3, #7]
 8007496:	2b03      	cmp	r3, #3
 8007498:	d830      	bhi.n	80074fc <USB_HC_StartXfer+0x254>
 800749a:	a201      	add	r2, pc, #4	; (adr r2, 80074a0 <USB_HC_StartXfer+0x1f8>)
 800749c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a0:	080074b1 	.word	0x080074b1
 80074a4:	080074d5 	.word	0x080074d5
 80074a8:	080074b1 	.word	0x080074b1
 80074ac:	080074d5 	.word	0x080074d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	3303      	adds	r3, #3
 80074b6:	089b      	lsrs	r3, r3, #2
 80074b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80074ba:	8afa      	ldrh	r2, [r7, #22]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d91c      	bls.n	8007500 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80074d2:	e015      	b.n	8007500 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	695b      	ldr	r3, [r3, #20]
 80074d8:	3303      	adds	r3, #3
 80074da:	089b      	lsrs	r3, r3, #2
 80074dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80074de:	8afa      	ldrh	r2, [r7, #22]
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d90a      	bls.n	8007504 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80074fa:	e003      	b.n	8007504 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80074fc:	bf00      	nop
 80074fe:	e002      	b.n	8007506 <USB_HC_StartXfer+0x25e>
        break;
 8007500:	bf00      	nop
 8007502:	e000      	b.n	8007506 <USB_HC_StartXfer+0x25e>
        break;
 8007504:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	68d9      	ldr	r1, [r3, #12]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	785a      	ldrb	r2, [r3, #1]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	b29b      	uxth	r3, r3
 8007514:	2000      	movs	r0, #0
 8007516:	9000      	str	r0, [sp, #0]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7ff fb31 	bl	8006b80 <USB_WritePacket>
  }

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3728      	adds	r7, #40	; 0x28
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	1ff80000 	.word	0x1ff80000

0800752c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	b29b      	uxth	r3, r3
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800754e:	b480      	push	{r7}
 8007550:	b089      	sub	sp, #36	; 0x24
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007562:	2300      	movs	r3, #0
 8007564:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	0c9b      	lsrs	r3, r3, #18
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	4413      	add	r3, r2
 8007584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	0fdb      	lsrs	r3, r3, #31
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b20      	cmp	r3, #32
 800759c:	d104      	bne.n	80075a8 <USB_HC_Halt+0x5a>
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	e0c8      	b.n	800773a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d002      	beq.n	80075b4 <USB_HC_Halt+0x66>
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d163      	bne.n	800767c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	0151      	lsls	r1, r2, #5
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	440a      	add	r2, r1
 80075ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80075ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075d2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 80ab 	bne.w	8007738 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d133      	bne.n	8007656 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	69fa      	ldr	r2, [r7, #28]
 8007602:	440a      	add	r2, r1
 8007604:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007608:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800760c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	440a      	add	r2, r1
 8007624:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007628:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800762c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	3301      	adds	r3, #1
 8007632:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800763a:	d81d      	bhi.n	8007678 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800764e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007652:	d0ec      	beq.n	800762e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007654:	e070      	b.n	8007738 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	4413      	add	r3, r2
 800765e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	0151      	lsls	r1, r2, #5
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	440a      	add	r2, r1
 800766c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007670:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007674:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007676:	e05f      	b.n	8007738 <USB_HC_Halt+0x1ea>
            break;
 8007678:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800767a:	e05d      	b.n	8007738 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	0151      	lsls	r1, r2, #5
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	440a      	add	r2, r1
 8007692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800769a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d133      	bne.n	8007714 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	69fa      	ldr	r2, [r7, #28]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3301      	adds	r3, #1
 80076f0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076f8:	d81d      	bhi.n	8007736 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	4413      	add	r3, r2
 8007702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800770c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007710:	d0ec      	beq.n	80076ec <USB_HC_Halt+0x19e>
 8007712:	e011      	b.n	8007738 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69ba      	ldr	r2, [r7, #24]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	69fa      	ldr	r2, [r7, #28]
 8007728:	440a      	add	r2, r1
 800772a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007732:	6013      	str	r3, [r2, #0]
 8007734:	e000      	b.n	8007738 <USB_HC_Halt+0x1ea>
          break;
 8007736:	bf00      	nop
    }
  }

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3724      	adds	r7, #36	; 0x24
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007748:	b480      	push	{r7}
 800774a:	b087      	sub	sp, #28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800775c:	2301      	movs	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	04da      	lsls	r2, r3, #19
 8007764:	4b15      	ldr	r3, [pc, #84]	; (80077bc <USB_DoPing+0x74>)
 8007766:	4013      	ands	r3, r2
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	440a      	add	r2, r1
 8007770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007778:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	4413      	add	r3, r2
 8007782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007790:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007798:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a6:	461a      	mov	r2, r3
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	371c      	adds	r7, #28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
 80077ba:	bf00      	nop
 80077bc:	1ff80000 	.word	0x1ff80000

080077c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b088      	sub	sp, #32
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff f911 	bl	80069fc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077da:	2110      	movs	r1, #16
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff f96b 	bl	8006ab8 <USB_FlushTxFifo>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff f997 	bl	8006b20 <USB_FlushRxFifo>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80077fc:	2300      	movs	r3, #0
 80077fe:	61bb      	str	r3, [r7, #24]
 8007800:	e01f      	b.n	8007842 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	4413      	add	r3, r2
 800780a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007818:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007820:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007828:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	4413      	add	r3, r2
 8007832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007836:	461a      	mov	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	3301      	adds	r3, #1
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	2b0f      	cmp	r3, #15
 8007846:	d9dc      	bls.n	8007802 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007848:	2300      	movs	r3, #0
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	e034      	b.n	80078b8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	4413      	add	r3, r2
 8007856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007864:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800786c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007874:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	4413      	add	r3, r2
 800787e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007882:	461a      	mov	r2, r3
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	3301      	adds	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007894:	d80c      	bhi.n	80078b0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	4413      	add	r3, r2
 800789e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ac:	d0ec      	beq.n	8007888 <USB_StopHost+0xc8>
 80078ae:	e000      	b.n	80078b2 <USB_StopHost+0xf2>
        break;
 80078b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	3301      	adds	r3, #1
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	2b0f      	cmp	r3, #15
 80078bc:	d9c7      	bls.n	800784e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078c4:	461a      	mov	r2, r3
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f04f 32ff 	mov.w	r2, #4294967295
 80078d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff f880 	bl	80069da <USB_EnableGlobalInt>

  return ret;
 80078da:	7ffb      	ldrb	r3, [r7, #31]
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3720      	adds	r7, #32
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80078e4:	b590      	push	{r4, r7, lr}
 80078e6:	b089      	sub	sp, #36	; 0x24
 80078e8:	af04      	add	r7, sp, #16
 80078ea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80078ec:	2301      	movs	r3, #1
 80078ee:	2202      	movs	r2, #2
 80078f0:	2102      	movs	r1, #2
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fc66 	bl	80081c4 <USBH_FindInterface>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2bff      	cmp	r3, #255	; 0xff
 8007900:	d002      	beq.n	8007908 <USBH_CDC_InterfaceInit+0x24>
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d901      	bls.n	800790c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007908:	2302      	movs	r3, #2
 800790a:	e13d      	b.n	8007b88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fc3b 	bl	800818c <USBH_SelectInterface>
 8007916:	4603      	mov	r3, r0
 8007918:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007920:	2302      	movs	r3, #2
 8007922:	e131      	b.n	8007b88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800792a:	2050      	movs	r0, #80	; 0x50
 800792c:	f002 fafa 	bl	8009f24 <malloc>
 8007930:	4603      	mov	r3, r0
 8007932:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800793a:	69db      	ldr	r3, [r3, #28]
 800793c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d101      	bne.n	8007948 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007944:	2302      	movs	r3, #2
 8007946:	e11f      	b.n	8007b88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007948:	2250      	movs	r2, #80	; 0x50
 800794a:	2100      	movs	r1, #0
 800794c:	68b8      	ldr	r0, [r7, #8]
 800794e:	f002 faf9 	bl	8009f44 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007952:	7bfb      	ldrb	r3, [r7, #15]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	211a      	movs	r1, #26
 8007958:	fb01 f303 	mul.w	r3, r1, r3
 800795c:	4413      	add	r3, r2
 800795e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	b25b      	sxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	da15      	bge.n	8007996 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	211a      	movs	r1, #26
 8007970:	fb01 f303 	mul.w	r3, r1, r3
 8007974:	4413      	add	r3, r2
 8007976:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800797a:	781a      	ldrb	r2, [r3, #0]
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	211a      	movs	r1, #26
 8007986:	fb01 f303 	mul.w	r3, r1, r3
 800798a:	4413      	add	r3, r2
 800798c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007990:	881a      	ldrh	r2, [r3, #0]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	785b      	ldrb	r3, [r3, #1]
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 ff2c 	bl	80097fa <USBH_AllocPipe>
 80079a2:	4603      	mov	r3, r0
 80079a4:	461a      	mov	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	7819      	ldrb	r1, [r3, #0]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	7858      	ldrb	r0, [r3, #1]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	8952      	ldrh	r2, [r2, #10]
 80079c2:	9202      	str	r2, [sp, #8]
 80079c4:	2203      	movs	r2, #3
 80079c6:	9201      	str	r2, [sp, #4]
 80079c8:	9300      	str	r3, [sp, #0]
 80079ca:	4623      	mov	r3, r4
 80079cc:	4602      	mov	r2, r0
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fee4 	bl	800979c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2200      	movs	r2, #0
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f002 f9f3 	bl	8009dc8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80079e2:	2300      	movs	r3, #0
 80079e4:	2200      	movs	r2, #0
 80079e6:	210a      	movs	r1, #10
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fbeb 	bl	80081c4 <USBH_FindInterface>
 80079ee:	4603      	mov	r3, r0
 80079f0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80079f2:	7bfb      	ldrb	r3, [r7, #15]
 80079f4:	2bff      	cmp	r3, #255	; 0xff
 80079f6:	d002      	beq.n	80079fe <USBH_CDC_InterfaceInit+0x11a>
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d901      	bls.n	8007a02 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80079fe:	2302      	movs	r3, #2
 8007a00:	e0c2      	b.n	8007b88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	211a      	movs	r1, #26
 8007a08:	fb01 f303 	mul.w	r3, r1, r3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	b25b      	sxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	da16      	bge.n	8007a48 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	211a      	movs	r1, #26
 8007a20:	fb01 f303 	mul.w	r3, r1, r3
 8007a24:	4413      	add	r3, r2
 8007a26:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a2a:	781a      	ldrb	r2, [r3, #0]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	211a      	movs	r1, #26
 8007a36:	fb01 f303 	mul.w	r3, r1, r3
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007a40:	881a      	ldrh	r2, [r3, #0]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	835a      	strh	r2, [r3, #26]
 8007a46:	e015      	b.n	8007a74 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	211a      	movs	r1, #26
 8007a4e:	fb01 f303 	mul.w	r3, r1, r3
 8007a52:	4413      	add	r3, r2
 8007a54:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007a58:	781a      	ldrb	r2, [r3, #0]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	211a      	movs	r1, #26
 8007a64:	fb01 f303 	mul.w	r3, r1, r3
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007a6e:	881a      	ldrh	r2, [r3, #0]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	211a      	movs	r1, #26
 8007a7a:	fb01 f303 	mul.w	r3, r1, r3
 8007a7e:	4413      	add	r3, r2
 8007a80:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	b25b      	sxtb	r3, r3
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da16      	bge.n	8007aba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	211a      	movs	r1, #26
 8007a92:	fb01 f303 	mul.w	r3, r1, r3
 8007a96:	4413      	add	r3, r2
 8007a98:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007a9c:	781a      	ldrb	r2, [r3, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	211a      	movs	r1, #26
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ab2:	881a      	ldrh	r2, [r3, #0]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	835a      	strh	r2, [r3, #26]
 8007ab8:	e015      	b.n	8007ae6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	211a      	movs	r1, #26
 8007ac0:	fb01 f303 	mul.w	r3, r1, r3
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007aca:	781a      	ldrb	r2, [r3, #0]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	211a      	movs	r1, #26
 8007ad6:	fb01 f303 	mul.w	r3, r1, r3
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ae0:	881a      	ldrh	r2, [r3, #0]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	7b9b      	ldrb	r3, [r3, #14]
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 fe84 	bl	80097fa <USBH_AllocPipe>
 8007af2:	4603      	mov	r3, r0
 8007af4:	461a      	mov	r2, r3
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	7bdb      	ldrb	r3, [r3, #15]
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f001 fe7a 	bl	80097fa <USBH_AllocPipe>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	7b59      	ldrb	r1, [r3, #13]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	7b98      	ldrb	r0, [r3, #14]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	8b12      	ldrh	r2, [r2, #24]
 8007b26:	9202      	str	r2, [sp, #8]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	9201      	str	r2, [sp, #4]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	4623      	mov	r3, r4
 8007b30:	4602      	mov	r2, r0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f001 fe32 	bl	800979c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	7b19      	ldrb	r1, [r3, #12]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	7bd8      	ldrb	r0, [r3, #15]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	8b52      	ldrh	r2, [r2, #26]
 8007b50:	9202      	str	r2, [sp, #8]
 8007b52:	2202      	movs	r2, #2
 8007b54:	9201      	str	r2, [sp, #4]
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	4623      	mov	r3, r4
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 fe1d 	bl	800979c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	7b5b      	ldrb	r3, [r3, #13]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f002 f928 	bl	8009dc8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	7b1b      	ldrb	r3, [r3, #12]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f002 f921 	bl	8009dc8 <USBH_LL_SetToggle>

  return USBH_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd90      	pop	{r4, r7, pc}

08007b90 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00e      	beq.n	8007bc8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 fe12 	bl	80097da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 fe3d 	bl	800983c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	7b1b      	ldrb	r3, [r3, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00e      	beq.n	8007bee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	7b1b      	ldrb	r3, [r3, #12]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fdff 	bl	80097da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	7b1b      	ldrb	r3, [r3, #12]
 8007be0:	4619      	mov	r1, r3
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f001 fe2a 	bl	800983c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	7b5b      	ldrb	r3, [r3, #13]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00e      	beq.n	8007c14 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	7b5b      	ldrb	r3, [r3, #13]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f001 fdec 	bl	80097da <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	7b5b      	ldrb	r3, [r3, #13]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 fe17 	bl	800983c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	2200      	movs	r2, #0
 8007c12:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c1a:	69db      	ldr	r3, [r3, #28]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f002 f983 	bl	8009f34 <free>
    phost->pActiveClass->pData = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c34:	2200      	movs	r2, #0
 8007c36:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	3340      	adds	r3, #64	; 0x40
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f8b1 	bl	8007dc2 <GetLineCoding>
 8007c60:	4603      	mov	r3, r0
 8007c62:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007c64:	7afb      	ldrb	r3, [r7, #11]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c70:	2102      	movs	r1, #2
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007c76:	7afb      	ldrb	r3, [r7, #11]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007ca0:	2b04      	cmp	r3, #4
 8007ca2:	d877      	bhi.n	8007d94 <USBH_CDC_Process+0x114>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <USBH_CDC_Process+0x2c>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cc1 	.word	0x08007cc1
 8007cb0:	08007cc7 	.word	0x08007cc7
 8007cb4:	08007cf7 	.word	0x08007cf7
 8007cb8:	08007d6b 	.word	0x08007d6b
 8007cbc:	08007d79 	.word	0x08007d79
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cc4:	e06d      	b.n	8007da2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f897 	bl	8007e00 <SetLineCoding>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ce4:	e058      	b.n	8007d98 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d055      	beq.n	8007d98 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	2204      	movs	r2, #4
 8007cf0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007cf4:	e050      	b.n	8007d98 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	3340      	adds	r3, #64	; 0x40
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f860 	bl	8007dc2 <GetLineCoding>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d126      	bne.n	8007d5a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d1e:	791b      	ldrb	r3, [r3, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d13b      	bne.n	8007d9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d133      	bne.n	8007d9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d12b      	bne.n	8007d9c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d124      	bne.n	8007d9c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f958 	bl	8008008 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007d58:	e020      	b.n	8007d9c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d01d      	beq.n	8007d9c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2204      	movs	r2, #4
 8007d64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007d68:	e018      	b.n	8007d9c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f867 	bl	8007e3e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f8da 	bl	8007f2a <CDC_ProcessReception>
      break;
 8007d76:	e014      	b.n	8007da2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007d78:	2100      	movs	r1, #0
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 ffef 	bl	8008d5e <USBH_ClrFeature>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10a      	bne.n	8007da0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007d92:	e005      	b.n	8007da0 <USBH_CDC_Process+0x120>

    default:
      break;
 8007d94:	bf00      	nop
 8007d96:	e004      	b.n	8007da2 <USBH_CDC_Process+0x122>
      break;
 8007d98:	bf00      	nop
 8007d9a:	e002      	b.n	8007da2 <USBH_CDC_Process+0x122>
      break;
 8007d9c:	bf00      	nop
 8007d9e:	e000      	b.n	8007da2 <USBH_CDC_Process+0x122>
      break;
 8007da0:	bf00      	nop

  }

  return status;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
 8007dca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	22a1      	movs	r2, #161	; 0xa1
 8007dd0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2221      	movs	r2, #33	; 0x21
 8007dd6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2207      	movs	r2, #7
 8007de8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2207      	movs	r2, #7
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fa81 	bl	80092f8 <USBH_CtlReq>
 8007df6:	4603      	mov	r3, r0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2221      	movs	r2, #33	; 0x21
 8007e0e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2220      	movs	r2, #32
 8007e14:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2207      	movs	r2, #7
 8007e26:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2207      	movs	r2, #7
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f001 fa62 	bl	80092f8 <USBH_CtlReq>
 8007e34:	4603      	mov	r3, r0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af02      	add	r7, sp, #8
 8007e44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d002      	beq.n	8007e64 <CDC_ProcessTransmission+0x26>
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d023      	beq.n	8007eaa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007e62:	e05e      	b.n	8007f22 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	8b12      	ldrh	r2, [r2, #24]
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d90b      	bls.n	8007e88 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	69d9      	ldr	r1, [r3, #28]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	8b1a      	ldrh	r2, [r3, #24]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	7b5b      	ldrb	r3, [r3, #13]
 8007e7c:	2001      	movs	r0, #1
 8007e7e:	9000      	str	r0, [sp, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fc48 	bl	8009716 <USBH_BulkSendData>
 8007e86:	e00b      	b.n	8007ea0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	7b5b      	ldrb	r3, [r3, #13]
 8007e96:	2001      	movs	r0, #1
 8007e98:	9000      	str	r0, [sp, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 fc3b 	bl	8009716 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2202      	movs	r2, #2
 8007ea4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007ea8:	e03b      	b.n	8007f22 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	7b5b      	ldrb	r3, [r3, #13]
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 ff5f 	bl	8009d74 <USBH_LL_GetURBState>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007eba:	7afb      	ldrb	r3, [r7, #11]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d128      	bne.n	8007f12 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	8b12      	ldrh	r2, [r2, #24]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d90e      	bls.n	8007eea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	8b12      	ldrh	r2, [r2, #24]
 8007ed4:	1a9a      	subs	r2, r3, r2
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	69db      	ldr	r3, [r3, #28]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	8b12      	ldrh	r2, [r2, #24]
 8007ee2:	441a      	add	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	61da      	str	r2, [r3, #28]
 8007ee8:	e002      	b.n	8007ef0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2200      	movs	r2, #0
 8007eee:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f00:	e00e      	b.n	8007f20 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f868 	bl	8007fe0 <USBH_CDC_TransmitCallback>
      break;
 8007f10:	e006      	b.n	8007f20 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007f12:	7afb      	ldrb	r3, [r7, #11]
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d103      	bne.n	8007f20 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007f20:	bf00      	nop
  }
}
 8007f22:	bf00      	nop
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b086      	sub	sp, #24
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d002      	beq.n	8007f50 <CDC_ProcessReception+0x26>
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d00e      	beq.n	8007f6c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007f4e:	e043      	b.n	8007fd8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	6a19      	ldr	r1, [r3, #32]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	8b5a      	ldrh	r2, [r3, #26]
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	7b1b      	ldrb	r3, [r3, #12]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fbff 	bl	8009760 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2204      	movs	r2, #4
 8007f66:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007f6a:	e035      	b.n	8007fd8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	7b1b      	ldrb	r3, [r3, #12]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 fefe 	bl	8009d74 <USBH_LL_GetURBState>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007f7c:	7cfb      	ldrb	r3, [r7, #19]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d129      	bne.n	8007fd6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	7b1b      	ldrb	r3, [r3, #12]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 fe61 	bl	8009c50 <USBH_LL_GetLastXferSize>
 8007f8e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d016      	beq.n	8007fc8 <CDC_ProcessReception+0x9e>
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	8b5b      	ldrh	r3, [r3, #26]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d910      	bls.n	8007fc8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	1ad2      	subs	r2, r2, r3
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	6a1a      	ldr	r2, [r3, #32]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	441a      	add	r2, r3
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2203      	movs	r2, #3
 8007fc2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007fc6:	e006      	b.n	8007fd6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f80f 	bl	8007ff4 <USBH_CDC_ReceiveCallback>
      break;
 8007fd6:	bf00      	nop
  }
}
 8007fd8:	bf00      	nop
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b084      	sub	sp, #16
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	4613      	mov	r3, r2
 8008028:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008030:	2302      	movs	r3, #2
 8008032:	e029      	b.n	8008088 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	79fa      	ldrb	r2, [r7, #7]
 8008038:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f81f 	bl	8008090 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f001 fd31 	bl	8009ae8 <USBH_LL_Init>

  return USBH_OK;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	e009      	b.n	80080b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	33e0      	adds	r3, #224	; 0xe0
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	2200      	movs	r2, #0
 80080ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3301      	adds	r3, #1
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2b0f      	cmp	r3, #15
 80080ba:	d9f2      	bls.n	80080a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
 80080c0:	e009      	b.n	80080d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080dc:	d3f1      	bcc.n	80080c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2240      	movs	r2, #64	; 0x40
 8008102:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008142:	2300      	movs	r3, #0
 8008144:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d016      	beq.n	800817a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10e      	bne.n	8008174 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800815c:	1c59      	adds	r1, r3, #1
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	33de      	adds	r3, #222	; 0xde
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	73fb      	strb	r3, [r7, #15]
 8008172:	e004      	b.n	800817e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008174:	2302      	movs	r3, #2
 8008176:	73fb      	strb	r3, [r7, #15]
 8008178:	e001      	b.n	800817e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800817a:	2302      	movs	r3, #2
 800817c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d204      	bcs.n	80081b2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	78fa      	ldrb	r2, [r7, #3]
 80081ac:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80081b0:	e001      	b.n	80081b6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80081b2:	2302      	movs	r3, #2
 80081b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b087      	sub	sp, #28
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	4608      	mov	r0, r1
 80081ce:	4611      	mov	r1, r2
 80081d0:	461a      	mov	r2, r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	70fb      	strb	r3, [r7, #3]
 80081d6:	460b      	mov	r3, r1
 80081d8:	70bb      	strb	r3, [r7, #2]
 80081da:	4613      	mov	r3, r2
 80081dc:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80081ec:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80081ee:	e025      	b.n	800823c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
 80081f2:	221a      	movs	r2, #26
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
 80081f8:	3308      	adds	r3, #8
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	3302      	adds	r3, #2
 8008200:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	795b      	ldrb	r3, [r3, #5]
 8008206:	78fa      	ldrb	r2, [r7, #3]
 8008208:	429a      	cmp	r2, r3
 800820a:	d002      	beq.n	8008212 <USBH_FindInterface+0x4e>
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	2bff      	cmp	r3, #255	; 0xff
 8008210:	d111      	bne.n	8008236 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008216:	78ba      	ldrb	r2, [r7, #2]
 8008218:	429a      	cmp	r2, r3
 800821a:	d002      	beq.n	8008222 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800821c:	78bb      	ldrb	r3, [r7, #2]
 800821e:	2bff      	cmp	r3, #255	; 0xff
 8008220:	d109      	bne.n	8008236 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008226:	787a      	ldrb	r2, [r7, #1]
 8008228:	429a      	cmp	r2, r3
 800822a:	d002      	beq.n	8008232 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800822c:	787b      	ldrb	r3, [r7, #1]
 800822e:	2bff      	cmp	r3, #255	; 0xff
 8008230:	d101      	bne.n	8008236 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008232:	7dfb      	ldrb	r3, [r7, #23]
 8008234:	e006      	b.n	8008244 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	3301      	adds	r3, #1
 800823a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	2b01      	cmp	r3, #1
 8008240:	d9d6      	bls.n	80081f0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008242:	23ff      	movs	r3, #255	; 0xff
}
 8008244:	4618      	mov	r0, r3
 8008246:	371c      	adds	r7, #28
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 fc81 	bl	8009b60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800825e:	2101      	movs	r1, #1
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f001 fd9a 	bl	8009d9a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b088      	sub	sp, #32
 8008274:	af04      	add	r7, sp, #16
 8008276:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008278:	2302      	movs	r3, #2
 800827a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b01      	cmp	r3, #1
 800828a:	d102      	bne.n	8008292 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2203      	movs	r2, #3
 8008290:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b0b      	cmp	r3, #11
 800829a:	f200 81be 	bhi.w	800861a <USBH_Process+0x3aa>
 800829e:	a201      	add	r2, pc, #4	; (adr r2, 80082a4 <USBH_Process+0x34>)
 80082a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a4:	080082d5 	.word	0x080082d5
 80082a8:	08008307 	.word	0x08008307
 80082ac:	0800836f 	.word	0x0800836f
 80082b0:	080085b5 	.word	0x080085b5
 80082b4:	0800861b 	.word	0x0800861b
 80082b8:	08008413 	.word	0x08008413
 80082bc:	0800855b 	.word	0x0800855b
 80082c0:	08008449 	.word	0x08008449
 80082c4:	08008469 	.word	0x08008469
 80082c8:	08008489 	.word	0x08008489
 80082cc:	080084cd 	.word	0x080084cd
 80082d0:	0800859d 	.word	0x0800859d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 819e 	beq.w	800861e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80082e8:	20c8      	movs	r0, #200	; 0xc8
 80082ea:	f001 fd9d 	bl	8009e28 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 fc93 	bl	8009c1a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008304:	e18b      	b.n	800861e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800830c:	2b01      	cmp	r3, #1
 800830e:	d107      	bne.n	8008320 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800831e:	e18d      	b.n	800863c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008326:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800832a:	d914      	bls.n	8008356 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008332:	3301      	adds	r3, #1
 8008334:	b2da      	uxtb	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008342:	2b03      	cmp	r3, #3
 8008344:	d903      	bls.n	800834e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	220d      	movs	r2, #13
 800834a:	701a      	strb	r2, [r3, #0]
      break;
 800834c:	e176      	b.n	800863c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	701a      	strb	r2, [r3, #0]
      break;
 8008354:	e172      	b.n	800863c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800835c:	f103 020a 	add.w	r2, r3, #10
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008366:	200a      	movs	r0, #10
 8008368:	f001 fd5e 	bl	8009e28 <USBH_Delay>
      break;
 800836c:	e166      	b.n	800863c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800837e:	2104      	movs	r1, #4
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008384:	2064      	movs	r0, #100	; 0x64
 8008386:	f001 fd4f 	bl	8009e28 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f001 fc1e 	bl	8009bcc <USBH_LL_GetSpeed>
 8008390:	4603      	mov	r3, r0
 8008392:	461a      	mov	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2205      	movs	r2, #5
 800839e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80083a0:	2100      	movs	r1, #0
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 fa29 	bl	80097fa <USBH_AllocPipe>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80083b0:	2180      	movs	r1, #128	; 0x80
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f001 fa21 	bl	80097fa <USBH_AllocPipe>
 80083b8:	4603      	mov	r3, r0
 80083ba:	461a      	mov	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7919      	ldrb	r1, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80083d4:	b292      	uxth	r2, r2
 80083d6:	9202      	str	r2, [sp, #8]
 80083d8:	2200      	movs	r2, #0
 80083da:	9201      	str	r2, [sp, #4]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	4603      	mov	r3, r0
 80083e0:	2280      	movs	r2, #128	; 0x80
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f001 f9da 	bl	800979c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	7959      	ldrb	r1, [r3, #5]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80083fc:	b292      	uxth	r2, r2
 80083fe:	9202      	str	r2, [sp, #8]
 8008400:	2200      	movs	r2, #0
 8008402:	9201      	str	r2, [sp, #4]
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	4603      	mov	r3, r0
 8008408:	2200      	movs	r2, #0
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 f9c6 	bl	800979c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008410:	e114      	b.n	800863c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 f918 	bl	8008648 <USBH_HandleEnum>
 8008418:	4603      	mov	r3, r0
 800841a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	f040 80fe 	bne.w	8008622 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008434:	2b01      	cmp	r3, #1
 8008436:	d103      	bne.n	8008440 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2208      	movs	r2, #8
 800843c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800843e:	e0f0      	b.n	8008622 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2207      	movs	r2, #7
 8008444:	701a      	strb	r2, [r3, #0]
      break;
 8008446:	e0ec      	b.n	8008622 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 80e9 	beq.w	8008626 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800845a:	2101      	movs	r1, #1
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2208      	movs	r2, #8
 8008464:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008466:	e0de      	b.n	8008626 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800846e:	b29b      	uxth	r3, r3
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fc2c 	bl	8008cd0 <USBH_SetCfg>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	f040 80d5 	bne.w	800862a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2209      	movs	r2, #9
 8008484:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008486:	e0d0      	b.n	800862a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d016      	beq.n	80084c4 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008496:	2101      	movs	r1, #1
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fc3c 	bl	8008d16 <USBH_SetFeature>
 800849e:	4603      	mov	r3, r0
 80084a0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d103      	bne.n	80084b2 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	220a      	movs	r2, #10
 80084ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084b0:	e0bd      	b.n	800862e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80084b2:	7bbb      	ldrb	r3, [r7, #14]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	f040 80b9 	bne.w	800862e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	220a      	movs	r2, #10
 80084c0:	701a      	strb	r2, [r3, #0]
      break;
 80084c2:	e0b4      	b.n	800862e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	220a      	movs	r2, #10
 80084c8:	701a      	strb	r2, [r3, #0]
      break;
 80084ca:	e0b0      	b.n	800862e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80ad 	beq.w	8008632 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	73fb      	strb	r3, [r7, #15]
 80084e4:	e016      	b.n	8008514 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80084e6:	7bfa      	ldrb	r2, [r7, #15]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	32de      	adds	r2, #222	; 0xde
 80084ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f0:	791a      	ldrb	r2, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d108      	bne.n	800850e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80084fc:	7bfa      	ldrb	r2, [r7, #15]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32de      	adds	r2, #222	; 0xde
 8008502:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800850c:	e005      	b.n	800851a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800850e:	7bfb      	ldrb	r3, [r7, #15]
 8008510:	3301      	adds	r3, #1
 8008512:	73fb      	strb	r3, [r7, #15]
 8008514:	7bfb      	ldrb	r3, [r7, #15]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0e5      	beq.n	80084e6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d016      	beq.n	8008552 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2206      	movs	r2, #6
 800853a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008542:	2103      	movs	r1, #3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008548:	e073      	b.n	8008632 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	220d      	movs	r2, #13
 800854e:	701a      	strb	r2, [r3, #0]
      break;
 8008550:	e06f      	b.n	8008632 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	220d      	movs	r2, #13
 8008556:	701a      	strb	r2, [r3, #0]
      break;
 8008558:	e06b      	b.n	8008632 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d017      	beq.n	8008594 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
 8008570:	4603      	mov	r3, r0
 8008572:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d103      	bne.n	8008584 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	220b      	movs	r2, #11
 8008580:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008582:	e058      	b.n	8008636 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008584:	7bbb      	ldrb	r3, [r7, #14]
 8008586:	b2db      	uxtb	r3, r3
 8008588:	2b02      	cmp	r3, #2
 800858a:	d154      	bne.n	8008636 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	220d      	movs	r2, #13
 8008590:	701a      	strb	r2, [r3, #0]
      break;
 8008592:	e050      	b.n	8008636 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	220d      	movs	r2, #13
 8008598:	701a      	strb	r2, [r3, #0]
      break;
 800859a:	e04c      	b.n	8008636 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d049      	beq.n	800863a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
      }
      break;
 80085b2:	e042      	b.n	800863a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7ff fd67 	bl	8008090 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80085f0:	2105      	movs	r1, #5
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d107      	bne.n	8008612 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fe20 	bl	8008250 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008610:	e014      	b.n	800863c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f001 faa4 	bl	8009b60 <USBH_LL_Start>
      break;
 8008618:	e010      	b.n	800863c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800861a:	bf00      	nop
 800861c:	e00e      	b.n	800863c <USBH_Process+0x3cc>
      break;
 800861e:	bf00      	nop
 8008620:	e00c      	b.n	800863c <USBH_Process+0x3cc>
      break;
 8008622:	bf00      	nop
 8008624:	e00a      	b.n	800863c <USBH_Process+0x3cc>
    break;
 8008626:	bf00      	nop
 8008628:	e008      	b.n	800863c <USBH_Process+0x3cc>
      break;
 800862a:	bf00      	nop
 800862c:	e006      	b.n	800863c <USBH_Process+0x3cc>
      break;
 800862e:	bf00      	nop
 8008630:	e004      	b.n	800863c <USBH_Process+0x3cc>
      break;
 8008632:	bf00      	nop
 8008634:	e002      	b.n	800863c <USBH_Process+0x3cc>
      break;
 8008636:	bf00      	nop
 8008638:	e000      	b.n	800863c <USBH_Process+0x3cc>
      break;
 800863a:	bf00      	nop
  }
  return USBH_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop

08008648 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af04      	add	r7, sp, #16
 800864e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008654:	2301      	movs	r3, #1
 8008656:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	785b      	ldrb	r3, [r3, #1]
 800865c:	2b07      	cmp	r3, #7
 800865e:	f200 81c1 	bhi.w	80089e4 <USBH_HandleEnum+0x39c>
 8008662:	a201      	add	r2, pc, #4	; (adr r2, 8008668 <USBH_HandleEnum+0x20>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	08008689 	.word	0x08008689
 800866c:	08008747 	.word	0x08008747
 8008670:	080087b1 	.word	0x080087b1
 8008674:	0800883f 	.word	0x0800883f
 8008678:	080088a9 	.word	0x080088a9
 800867c:	08008919 	.word	0x08008919
 8008680:	0800895f 	.word	0x0800895f
 8008684:	080089a5 	.word	0x080089a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008688:	2108      	movs	r1, #8
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa50 	bl	8008b30 <USBH_Get_DevDesc>
 8008690:	4603      	mov	r3, r0
 8008692:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d130      	bne.n	80086fc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	7919      	ldrb	r1, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80086be:	b292      	uxth	r2, r2
 80086c0:	9202      	str	r2, [sp, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	9201      	str	r2, [sp, #4]
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	4603      	mov	r3, r0
 80086ca:	2280      	movs	r2, #128	; 0x80
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f001 f865 	bl	800979c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7959      	ldrb	r1, [r3, #5]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80086e6:	b292      	uxth	r2, r2
 80086e8:	9202      	str	r2, [sp, #8]
 80086ea:	2200      	movs	r2, #0
 80086ec:	9201      	str	r2, [sp, #4]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	4603      	mov	r3, r0
 80086f2:	2200      	movs	r2, #0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 f851 	bl	800979c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80086fa:	e175      	b.n	80089e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b03      	cmp	r3, #3
 8008700:	f040 8172 	bne.w	80089e8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800870a:	3301      	adds	r3, #1
 800870c:	b2da      	uxtb	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800871a:	2b03      	cmp	r3, #3
 800871c:	d903      	bls.n	8008726 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	220d      	movs	r2, #13
 8008722:	701a      	strb	r2, [r3, #0]
      break;
 8008724:	e160      	b.n	80089e8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	795b      	ldrb	r3, [r3, #5]
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 f885 	bl	800983c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	791b      	ldrb	r3, [r3, #4]
 8008736:	4619      	mov	r1, r3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f001 f87f 	bl	800983c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	701a      	strb	r2, [r3, #0]
      break;
 8008744:	e150      	b.n	80089e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008746:	2112      	movs	r1, #18
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f9f1 	bl	8008b30 <USBH_Get_DevDesc>
 800874e:	4603      	mov	r3, r0
 8008750:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d103      	bne.n	8008760 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800875e:	e145      	b.n	80089ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008760:	7bbb      	ldrb	r3, [r7, #14]
 8008762:	2b03      	cmp	r3, #3
 8008764:	f040 8142 	bne.w	80089ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800876e:	3301      	adds	r3, #1
 8008770:	b2da      	uxtb	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800877e:	2b03      	cmp	r3, #3
 8008780:	d903      	bls.n	800878a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	220d      	movs	r2, #13
 8008786:	701a      	strb	r2, [r3, #0]
      break;
 8008788:	e130      	b.n	80089ec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	795b      	ldrb	r3, [r3, #5]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f001 f853 	bl	800983c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	791b      	ldrb	r3, [r3, #4]
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f001 f84d 	bl	800983c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	701a      	strb	r2, [r3, #0]
      break;
 80087ae:	e11d      	b.n	80089ec <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80087b0:	2101      	movs	r1, #1
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fa68 	bl	8008c88 <USBH_SetAddress>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d132      	bne.n	8008828 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80087c2:	2002      	movs	r0, #2
 80087c4:	f001 fb30 	bl	8009e28 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2203      	movs	r2, #3
 80087d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	7919      	ldrb	r1, [r3, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80087ea:	b292      	uxth	r2, r2
 80087ec:	9202      	str	r2, [sp, #8]
 80087ee:	2200      	movs	r2, #0
 80087f0:	9201      	str	r2, [sp, #4]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	4603      	mov	r3, r0
 80087f6:	2280      	movs	r2, #128	; 0x80
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 ffcf 	bl	800979c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7959      	ldrb	r1, [r3, #5]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008812:	b292      	uxth	r2, r2
 8008814:	9202      	str	r2, [sp, #8]
 8008816:	2200      	movs	r2, #0
 8008818:	9201      	str	r2, [sp, #4]
 800881a:	9300      	str	r3, [sp, #0]
 800881c:	4603      	mov	r3, r0
 800881e:	2200      	movs	r2, #0
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 ffbb 	bl	800979c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008826:	e0e3      	b.n	80089f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008828:	7bbb      	ldrb	r3, [r7, #14]
 800882a:	2b03      	cmp	r3, #3
 800882c:	f040 80e0 	bne.w	80089f0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	220d      	movs	r2, #13
 8008834:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	705a      	strb	r2, [r3, #1]
      break;
 800883c:	e0d8      	b.n	80089f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800883e:	2109      	movs	r1, #9
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f99d 	bl	8008b80 <USBH_Get_CfgDesc>
 8008846:	4603      	mov	r3, r0
 8008848:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d103      	bne.n	8008858 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2204      	movs	r2, #4
 8008854:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008856:	e0cd      	b.n	80089f4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	2b03      	cmp	r3, #3
 800885c:	f040 80ca 	bne.w	80089f4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008866:	3301      	adds	r3, #1
 8008868:	b2da      	uxtb	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008876:	2b03      	cmp	r3, #3
 8008878:	d903      	bls.n	8008882 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	220d      	movs	r2, #13
 800887e:	701a      	strb	r2, [r3, #0]
      break;
 8008880:	e0b8      	b.n	80089f4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	795b      	ldrb	r3, [r3, #5]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 ffd7 	bl	800983c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	791b      	ldrb	r3, [r3, #4]
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 ffd1 	bl	800983c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	701a      	strb	r2, [r3, #0]
      break;
 80088a6:	e0a5      	b.n	80089f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 f965 	bl	8008b80 <USBH_Get_CfgDesc>
 80088b6:	4603      	mov	r3, r0
 80088b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2205      	movs	r2, #5
 80088c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80088c6:	e097      	b.n	80089f8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	f040 8094 	bne.w	80089f8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088d6:	3301      	adds	r3, #1
 80088d8:	b2da      	uxtb	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d903      	bls.n	80088f2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	220d      	movs	r2, #13
 80088ee:	701a      	strb	r2, [r3, #0]
      break;
 80088f0:	e082      	b.n	80089f8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	795b      	ldrb	r3, [r3, #5]
 80088f6:	4619      	mov	r1, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 ff9f 	bl	800983c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	791b      	ldrb	r3, [r3, #4]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 ff99 	bl	800983c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	701a      	strb	r2, [r3, #0]
      break;
 8008916:	e06f      	b.n	80089f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800891e:	2b00      	cmp	r3, #0
 8008920:	d019      	beq.n	8008956 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800892e:	23ff      	movs	r3, #255	; 0xff
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f949 	bl	8008bc8 <USBH_Get_StringDesc>
 8008936:	4603      	mov	r3, r0
 8008938:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2206      	movs	r2, #6
 8008944:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008946:	e059      	b.n	80089fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008948:	7bbb      	ldrb	r3, [r7, #14]
 800894a:	2b03      	cmp	r3, #3
 800894c:	d156      	bne.n	80089fc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2206      	movs	r2, #6
 8008952:	705a      	strb	r2, [r3, #1]
      break;
 8008954:	e052      	b.n	80089fc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2206      	movs	r2, #6
 800895a:	705a      	strb	r2, [r3, #1]
      break;
 800895c:	e04e      	b.n	80089fc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008964:	2b00      	cmp	r3, #0
 8008966:	d019      	beq.n	800899c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008974:	23ff      	movs	r3, #255	; 0xff
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f926 	bl	8008bc8 <USBH_Get_StringDesc>
 800897c:	4603      	mov	r3, r0
 800897e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d103      	bne.n	800898e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2207      	movs	r2, #7
 800898a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800898c:	e038      	b.n	8008a00 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d135      	bne.n	8008a00 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2207      	movs	r2, #7
 8008998:	705a      	strb	r2, [r3, #1]
      break;
 800899a:	e031      	b.n	8008a00 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2207      	movs	r2, #7
 80089a0:	705a      	strb	r2, [r3, #1]
      break;
 80089a2:	e02d      	b.n	8008a00 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d017      	beq.n	80089de <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80089ba:	23ff      	movs	r3, #255	; 0xff
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f903 	bl	8008bc8 <USBH_Get_StringDesc>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80089d0:	e018      	b.n	8008a04 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b03      	cmp	r3, #3
 80089d6:	d115      	bne.n	8008a04 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
      break;
 80089dc:	e012      	b.n	8008a04 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]
      break;
 80089e2:	e00f      	b.n	8008a04 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80089e4:	bf00      	nop
 80089e6:	e00e      	b.n	8008a06 <USBH_HandleEnum+0x3be>
      break;
 80089e8:	bf00      	nop
 80089ea:	e00c      	b.n	8008a06 <USBH_HandleEnum+0x3be>
      break;
 80089ec:	bf00      	nop
 80089ee:	e00a      	b.n	8008a06 <USBH_HandleEnum+0x3be>
      break;
 80089f0:	bf00      	nop
 80089f2:	e008      	b.n	8008a06 <USBH_HandleEnum+0x3be>
      break;
 80089f4:	bf00      	nop
 80089f6:	e006      	b.n	8008a06 <USBH_HandleEnum+0x3be>
      break;
 80089f8:	bf00      	nop
 80089fa:	e004      	b.n	8008a06 <USBH_HandleEnum+0x3be>
      break;
 80089fc:	bf00      	nop
 80089fe:	e002      	b.n	8008a06 <USBH_HandleEnum+0x3be>
      break;
 8008a00:	bf00      	nop
 8008a02:	e000      	b.n	8008a06 <USBH_HandleEnum+0x3be>
      break;
 8008a04:	bf00      	nop
  }
  return Status;
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	683a      	ldr	r2, [r7, #0]
 8008a1e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f804 	bl	8008a52 <USBH_HandleSof>
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b0b      	cmp	r3, #11
 8008a62:	d10a      	bne.n	8008a7a <USBH_HandleSof+0x28>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	4798      	blx	r3
  }
}
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008a92:	bf00      	nop
}
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b083      	sub	sp, #12
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008aae:	bf00      	nop
}
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 f844 	bl	8009b96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	791b      	ldrb	r3, [r3, #4]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fe91 	bl	800983c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	795b      	ldrb	r3, [r3, #5]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fe8b 	bl	800983c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b086      	sub	sp, #24
 8008b34:	af02      	add	r7, sp, #8
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008b42:	78fb      	ldrb	r3, [r7, #3]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b4e:	2100      	movs	r1, #0
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f864 	bl	8008c1e <USBH_GetDescriptor>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008b6c:	78fa      	ldrb	r2, [r7, #3]
 8008b6e:	b292      	uxth	r2, r2
 8008b70:	4619      	mov	r1, r3
 8008b72:	f000 f918 	bl	8008da6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3710      	adds	r7, #16
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af02      	add	r7, sp, #8
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	331c      	adds	r3, #28
 8008b90:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008b92:	887b      	ldrh	r3, [r7, #2]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b9c:	2100      	movs	r1, #0
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 f83d 	bl	8008c1e <USBH_GetDescriptor>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d107      	bne.n	8008bbe <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008bae:	887b      	ldrh	r3, [r7, #2]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f987 	bl	8008ec8 <USBH_ParseCfgDesc>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b088      	sub	sp, #32
 8008bcc:	af02      	add	r7, sp, #8
 8008bce:	60f8      	str	r0, [r7, #12]
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	72fb      	strb	r3, [r7, #11]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8008bdc:	7afb      	ldrb	r3, [r7, #11]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008be4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008bec:	893b      	ldrh	r3, [r7, #8]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f812 	bl	8008c1e <USBH_GetDescriptor>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d107      	bne.n	8008c14 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008c0a:	893a      	ldrh	r2, [r7, #8]
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fb24 	bl	800925c <USBH_ParseStringDesc>
  }

  return status;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	607b      	str	r3, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	72fb      	strb	r3, [r7, #11]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	789b      	ldrb	r3, [r3, #2]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d11c      	bne.n	8008c72 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008c38:	7afb      	ldrb	r3, [r7, #11]
 8008c3a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c3e:	b2da      	uxtb	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2206      	movs	r2, #6
 8008c48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	893a      	ldrh	r2, [r7, #8]
 8008c4e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008c50:	893b      	ldrh	r3, [r7, #8]
 8008c52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c5a:	d104      	bne.n	8008c66 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f240 4209 	movw	r2, #1033	; 0x409
 8008c62:	829a      	strh	r2, [r3, #20]
 8008c64:	e002      	b.n	8008c6c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	8b3a      	ldrh	r2, [r7, #24]
 8008c70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008c72:	8b3b      	ldrh	r3, [r7, #24]
 8008c74:	461a      	mov	r2, r3
 8008c76:	6879      	ldr	r1, [r7, #4]
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f000 fb3d 	bl	80092f8 <USBH_CtlReq>
 8008c7e:	4603      	mov	r3, r0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	789b      	ldrb	r3, [r3, #2]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d10f      	bne.n	8008cbc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2205      	movs	r2, #5
 8008ca6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2100      	movs	r1, #0
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fb19 	bl	80092f8 <USBH_CtlReq>
 8008cc6:	4603      	mov	r3, r0
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	789b      	ldrb	r3, [r3, #2]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d10e      	bne.n	8008d02 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2209      	movs	r2, #9
 8008cee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	887a      	ldrh	r2, [r7, #2]
 8008cf4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d02:	2200      	movs	r2, #0
 8008d04:	2100      	movs	r1, #0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 faf6 	bl	80092f8 <USBH_CtlReq>
 8008d0c:	4603      	mov	r3, r0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
 8008d1e:	460b      	mov	r3, r1
 8008d20:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	789b      	ldrb	r3, [r3, #2]
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d10f      	bne.n	8008d4a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2203      	movs	r2, #3
 8008d34:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fad2 	bl	80092f8 <USBH_CtlReq>
 8008d54:	4603      	mov	r3, r0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	460b      	mov	r3, r1
 8008d68:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	789b      	ldrb	r3, [r3, #2]
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d10f      	bne.n	8008d92 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2202      	movs	r2, #2
 8008d76:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008d92:	2200      	movs	r2, #0
 8008d94:	2100      	movs	r1, #0
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 faae 	bl	80092f8 <USBH_CtlReq>
 8008d9c:	4603      	mov	r3, r0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b085      	sub	sp, #20
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	4613      	mov	r3, r2
 8008db2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	781a      	ldrb	r2, [r3, #0]
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	785a      	ldrb	r2, [r3, #1]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	3302      	adds	r3, #2
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	3303      	adds	r3, #3
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	021b      	lsls	r3, r3, #8
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	791a      	ldrb	r2, [r3, #4]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	795a      	ldrb	r2, [r3, #5]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	799a      	ldrb	r2, [r3, #6]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	79da      	ldrb	r2, [r3, #7]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	79db      	ldrb	r3, [r3, #7]
 8008e04:	2b20      	cmp	r3, #32
 8008e06:	dc11      	bgt.n	8008e2c <USBH_ParseDevDesc+0x86>
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	db16      	blt.n	8008e3a <USBH_ParseDevDesc+0x94>
 8008e0c:	3b08      	subs	r3, #8
 8008e0e:	2201      	movs	r2, #1
 8008e10:	fa02 f303 	lsl.w	r3, r2, r3
 8008e14:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bf14      	ite	ne
 8008e20:	2301      	movne	r3, #1
 8008e22:	2300      	moveq	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <USBH_ParseDevDesc+0x8a>
 8008e2a:	e006      	b.n	8008e3a <USBH_ParseDevDesc+0x94>
 8008e2c:	2b40      	cmp	r3, #64	; 0x40
 8008e2e:	d104      	bne.n	8008e3a <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	79da      	ldrb	r2, [r3, #7]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	71da      	strb	r2, [r3, #7]
      break;
 8008e38:	e003      	b.n	8008e42 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2240      	movs	r2, #64	; 0x40
 8008e3e:	71da      	strb	r2, [r3, #7]
      break;
 8008e40:	bf00      	nop
  }

  if (length > 8U)
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	2b08      	cmp	r3, #8
 8008e46:	d939      	bls.n	8008ebc <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	3309      	adds	r3, #9
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b29a      	uxth	r2, r3
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	330a      	adds	r3, #10
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	330b      	adds	r3, #11
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	330c      	adds	r3, #12
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	330d      	adds	r3, #13
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	4313      	orrs	r3, r2
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	7b9a      	ldrb	r2, [r3, #14]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	7bda      	ldrb	r2, [r3, #15]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	7c1a      	ldrb	r2, [r3, #16]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	7c5a      	ldrb	r2, [r3, #17]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	745a      	strb	r2, [r3, #17]
  }
}
 8008ebc:	bf00      	nop
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b08c      	sub	sp, #48	; 0x30
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008edc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	781a      	ldrb	r2, [r3, #0]
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	785a      	ldrb	r2, [r3, #1]
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	3302      	adds	r3, #2
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	3303      	adds	r3, #3
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	021b      	lsls	r3, r3, #8
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f24:	bf28      	it	cs
 8008f26:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	791a      	ldrb	r2, [r3, #4]
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	795a      	ldrb	r2, [r3, #5]
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	799a      	ldrb	r2, [r3, #6]
 8008f44:	6a3b      	ldr	r3, [r7, #32]
 8008f46:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	79da      	ldrb	r2, [r3, #7]
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	7a1a      	ldrb	r2, [r3, #8]
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008f58:	6a3b      	ldr	r3, [r7, #32]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	d002      	beq.n	8008f66 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	2209      	movs	r2, #9
 8008f64:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f66:	88fb      	ldrh	r3, [r7, #6]
 8008f68:	2b09      	cmp	r3, #9
 8008f6a:	f240 809d 	bls.w	80090a8 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008f6e:	2309      	movs	r3, #9
 8008f70:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f72:	2300      	movs	r3, #0
 8008f74:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f76:	e081      	b.n	800907c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f78:	f107 0316 	add.w	r3, r7, #22
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f80:	f000 f99f 	bl	80092c2 <USBH_GetNextDesc>
 8008f84:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	785b      	ldrb	r3, [r3, #1]
 8008f8a:	2b04      	cmp	r3, #4
 8008f8c:	d176      	bne.n	800907c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b09      	cmp	r3, #9
 8008f94:	d002      	beq.n	8008f9c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	2209      	movs	r2, #9
 8008f9a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa0:	221a      	movs	r2, #26
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	6a3a      	ldr	r2, [r7, #32]
 8008faa:	4413      	add	r3, r2
 8008fac:	3302      	adds	r3, #2
 8008fae:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fb2:	69f8      	ldr	r0, [r7, #28]
 8008fb4:	f000 f87e 	bl	80090b4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008fc2:	e043      	b.n	800904c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008fc4:	f107 0316 	add.w	r3, r7, #22
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fcc:	f000 f979 	bl	80092c2 <USBH_GetNextDesc>
 8008fd0:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd4:	785b      	ldrb	r3, [r3, #1]
 8008fd6:	2b05      	cmp	r3, #5
 8008fd8:	d138      	bne.n	800904c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	795b      	ldrb	r3, [r3, #5]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d10f      	bne.n	8009002 <USBH_ParseCfgDesc+0x13a>
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	799b      	ldrb	r3, [r3, #6]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d10b      	bne.n	8009002 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	79db      	ldrb	r3, [r3, #7]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10f      	bne.n	8009012 <USBH_ParseCfgDesc+0x14a>
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	d00b      	beq.n	8009012 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ffc:	2209      	movs	r2, #9
 8008ffe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009000:	e007      	b.n	8009012 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	2b07      	cmp	r3, #7
 8009008:	d004      	beq.n	8009014 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	2207      	movs	r2, #7
 800900e:	701a      	strb	r2, [r3, #0]
 8009010:	e000      	b.n	8009014 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009012:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009018:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800901c:	3201      	adds	r2, #1
 800901e:	00d2      	lsls	r2, r2, #3
 8009020:	211a      	movs	r1, #26
 8009022:	fb01 f303 	mul.w	r3, r1, r3
 8009026:	4413      	add	r3, r2
 8009028:	3308      	adds	r3, #8
 800902a:	6a3a      	ldr	r2, [r7, #32]
 800902c:	4413      	add	r3, r2
 800902e:	3304      	adds	r3, #4
 8009030:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009034:	69b9      	ldr	r1, [r7, #24]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f86b 	bl	8009112 <USBH_ParseEPDesc>
 800903c:	4603      	mov	r3, r0
 800903e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009042:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009046:	3301      	adds	r3, #1
 8009048:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	791b      	ldrb	r3, [r3, #4]
 8009050:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009054:	429a      	cmp	r2, r3
 8009056:	d204      	bcs.n	8009062 <USBH_ParseCfgDesc+0x19a>
 8009058:	6a3b      	ldr	r3, [r7, #32]
 800905a:	885a      	ldrh	r2, [r3, #2]
 800905c:	8afb      	ldrh	r3, [r7, #22]
 800905e:	429a      	cmp	r2, r3
 8009060:	d8b0      	bhi.n	8008fc4 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	791b      	ldrb	r3, [r3, #4]
 8009066:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800906a:	429a      	cmp	r2, r3
 800906c:	d201      	bcs.n	8009072 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800906e:	2303      	movs	r3, #3
 8009070:	e01c      	b.n	80090ac <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009076:	3301      	adds	r3, #1
 8009078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800907c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009080:	2b01      	cmp	r3, #1
 8009082:	d805      	bhi.n	8009090 <USBH_ParseCfgDesc+0x1c8>
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	885a      	ldrh	r2, [r3, #2]
 8009088:	8afb      	ldrh	r3, [r7, #22]
 800908a:	429a      	cmp	r2, r3
 800908c:	f63f af74 	bhi.w	8008f78 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	791b      	ldrb	r3, [r3, #4]
 8009094:	2b02      	cmp	r3, #2
 8009096:	bf28      	it	cs
 8009098:	2302      	movcs	r3, #2
 800909a:	b2db      	uxtb	r3, r3
 800909c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d201      	bcs.n	80090a8 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e001      	b.n	80090ac <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80090a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3730      	adds	r7, #48	; 0x30
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781a      	ldrb	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	785a      	ldrb	r2, [r3, #1]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	789a      	ldrb	r2, [r3, #2]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	78da      	ldrb	r2, [r3, #3]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	791a      	ldrb	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	795a      	ldrb	r2, [r3, #5]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	799a      	ldrb	r2, [r3, #6]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	79da      	ldrb	r2, [r3, #7]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	7a1a      	ldrb	r2, [r3, #8]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	721a      	strb	r2, [r3, #8]
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8009112:	b480      	push	{r7}
 8009114:	b087      	sub	sp, #28
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	781a      	ldrb	r2, [r3, #0]
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	785a      	ldrb	r2, [r3, #1]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	789a      	ldrb	r2, [r3, #2]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	78da      	ldrb	r2, [r3, #3]
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3304      	adds	r3, #4
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	b29a      	uxth	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	3305      	adds	r3, #5
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	021b      	lsls	r3, r3, #8
 8009154:	b29b      	uxth	r3, r3
 8009156:	4313      	orrs	r3, r2
 8009158:	b29a      	uxth	r2, r3
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	799a      	ldrb	r2, [r3, #6]
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	889b      	ldrh	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d102      	bne.n	8009174 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800916e:	2303      	movs	r3, #3
 8009170:	75fb      	strb	r3, [r7, #23]
 8009172:	e033      	b.n	80091dc <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	889b      	ldrh	r3, [r3, #4]
 8009178:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800917c:	f023 0307 	bic.w	r3, r3, #7
 8009180:	b29a      	uxth	r2, r3
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	889b      	ldrh	r3, [r3, #4]
 800918a:	b21a      	sxth	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3304      	adds	r3, #4
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	b299      	uxth	r1, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3305      	adds	r3, #5
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	b29b      	uxth	r3, r3
 800919c:	021b      	lsls	r3, r3, #8
 800919e:	b29b      	uxth	r3, r3
 80091a0:	430b      	orrs	r3, r1
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d110      	bne.n	80091ce <USBH_ParseEPDesc+0xbc>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3304      	adds	r3, #4
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	b299      	uxth	r1, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3305      	adds	r3, #5
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	021b      	lsls	r3, r3, #8
 80091be:	b29b      	uxth	r3, r3
 80091c0:	430b      	orrs	r3, r1
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	b21b      	sxth	r3, r3
 80091c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091ca:	b21b      	sxth	r3, r3
 80091cc:	e001      	b.n	80091d2 <USBH_ParseEPDesc+0xc0>
 80091ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091d2:	4313      	orrs	r3, r2
 80091d4:	b21b      	sxth	r3, r3
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d116      	bne.n	8009214 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	78db      	ldrb	r3, [r3, #3]
 80091ea:	f003 0303 	and.w	r3, r3, #3
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d005      	beq.n	80091fe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	78db      	ldrb	r3, [r3, #3]
 80091f6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d127      	bne.n	800924e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	799b      	ldrb	r3, [r3, #6]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d003      	beq.n	800920e <USBH_ParseEPDesc+0xfc>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	799b      	ldrb	r3, [r3, #6]
 800920a:	2b10      	cmp	r3, #16
 800920c:	d91f      	bls.n	800924e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800920e:	2303      	movs	r3, #3
 8009210:	75fb      	strb	r3, [r7, #23]
 8009212:	e01c      	b.n	800924e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	78db      	ldrb	r3, [r3, #3]
 8009218:	f003 0303 	and.w	r3, r3, #3
 800921c:	2b01      	cmp	r3, #1
 800921e:	d10a      	bne.n	8009236 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	799b      	ldrb	r3, [r3, #6]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d003      	beq.n	8009230 <USBH_ParseEPDesc+0x11e>
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	799b      	ldrb	r3, [r3, #6]
 800922c:	2b10      	cmp	r3, #16
 800922e:	d90e      	bls.n	800924e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8009230:	2303      	movs	r3, #3
 8009232:	75fb      	strb	r3, [r7, #23]
 8009234:	e00b      	b.n	800924e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	78db      	ldrb	r3, [r3, #3]
 800923a:	f003 0303 	and.w	r3, r3, #3
 800923e:	2b03      	cmp	r3, #3
 8009240:	d105      	bne.n	800924e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	799b      	ldrb	r3, [r3, #6]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800924a:	2303      	movs	r3, #3
 800924c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800924e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009250:	4618      	mov	r0, r3
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800925c:	b480      	push	{r7}
 800925e:	b087      	sub	sp, #28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	4613      	mov	r3, r2
 8009268:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b03      	cmp	r3, #3
 8009272:	d120      	bne.n	80092b6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	1e9a      	subs	r2, r3, #2
 800927a:	88fb      	ldrh	r3, [r7, #6]
 800927c:	4293      	cmp	r3, r2
 800927e:	bf28      	it	cs
 8009280:	4613      	movcs	r3, r2
 8009282:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3302      	adds	r3, #2
 8009288:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800928a:	2300      	movs	r3, #0
 800928c:	82fb      	strh	r3, [r7, #22]
 800928e:	e00b      	b.n	80092a8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009290:	8afb      	ldrh	r3, [r7, #22]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	3301      	adds	r3, #1
 80092a0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80092a2:	8afb      	ldrh	r3, [r7, #22]
 80092a4:	3302      	adds	r3, #2
 80092a6:	82fb      	strh	r3, [r7, #22]
 80092a8:	8afa      	ldrh	r2, [r7, #22]
 80092aa:	8abb      	ldrh	r3, [r7, #20]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d3ef      	bcc.n	8009290 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2200      	movs	r2, #0
 80092b4:	701a      	strb	r2, [r3, #0]
  }
}
 80092b6:	bf00      	nop
 80092b8:	371c      	adds	r7, #28
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b085      	sub	sp, #20
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	881a      	ldrh	r2, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	4413      	add	r3, r2
 80092d8:	b29a      	uxth	r2, r3
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4413      	add	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092ea:	68fb      	ldr	r3, [r7, #12]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3714      	adds	r7, #20
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	4613      	mov	r3, r2
 8009304:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009306:	2301      	movs	r3, #1
 8009308:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	789b      	ldrb	r3, [r3, #2]
 800930e:	2b01      	cmp	r3, #1
 8009310:	d002      	beq.n	8009318 <USBH_CtlReq+0x20>
 8009312:	2b02      	cmp	r3, #2
 8009314:	d00f      	beq.n	8009336 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009316:	e027      	b.n	8009368 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	88fa      	ldrh	r2, [r7, #6]
 8009322:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2201      	movs	r2, #1
 8009328:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2202      	movs	r2, #2
 800932e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009330:	2301      	movs	r3, #1
 8009332:	75fb      	strb	r3, [r7, #23]
      break;
 8009334:	e018      	b.n	8009368 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 f81c 	bl	8009374 <USBH_HandleControl>
 800933c:	4603      	mov	r3, r0
 800933e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <USBH_CtlReq+0x54>
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	2b03      	cmp	r3, #3
 800934a:	d106      	bne.n	800935a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2201      	movs	r2, #1
 8009350:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2200      	movs	r2, #0
 8009356:	761a      	strb	r2, [r3, #24]
      break;
 8009358:	e005      	b.n	8009366 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800935a:	7dfb      	ldrb	r3, [r7, #23]
 800935c:	2b02      	cmp	r3, #2
 800935e:	d102      	bne.n	8009366 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2201      	movs	r2, #1
 8009364:	709a      	strb	r2, [r3, #2]
      break;
 8009366:	bf00      	nop
  }
  return status;
 8009368:	7dfb      	ldrb	r3, [r7, #23]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3718      	adds	r7, #24
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
	...

08009374 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af02      	add	r7, sp, #8
 800937a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009380:	2300      	movs	r3, #0
 8009382:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	7e1b      	ldrb	r3, [r3, #24]
 8009388:	3b01      	subs	r3, #1
 800938a:	2b0a      	cmp	r3, #10
 800938c:	f200 8156 	bhi.w	800963c <USBH_HandleControl+0x2c8>
 8009390:	a201      	add	r2, pc, #4	; (adr r2, 8009398 <USBH_HandleControl+0x24>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	080093c5 	.word	0x080093c5
 800939c:	080093df 	.word	0x080093df
 80093a0:	08009449 	.word	0x08009449
 80093a4:	0800946f 	.word	0x0800946f
 80093a8:	080094a7 	.word	0x080094a7
 80093ac:	080094d1 	.word	0x080094d1
 80093b0:	08009523 	.word	0x08009523
 80093b4:	08009545 	.word	0x08009545
 80093b8:	08009581 	.word	0x08009581
 80093bc:	080095a7 	.word	0x080095a7
 80093c0:	080095e5 	.word	0x080095e5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f103 0110 	add.w	r1, r3, #16
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	795b      	ldrb	r3, [r3, #5]
 80093ce:	461a      	mov	r2, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f943 	bl	800965c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2202      	movs	r2, #2
 80093da:	761a      	strb	r2, [r3, #24]
      break;
 80093dc:	e139      	b.n	8009652 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	795b      	ldrb	r3, [r3, #5]
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fcc5 	bl	8009d74 <USBH_LL_GetURBState>
 80093ea:	4603      	mov	r3, r0
 80093ec:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80093ee:	7bbb      	ldrb	r3, [r7, #14]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d11e      	bne.n	8009432 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	7c1b      	ldrb	r3, [r3, #16]
 80093f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093fc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	8adb      	ldrh	r3, [r3, #22]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009406:	7b7b      	ldrb	r3, [r7, #13]
 8009408:	2b80      	cmp	r3, #128	; 0x80
 800940a:	d103      	bne.n	8009414 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2203      	movs	r2, #3
 8009410:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009412:	e115      	b.n	8009640 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2205      	movs	r2, #5
 8009418:	761a      	strb	r2, [r3, #24]
      break;
 800941a:	e111      	b.n	8009640 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800941c:	7b7b      	ldrb	r3, [r7, #13]
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	d103      	bne.n	800942a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2209      	movs	r2, #9
 8009426:	761a      	strb	r2, [r3, #24]
      break;
 8009428:	e10a      	b.n	8009640 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2207      	movs	r2, #7
 800942e:	761a      	strb	r2, [r3, #24]
      break;
 8009430:	e106      	b.n	8009640 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009432:	7bbb      	ldrb	r3, [r7, #14]
 8009434:	2b04      	cmp	r3, #4
 8009436:	d003      	beq.n	8009440 <USBH_HandleControl+0xcc>
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	2b02      	cmp	r3, #2
 800943c:	f040 8100 	bne.w	8009640 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	220b      	movs	r2, #11
 8009444:	761a      	strb	r2, [r3, #24]
      break;
 8009446:	e0fb      	b.n	8009640 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6899      	ldr	r1, [r3, #8]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	899a      	ldrh	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	791b      	ldrb	r3, [r3, #4]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f93a 	bl	80096da <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2204      	movs	r2, #4
 800946a:	761a      	strb	r2, [r3, #24]
      break;
 800946c:	e0f1      	b.n	8009652 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	791b      	ldrb	r3, [r3, #4]
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fc7d 	bl	8009d74 <USBH_LL_GetURBState>
 800947a:	4603      	mov	r3, r0
 800947c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800947e:	7bbb      	ldrb	r3, [r7, #14]
 8009480:	2b01      	cmp	r3, #1
 8009482:	d102      	bne.n	800948a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2209      	movs	r2, #9
 8009488:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800948a:	7bbb      	ldrb	r3, [r7, #14]
 800948c:	2b05      	cmp	r3, #5
 800948e:	d102      	bne.n	8009496 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009490:	2303      	movs	r3, #3
 8009492:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009494:	e0d6      	b.n	8009644 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	2b04      	cmp	r3, #4
 800949a:	f040 80d3 	bne.w	8009644 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	220b      	movs	r2, #11
 80094a2:	761a      	strb	r2, [r3, #24]
      break;
 80094a4:	e0ce      	b.n	8009644 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6899      	ldr	r1, [r3, #8]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	899a      	ldrh	r2, [r3, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	795b      	ldrb	r3, [r3, #5]
 80094b2:	2001      	movs	r0, #1
 80094b4:	9000      	str	r0, [sp, #0]
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 f8ea 	bl	8009690 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2206      	movs	r2, #6
 80094cc:	761a      	strb	r2, [r3, #24]
      break;
 80094ce:	e0c0      	b.n	8009652 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	795b      	ldrb	r3, [r3, #5]
 80094d4:	4619      	mov	r1, r3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fc4c 	bl	8009d74 <USBH_LL_GetURBState>
 80094dc:	4603      	mov	r3, r0
 80094de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80094e0:	7bbb      	ldrb	r3, [r7, #14]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d103      	bne.n	80094ee <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2207      	movs	r2, #7
 80094ea:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094ec:	e0ac      	b.n	8009648 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b05      	cmp	r3, #5
 80094f2:	d105      	bne.n	8009500 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	220c      	movs	r2, #12
 80094f8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80094fa:	2303      	movs	r3, #3
 80094fc:	73fb      	strb	r3, [r7, #15]
      break;
 80094fe:	e0a3      	b.n	8009648 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	2b02      	cmp	r3, #2
 8009504:	d103      	bne.n	800950e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2205      	movs	r2, #5
 800950a:	761a      	strb	r2, [r3, #24]
      break;
 800950c:	e09c      	b.n	8009648 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800950e:	7bbb      	ldrb	r3, [r7, #14]
 8009510:	2b04      	cmp	r3, #4
 8009512:	f040 8099 	bne.w	8009648 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	220b      	movs	r2, #11
 800951a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800951c:	2302      	movs	r3, #2
 800951e:	73fb      	strb	r3, [r7, #15]
      break;
 8009520:	e092      	b.n	8009648 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	791b      	ldrb	r3, [r3, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	2100      	movs	r1, #0
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f8d5 	bl	80096da <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009536:	b29a      	uxth	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2208      	movs	r2, #8
 8009540:	761a      	strb	r2, [r3, #24]

      break;
 8009542:	e086      	b.n	8009652 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	791b      	ldrb	r3, [r3, #4]
 8009548:	4619      	mov	r1, r3
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fc12 	bl	8009d74 <USBH_LL_GetURBState>
 8009550:	4603      	mov	r3, r0
 8009552:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d105      	bne.n	8009566 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	220d      	movs	r2, #13
 800955e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009564:	e072      	b.n	800964c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	2b04      	cmp	r3, #4
 800956a:	d103      	bne.n	8009574 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	220b      	movs	r2, #11
 8009570:	761a      	strb	r2, [r3, #24]
      break;
 8009572:	e06b      	b.n	800964c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009574:	7bbb      	ldrb	r3, [r7, #14]
 8009576:	2b05      	cmp	r3, #5
 8009578:	d168      	bne.n	800964c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800957a:	2303      	movs	r3, #3
 800957c:	73fb      	strb	r3, [r7, #15]
      break;
 800957e:	e065      	b.n	800964c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	795b      	ldrb	r3, [r3, #5]
 8009584:	2201      	movs	r2, #1
 8009586:	9200      	str	r2, [sp, #0]
 8009588:	2200      	movs	r2, #0
 800958a:	2100      	movs	r1, #0
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 f87f 	bl	8009690 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009598:	b29a      	uxth	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	220a      	movs	r2, #10
 80095a2:	761a      	strb	r2, [r3, #24]
      break;
 80095a4:	e055      	b.n	8009652 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	795b      	ldrb	r3, [r3, #5]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fbe1 	bl	8009d74 <USBH_LL_GetURBState>
 80095b2:	4603      	mov	r3, r0
 80095b4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d105      	bne.n	80095c8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80095bc:	2300      	movs	r3, #0
 80095be:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	220d      	movs	r2, #13
 80095c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095c6:	e043      	b.n	8009650 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80095c8:	7bbb      	ldrb	r3, [r7, #14]
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d103      	bne.n	80095d6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2209      	movs	r2, #9
 80095d2:	761a      	strb	r2, [r3, #24]
      break;
 80095d4:	e03c      	b.n	8009650 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b04      	cmp	r3, #4
 80095da:	d139      	bne.n	8009650 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	220b      	movs	r2, #11
 80095e0:	761a      	strb	r2, [r3, #24]
      break;
 80095e2:	e035      	b.n	8009650 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	7e5b      	ldrb	r3, [r3, #25]
 80095e8:	3301      	adds	r3, #1
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	765a      	strb	r2, [r3, #25]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7e5b      	ldrb	r3, [r3, #25]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d806      	bhi.n	8009606 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009604:	e025      	b.n	8009652 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800960c:	2106      	movs	r1, #6
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	795b      	ldrb	r3, [r3, #5]
 800961c:	4619      	mov	r1, r3
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f90c 	bl	800983c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	791b      	ldrb	r3, [r3, #4]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f906 	bl	800983c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009636:	2302      	movs	r3, #2
 8009638:	73fb      	strb	r3, [r7, #15]
      break;
 800963a:	e00a      	b.n	8009652 <USBH_HandleControl+0x2de>

    default:
      break;
 800963c:	bf00      	nop
 800963e:	e008      	b.n	8009652 <USBH_HandleControl+0x2de>
      break;
 8009640:	bf00      	nop
 8009642:	e006      	b.n	8009652 <USBH_HandleControl+0x2de>
      break;
 8009644:	bf00      	nop
 8009646:	e004      	b.n	8009652 <USBH_HandleControl+0x2de>
      break;
 8009648:	bf00      	nop
 800964a:	e002      	b.n	8009652 <USBH_HandleControl+0x2de>
      break;
 800964c:	bf00      	nop
 800964e:	e000      	b.n	8009652 <USBH_HandleControl+0x2de>
      break;
 8009650:	bf00      	nop
  }

  return status;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b088      	sub	sp, #32
 8009660:	af04      	add	r7, sp, #16
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4613      	mov	r3, r2
 8009668:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800966a:	79f9      	ldrb	r1, [r7, #7]
 800966c:	2300      	movs	r3, #0
 800966e:	9303      	str	r3, [sp, #12]
 8009670:	2308      	movs	r3, #8
 8009672:	9302      	str	r3, [sp, #8]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	2300      	movs	r3, #0
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	2300      	movs	r3, #0
 800967e:	2200      	movs	r2, #0
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 fb46 	bl	8009d12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af04      	add	r7, sp, #16
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	4611      	mov	r1, r2
 800969c:	461a      	mov	r2, r3
 800969e:	460b      	mov	r3, r1
 80096a0:	80fb      	strh	r3, [r7, #6]
 80096a2:	4613      	mov	r3, r2
 80096a4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096b4:	7979      	ldrb	r1, [r7, #5]
 80096b6:	7e3b      	ldrb	r3, [r7, #24]
 80096b8:	9303      	str	r3, [sp, #12]
 80096ba:	88fb      	ldrh	r3, [r7, #6]
 80096bc:	9302      	str	r3, [sp, #8]
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	2301      	movs	r3, #1
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	2300      	movs	r3, #0
 80096c8:	2200      	movs	r2, #0
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 fb21 	bl	8009d12 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b088      	sub	sp, #32
 80096de:	af04      	add	r7, sp, #16
 80096e0:	60f8      	str	r0, [r7, #12]
 80096e2:	60b9      	str	r1, [r7, #8]
 80096e4:	4611      	mov	r1, r2
 80096e6:	461a      	mov	r2, r3
 80096e8:	460b      	mov	r3, r1
 80096ea:	80fb      	strh	r3, [r7, #6]
 80096ec:	4613      	mov	r3, r2
 80096ee:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80096f0:	7979      	ldrb	r1, [r7, #5]
 80096f2:	2300      	movs	r3, #0
 80096f4:	9303      	str	r3, [sp, #12]
 80096f6:	88fb      	ldrh	r3, [r7, #6]
 80096f8:	9302      	str	r3, [sp, #8]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	2301      	movs	r3, #1
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	2300      	movs	r3, #0
 8009704:	2201      	movs	r2, #1
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 fb03 	bl	8009d12 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800970c:	2300      	movs	r3, #0

}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b088      	sub	sp, #32
 800971a:	af04      	add	r7, sp, #16
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	60b9      	str	r1, [r7, #8]
 8009720:	4611      	mov	r1, r2
 8009722:	461a      	mov	r2, r3
 8009724:	460b      	mov	r3, r1
 8009726:	80fb      	strh	r3, [r7, #6]
 8009728:	4613      	mov	r3, r2
 800972a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009732:	2b00      	cmp	r3, #0
 8009734:	d001      	beq.n	800973a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009736:	2300      	movs	r3, #0
 8009738:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800973a:	7979      	ldrb	r1, [r7, #5]
 800973c:	7e3b      	ldrb	r3, [r7, #24]
 800973e:	9303      	str	r3, [sp, #12]
 8009740:	88fb      	ldrh	r3, [r7, #6]
 8009742:	9302      	str	r3, [sp, #8]
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	9301      	str	r3, [sp, #4]
 8009748:	2301      	movs	r3, #1
 800974a:	9300      	str	r3, [sp, #0]
 800974c:	2302      	movs	r3, #2
 800974e:	2200      	movs	r2, #0
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f000 fade 	bl	8009d12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3710      	adds	r7, #16
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b088      	sub	sp, #32
 8009764:	af04      	add	r7, sp, #16
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	4611      	mov	r1, r2
 800976c:	461a      	mov	r2, r3
 800976e:	460b      	mov	r3, r1
 8009770:	80fb      	strh	r3, [r7, #6]
 8009772:	4613      	mov	r3, r2
 8009774:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009776:	7979      	ldrb	r1, [r7, #5]
 8009778:	2300      	movs	r3, #0
 800977a:	9303      	str	r3, [sp, #12]
 800977c:	88fb      	ldrh	r3, [r7, #6]
 800977e:	9302      	str	r3, [sp, #8]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	2301      	movs	r3, #1
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	2302      	movs	r3, #2
 800978a:	2201      	movs	r2, #1
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f000 fac0 	bl	8009d12 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af04      	add	r7, sp, #16
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	4608      	mov	r0, r1
 80097a6:	4611      	mov	r1, r2
 80097a8:	461a      	mov	r2, r3
 80097aa:	4603      	mov	r3, r0
 80097ac:	70fb      	strb	r3, [r7, #3]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70bb      	strb	r3, [r7, #2]
 80097b2:	4613      	mov	r3, r2
 80097b4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80097b6:	7878      	ldrb	r0, [r7, #1]
 80097b8:	78ba      	ldrb	r2, [r7, #2]
 80097ba:	78f9      	ldrb	r1, [r7, #3]
 80097bc:	8b3b      	ldrh	r3, [r7, #24]
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	7d3b      	ldrb	r3, [r7, #20]
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	7c3b      	ldrb	r3, [r7, #16]
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	4603      	mov	r3, r0
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa53 	bl	8009c76 <USBH_LL_OpenPipe>

  return USBH_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80097da:	b580      	push	{r7, lr}
 80097dc:	b082      	sub	sp, #8
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	460b      	mov	r3, r1
 80097e4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80097e6:	78fb      	ldrb	r3, [r7, #3]
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fa72 	bl	8009cd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
 8009802:	460b      	mov	r3, r1
 8009804:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f836 	bl	8009878 <USBH_GetFreePipe>
 800980c:	4603      	mov	r3, r0
 800980e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009810:	89fb      	ldrh	r3, [r7, #14]
 8009812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009816:	4293      	cmp	r3, r2
 8009818:	d00a      	beq.n	8009830 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800981a:	78fa      	ldrb	r2, [r7, #3]
 800981c:	89fb      	ldrh	r3, [r7, #14]
 800981e:	f003 030f 	and.w	r3, r3, #15
 8009822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	33e0      	adds	r3, #224	; 0xe0
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	440b      	add	r3, r1
 800982e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009830:	89fb      	ldrh	r3, [r7, #14]
 8009832:	b2db      	uxtb	r3, r3
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	460b      	mov	r3, r1
 8009846:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	2b0f      	cmp	r3, #15
 800984c:	d80d      	bhi.n	800986a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800984e:	78fb      	ldrb	r3, [r7, #3]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	33e0      	adds	r3, #224	; 0xe0
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009860:	6879      	ldr	r1, [r7, #4]
 8009862:	33e0      	adds	r3, #224	; 0xe0
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	440b      	add	r3, r1
 8009868:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009884:	2300      	movs	r3, #0
 8009886:	73fb      	strb	r3, [r7, #15]
 8009888:	e00f      	b.n	80098aa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	33e0      	adds	r3, #224	; 0xe0
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d102      	bne.n	80098a4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	e007      	b.n	80098b4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	3301      	adds	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	2b0f      	cmp	r3, #15
 80098ae:	d9ec      	bls.n	800988a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80098b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3714      	adds	r7, #20
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80098c4:	2201      	movs	r2, #1
 80098c6:	490e      	ldr	r1, [pc, #56]	; (8009900 <MX_USB_HOST_Init+0x40>)
 80098c8:	480e      	ldr	r0, [pc, #56]	; (8009904 <MX_USB_HOST_Init+0x44>)
 80098ca:	f7fe fba7 	bl	800801c <USBH_Init>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80098d4:	f7f7 fa10 	bl	8000cf8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80098d8:	490b      	ldr	r1, [pc, #44]	; (8009908 <MX_USB_HOST_Init+0x48>)
 80098da:	480a      	ldr	r0, [pc, #40]	; (8009904 <MX_USB_HOST_Init+0x44>)
 80098dc:	f7fe fc2c 	bl	8008138 <USBH_RegisterClass>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80098e6:	f7f7 fa07 	bl	8000cf8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80098ea:	4806      	ldr	r0, [pc, #24]	; (8009904 <MX_USB_HOST_Init+0x44>)
 80098ec:	f7fe fcb0 	bl	8008250 <USBH_Start>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80098f6:	f7f7 f9ff 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80098fa:	bf00      	nop
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	08009921 	.word	0x08009921
 8009904:	20000300 	.word	0x20000300
 8009908:	20000010 	.word	0x20000010

0800990c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009910:	4802      	ldr	r0, [pc, #8]	; (800991c <MX_USB_HOST_Process+0x10>)
 8009912:	f7fe fcad 	bl	8008270 <USBH_Process>
}
 8009916:	bf00      	nop
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000300 	.word	0x20000300

08009920 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	460b      	mov	r3, r1
 800992a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800992c:	78fb      	ldrb	r3, [r7, #3]
 800992e:	3b01      	subs	r3, #1
 8009930:	2b04      	cmp	r3, #4
 8009932:	d819      	bhi.n	8009968 <USBH_UserProcess+0x48>
 8009934:	a201      	add	r2, pc, #4	; (adr r2, 800993c <USBH_UserProcess+0x1c>)
 8009936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993a:	bf00      	nop
 800993c:	08009969 	.word	0x08009969
 8009940:	08009959 	.word	0x08009959
 8009944:	08009969 	.word	0x08009969
 8009948:	08009961 	.word	0x08009961
 800994c:	08009951 	.word	0x08009951
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009950:	4b09      	ldr	r3, [pc, #36]	; (8009978 <USBH_UserProcess+0x58>)
 8009952:	2203      	movs	r2, #3
 8009954:	701a      	strb	r2, [r3, #0]
  break;
 8009956:	e008      	b.n	800996a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009958:	4b07      	ldr	r3, [pc, #28]	; (8009978 <USBH_UserProcess+0x58>)
 800995a:	2202      	movs	r2, #2
 800995c:	701a      	strb	r2, [r3, #0]
  break;
 800995e:	e004      	b.n	800996a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009960:	4b05      	ldr	r3, [pc, #20]	; (8009978 <USBH_UserProcess+0x58>)
 8009962:	2201      	movs	r2, #1
 8009964:	701a      	strb	r2, [r3, #0]
  break;
 8009966:	e000      	b.n	800996a <USBH_UserProcess+0x4a>

  default:
  break;
 8009968:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800996a:	bf00      	nop
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	200006d8 	.word	0x200006d8

0800997c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08a      	sub	sp, #40	; 0x28
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009984:	f107 0314 	add.w	r3, r7, #20
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	605a      	str	r2, [r3, #4]
 800998e:	609a      	str	r2, [r3, #8]
 8009990:	60da      	str	r2, [r3, #12]
 8009992:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800999c:	d147      	bne.n	8009a2e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800999e:	2300      	movs	r3, #0
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	4b25      	ldr	r3, [pc, #148]	; (8009a38 <HAL_HCD_MspInit+0xbc>)
 80099a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a6:	4a24      	ldr	r2, [pc, #144]	; (8009a38 <HAL_HCD_MspInit+0xbc>)
 80099a8:	f043 0301 	orr.w	r3, r3, #1
 80099ac:	6313      	str	r3, [r2, #48]	; 0x30
 80099ae:	4b22      	ldr	r3, [pc, #136]	; (8009a38 <HAL_HCD_MspInit+0xbc>)
 80099b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b2:	f003 0301 	and.w	r3, r3, #1
 80099b6:	613b      	str	r3, [r7, #16]
 80099b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80099ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80099c0:	2300      	movs	r3, #0
 80099c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099c4:	2300      	movs	r3, #0
 80099c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80099c8:	f107 0314 	add.w	r3, r7, #20
 80099cc:	4619      	mov	r1, r3
 80099ce:	481b      	ldr	r0, [pc, #108]	; (8009a3c <HAL_HCD_MspInit+0xc0>)
 80099d0:	f7f8 fc0c 	bl	80021ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80099d4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80099d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099da:	2302      	movs	r3, #2
 80099dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099e2:	2300      	movs	r3, #0
 80099e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099e6:	230a      	movs	r3, #10
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099ea:	f107 0314 	add.w	r3, r7, #20
 80099ee:	4619      	mov	r1, r3
 80099f0:	4812      	ldr	r0, [pc, #72]	; (8009a3c <HAL_HCD_MspInit+0xc0>)
 80099f2:	f7f8 fbfb 	bl	80021ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099f6:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <HAL_HCD_MspInit+0xbc>)
 80099f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099fa:	4a0f      	ldr	r2, [pc, #60]	; (8009a38 <HAL_HCD_MspInit+0xbc>)
 80099fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a00:	6353      	str	r3, [r2, #52]	; 0x34
 8009a02:	2300      	movs	r3, #0
 8009a04:	60fb      	str	r3, [r7, #12]
 8009a06:	4b0c      	ldr	r3, [pc, #48]	; (8009a38 <HAL_HCD_MspInit+0xbc>)
 8009a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0a:	4a0b      	ldr	r2, [pc, #44]	; (8009a38 <HAL_HCD_MspInit+0xbc>)
 8009a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a10:	6453      	str	r3, [r2, #68]	; 0x44
 8009a12:	4b09      	ldr	r3, [pc, #36]	; (8009a38 <HAL_HCD_MspInit+0xbc>)
 8009a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	2043      	movs	r0, #67	; 0x43
 8009a24:	f7f8 f83b 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009a28:	2043      	movs	r0, #67	; 0x43
 8009a2a:	f7f8 f854 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009a2e:	bf00      	nop
 8009a30:	3728      	adds	r7, #40	; 0x28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	40020000 	.word	0x40020000

08009a40 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7fe ffed 	bl	8008a2e <USBH_LL_IncTimer>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7ff f825 	bl	8008aba <USBH_LL_Connect>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7ff f82e 	bl	8008ae8 <USBH_LL_Disconnect>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	70fb      	strb	r3, [r7, #3]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe ffdf 	bl	8008a82 <USBH_LL_PortEnabled>
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe ffdf 	bl	8008a9e <USBH_LL_PortDisabled>
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d12a      	bne.n	8009b50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009afa:	4a18      	ldr	r2, [pc, #96]	; (8009b5c <USBH_LL_Init+0x74>)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4a15      	ldr	r2, [pc, #84]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b06:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b0a:	4b14      	ldr	r3, [pc, #80]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b0c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009b12:	4b12      	ldr	r3, [pc, #72]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b14:	2208      	movs	r2, #8
 8009b16:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009b18:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b1e:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009b24:	4b0d      	ldr	r3, [pc, #52]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b26:	2202      	movs	r2, #2
 8009b28:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b2a:	4b0c      	ldr	r3, [pc, #48]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009b30:	480a      	ldr	r0, [pc, #40]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b32:	f7f8 fd10 	bl	8002556 <HAL_HCD_Init>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009b3c:	f7f7 f8dc 	bl	8000cf8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009b40:	4806      	ldr	r0, [pc, #24]	; (8009b5c <USBH_LL_Init+0x74>)
 8009b42:	f7f9 f8f4 	bl	8002d2e <HAL_HCD_GetCurrentFrame>
 8009b46:	4603      	mov	r3, r0
 8009b48:	4619      	mov	r1, r3
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7fe ff60 	bl	8008a10 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3708      	adds	r7, #8
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
 8009b5a:	bf00      	nop
 8009b5c:	200006dc 	.word	0x200006dc

08009b60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7f9 f863 	bl	8002c42 <HAL_HCD_Start>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 f95c 	bl	8009e40 <USBH_Get_USB_Status>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7f9 f86b 	bl	8002c88 <HAL_HCD_Stop>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f000 f941 	bl	8009e40 <USBH_Get_USB_Status>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7f9 f8b3 	bl	8002d4a <HAL_HCD_GetCurrentSpeed>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b02      	cmp	r3, #2
 8009be8:	d00c      	beq.n	8009c04 <USBH_LL_GetSpeed+0x38>
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d80d      	bhi.n	8009c0a <USBH_LL_GetSpeed+0x3e>
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d002      	beq.n	8009bf8 <USBH_LL_GetSpeed+0x2c>
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d003      	beq.n	8009bfe <USBH_LL_GetSpeed+0x32>
 8009bf6:	e008      	b.n	8009c0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8009bfc:	e008      	b.n	8009c10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	73fb      	strb	r3, [r7, #15]
    break;
 8009c02:	e005      	b.n	8009c10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009c04:	2302      	movs	r3, #2
 8009c06:	73fb      	strb	r3, [r7, #15]
    break;
 8009c08:	e002      	b.n	8009c10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c0e:	bf00      	nop
  }
  return  speed;
 8009c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}

08009c1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009c1a:	b580      	push	{r7, lr}
 8009c1c:	b084      	sub	sp, #16
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c22:	2300      	movs	r3, #0
 8009c24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f7f9 f846 	bl	8002cc2 <HAL_HCD_ResetPort>
 8009c36:	4603      	mov	r3, r0
 8009c38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f000 f8ff 	bl	8009e40 <USBH_Get_USB_Status>
 8009c42:	4603      	mov	r3, r0
 8009c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3710      	adds	r7, #16
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	4611      	mov	r1, r2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f9 f84d 	bl	8002d06 <HAL_HCD_HC_GetXferCount>
 8009c6c:	4603      	mov	r3, r0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3708      	adds	r7, #8
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009c76:	b590      	push	{r4, r7, lr}
 8009c78:	b089      	sub	sp, #36	; 0x24
 8009c7a:	af04      	add	r7, sp, #16
 8009c7c:	6078      	str	r0, [r7, #4]
 8009c7e:	4608      	mov	r0, r1
 8009c80:	4611      	mov	r1, r2
 8009c82:	461a      	mov	r2, r3
 8009c84:	4603      	mov	r3, r0
 8009c86:	70fb      	strb	r3, [r7, #3]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70bb      	strb	r3, [r7, #2]
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009c9e:	787c      	ldrb	r4, [r7, #1]
 8009ca0:	78ba      	ldrb	r2, [r7, #2]
 8009ca2:	78f9      	ldrb	r1, [r7, #3]
 8009ca4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	4623      	mov	r3, r4
 8009cb6:	f7f8 fcb0 	bl	800261a <HAL_HCD_HC_Init>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 f8bd 	bl	8009e40 <USBH_Get_USB_Status>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd90      	pop	{r4, r7, pc}

08009cd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cee:	78fa      	ldrb	r2, [r7, #3]
 8009cf0:	4611      	mov	r1, r2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7f8 fd20 	bl	8002738 <HAL_HCD_HC_Halt>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f000 f89e 	bl	8009e40 <USBH_Get_USB_Status>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3710      	adds	r7, #16
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}

08009d12 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009d12:	b590      	push	{r4, r7, lr}
 8009d14:	b089      	sub	sp, #36	; 0x24
 8009d16:	af04      	add	r7, sp, #16
 8009d18:	6078      	str	r0, [r7, #4]
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	461a      	mov	r2, r3
 8009d20:	4603      	mov	r3, r0
 8009d22:	70fb      	strb	r3, [r7, #3]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70bb      	strb	r3, [r7, #2]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009d3a:	787c      	ldrb	r4, [r7, #1]
 8009d3c:	78ba      	ldrb	r2, [r7, #2]
 8009d3e:	78f9      	ldrb	r1, [r7, #3]
 8009d40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009d44:	9303      	str	r3, [sp, #12]
 8009d46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009d48:	9302      	str	r3, [sp, #8]
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	4623      	mov	r3, r4
 8009d56:	f7f8 fd13 	bl	8002780 <HAL_HCD_HC_SubmitRequest>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f86d 	bl	8009e40 <USBH_Get_USB_Status>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd90      	pop	{r4, r7, pc}

08009d74 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d86:	78fa      	ldrb	r2, [r7, #3]
 8009d88:	4611      	mov	r1, r2
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7f8 ffa7 	bl	8002cde <HAL_HCD_HC_GetURBState>
 8009d90:	4603      	mov	r3, r0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3708      	adds	r7, #8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d103      	bne.n	8009db8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009db0:	78fb      	ldrb	r3, [r7, #3]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 f870 	bl	8009e98 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009db8:	20c8      	movs	r0, #200	; 0xc8
 8009dba:	f7f7 fb0f 	bl	80013dc <HAL_Delay>
  return USBH_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009dde:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	212c      	movs	r1, #44	; 0x2c
 8009de6:	fb01 f303 	mul.w	r3, r1, r3
 8009dea:	4413      	add	r3, r2
 8009dec:	333b      	adds	r3, #59	; 0x3b
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d009      	beq.n	8009e08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	212c      	movs	r1, #44	; 0x2c
 8009dfa:	fb01 f303 	mul.w	r3, r1, r3
 8009dfe:	4413      	add	r3, r2
 8009e00:	3354      	adds	r3, #84	; 0x54
 8009e02:	78ba      	ldrb	r2, [r7, #2]
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	e008      	b.n	8009e1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009e08:	78fb      	ldrb	r3, [r7, #3]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	212c      	movs	r1, #44	; 0x2c
 8009e0e:	fb01 f303 	mul.w	r3, r1, r3
 8009e12:	4413      	add	r3, r2
 8009e14:	3355      	adds	r3, #85	; 0x55
 8009e16:	78ba      	ldrb	r2, [r7, #2]
 8009e18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009e1a:	2300      	movs	r3, #0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7f7 fad3 	bl	80013dc <HAL_Delay>
}
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4603      	mov	r3, r0
 8009e48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d817      	bhi.n	8009e84 <USBH_Get_USB_Status+0x44>
 8009e54:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <USBH_Get_USB_Status+0x1c>)
 8009e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5a:	bf00      	nop
 8009e5c:	08009e6d 	.word	0x08009e6d
 8009e60:	08009e73 	.word	0x08009e73
 8009e64:	08009e79 	.word	0x08009e79
 8009e68:	08009e7f 	.word	0x08009e7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e70:	e00b      	b.n	8009e8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009e72:	2302      	movs	r3, #2
 8009e74:	73fb      	strb	r3, [r7, #15]
    break;
 8009e76:	e008      	b.n	8009e8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e7c:	e005      	b.n	8009e8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009e7e:	2302      	movs	r3, #2
 8009e80:	73fb      	strb	r3, [r7, #15]
    break;
 8009e82:	e002      	b.n	8009e8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009e84:	2302      	movs	r3, #2
 8009e86:	73fb      	strb	r3, [r7, #15]
    break;
 8009e88:	bf00      	nop
  }
  return usb_status;
 8009e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3714      	adds	r7, #20
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009ea2:	79fb      	ldrb	r3, [r7, #7]
 8009ea4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d102      	bne.n	8009eb2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009eac:	2300      	movs	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
 8009eb0:	e001      	b.n	8009eb6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	2101      	movs	r1, #1
 8009ebc:	4803      	ldr	r0, [pc, #12]	; (8009ecc <MX_DriverVbusFS+0x34>)
 8009ebe:	f7f8 fb31 	bl	8002524 <HAL_GPIO_WritePin>
}
 8009ec2:	bf00      	nop
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	40020800 	.word	0x40020800

08009ed0 <__errno>:
 8009ed0:	4b01      	ldr	r3, [pc, #4]	; (8009ed8 <__errno+0x8>)
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	20000030 	.word	0x20000030

08009edc <__libc_init_array>:
 8009edc:	b570      	push	{r4, r5, r6, lr}
 8009ede:	4d0d      	ldr	r5, [pc, #52]	; (8009f14 <__libc_init_array+0x38>)
 8009ee0:	4c0d      	ldr	r4, [pc, #52]	; (8009f18 <__libc_init_array+0x3c>)
 8009ee2:	1b64      	subs	r4, r4, r5
 8009ee4:	10a4      	asrs	r4, r4, #2
 8009ee6:	2600      	movs	r6, #0
 8009ee8:	42a6      	cmp	r6, r4
 8009eea:	d109      	bne.n	8009f00 <__libc_init_array+0x24>
 8009eec:	4d0b      	ldr	r5, [pc, #44]	; (8009f1c <__libc_init_array+0x40>)
 8009eee:	4c0c      	ldr	r4, [pc, #48]	; (8009f20 <__libc_init_array+0x44>)
 8009ef0:	f000 f92e 	bl	800a150 <_init>
 8009ef4:	1b64      	subs	r4, r4, r5
 8009ef6:	10a4      	asrs	r4, r4, #2
 8009ef8:	2600      	movs	r6, #0
 8009efa:	42a6      	cmp	r6, r4
 8009efc:	d105      	bne.n	8009f0a <__libc_init_array+0x2e>
 8009efe:	bd70      	pop	{r4, r5, r6, pc}
 8009f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f04:	4798      	blx	r3
 8009f06:	3601      	adds	r6, #1
 8009f08:	e7ee      	b.n	8009ee8 <__libc_init_array+0xc>
 8009f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0e:	4798      	blx	r3
 8009f10:	3601      	adds	r6, #1
 8009f12:	e7f2      	b.n	8009efa <__libc_init_array+0x1e>
 8009f14:	0800a194 	.word	0x0800a194
 8009f18:	0800a194 	.word	0x0800a194
 8009f1c:	0800a194 	.word	0x0800a194
 8009f20:	0800a198 	.word	0x0800a198

08009f24 <malloc>:
 8009f24:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <malloc+0xc>)
 8009f26:	4601      	mov	r1, r0
 8009f28:	6818      	ldr	r0, [r3, #0]
 8009f2a:	f000 b87f 	b.w	800a02c <_malloc_r>
 8009f2e:	bf00      	nop
 8009f30:	20000030 	.word	0x20000030

08009f34 <free>:
 8009f34:	4b02      	ldr	r3, [pc, #8]	; (8009f40 <free+0xc>)
 8009f36:	4601      	mov	r1, r0
 8009f38:	6818      	ldr	r0, [r3, #0]
 8009f3a:	f000 b80b 	b.w	8009f54 <_free_r>
 8009f3e:	bf00      	nop
 8009f40:	20000030 	.word	0x20000030

08009f44 <memset>:
 8009f44:	4402      	add	r2, r0
 8009f46:	4603      	mov	r3, r0
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d100      	bne.n	8009f4e <memset+0xa>
 8009f4c:	4770      	bx	lr
 8009f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f52:	e7f9      	b.n	8009f48 <memset+0x4>

08009f54 <_free_r>:
 8009f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f56:	2900      	cmp	r1, #0
 8009f58:	d044      	beq.n	8009fe4 <_free_r+0x90>
 8009f5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5e:	9001      	str	r0, [sp, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f1a1 0404 	sub.w	r4, r1, #4
 8009f66:	bfb8      	it	lt
 8009f68:	18e4      	addlt	r4, r4, r3
 8009f6a:	f000 f8e3 	bl	800a134 <__malloc_lock>
 8009f6e:	4a1e      	ldr	r2, [pc, #120]	; (8009fe8 <_free_r+0x94>)
 8009f70:	9801      	ldr	r0, [sp, #4]
 8009f72:	6813      	ldr	r3, [r2, #0]
 8009f74:	b933      	cbnz	r3, 8009f84 <_free_r+0x30>
 8009f76:	6063      	str	r3, [r4, #4]
 8009f78:	6014      	str	r4, [r2, #0]
 8009f7a:	b003      	add	sp, #12
 8009f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f80:	f000 b8de 	b.w	800a140 <__malloc_unlock>
 8009f84:	42a3      	cmp	r3, r4
 8009f86:	d908      	bls.n	8009f9a <_free_r+0x46>
 8009f88:	6825      	ldr	r5, [r4, #0]
 8009f8a:	1961      	adds	r1, r4, r5
 8009f8c:	428b      	cmp	r3, r1
 8009f8e:	bf01      	itttt	eq
 8009f90:	6819      	ldreq	r1, [r3, #0]
 8009f92:	685b      	ldreq	r3, [r3, #4]
 8009f94:	1949      	addeq	r1, r1, r5
 8009f96:	6021      	streq	r1, [r4, #0]
 8009f98:	e7ed      	b.n	8009f76 <_free_r+0x22>
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	b10b      	cbz	r3, 8009fa4 <_free_r+0x50>
 8009fa0:	42a3      	cmp	r3, r4
 8009fa2:	d9fa      	bls.n	8009f9a <_free_r+0x46>
 8009fa4:	6811      	ldr	r1, [r2, #0]
 8009fa6:	1855      	adds	r5, r2, r1
 8009fa8:	42a5      	cmp	r5, r4
 8009faa:	d10b      	bne.n	8009fc4 <_free_r+0x70>
 8009fac:	6824      	ldr	r4, [r4, #0]
 8009fae:	4421      	add	r1, r4
 8009fb0:	1854      	adds	r4, r2, r1
 8009fb2:	42a3      	cmp	r3, r4
 8009fb4:	6011      	str	r1, [r2, #0]
 8009fb6:	d1e0      	bne.n	8009f7a <_free_r+0x26>
 8009fb8:	681c      	ldr	r4, [r3, #0]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	6053      	str	r3, [r2, #4]
 8009fbe:	4421      	add	r1, r4
 8009fc0:	6011      	str	r1, [r2, #0]
 8009fc2:	e7da      	b.n	8009f7a <_free_r+0x26>
 8009fc4:	d902      	bls.n	8009fcc <_free_r+0x78>
 8009fc6:	230c      	movs	r3, #12
 8009fc8:	6003      	str	r3, [r0, #0]
 8009fca:	e7d6      	b.n	8009f7a <_free_r+0x26>
 8009fcc:	6825      	ldr	r5, [r4, #0]
 8009fce:	1961      	adds	r1, r4, r5
 8009fd0:	428b      	cmp	r3, r1
 8009fd2:	bf04      	itt	eq
 8009fd4:	6819      	ldreq	r1, [r3, #0]
 8009fd6:	685b      	ldreq	r3, [r3, #4]
 8009fd8:	6063      	str	r3, [r4, #4]
 8009fda:	bf04      	itt	eq
 8009fdc:	1949      	addeq	r1, r1, r5
 8009fde:	6021      	streq	r1, [r4, #0]
 8009fe0:	6054      	str	r4, [r2, #4]
 8009fe2:	e7ca      	b.n	8009f7a <_free_r+0x26>
 8009fe4:	b003      	add	sp, #12
 8009fe6:	bd30      	pop	{r4, r5, pc}
 8009fe8:	200009e0 	.word	0x200009e0

08009fec <sbrk_aligned>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	4e0e      	ldr	r6, [pc, #56]	; (800a028 <sbrk_aligned+0x3c>)
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	6831      	ldr	r1, [r6, #0]
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	b911      	cbnz	r1, 8009ffe <sbrk_aligned+0x12>
 8009ff8:	f000 f88c 	bl	800a114 <_sbrk_r>
 8009ffc:	6030      	str	r0, [r6, #0]
 8009ffe:	4621      	mov	r1, r4
 800a000:	4628      	mov	r0, r5
 800a002:	f000 f887 	bl	800a114 <_sbrk_r>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	d00a      	beq.n	800a020 <sbrk_aligned+0x34>
 800a00a:	1cc4      	adds	r4, r0, #3
 800a00c:	f024 0403 	bic.w	r4, r4, #3
 800a010:	42a0      	cmp	r0, r4
 800a012:	d007      	beq.n	800a024 <sbrk_aligned+0x38>
 800a014:	1a21      	subs	r1, r4, r0
 800a016:	4628      	mov	r0, r5
 800a018:	f000 f87c 	bl	800a114 <_sbrk_r>
 800a01c:	3001      	adds	r0, #1
 800a01e:	d101      	bne.n	800a024 <sbrk_aligned+0x38>
 800a020:	f04f 34ff 	mov.w	r4, #4294967295
 800a024:	4620      	mov	r0, r4
 800a026:	bd70      	pop	{r4, r5, r6, pc}
 800a028:	200009e4 	.word	0x200009e4

0800a02c <_malloc_r>:
 800a02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a030:	1ccd      	adds	r5, r1, #3
 800a032:	f025 0503 	bic.w	r5, r5, #3
 800a036:	3508      	adds	r5, #8
 800a038:	2d0c      	cmp	r5, #12
 800a03a:	bf38      	it	cc
 800a03c:	250c      	movcc	r5, #12
 800a03e:	2d00      	cmp	r5, #0
 800a040:	4607      	mov	r7, r0
 800a042:	db01      	blt.n	800a048 <_malloc_r+0x1c>
 800a044:	42a9      	cmp	r1, r5
 800a046:	d905      	bls.n	800a054 <_malloc_r+0x28>
 800a048:	230c      	movs	r3, #12
 800a04a:	603b      	str	r3, [r7, #0]
 800a04c:	2600      	movs	r6, #0
 800a04e:	4630      	mov	r0, r6
 800a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a054:	4e2e      	ldr	r6, [pc, #184]	; (800a110 <_malloc_r+0xe4>)
 800a056:	f000 f86d 	bl	800a134 <__malloc_lock>
 800a05a:	6833      	ldr	r3, [r6, #0]
 800a05c:	461c      	mov	r4, r3
 800a05e:	bb34      	cbnz	r4, 800a0ae <_malloc_r+0x82>
 800a060:	4629      	mov	r1, r5
 800a062:	4638      	mov	r0, r7
 800a064:	f7ff ffc2 	bl	8009fec <sbrk_aligned>
 800a068:	1c43      	adds	r3, r0, #1
 800a06a:	4604      	mov	r4, r0
 800a06c:	d14d      	bne.n	800a10a <_malloc_r+0xde>
 800a06e:	6834      	ldr	r4, [r6, #0]
 800a070:	4626      	mov	r6, r4
 800a072:	2e00      	cmp	r6, #0
 800a074:	d140      	bne.n	800a0f8 <_malloc_r+0xcc>
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	4631      	mov	r1, r6
 800a07a:	4638      	mov	r0, r7
 800a07c:	eb04 0803 	add.w	r8, r4, r3
 800a080:	f000 f848 	bl	800a114 <_sbrk_r>
 800a084:	4580      	cmp	r8, r0
 800a086:	d13a      	bne.n	800a0fe <_malloc_r+0xd2>
 800a088:	6821      	ldr	r1, [r4, #0]
 800a08a:	3503      	adds	r5, #3
 800a08c:	1a6d      	subs	r5, r5, r1
 800a08e:	f025 0503 	bic.w	r5, r5, #3
 800a092:	3508      	adds	r5, #8
 800a094:	2d0c      	cmp	r5, #12
 800a096:	bf38      	it	cc
 800a098:	250c      	movcc	r5, #12
 800a09a:	4629      	mov	r1, r5
 800a09c:	4638      	mov	r0, r7
 800a09e:	f7ff ffa5 	bl	8009fec <sbrk_aligned>
 800a0a2:	3001      	adds	r0, #1
 800a0a4:	d02b      	beq.n	800a0fe <_malloc_r+0xd2>
 800a0a6:	6823      	ldr	r3, [r4, #0]
 800a0a8:	442b      	add	r3, r5
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	e00e      	b.n	800a0cc <_malloc_r+0xa0>
 800a0ae:	6822      	ldr	r2, [r4, #0]
 800a0b0:	1b52      	subs	r2, r2, r5
 800a0b2:	d41e      	bmi.n	800a0f2 <_malloc_r+0xc6>
 800a0b4:	2a0b      	cmp	r2, #11
 800a0b6:	d916      	bls.n	800a0e6 <_malloc_r+0xba>
 800a0b8:	1961      	adds	r1, r4, r5
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	6025      	str	r5, [r4, #0]
 800a0be:	bf18      	it	ne
 800a0c0:	6059      	strne	r1, [r3, #4]
 800a0c2:	6863      	ldr	r3, [r4, #4]
 800a0c4:	bf08      	it	eq
 800a0c6:	6031      	streq	r1, [r6, #0]
 800a0c8:	5162      	str	r2, [r4, r5]
 800a0ca:	604b      	str	r3, [r1, #4]
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	f104 060b 	add.w	r6, r4, #11
 800a0d2:	f000 f835 	bl	800a140 <__malloc_unlock>
 800a0d6:	f026 0607 	bic.w	r6, r6, #7
 800a0da:	1d23      	adds	r3, r4, #4
 800a0dc:	1af2      	subs	r2, r6, r3
 800a0de:	d0b6      	beq.n	800a04e <_malloc_r+0x22>
 800a0e0:	1b9b      	subs	r3, r3, r6
 800a0e2:	50a3      	str	r3, [r4, r2]
 800a0e4:	e7b3      	b.n	800a04e <_malloc_r+0x22>
 800a0e6:	6862      	ldr	r2, [r4, #4]
 800a0e8:	42a3      	cmp	r3, r4
 800a0ea:	bf0c      	ite	eq
 800a0ec:	6032      	streq	r2, [r6, #0]
 800a0ee:	605a      	strne	r2, [r3, #4]
 800a0f0:	e7ec      	b.n	800a0cc <_malloc_r+0xa0>
 800a0f2:	4623      	mov	r3, r4
 800a0f4:	6864      	ldr	r4, [r4, #4]
 800a0f6:	e7b2      	b.n	800a05e <_malloc_r+0x32>
 800a0f8:	4634      	mov	r4, r6
 800a0fa:	6876      	ldr	r6, [r6, #4]
 800a0fc:	e7b9      	b.n	800a072 <_malloc_r+0x46>
 800a0fe:	230c      	movs	r3, #12
 800a100:	603b      	str	r3, [r7, #0]
 800a102:	4638      	mov	r0, r7
 800a104:	f000 f81c 	bl	800a140 <__malloc_unlock>
 800a108:	e7a1      	b.n	800a04e <_malloc_r+0x22>
 800a10a:	6025      	str	r5, [r4, #0]
 800a10c:	e7de      	b.n	800a0cc <_malloc_r+0xa0>
 800a10e:	bf00      	nop
 800a110:	200009e0 	.word	0x200009e0

0800a114 <_sbrk_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d06      	ldr	r5, [pc, #24]	; (800a130 <_sbrk_r+0x1c>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	f7f7 f878 	bl	8001214 <_sbrk>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_sbrk_r+0x1a>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_sbrk_r+0x1a>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	200009e8 	.word	0x200009e8

0800a134 <__malloc_lock>:
 800a134:	4801      	ldr	r0, [pc, #4]	; (800a13c <__malloc_lock+0x8>)
 800a136:	f000 b809 	b.w	800a14c <__retarget_lock_acquire_recursive>
 800a13a:	bf00      	nop
 800a13c:	200009ec 	.word	0x200009ec

0800a140 <__malloc_unlock>:
 800a140:	4801      	ldr	r0, [pc, #4]	; (800a148 <__malloc_unlock+0x8>)
 800a142:	f000 b804 	b.w	800a14e <__retarget_lock_release_recursive>
 800a146:	bf00      	nop
 800a148:	200009ec 	.word	0x200009ec

0800a14c <__retarget_lock_acquire_recursive>:
 800a14c:	4770      	bx	lr

0800a14e <__retarget_lock_release_recursive>:
 800a14e:	4770      	bx	lr

0800a150 <_init>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	bf00      	nop
 800a154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a156:	bc08      	pop	{r3}
 800a158:	469e      	mov	lr, r3
 800a15a:	4770      	bx	lr

0800a15c <_fini>:
 800a15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15e:	bf00      	nop
 800a160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a162:	bc08      	pop	{r3}
 800a164:	469e      	mov	lr, r3
 800a166:	4770      	bx	lr

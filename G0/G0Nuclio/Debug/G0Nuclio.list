
G0Nuclio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080042a4  080042a4  000142a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800432c  0800432c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004334  08004334  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800433c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  20000010  0800434c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800434c  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012806  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000244d  00000000  00000000  0003283e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  00034c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00035ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001930f  00000000  00000000  00036c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c88  00000000  00000000  0004ff77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7092  00000000  00000000  00062bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00109c91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bec  00000000  00000000  00109ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800428c 	.word	0x0800428c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	0800428c 	.word	0x0800428c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_ADC_ConvCpltCallback>:
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  cur_val = HAL_ADC_GetValue(&hadc1);
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_ADC_ConvCpltCallback+0x20>)
 8000626:	0018      	movs	r0, r3
 8000628:	f000 ff7a 	bl	8001520 <HAL_ADC_GetValue>
 800062c:	0002      	movs	r2, r0
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <HAL_ADC_ConvCpltCallback+0x24>)
 8000630:	601a      	str	r2, [r3, #0]


}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	200001e0 	.word	0x200001e0
 8000640:	2000002c 	.word	0x2000002c

08000644 <updateVal>:
void updateVal(int* top_val,int adc_val){
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]
	for(uint8_t counter = 1; counter <100;counter++){
 800064e:	230f      	movs	r3, #15
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e014      	b.n	8000682 <updateVal+0x3e>
		top_val[counter-1] = top_val[counter];
 8000658:	200f      	movs	r0, #15
 800065a:	183b      	adds	r3, r7, r0
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	18d2      	adds	r2, r2, r3
 8000664:	183b      	adds	r3, r7, r0
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	490d      	ldr	r1, [pc, #52]	; (80006a0 <updateVal+0x5c>)
 800066a:	468c      	mov	ip, r1
 800066c:	4463      	add	r3, ip
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	6879      	ldr	r1, [r7, #4]
 8000672:	18cb      	adds	r3, r1, r3
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	601a      	str	r2, [r3, #0]
	for(uint8_t counter = 1; counter <100;counter++){
 8000678:	183b      	adds	r3, r7, r0
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	183b      	adds	r3, r7, r0
 800067e:	3201      	adds	r2, #1
 8000680:	701a      	strb	r2, [r3, #0]
 8000682:	230f      	movs	r3, #15
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b63      	cmp	r3, #99	; 0x63
 800068a:	d9e5      	bls.n	8000658 <updateVal+0x14>
	}
	top_val[99] = adc_val;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	338d      	adds	r3, #141	; 0x8d
 8000690:	33ff      	adds	r3, #255	; 0xff
 8000692:	683a      	ldr	r2, [r7, #0]
 8000694:	601a      	str	r2, [r3, #0]
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b004      	add	sp, #16
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	3fffffff 	.word	0x3fffffff

080006a4 <averageVal>:
int averageVal(int* top_val){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
sum =0;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <averageVal+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	e00d      	b.n	80006d4 <averageVal+0x30>
	    sum += top_val[i];
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	18d3      	adds	r3, r2, r3
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	001a      	movs	r2, r3
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <averageVal+0x4c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	18d2      	adds	r2, r2, r3
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <averageVal+0x4c>)
 80006cc:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 100; i++) {
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	3301      	adds	r3, #1
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	2b63      	cmp	r3, #99	; 0x63
 80006d8:	ddee      	ble.n	80006b8 <averageVal+0x14>
	}
return sum/100;
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <averageVal+0x4c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2164      	movs	r1, #100	; 0x64
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff fd0f 	bl	8000104 <__udivsi3>
 80006e6:	0003      	movs	r3, r0
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b004      	add	sp, #16
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200001c4 	.word	0x200001c4

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fb0e 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f83c 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f98a 	bl	8000a18 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000704:	f000 f93a 	bl	800097c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000708:	f000 f87e 	bl	8000808 <MX_ADC1_Init>
  MX_TIM2_Init();
 800070c:	f000 f8e4 	bl	80008d8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <main+0x68>)
 8000712:	2100      	movs	r1, #0
 8000714:	0018      	movs	r0, r3
 8000716:	f002 fc27 	bl	8002f68 <HAL_TIM_OC_Start>
 HAL_ADC_Start_DMA(&hadc1, (uint32_t*)dmaBuffer, DMABUFLEN);
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <main+0x6c>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	001a      	movs	r2, r3
 8000720:	4910      	ldr	r1, [pc, #64]	; (8000764 <main+0x70>)
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <main+0x74>)
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fe6d 	bl	8001404 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adc_val = HAL_ADC_GetValue(&hadc1);
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <main+0x74>)
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fef7 	bl	8001520 <HAL_ADC_GetValue>
 8000732:	0002      	movs	r2, r0
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <main+0x78>)
 8000736:	601a      	str	r2, [r3, #0]
	  updateVal(top_val,adc_val);
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <main+0x78>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	001a      	movs	r2, r3
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <main+0x7c>)
 8000740:	0011      	movs	r1, r2
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff ff7e 	bl	8000644 <updateVal>
	  avg = averageVal(top_val);
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <main+0x7c>)
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff ffaa 	bl	80006a4 <averageVal>
 8000750:	0003      	movs	r3, r0
 8000752:	001a      	movs	r2, r3
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <main+0x80>)
 8000756:	601a      	str	r2, [r3, #0]
	  adc_val = HAL_ADC_GetValue(&hadc1);
 8000758:	e7e7      	b.n	800072a <main+0x36>
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000244 	.word	0x20000244
 8000760:	20000000 	.word	0x20000000
 8000764:	200001cc 	.word	0x200001cc
 8000768:	200001e0 	.word	0x200001e0
 800076c:	200001c8 	.word	0x200001c8
 8000770:	20000034 	.word	0x20000034
 8000774:	20000030 	.word	0x20000030

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b093      	sub	sp, #76	; 0x4c
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	2410      	movs	r4, #16
 8000780:	193b      	adds	r3, r7, r4
 8000782:	0018      	movs	r0, r3
 8000784:	2338      	movs	r3, #56	; 0x38
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f003 fd77 	bl	800427c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078e:	003b      	movs	r3, r7
 8000790:	0018      	movs	r0, r3
 8000792:	2310      	movs	r3, #16
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f003 fd70 	bl	800427c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 fcc1 	bl	8002128 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2202      	movs	r2, #2
 80007aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	0052      	lsls	r2, r2, #1
 80007b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2240      	movs	r2, #64	; 0x40
 80007be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 fcf9 	bl	80021c0 <HAL_RCC_OscConfig>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007d2:	f000 f971 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	003b      	movs	r3, r7
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007dc:	003b      	movs	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ee:	003b      	movs	r3, r7
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fffe 	bl	80027f4 <HAL_RCC_ClockConfig>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007fc:	f000 f95c 	bl	8000ab8 <Error_Handler>
  }
}
 8000800:	46c0      	nop			; (mov r8, r8)
 8000802:	46bd      	mov	sp, r7
 8000804:	b013      	add	sp, #76	; 0x4c
 8000806:	bd90      	pop	{r4, r7, pc}

08000808 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	0018      	movs	r0, r3
 8000812:	230c      	movs	r3, #12
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f003 fd30 	bl	800427c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800081c:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <MX_ADC1_Init+0xc4>)
 800081e:	4a2c      	ldr	r2, [pc, #176]	; (80008d0 <MX_ADC1_Init+0xc8>)
 8000820:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	05d2      	lsls	r2, r2, #23
 8000828:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <MX_ADC1_Init+0xc4>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000836:	4b25      	ldr	r3, [pc, #148]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083c:	4b23      	ldr	r3, [pc, #140]	; (80008cc <MX_ADC1_Init+0xc4>)
 800083e:	2204      	movs	r2, #4
 8000840:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_ADC1_Init+0xc4>)
 800084a:	2200      	movs	r2, #0
 800084c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000850:	2201      	movs	r2, #1
 8000852:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000854:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000856:	2201      	movs	r2, #1
 8000858:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_ADC1_Init+0xc4>)
 800085c:	2200      	movs	r2, #0
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000860:	4b1a      	ldr	r3, [pc, #104]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000862:	2200      	movs	r2, #0
 8000864:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000868:	222c      	movs	r2, #44	; 0x2c
 800086a:	2100      	movs	r1, #0
 800086c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000870:	2200      	movs	r2, #0
 8000872:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000876:	2200      	movs	r2, #0
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_ADC1_Init+0xc4>)
 800087c:	2200      	movs	r2, #0
 800087e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000882:	223c      	movs	r2, #60	; 0x3c
 8000884:	2100      	movs	r1, #0
 8000886:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_ADC1_Init+0xc4>)
 800088a:	2200      	movs	r2, #0
 800088c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <MX_ADC1_Init+0xc4>)
 8000890:	0018      	movs	r0, r3
 8000892:	f000 fc0f 	bl	80010b4 <HAL_ADC_Init>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800089a:	f000 f90d 	bl	8000ab8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4a0c      	ldr	r2, [pc, #48]	; (80008d4 <MX_ADC1_Init+0xcc>)
 80008a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b0:	1d3a      	adds	r2, r7, #4
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_ADC1_Init+0xc4>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fe4e 	bl	8001558 <HAL_ADC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80008c0:	f000 f8fa 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b004      	add	sp, #16
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001e0 	.word	0x200001e0
 80008d0:	40012400 	.word	0x40012400
 80008d4:	04000002 	.word	0x04000002

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	2310      	movs	r3, #16
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	2310      	movs	r3, #16
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f003 fcc7 	bl	800427c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	0018      	movs	r0, r3
 80008f2:	230c      	movs	r3, #12
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f003 fcc0 	bl	800427c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_TIM2_Init+0xa0>)
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	05d2      	lsls	r2, r2, #23
 8000902:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000904:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_TIM2_Init+0xa0>)
 8000906:	220f      	movs	r2, #15
 8000908:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090a:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_TIM2_Init+0xa0>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30-1;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_TIM2_Init+0xa0>)
 8000912:	221d      	movs	r2, #29
 8000914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000916:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_TIM2_Init+0xa0>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_TIM2_Init+0xa0>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_TIM2_Init+0xa0>)
 8000924:	0018      	movs	r0, r3
 8000926:	f002 fac7 	bl	8002eb8 <HAL_TIM_Base_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800092e:	f000 f8c3 	bl	8000ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	2110      	movs	r1, #16
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	0152      	lsls	r2, r2, #5
 800093a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800093c:	187a      	adds	r2, r7, r1
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_TIM2_Init+0xa0>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fbfa 	bl	800313c <HAL_TIM_ConfigClockSource>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800094c:	f000 f8b4 	bl	8000ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000950:	1d3b      	adds	r3, r7, #4
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800095c:	1d3a      	adds	r2, r7, #4
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_TIM2_Init+0xa0>)
 8000960:	0011      	movs	r1, r2
 8000962:	0018      	movs	r0, r3
 8000964:	f002 fe00 	bl	8003568 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800096c:	f000 f8a4 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	b008      	add	sp, #32
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000244 	.word	0x20000244

0800097c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000982:	4a24      	ldr	r2, [pc, #144]	; (8000a14 <MX_USART2_UART_Init+0x98>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000988:	22e1      	movs	r2, #225	; 0xe1
 800098a:	0252      	lsls	r2, r2, #9
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b1e      	ldr	r3, [pc, #120]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f002 fe3c 	bl	8003644 <HAL_UART_Init>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009d0:	f000 f872 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009d6:	2100      	movs	r1, #0
 80009d8:	0018      	movs	r0, r3
 80009da:	f003 fb4b 	bl	8004074 <HAL_UARTEx_SetTxFifoThreshold>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f869 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f003 fb82 	bl	80040f4 <HAL_UARTEx_SetRxFifoThreshold>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009f4:	f000 f860 	bl	8000ab8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <MX_USART2_UART_Init+0x94>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f003 fb00 	bl	8004000 <HAL_UARTEx_DisableFifoMode>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a04:	f000 f858 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000290 	.word	0x20000290
 8000a14:	40004400 	.word	0x40004400

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b089      	sub	sp, #36	; 0x24
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	240c      	movs	r4, #12
 8000a20:	193b      	adds	r3, r7, r4
 8000a22:	0018      	movs	r0, r3
 8000a24:	2314      	movs	r3, #20
 8000a26:	001a      	movs	r2, r3
 8000a28:	2100      	movs	r1, #0
 8000a2a:	f003 fc27 	bl	800427c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a32:	4b20      	ldr	r3, [pc, #128]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a34:	2104      	movs	r1, #4
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a46:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	2220      	movs	r2, #32
 8000a58:	4013      	ands	r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_GPIO_Init+0x9c>)
 8000a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000a76:	23a0      	movs	r3, #160	; 0xa0
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2120      	movs	r1, #32
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f001 fb34 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000a84:	0021      	movs	r1, r4
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2220      	movs	r2, #32
 8000a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2201      	movs	r2, #1
 8000a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2202      	movs	r2, #2
 8000a9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	187a      	adds	r2, r7, r1
 8000aa0:	23a0      	movs	r3, #160	; 0xa0
 8000aa2:	05db      	lsls	r3, r3, #23
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f001 f9bc 	bl	8001e24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aac:	46c0      	nop			; (mov r8, r8)
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b009      	add	sp, #36	; 0x24
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x44>)
 8000acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	0549      	lsls	r1, r1, #21
 8000aec:	430a      	orrs	r2, r1
 8000aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_MspInit+0x44>)
 8000af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	055b      	lsls	r3, r3, #21
 8000af8:	4013      	ands	r3, r2
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	2414      	movs	r4, #20
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	2314      	movs	r3, #20
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	2100      	movs	r1, #0
 8000b20:	f003 fbac 	bl	800427c <memset>
  if(hadc->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a18      	ldr	r2, [pc, #96]	; (8000b8c <HAL_ADC_MspInit+0x80>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d129      	bne.n	8000b82 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b34:	2180      	movs	r1, #128	; 0x80
 8000b36:	0349      	lsls	r1, r1, #13
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	035b      	lsls	r3, r3, #13
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	635a      	str	r2, [r3, #52]	; 0x34
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_ADC_MspInit+0x84>)
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2202      	movs	r2, #2
 8000b66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2203      	movs	r2, #3
 8000b6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	193a      	adds	r2, r7, r4
 8000b76:	23a0      	movs	r3, #160	; 0xa0
 8000b78:	05db      	lsls	r3, r3, #23
 8000b7a:	0011      	movs	r1, r2
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f001 f951 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b00b      	add	sp, #44	; 0x2c
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40012400 	.word	0x40012400
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	05db      	lsls	r3, r3, #23
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d10b      	bne.n	8000bc0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <HAL_TIM_Base_MspInit+0x34>)
 8000baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_TIM_Base_MspInit+0x34>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_TIM_Base_MspInit+0x34>)
 8000bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4013      	ands	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000

08000bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b097      	sub	sp, #92	; 0x5c
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	2344      	movs	r3, #68	; 0x44
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	0018      	movs	r0, r3
 8000bda:	2314      	movs	r3, #20
 8000bdc:	001a      	movs	r2, r3
 8000bde:	2100      	movs	r1, #0
 8000be0:	f003 fb4c 	bl	800427c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	2410      	movs	r4, #16
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	0018      	movs	r0, r3
 8000bea:	2334      	movs	r3, #52	; 0x34
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f003 fb44 	bl	800427c <memset>
  if(huart->Instance==USART2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a22      	ldr	r2, [pc, #136]	; (8000c84 <HAL_UART_MspInit+0xb8>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d13e      	bne.n	8000c7c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	2202      	movs	r2, #2
 8000c02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 ff9b 	bl	8002b48 <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c16:	f7ff ff4f 	bl	8000ab8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0289      	lsls	r1, r1, #10
 8000c24:	430a      	orrs	r2, r1
 8000c26:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	029b      	lsls	r3, r3, #10
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	635a      	str	r2, [r3, #52]	; 0x34
 8000c42:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_UART_MspInit+0xbc>)
 8000c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000c4e:	2144      	movs	r1, #68	; 0x44
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2202      	movs	r2, #2
 8000c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2201      	movs	r2, #1
 8000c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	187a      	adds	r2, r7, r1
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f001 f8d4 	bl	8001e24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b017      	add	sp, #92	; 0x5c
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	40004400 	.word	0x40004400
 8000c88:	40021000 	.word	0x40021000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f89c 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff fff7 	bl	8000cba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	; (8000d04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <LoopForever+0xe>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <LoopForever+0x16>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cf2:	f003 fa9f 	bl	8004234 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cf6:	f7ff fcfd 	bl	80006f4 <main>

08000cfa <LoopForever>:

LoopForever:
  b LoopForever
 8000cfa:	e7fe      	b.n	8000cfa <LoopForever>
  ldr   r0, =_estack
 8000cfc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000d08:	0800433c 	.word	0x0800433c
  ldr r2, =_sbss
 8000d0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d10:	20000328 	.word	0x20000328

08000d14 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_COMP_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x3c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Init+0x3c>)
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	0049      	lsls	r1, r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f810 	bl	8000d58 <HAL_InitTick>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d003      	beq.n	8000d44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e001      	b.n	8000d48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d44:	f7ff febe 	bl	8000ac4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	b002      	add	sp, #8
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <HAL_InitTick+0x88>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d02b      	beq.n	8000dc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_InitTick+0x8c>)
 8000d72:	681c      	ldr	r4, [r3, #0]
 8000d74:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <HAL_InitTick+0x88>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	0019      	movs	r1, r3
 8000d7a:	23fa      	movs	r3, #250	; 0xfa
 8000d7c:	0098      	lsls	r0, r3, #2
 8000d7e:	f7ff f9c1 	bl	8000104 <__udivsi3>
 8000d82:	0003      	movs	r3, r0
 8000d84:	0019      	movs	r1, r3
 8000d86:	0020      	movs	r0, r4
 8000d88:	f7ff f9bc 	bl	8000104 <__udivsi3>
 8000d8c:	0003      	movs	r3, r0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 ff75 	bl	8001c7e <HAL_SYSTICK_Config>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d112      	bne.n	8000dbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d80a      	bhi.n	8000db4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 ff54 	bl	8001c54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_InitTick+0x90>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e00d      	b.n	8000dd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000db4:	230f      	movs	r3, #15
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e008      	b.n	8000dd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dbe:	230f      	movs	r3, #15
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
 8000dc6:	e003      	b.n	8000dd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dc8:	230f      	movs	r3, #15
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	781b      	ldrb	r3, [r3, #0]
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b005      	add	sp, #20
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	2000000c 	.word	0x2000000c
 8000de4:	20000004 	.word	0x20000004
 8000de8:	20000008 	.word	0x20000008

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	18d2      	adds	r2, r2, r3
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <HAL_IncTick+0x20>)
 8000dfe:	601a      	str	r2, [r3, #0]
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	2000000c 	.word	0x2000000c
 8000e0c:	20000324 	.word	0x20000324

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b02      	ldr	r3, [pc, #8]	; (8000e20 <HAL_GetTick+0x10>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	20000324 	.word	0x20000324

08000e24 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a05      	ldr	r2, [pc, #20]	; (8000e48 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000e34:	401a      	ands	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	fe3fffff 	.word	0xfe3fffff

08000e4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	23e0      	movs	r3, #224	; 0xe0
 8000e5a:	045b      	lsls	r3, r3, #17
 8000e5c:	4013      	ands	r3, r2
}
 8000e5e:	0018      	movs	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	b002      	add	sp, #8
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	2104      	movs	r1, #4
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	2107      	movs	r1, #7
 8000e7e:	4091      	lsls	r1, r2
 8000e80:	000a      	movs	r2, r1
 8000e82:	43d2      	mvns	r2, r2
 8000e84:	401a      	ands	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	2104      	movs	r1, #4
 8000e8a:	400b      	ands	r3, r1
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4099      	lsls	r1, r3
 8000e90:	000b      	movs	r3, r1
 8000e92:	431a      	orrs	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b004      	add	sp, #16
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	2107      	movs	r1, #7
 8000eb6:	4091      	lsls	r1, r2
 8000eb8:	000a      	movs	r2, r1
 8000eba:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2104      	movs	r1, #4
 8000ec0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000ec2:	40da      	lsrs	r2, r3
 8000ec4:	0013      	movs	r3, r2
}
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	23c0      	movs	r3, #192	; 0xc0
 8000edc:	011b      	lsls	r3, r3, #4
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	211f      	movs	r1, #31
 8000f04:	400a      	ands	r2, r1
 8000f06:	210f      	movs	r1, #15
 8000f08:	4091      	lsls	r1, r2
 8000f0a:	000a      	movs	r2, r1
 8000f0c:	43d2      	mvns	r2, r2
 8000f0e:	401a      	ands	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	0e9b      	lsrs	r3, r3, #26
 8000f14:	210f      	movs	r1, #15
 8000f16:	4019      	ands	r1, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	201f      	movs	r0, #31
 8000f1c:	4003      	ands	r3, r0
 8000f1e:	4099      	lsls	r1, r3
 8000f20:	000b      	movs	r3, r1
 8000f22:	431a      	orrs	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b004      	add	sp, #16
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	035b      	lsls	r3, r3, #13
 8000f42:	0b5b      	lsrs	r3, r3, #13
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b002      	add	sp, #8
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	0352      	lsls	r2, r2, #13
 8000f64:	0b52      	lsrs	r2, r2, #13
 8000f66:	43d2      	mvns	r2, r2
 8000f68:	401a      	ands	r2, r3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b002      	add	sp, #8
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	0212      	lsls	r2, r2, #8
 8000f8c:	43d2      	mvns	r2, r2
 8000f8e:	401a      	ands	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	400b      	ands	r3, r1
 8000f98:	4904      	ldr	r1, [pc, #16]	; (8000fac <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f9a:	400b      	ands	r3, r1
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	b004      	add	sp, #16
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	07ffff00 	.word	0x07ffff00

08000fb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <LL_ADC_EnableInternalRegulator+0x24>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2280      	movs	r2, #128	; 0x80
 8000fc2:	0552      	lsls	r2, r2, #21
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fca:	46c0      	nop			; (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	6fffffe8 	.word	0x6fffffe8

08000fd8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	055b      	lsls	r3, r3, #21
 8000fe8:	401a      	ands	r2, r3
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	055b      	lsls	r3, r3, #21
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d101      	bne.n	8000ff6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <LL_ADC_Enable+0x20>)
 800100e:	4013      	ands	r3, r2
 8001010:	2201      	movs	r2, #1
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	7fffffe8 	.word	0x7fffffe8

08001024 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <LL_ADC_Disable+0x20>)
 8001032:	4013      	ands	r3, r2
 8001034:	2202      	movs	r2, #2
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800103c:	46c0      	nop			; (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}
 8001044:	7fffffe8 	.word	0x7fffffe8

08001048 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	2201      	movs	r2, #1
 8001056:	4013      	ands	r3, r2
 8001058:	2b01      	cmp	r3, #1
 800105a:	d101      	bne.n	8001060 <LL_ADC_IsEnabled+0x18>
 800105c:	2301      	movs	r3, #1
 800105e:	e000      	b.n	8001062 <LL_ADC_IsEnabled+0x1a>
 8001060:	2300      	movs	r3, #0
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a04      	ldr	r2, [pc, #16]	; (800108c <LL_ADC_REG_StartConversion+0x20>)
 800107a:	4013      	ands	r3, r2
 800107c:	2204      	movs	r2, #4
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b002      	add	sp, #8
 800108a:	bd80      	pop	{r7, pc}
 800108c:	7fffffe8 	.word	0x7fffffe8

08001090 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2204      	movs	r2, #4
 800109e:	4013      	ands	r3, r2
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d101      	bne.n	80010a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}
	...

080010b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	231f      	movs	r3, #31
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e17f      	b.n	80013da <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10a      	bne.n	80010f8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff fd11 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2254      	movs	r2, #84	; 0x54
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f7ff ff6b 	bl	8000fd8 <LL_ADC_IsInternalRegulatorEnabled>
 8001102:	1e03      	subs	r3, r0, #0
 8001104:	d115      	bne.n	8001132 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0018      	movs	r0, r3
 800110c:	f7ff ff50 	bl	8000fb0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001110:	4bb4      	ldr	r3, [pc, #720]	; (80013e4 <HAL_ADC_Init+0x330>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	49b4      	ldr	r1, [pc, #720]	; (80013e8 <HAL_ADC_Init+0x334>)
 8001116:	0018      	movs	r0, r3
 8001118:	f7fe fff4 	bl	8000104 <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	3301      	adds	r3, #1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001124:	e002      	b.n	800112c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3b01      	subs	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f9      	bne.n	8001126 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff ff4e 	bl	8000fd8 <LL_ADC_IsInternalRegulatorEnabled>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d10f      	bne.n	8001160 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	2210      	movs	r2, #16
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001150:	2201      	movs	r2, #1
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001158:	231f      	movs	r3, #31
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff ff93 	bl	8001090 <LL_ADC_REG_IsConversionOngoing>
 800116a:	0003      	movs	r3, r0
 800116c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001172:	2210      	movs	r2, #16
 8001174:	4013      	ands	r3, r2
 8001176:	d000      	beq.n	800117a <HAL_ADC_Init+0xc6>
 8001178:	e122      	b.n	80013c0 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d000      	beq.n	8001182 <HAL_ADC_Init+0xce>
 8001180:	e11e      	b.n	80013c0 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001186:	4a99      	ldr	r2, [pc, #612]	; (80013ec <HAL_ADC_Init+0x338>)
 8001188:	4013      	ands	r3, r2
 800118a:	2202      	movs	r2, #2
 800118c:	431a      	orrs	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff ff56 	bl	8001048 <LL_ADC_IsEnabled>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d000      	beq.n	80011a2 <HAL_ADC_Init+0xee>
 80011a0:	e0ad      	b.n	80012fe <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7e1b      	ldrb	r3, [r3, #24]
 80011aa:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011ac:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7e5b      	ldrb	r3, [r3, #25]
 80011b2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011b4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7e9b      	ldrb	r3, [r3, #26]
 80011ba:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011bc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d002      	beq.n	80011cc <HAL_ADC_Init+0x118>
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	015b      	lsls	r3, r3, #5
 80011ca:	e000      	b.n	80011ce <HAL_ADC_Init+0x11a>
 80011cc:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011ce:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011d4:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	da04      	bge.n	80011e8 <HAL_ADC_Init+0x134>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	085b      	lsrs	r3, r3, #1
 80011e6:	e001      	b.n	80011ec <HAL_ADC_Init+0x138>
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80011ec:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	212c      	movs	r1, #44	; 0x2c
 80011f2:	5c5b      	ldrb	r3, [r3, r1]
 80011f4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80011f6:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2220      	movs	r2, #32
 8001202:	5c9b      	ldrb	r3, [r3, r2]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d115      	bne.n	8001234 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7e9b      	ldrb	r3, [r3, #26]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	0252      	lsls	r2, r2, #9
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	e00b      	b.n	8001234 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001220:	2220      	movs	r2, #32
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800122c:	2201      	movs	r2, #1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00a      	beq.n	8001252 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001240:	23e0      	movs	r3, #224	; 0xe0
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800124a:	4313      	orrs	r3, r2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4a65      	ldr	r2, [pc, #404]	; (80013f0 <HAL_ADC_Init+0x33c>)
 800125a:	4013      	ands	r3, r2
 800125c:	0019      	movs	r1, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	430a      	orrs	r2, r1
 8001266:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	0f9b      	lsrs	r3, r3, #30
 800126e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001274:	4313      	orrs	r3, r2
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4313      	orrs	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	223c      	movs	r2, #60	; 0x3c
 8001280:	5c9b      	ldrb	r3, [r3, r2]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d111      	bne.n	80012aa <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	0f9b      	lsrs	r3, r3, #30
 800128c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001292:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001298:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800129e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	2201      	movs	r2, #1
 80012a6:	4313      	orrs	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	4a50      	ldr	r2, [pc, #320]	; (80013f4 <HAL_ADC_Init+0x340>)
 80012b2:	4013      	ands	r3, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	430a      	orrs	r2, r1
 80012be:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	23c0      	movs	r3, #192	; 0xc0
 80012c6:	061b      	lsls	r3, r3, #24
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d018      	beq.n	80012fe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d012      	beq.n	80012fe <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	061b      	lsls	r3, r3, #24
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d00c      	beq.n	80012fe <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80012e4:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <HAL_ADC_Init+0x344>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a44      	ldr	r2, [pc, #272]	; (80013fc <HAL_ADC_Init+0x348>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	0019      	movs	r1, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	23f0      	movs	r3, #240	; 0xf0
 80012f4:	039b      	lsls	r3, r3, #14
 80012f6:	401a      	ands	r2, r3
 80012f8:	4b3f      	ldr	r3, [pc, #252]	; (80013f8 <HAL_ADC_Init+0x344>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001306:	001a      	movs	r2, r3
 8001308:	2100      	movs	r1, #0
 800130a:	f7ff fdac 	bl	8000e66 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001316:	493a      	ldr	r1, [pc, #232]	; (8001400 <HAL_ADC_Init+0x34c>)
 8001318:	001a      	movs	r2, r3
 800131a:	f7ff fda4 	bl	8000e66 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2110      	movs	r1, #16
 8001332:	4249      	negs	r1, r1
 8001334:	430a      	orrs	r2, r1
 8001336:	629a      	str	r2, [r3, #40]	; 0x28
 8001338:	e018      	b.n	800136c <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	039b      	lsls	r3, r3, #14
 8001342:	429a      	cmp	r2, r3
 8001344:	d112      	bne.n	800136c <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	3b01      	subs	r3, #1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	221c      	movs	r2, #28
 8001356:	4013      	ands	r3, r2
 8001358:	2210      	movs	r2, #16
 800135a:	4252      	negs	r2, r2
 800135c:	409a      	lsls	r2, r3
 800135e:	0011      	movs	r1, r2
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2100      	movs	r1, #0
 8001372:	0018      	movs	r0, r3
 8001374:	f7ff fd94 	bl	8000ea0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001378:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800137e:	429a      	cmp	r2, r3
 8001380:	d10b      	bne.n	800139a <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138c:	2203      	movs	r2, #3
 800138e:	4393      	bics	r3, r2
 8001390:	2201      	movs	r2, #1
 8001392:	431a      	orrs	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001398:	e01c      	b.n	80013d4 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	2212      	movs	r2, #18
 80013a0:	4393      	bics	r3, r2
 80013a2:	2210      	movs	r2, #16
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	2201      	movs	r2, #1
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80013b6:	231f      	movs	r3, #31
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	2201      	movs	r2, #1
 80013bc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013be:	e009      	b.n	80013d4 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c4:	2210      	movs	r2, #16
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013cc:	231f      	movs	r3, #31
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80013d4:	231f      	movs	r3, #31
 80013d6:	18fb      	adds	r3, r7, r3
 80013d8:	781b      	ldrb	r3, [r3, #0]
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b008      	add	sp, #32
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	20000004 	.word	0x20000004
 80013e8:	00030d40 	.word	0x00030d40
 80013ec:	fffffefd 	.word	0xfffffefd
 80013f0:	fffe0201 	.word	0xfffe0201
 80013f4:	1ffffc02 	.word	0x1ffffc02
 80013f8:	40012708 	.word	0x40012708
 80013fc:	ffc3ffff 	.word	0xffc3ffff
 8001400:	07ffff04 	.word	0x07ffff04

08001404 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001404:	b5b0      	push	{r4, r5, r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fe3b 	bl	8001090 <LL_ADC_REG_IsConversionOngoing>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d16c      	bne.n	80014f8 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2254      	movs	r2, #84	; 0x54
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d101      	bne.n	800142c <HAL_ADC_Start_DMA+0x28>
 8001428:	2302      	movs	r3, #2
 800142a:	e06c      	b.n	8001506 <HAL_ADC_Start_DMA+0x102>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2254      	movs	r2, #84	; 0x54
 8001430:	2101      	movs	r1, #1
 8001432:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	4013      	ands	r3, r2
 800143e:	d113      	bne.n	8001468 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff fdff 	bl	8001048 <LL_ADC_IsEnabled>
 800144a:	1e03      	subs	r3, r0, #0
 800144c:	d004      	beq.n	8001458 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff fde6 	bl	8001024 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2101      	movs	r1, #1
 8001464:	430a      	orrs	r2, r1
 8001466:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001468:	2517      	movs	r5, #23
 800146a:	197c      	adds	r4, r7, r5
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	0018      	movs	r0, r3
 8001470:	f000 fa4a 	bl	8001908 <ADC_Enable>
 8001474:	0003      	movs	r3, r0
 8001476:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001478:	002c      	movs	r4, r5
 800147a:	193b      	adds	r3, r7, r4
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d13e      	bne.n	8001500 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_ADC_Start_DMA+0x10c>)
 8001488:	4013      	ands	r3, r2
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	0052      	lsls	r2, r2, #1
 800148e:	431a      	orrs	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149e:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <HAL_ADC_Start_DMA+0x110>)
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a6:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_ADC_Start_DMA+0x114>)
 80014a8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_ADC_Start_DMA+0x118>)
 80014b0:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	221c      	movs	r2, #28
 80014b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2254      	movs	r2, #84	; 0x54
 80014be:	2100      	movs	r1, #0
 80014c0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2110      	movs	r1, #16
 80014ce:	430a      	orrs	r2, r1
 80014d0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3340      	adds	r3, #64	; 0x40
 80014dc:	0019      	movs	r1, r3
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	193c      	adds	r4, r7, r4
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f000 fbd8 	bl	8001c98 <HAL_DMA_Start_IT>
 80014e8:	0003      	movs	r3, r0
 80014ea:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff fdbb 	bl	800106c <LL_ADC_REG_StartConversion>
 80014f6:	e003      	b.n	8001500 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014f8:	2317      	movs	r3, #23
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	2202      	movs	r2, #2
 80014fe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001500:	2317      	movs	r3, #23
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	781b      	ldrb	r3, [r3, #0]
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b006      	add	sp, #24
 800150c:	bdb0      	pop	{r4, r5, r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	fffff0fe 	.word	0xfffff0fe
 8001514:	08001a15 	.word	0x08001a15
 8001518:	08001add 	.word	0x08001add
 800151c:	08001afb 	.word	0x08001afb

08001520 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b002      	add	sp, #8
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001562:	2317      	movs	r3, #23
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2254      	movs	r2, #84	; 0x54
 8001572:	5c9b      	ldrb	r3, [r3, r2]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_ADC_ConfigChannel+0x24>
 8001578:	2302      	movs	r3, #2
 800157a:	e1c0      	b.n	80018fe <HAL_ADC_ConfigChannel+0x3a6>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2254      	movs	r2, #84	; 0x54
 8001580:	2101      	movs	r1, #1
 8001582:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff fd81 	bl	8001090 <LL_ADC_REG_IsConversionOngoing>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d000      	beq.n	8001594 <HAL_ADC_ConfigChannel+0x3c>
 8001592:	e1a3      	b.n	80018dc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d100      	bne.n	800159e <HAL_ADC_ConfigChannel+0x46>
 800159c:	e143      	b.n	8001826 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d004      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ae:	4ac1      	ldr	r2, [pc, #772]	; (80018b4 <HAL_ADC_ConfigChannel+0x35c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d108      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0019      	movs	r1, r3
 80015be:	0010      	movs	r0, r2
 80015c0:	f7ff fcb6 	bl	8000f30 <LL_ADC_REG_SetSequencerChAdd>
 80015c4:	e0c9      	b.n	800175a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	211f      	movs	r1, #31
 80015d0:	400b      	ands	r3, r1
 80015d2:	210f      	movs	r1, #15
 80015d4:	4099      	lsls	r1, r3
 80015d6:	000b      	movs	r3, r1
 80015d8:	43db      	mvns	r3, r3
 80015da:	4013      	ands	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	035b      	lsls	r3, r3, #13
 80015e4:	0b5b      	lsrs	r3, r3, #13
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x9c>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0e9b      	lsrs	r3, r3, #26
 80015ee:	221f      	movs	r2, #31
 80015f0:	4013      	ands	r3, r2
 80015f2:	e098      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	d000      	beq.n	8001600 <HAL_ADC_ConfigChannel+0xa8>
 80015fe:	e091      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1cc>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d000      	beq.n	800160c <HAL_ADC_ConfigChannel+0xb4>
 800160a:	e089      	b.n	8001720 <HAL_ADC_ConfigChannel+0x1c8>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2204      	movs	r2, #4
 8001612:	4013      	ands	r3, r2
 8001614:	d000      	beq.n	8001618 <HAL_ADC_ConfigChannel+0xc0>
 8001616:	e081      	b.n	800171c <HAL_ADC_ConfigChannel+0x1c4>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2208      	movs	r2, #8
 800161e:	4013      	ands	r3, r2
 8001620:	d000      	beq.n	8001624 <HAL_ADC_ConfigChannel+0xcc>
 8001622:	e079      	b.n	8001718 <HAL_ADC_ConfigChannel+0x1c0>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2210      	movs	r2, #16
 800162a:	4013      	ands	r3, r2
 800162c:	d000      	beq.n	8001630 <HAL_ADC_ConfigChannel+0xd8>
 800162e:	e071      	b.n	8001714 <HAL_ADC_ConfigChannel+0x1bc>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2220      	movs	r2, #32
 8001636:	4013      	ands	r3, r2
 8001638:	d000      	beq.n	800163c <HAL_ADC_ConfigChannel+0xe4>
 800163a:	e069      	b.n	8001710 <HAL_ADC_ConfigChannel+0x1b8>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	4013      	ands	r3, r2
 8001644:	d000      	beq.n	8001648 <HAL_ADC_ConfigChannel+0xf0>
 8001646:	e061      	b.n	800170c <HAL_ADC_ConfigChannel+0x1b4>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	4013      	ands	r3, r2
 8001650:	d000      	beq.n	8001654 <HAL_ADC_ConfigChannel+0xfc>
 8001652:	e059      	b.n	8001708 <HAL_ADC_ConfigChannel+0x1b0>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d151      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1ac>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4013      	ands	r3, r2
 800166a:	d149      	bne.n	8001700 <HAL_ADC_ConfigChannel+0x1a8>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4013      	ands	r3, r2
 8001676:	d141      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x1a4>
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	011b      	lsls	r3, r3, #4
 8001680:	4013      	ands	r3, r2
 8001682:	d139      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1a0>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	015b      	lsls	r3, r3, #5
 800168c:	4013      	ands	r3, r2
 800168e:	d131      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x19c>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	019b      	lsls	r3, r3, #6
 8001698:	4013      	ands	r3, r2
 800169a:	d129      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x198>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	01db      	lsls	r3, r3, #7
 80016a4:	4013      	ands	r3, r2
 80016a6:	d121      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x194>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	021b      	lsls	r3, r3, #8
 80016b0:	4013      	ands	r3, r2
 80016b2:	d119      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x190>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4013      	ands	r3, r2
 80016be:	d111      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x18c>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	029b      	lsls	r3, r3, #10
 80016c8:	4013      	ands	r3, r2
 80016ca:	d109      	bne.n	80016e0 <HAL_ADC_ConfigChannel+0x188>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	02db      	lsls	r3, r3, #11
 80016d4:	4013      	ands	r3, r2
 80016d6:	d001      	beq.n	80016dc <HAL_ADC_ConfigChannel+0x184>
 80016d8:	2312      	movs	r3, #18
 80016da:	e024      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016dc:	2300      	movs	r3, #0
 80016de:	e022      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016e0:	2311      	movs	r3, #17
 80016e2:	e020      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016e4:	2310      	movs	r3, #16
 80016e6:	e01e      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016e8:	230f      	movs	r3, #15
 80016ea:	e01c      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016ec:	230e      	movs	r3, #14
 80016ee:	e01a      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016f0:	230d      	movs	r3, #13
 80016f2:	e018      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016f4:	230c      	movs	r3, #12
 80016f6:	e016      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016f8:	230b      	movs	r3, #11
 80016fa:	e014      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 80016fc:	230a      	movs	r3, #10
 80016fe:	e012      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 8001700:	2309      	movs	r3, #9
 8001702:	e010      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 8001704:	2308      	movs	r3, #8
 8001706:	e00e      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 8001708:	2307      	movs	r3, #7
 800170a:	e00c      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 800170c:	2306      	movs	r3, #6
 800170e:	e00a      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 8001710:	2305      	movs	r3, #5
 8001712:	e008      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 8001714:	2304      	movs	r3, #4
 8001716:	e006      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 8001718:	2303      	movs	r3, #3
 800171a:	e004      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 800171c:	2302      	movs	r3, #2
 800171e:	e002      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_ADC_ConfigChannel+0x1ce>
 8001724:	2300      	movs	r3, #0
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	6852      	ldr	r2, [r2, #4]
 800172a:	201f      	movs	r0, #31
 800172c:	4002      	ands	r2, r0
 800172e:	4093      	lsls	r3, r2
 8001730:	000a      	movs	r2, r1
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	429a      	cmp	r2, r3
 8001746:	d808      	bhi.n	800175a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	6859      	ldr	r1, [r3, #4]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	001a      	movs	r2, r3
 8001756:	f7ff fbcb 	bl	8000ef0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6819      	ldr	r1, [r3, #0]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	001a      	movs	r2, r3
 8001768:	f7ff fc06 	bl	8000f78 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db00      	blt.n	8001776 <HAL_ADC_ConfigChannel+0x21e>
 8001774:	e0bc      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001776:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 8001778:	0018      	movs	r0, r3
 800177a:	f7ff fb67 	bl	8000e4c <LL_ADC_GetCommonPathInternalCh>
 800177e:	0003      	movs	r3, r0
 8001780:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a4d      	ldr	r2, [pc, #308]	; (80018bc <HAL_ADC_ConfigChannel+0x364>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d122      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001794:	d11d      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	0412      	lsls	r2, r2, #16
 800179c:	4313      	orrs	r3, r2
 800179e:	4a46      	ldr	r2, [pc, #280]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 80017a0:	0019      	movs	r1, r3
 80017a2:	0010      	movs	r0, r2
 80017a4:	f7ff fb3e 	bl	8000e24 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017a8:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <HAL_ADC_ConfigChannel+0x368>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4945      	ldr	r1, [pc, #276]	; (80018c4 <HAL_ADC_ConfigChannel+0x36c>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f7fe fca8 	bl	8000104 <__udivsi3>
 80017b4:	0003      	movs	r3, r0
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	0013      	movs	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	189b      	adds	r3, r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017c2:	e002      	b.n	80017ca <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f9      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017d0:	e08e      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a3c      	ldr	r2, [pc, #240]	; (80018c8 <HAL_ADC_ConfigChannel+0x370>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d10e      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	045b      	lsls	r3, r3, #17
 80017e2:	4013      	ands	r3, r2
 80017e4:	d109      	bne.n	80017fa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	0452      	lsls	r2, r2, #17
 80017ec:	4313      	orrs	r3, r2
 80017ee:	4a32      	ldr	r2, [pc, #200]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 80017f0:	0019      	movs	r1, r3
 80017f2:	0010      	movs	r0, r2
 80017f4:	f7ff fb16 	bl	8000e24 <LL_ADC_SetCommonPathInternalCh>
 80017f8:	e07a      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a33      	ldr	r2, [pc, #204]	; (80018cc <HAL_ADC_ConfigChannel+0x374>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d000      	beq.n	8001806 <HAL_ADC_ConfigChannel+0x2ae>
 8001804:	e074      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	03db      	lsls	r3, r3, #15
 800180c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800180e:	d000      	beq.n	8001812 <HAL_ADC_ConfigChannel+0x2ba>
 8001810:	e06e      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	03d2      	lsls	r2, r2, #15
 8001818:	4313      	orrs	r3, r2
 800181a:	4a27      	ldr	r2, [pc, #156]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 800181c:	0019      	movs	r1, r3
 800181e:	0010      	movs	r0, r2
 8001820:	f7ff fb00 	bl	8000e24 <LL_ADC_SetCommonPathInternalCh>
 8001824:	e064      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691a      	ldr	r2, [r3, #16]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	061b      	lsls	r3, r3, #24
 800182e:	429a      	cmp	r2, r3
 8001830:	d004      	beq.n	800183c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <HAL_ADC_ConfigChannel+0x35c>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d107      	bne.n	800184c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	0019      	movs	r1, r3
 8001846:	0010      	movs	r0, r2
 8001848:	f7ff fb83 	bl	8000f52 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	da4d      	bge.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 8001856:	0018      	movs	r0, r3
 8001858:	f7ff faf8 	bl	8000e4c <LL_ADC_GetCommonPathInternalCh>
 800185c:	0003      	movs	r3, r0
 800185e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a15      	ldr	r2, [pc, #84]	; (80018bc <HAL_ADC_ConfigChannel+0x364>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d108      	bne.n	800187c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_ADC_ConfigChannel+0x378>)
 800186e:	4013      	ands	r3, r2
 8001870:	4a11      	ldr	r2, [pc, #68]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 8001872:	0019      	movs	r1, r3
 8001874:	0010      	movs	r0, r2
 8001876:	f7ff fad5 	bl	8000e24 <LL_ADC_SetCommonPathInternalCh>
 800187a:	e039      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_ADC_ConfigChannel+0x370>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d108      	bne.n	8001898 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <HAL_ADC_ConfigChannel+0x37c>)
 800188a:	4013      	ands	r3, r2
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 800188e:	0019      	movs	r1, r3
 8001890:	0010      	movs	r0, r2
 8001892:	f7ff fac7 	bl	8000e24 <LL_ADC_SetCommonPathInternalCh>
 8001896:	e02b      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_ADC_ConfigChannel+0x374>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d126      	bne.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <HAL_ADC_ConfigChannel+0x380>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 80018aa:	0019      	movs	r1, r3
 80018ac:	0010      	movs	r0, r2
 80018ae:	f7ff fab9 	bl	8000e24 <LL_ADC_SetCommonPathInternalCh>
 80018b2:	e01d      	b.n	80018f0 <HAL_ADC_ConfigChannel+0x398>
 80018b4:	80000004 	.word	0x80000004
 80018b8:	40012708 	.word	0x40012708
 80018bc:	b0001000 	.word	0xb0001000
 80018c0:	20000004 	.word	0x20000004
 80018c4:	00030d40 	.word	0x00030d40
 80018c8:	b8004000 	.word	0xb8004000
 80018cc:	b4002000 	.word	0xb4002000
 80018d0:	ff7fffff 	.word	0xff7fffff
 80018d4:	feffffff 	.word	0xfeffffff
 80018d8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	2220      	movs	r2, #32
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018e8:	2317      	movs	r3, #23
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2254      	movs	r2, #84	; 0x54
 80018f4:	2100      	movs	r1, #0
 80018f6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80018f8:	2317      	movs	r3, #23
 80018fa:	18fb      	adds	r3, r7, r3
 80018fc:	781b      	ldrb	r3, [r3, #0]
}
 80018fe:	0018      	movs	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	b006      	add	sp, #24
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)

08001908 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff fb95 	bl	8001048 <LL_ADC_IsEnabled>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d000      	beq.n	8001924 <ADC_Enable+0x1c>
 8001922:	e069      	b.n	80019f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	4a36      	ldr	r2, [pc, #216]	; (8001a04 <ADC_Enable+0xfc>)
 800192c:	4013      	ands	r3, r2
 800192e:	d00d      	beq.n	800194c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001934:	2210      	movs	r2, #16
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	2201      	movs	r2, #1
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e056      	b.n	80019fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fb55 	bl	8001000 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <ADC_Enable+0x100>)
 8001958:	0018      	movs	r0, r3
 800195a:	f7ff fa77 	bl	8000e4c <LL_ADC_GetCommonPathInternalCh>
 800195e:	0002      	movs	r2, r0
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	041b      	lsls	r3, r3, #16
 8001964:	4013      	ands	r3, r2
 8001966:	d00f      	beq.n	8001988 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001968:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <ADC_Enable+0x104>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4928      	ldr	r1, [pc, #160]	; (8001a10 <ADC_Enable+0x108>)
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fbc8 	bl	8000104 <__udivsi3>
 8001974:	0003      	movs	r3, r0
 8001976:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001978:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800197a:	e002      	b.n	8001982 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	3b01      	subs	r3, #1
 8001980:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1f9      	bne.n	800197c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e5b      	ldrb	r3, [r3, #25]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d033      	beq.n	80019f8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001990:	f7ff fa3e 	bl	8000e10 <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001998:	e027      	b.n	80019ea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	0018      	movs	r0, r3
 80019a0:	f7ff fb52 	bl	8001048 <LL_ADC_IsEnabled>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d104      	bne.n	80019b2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7ff fb27 	bl	8001000 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019b2:	f7ff fa2d 	bl	8000e10 <HAL_GetTick>
 80019b6:	0002      	movs	r2, r0
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d914      	bls.n	80019ea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d00d      	beq.n	80019ea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	2210      	movs	r2, #16
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2201      	movs	r2, #1
 80019e0:	431a      	orrs	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e007      	b.n	80019fa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2201      	movs	r2, #1
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d1d0      	bne.n	800199a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b004      	add	sp, #16
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	80000017 	.word	0x80000017
 8001a08:	40012708 	.word	0x40012708
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	00030d40 	.word	0x00030d40

08001a14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	2250      	movs	r2, #80	; 0x50
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d141      	bne.n	8001ab0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	2280      	movs	r2, #128	; 0x80
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	431a      	orrs	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff fa45 	bl	8000ece <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d02e      	beq.n	8001aa6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	7e9b      	ldrb	r3, [r3, #26]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d12a      	bne.n	8001aa6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2208      	movs	r2, #8
 8001a58:	4013      	ands	r3, r2
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d123      	bne.n	8001aa6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7ff fb14 	bl	8001090 <LL_ADC_REG_IsConversionOngoing>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d110      	bne.n	8001a8e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	210c      	movs	r1, #12
 8001a78:	438a      	bics	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a80:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <ADC_DMAConvCplt+0xc4>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	2201      	movs	r2, #1
 8001a86:	431a      	orrs	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a8c:	e00b      	b.n	8001aa6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a92:	2220      	movs	r2, #32
 8001a94:	431a      	orrs	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7fe fdb7 	bl	800061c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001aae:	e00f      	b.n	8001ad0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d004      	beq.n	8001ac4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff fd42 	bl	8001546 <HAL_ADC_ErrorCallback>
}
 8001ac2:	e005      	b.n	8001ad0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	0010      	movs	r0, r2
 8001ace:	4798      	blx	r3
}
 8001ad0:	46c0      	nop			; (mov r8, r8)
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	b004      	add	sp, #16
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	fffffefe 	.word	0xfffffefe

08001adc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7ff fd22 	bl	8001536 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b004      	add	sp, #16
 8001af8:	bd80      	pop	{r7, pc}

08001afa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	2240      	movs	r2, #64	; 0x40
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	2204      	movs	r2, #4
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7ff fd0f 	bl	8001546 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b28:	46c0      	nop			; (mov r8, r8)
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b004      	add	sp, #16
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	0002      	movs	r2, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	1dfb      	adds	r3, r7, #7
 8001b3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b7f      	cmp	r3, #127	; 0x7f
 8001b44:	d828      	bhi.n	8001b98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b46:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <__NVIC_SetPriority+0xd4>)
 8001b48:	1dfb      	adds	r3, r7, #7
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	33c0      	adds	r3, #192	; 0xc0
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	589b      	ldr	r3, [r3, r2]
 8001b56:	1dfa      	adds	r2, r7, #7
 8001b58:	7812      	ldrb	r2, [r2, #0]
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	400a      	ands	r2, r1
 8001b60:	00d2      	lsls	r2, r2, #3
 8001b62:	21ff      	movs	r1, #255	; 0xff
 8001b64:	4091      	lsls	r1, r2
 8001b66:	000a      	movs	r2, r1
 8001b68:	43d2      	mvns	r2, r2
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	22ff      	movs	r2, #255	; 0xff
 8001b74:	401a      	ands	r2, r3
 8001b76:	1dfb      	adds	r3, r7, #7
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	4003      	ands	r3, r0
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b84:	481f      	ldr	r0, [pc, #124]	; (8001c04 <__NVIC_SetPriority+0xd4>)
 8001b86:	1dfb      	adds	r3, r7, #7
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	089b      	lsrs	r3, r3, #2
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	33c0      	adds	r3, #192	; 0xc0
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001b96:	e031      	b.n	8001bfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b98:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <__NVIC_SetPriority+0xd8>)
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	3b08      	subs	r3, #8
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3306      	adds	r3, #6
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	18d3      	adds	r3, r2, r3
 8001bae:	3304      	adds	r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	1dfa      	adds	r2, r7, #7
 8001bb4:	7812      	ldrb	r2, [r2, #0]
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	2203      	movs	r2, #3
 8001bba:	400a      	ands	r2, r1
 8001bbc:	00d2      	lsls	r2, r2, #3
 8001bbe:	21ff      	movs	r1, #255	; 0xff
 8001bc0:	4091      	lsls	r1, r2
 8001bc2:	000a      	movs	r2, r1
 8001bc4:	43d2      	mvns	r2, r2
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	22ff      	movs	r2, #255	; 0xff
 8001bd0:	401a      	ands	r2, r3
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2303      	movs	r3, #3
 8001bda:	4003      	ands	r3, r0
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <__NVIC_SetPriority+0xd8>)
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	001c      	movs	r4, r3
 8001be8:	230f      	movs	r3, #15
 8001bea:	4023      	ands	r3, r4
 8001bec:	3b08      	subs	r3, #8
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	3306      	adds	r3, #6
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	18c3      	adds	r3, r0, r3
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	601a      	str	r2, [r3, #0]
}
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b003      	add	sp, #12
 8001c02:	bd90      	pop	{r4, r7, pc}
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	045b      	lsls	r3, r3, #17
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d301      	bcc.n	8001c24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c20:	2301      	movs	r3, #1
 8001c22:	e010      	b.n	8001c46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <SysTick_Config+0x44>)
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	3a01      	subs	r2, #1
 8001c2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	425b      	negs	r3, r3
 8001c30:	2103      	movs	r1, #3
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7ff ff7c 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SysTick_Config+0x44>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SysTick_Config+0x44>)
 8001c40:	2207      	movs	r2, #7
 8001c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b002      	add	sp, #8
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	e000e010 	.word	0xe000e010

08001c54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	210f      	movs	r1, #15
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	1c02      	adds	r2, r0, #0
 8001c64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b25b      	sxtb	r3, r3
 8001c6e:	0011      	movs	r1, r2
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff ff5d 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b004      	add	sp, #16
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7ff ffbf 	bl	8001c0c <SysTick_Config>
 8001c8e:	0003      	movs	r3, r0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca6:	2317      	movs	r3, #23
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2224      	movs	r2, #36	; 0x24
 8001cb2:	5c9b      	ldrb	r3, [r3, r2]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d101      	bne.n	8001cbc <HAL_DMA_Start_IT+0x24>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e06f      	b.n	8001d9c <HAL_DMA_Start_IT+0x104>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2224      	movs	r2, #36	; 0x24
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2225      	movs	r2, #37	; 0x25
 8001cc8:	5c9b      	ldrb	r3, [r3, r2]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d157      	bne.n	8001d80 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2225      	movs	r2, #37	; 0x25
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	438a      	bics	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	68b9      	ldr	r1, [r7, #8]
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f855 	bl	8001da4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d008      	beq.n	8001d14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	210e      	movs	r1, #14
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	e00f      	b.n	8001d34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2104      	movs	r1, #4
 8001d20:	438a      	bics	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	210a      	movs	r1, #10
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	025b      	lsls	r3, r3, #9
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d008      	beq.n	8001d54 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0049      	lsls	r1, r1, #1
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d008      	beq.n	8001d6e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	e00a      	b.n	8001d96 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2224      	movs	r2, #36	; 0x24
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8001d8e:	2317      	movs	r3, #23
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001d96:	2317      	movs	r3, #23
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b006      	add	sp, #24
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001dcc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001dce:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <DMA_SetConfig+0x7c>)
 8001dd0:	6859      	ldr	r1, [r3, #4]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	221c      	movs	r2, #28
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2201      	movs	r2, #1
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	4b10      	ldr	r3, [pc, #64]	; (8001e20 <DMA_SetConfig+0x7c>)
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d108      	bne.n	8001e06 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e04:	e007      	b.n	8001e16 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	60da      	str	r2, [r3, #12]
}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b004      	add	sp, #16
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	40020000 	.word	0x40020000

08001e24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e32:	e147      	b.n	80020c4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2101      	movs	r1, #1
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4091      	lsls	r1, r2
 8001e3e:	000a      	movs	r2, r1
 8001e40:	4013      	ands	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d100      	bne.n	8001e4c <HAL_GPIO_Init+0x28>
 8001e4a:	e138      	b.n	80020be <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_GPIO_Init+0x40>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d130      	bne.n	8001ec6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	409a      	lsls	r2, r3
 8001e72:	0013      	movs	r3, r2
 8001e74:	43da      	mvns	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	0013      	movs	r3, r2
 8001ea2:	43da      	mvns	r2, r3
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	0013      	movs	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d017      	beq.n	8001f02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	0013      	movs	r3, r2
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	0013      	movs	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2203      	movs	r2, #3
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d123      	bne.n	8001f56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	58d3      	ldr	r3, [r2, r3]
 8001f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	2207      	movs	r2, #7
 8001f20:	4013      	ands	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	220f      	movs	r2, #15
 8001f26:	409a      	lsls	r2, r3
 8001f28:	0013      	movs	r3, r2
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2107      	movs	r1, #7
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	08da      	lsrs	r2, r3, #3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3208      	adds	r2, #8
 8001f50:	0092      	lsls	r2, r2, #2
 8001f52:	6939      	ldr	r1, [r7, #16]
 8001f54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	2203      	movs	r2, #3
 8001f62:	409a      	lsls	r2, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2203      	movs	r2, #3
 8001f74:	401a      	ands	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	23c0      	movs	r3, #192	; 0xc0
 8001f90:	029b      	lsls	r3, r3, #10
 8001f92:	4013      	ands	r3, r2
 8001f94:	d100      	bne.n	8001f98 <HAL_GPIO_Init+0x174>
 8001f96:	e092      	b.n	80020be <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	589b      	ldr	r3, [r3, r2]
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	4013      	ands	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	220f      	movs	r2, #15
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	0013      	movs	r3, r2
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	23a0      	movs	r3, #160	; 0xa0
 8001fc0:	05db      	lsls	r3, r3, #23
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d013      	beq.n	8001fee <HAL_GPIO_Init+0x1ca>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a45      	ldr	r2, [pc, #276]	; (80020e0 <HAL_GPIO_Init+0x2bc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00d      	beq.n	8001fea <HAL_GPIO_Init+0x1c6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a44      	ldr	r2, [pc, #272]	; (80020e4 <HAL_GPIO_Init+0x2c0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <HAL_GPIO_Init+0x1c2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a43      	ldr	r2, [pc, #268]	; (80020e8 <HAL_GPIO_Init+0x2c4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d101      	bne.n	8001fe2 <HAL_GPIO_Init+0x1be>
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x1cc>
 8001fe2:	2305      	movs	r3, #5
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x1cc>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x1cc>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x1cc>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	00d2      	lsls	r2, r2, #3
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002000:	4936      	ldr	r1, [pc, #216]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3318      	adds	r3, #24
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800200e:	4b33      	ldr	r3, [pc, #204]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43da      	mvns	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	035b      	lsls	r3, r3, #13
 8002026:	4013      	ands	r3, r2
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43da      	mvns	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	039b      	lsls	r3, r3, #14
 8002050:	4013      	ands	r3, r2
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8002064:	2384      	movs	r3, #132	; 0x84
 8002066:	58d3      	ldr	r3, [r2, r3]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43da      	mvns	r2, r3
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4013      	ands	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	4013      	ands	r3, r2
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002088:	4914      	ldr	r1, [pc, #80]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 800208a:	2284      	movs	r2, #132	; 0x84
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002090:	4a12      	ldr	r2, [pc, #72]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	58d3      	ldr	r3, [r2, r3]
 8002096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43da      	mvns	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4013      	ands	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	4013      	ands	r3, r2
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b6:	4909      	ldr	r1, [pc, #36]	; (80020dc <HAL_GPIO_Init+0x2b8>)
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	40da      	lsrs	r2, r3
 80020cc:	1e13      	subs	r3, r2, #0
 80020ce:	d000      	beq.n	80020d2 <HAL_GPIO_Init+0x2ae>
 80020d0:	e6b0      	b.n	8001e34 <HAL_GPIO_Init+0x10>
  }
}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b006      	add	sp, #24
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021800 	.word	0x40021800
 80020e0:	50000400 	.word	0x50000400
 80020e4:	50000800 	.word	0x50000800
 80020e8:	50000c00 	.word	0x50000c00

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	0008      	movs	r0, r1
 80020f6:	0011      	movs	r1, r2
 80020f8:	1cbb      	adds	r3, r7, #2
 80020fa:	1c02      	adds	r2, r0, #0
 80020fc:	801a      	strh	r2, [r3, #0]
 80020fe:	1c7b      	adds	r3, r7, #1
 8002100:	1c0a      	adds	r2, r1, #0
 8002102:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002104:	1c7b      	adds	r3, r7, #1
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800210c:	1cbb      	adds	r3, r7, #2
 800210e:	881a      	ldrh	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002116:	1cbb      	adds	r3, r7, #2
 8002118:	881a      	ldrh	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	46bd      	mov	sp, r7
 8002122:	b002      	add	sp, #8
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a19      	ldr	r2, [pc, #100]	; (800219c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002136:	4013      	ands	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	4b17      	ldr	r3, [pc, #92]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d11f      	bne.n	800218c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	0013      	movs	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	189b      	adds	r3, r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4912      	ldr	r1, [pc, #72]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800215a:	0018      	movs	r0, r3
 800215c:	f7fd ffd2 	bl	8000104 <__udivsi3>
 8002160:	0003      	movs	r3, r0
 8002162:	3301      	adds	r3, #1
 8002164:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002166:	e008      	b.n	800217a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3b01      	subs	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	e001      	b.n	800217a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e009      	b.n	800218e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	401a      	ands	r2, r3
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	429a      	cmp	r2, r3
 800218a:	d0ed      	beq.n	8002168 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	0018      	movs	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}
 8002196:	46c0      	nop			; (mov r8, r8)
 8002198:	40007000 	.word	0x40007000
 800219c:	fffff9ff 	.word	0xfffff9ff
 80021a0:	20000004 	.word	0x20000004
 80021a4:	000f4240 	.word	0x000f4240

080021a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	23e0      	movs	r3, #224	; 0xe0
 80021b2:	01db      	lsls	r3, r3, #7
 80021b4:	4013      	ands	r3, r2
}
 80021b6:	0018      	movs	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e2fe      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d100      	bne.n	80021de <HAL_RCC_OscConfig+0x1e>
 80021dc:	e07c      	b.n	80022d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021de:	4bc3      	ldr	r3, [pc, #780]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2238      	movs	r2, #56	; 0x38
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e8:	4bc0      	ldr	r3, [pc, #768]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2203      	movs	r2, #3
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d102      	bne.n	80021fe <HAL_RCC_OscConfig+0x3e>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d10b      	bne.n	800221c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	4bb9      	ldr	r3, [pc, #740]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	029b      	lsls	r3, r3, #10
 800220c:	4013      	ands	r3, r2
 800220e:	d062      	beq.n	80022d6 <HAL_RCC_OscConfig+0x116>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d15e      	bne.n	80022d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e2d9      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	2380      	movs	r3, #128	; 0x80
 8002222:	025b      	lsls	r3, r3, #9
 8002224:	429a      	cmp	r2, r3
 8002226:	d107      	bne.n	8002238 <HAL_RCC_OscConfig+0x78>
 8002228:	4bb0      	ldr	r3, [pc, #704]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4baf      	ldr	r3, [pc, #700]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	0249      	lsls	r1, r1, #9
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e020      	b.n	800227a <HAL_RCC_OscConfig+0xba>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	23a0      	movs	r3, #160	; 0xa0
 800223e:	02db      	lsls	r3, r3, #11
 8002240:	429a      	cmp	r2, r3
 8002242:	d10e      	bne.n	8002262 <HAL_RCC_OscConfig+0xa2>
 8002244:	4ba9      	ldr	r3, [pc, #676]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4ba8      	ldr	r3, [pc, #672]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 800224a:	2180      	movs	r1, #128	; 0x80
 800224c:	02c9      	lsls	r1, r1, #11
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	4ba6      	ldr	r3, [pc, #664]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4ba5      	ldr	r3, [pc, #660]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	0249      	lsls	r1, r1, #9
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e00b      	b.n	800227a <HAL_RCC_OscConfig+0xba>
 8002262:	4ba2      	ldr	r3, [pc, #648]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4ba1      	ldr	r3, [pc, #644]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002268:	49a1      	ldr	r1, [pc, #644]	; (80024f0 <HAL_RCC_OscConfig+0x330>)
 800226a:	400a      	ands	r2, r1
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	4b9f      	ldr	r3, [pc, #636]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4b9e      	ldr	r3, [pc, #632]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002274:	499f      	ldr	r1, [pc, #636]	; (80024f4 <HAL_RCC_OscConfig+0x334>)
 8002276:	400a      	ands	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d014      	beq.n	80022ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe fdc5 	bl	8000e10 <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7fe fdc0 	bl	8000e10 <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e298      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800229e:	4b93      	ldr	r3, [pc, #588]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	029b      	lsls	r3, r3, #10
 80022a6:	4013      	ands	r3, r2
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0xcc>
 80022aa:	e015      	b.n	80022d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fdb0 	bl	8000e10 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022b6:	f7fe fdab 	bl	8000e10 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b64      	cmp	r3, #100	; 0x64
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e283      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022c8:	4b88      	ldr	r3, [pc, #544]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	029b      	lsls	r3, r3, #10
 80022d0:	4013      	ands	r3, r2
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0xf6>
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2202      	movs	r2, #2
 80022de:	4013      	ands	r3, r2
 80022e0:	d100      	bne.n	80022e4 <HAL_RCC_OscConfig+0x124>
 80022e2:	e099      	b.n	8002418 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e4:	4b81      	ldr	r3, [pc, #516]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2238      	movs	r2, #56	; 0x38
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022ee:	4b7f      	ldr	r3, [pc, #508]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2203      	movs	r2, #3
 80022f4:	4013      	ands	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d102      	bne.n	8002304 <HAL_RCC_OscConfig+0x144>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d002      	beq.n	800230a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d135      	bne.n	8002376 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230a:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4013      	ands	r3, r2
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x162>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e256      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002322:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a74      	ldr	r2, [pc, #464]	; (80024f8 <HAL_RCC_OscConfig+0x338>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	4b6e      	ldr	r3, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d112      	bne.n	8002364 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800233e:	4b6b      	ldr	r3, [pc, #428]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a6e      	ldr	r2, [pc, #440]	; (80024fc <HAL_RCC_OscConfig+0x33c>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	4b67      	ldr	r3, [pc, #412]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002352:	4b66      	ldr	r3, [pc, #408]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0adb      	lsrs	r3, r3, #11
 8002358:	2207      	movs	r2, #7
 800235a:	4013      	ands	r3, r2
 800235c:	4a68      	ldr	r2, [pc, #416]	; (8002500 <HAL_RCC_OscConfig+0x340>)
 800235e:	40da      	lsrs	r2, r3
 8002360:	4b68      	ldr	r3, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x344>)
 8002362:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002364:	4b68      	ldr	r3, [pc, #416]	; (8002508 <HAL_RCC_OscConfig+0x348>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	0018      	movs	r0, r3
 800236a:	f7fe fcf5 	bl	8000d58 <HAL_InitTick>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d051      	beq.n	8002416 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e22c      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d030      	beq.n	80023e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800237e:	4b5b      	ldr	r3, [pc, #364]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5e      	ldr	r2, [pc, #376]	; (80024fc <HAL_RCC_OscConfig+0x33c>)
 8002384:	4013      	ands	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002392:	4b56      	ldr	r3, [pc, #344]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b55      	ldr	r3, [pc, #340]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002398:	2180      	movs	r1, #128	; 0x80
 800239a:	0049      	lsls	r1, r1, #1
 800239c:	430a      	orrs	r2, r1
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fd36 	bl	8000e10 <HAL_GetTick>
 80023a4:	0003      	movs	r3, r0
 80023a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023aa:	f7fe fd31 	bl	8000e10 <HAL_GetTick>
 80023ae:	0002      	movs	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e209      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023bc:	4b4b      	ldr	r3, [pc, #300]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4013      	ands	r3, r2
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b48      	ldr	r3, [pc, #288]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a4a      	ldr	r2, [pc, #296]	; (80024f8 <HAL_RCC_OscConfig+0x338>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	021a      	lsls	r2, r3, #8
 80023d8:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	e01b      	b.n	8002418 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023e0:	4b42      	ldr	r3, [pc, #264]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80023e6:	4949      	ldr	r1, [pc, #292]	; (800250c <HAL_RCC_OscConfig+0x34c>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fd10 	bl	8000e10 <HAL_GetTick>
 80023f0:	0003      	movs	r3, r0
 80023f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f6:	f7fe fd0b 	bl	8000e10 <HAL_GetTick>
 80023fa:	0002      	movs	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e1e3      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002408:	4b38      	ldr	r3, [pc, #224]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4013      	ands	r3, r2
 8002412:	d1f0      	bne.n	80023f6 <HAL_RCC_OscConfig+0x236>
 8002414:	e000      	b.n	8002418 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002416:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2208      	movs	r2, #8
 800241e:	4013      	ands	r3, r2
 8002420:	d047      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002422:	4b32      	ldr	r3, [pc, #200]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2238      	movs	r2, #56	; 0x38
 8002428:	4013      	ands	r3, r2
 800242a:	2b18      	cmp	r3, #24
 800242c:	d10a      	bne.n	8002444 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800242e:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	d03c      	beq.n	80024b2 <HAL_RCC_OscConfig+0x2f2>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d138      	bne.n	80024b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e1c5      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d019      	beq.n	8002480 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 800244e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002450:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002452:	2101      	movs	r1, #1
 8002454:	430a      	orrs	r2, r1
 8002456:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fcda 	bl	8000e10 <HAL_GetTick>
 800245c:	0003      	movs	r3, r0
 800245e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002462:	f7fe fcd5 	bl	8000e10 <HAL_GetTick>
 8002466:	0002      	movs	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1ad      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002476:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002478:	2202      	movs	r2, #2
 800247a:	4013      	ands	r3, r2
 800247c:	d0f1      	beq.n	8002462 <HAL_RCC_OscConfig+0x2a2>
 800247e:	e018      	b.n	80024b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002480:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002482:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 8002486:	2101      	movs	r1, #1
 8002488:	438a      	bics	r2, r1
 800248a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fcc0 	bl	8000e10 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002496:	f7fe fcbb 	bl	8000e10 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e193      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80024aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ac:	2202      	movs	r2, #2
 80024ae:	4013      	ands	r3, r2
 80024b0:	d1f1      	bne.n	8002496 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2204      	movs	r2, #4
 80024b8:	4013      	ands	r3, r2
 80024ba:	d100      	bne.n	80024be <HAL_RCC_OscConfig+0x2fe>
 80024bc:	e0c6      	b.n	800264c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024be:	231f      	movs	r3, #31
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	2238      	movs	r2, #56	; 0x38
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d11e      	bne.n	8002510 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_RCC_OscConfig+0x32c>)
 80024d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d6:	2202      	movs	r2, #2
 80024d8:	4013      	ands	r3, r2
 80024da:	d100      	bne.n	80024de <HAL_RCC_OscConfig+0x31e>
 80024dc:	e0b6      	b.n	800264c <HAL_RCC_OscConfig+0x48c>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d000      	beq.n	80024e8 <HAL_RCC_OscConfig+0x328>
 80024e6:	e0b1      	b.n	800264c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e171      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	fffeffff 	.word	0xfffeffff
 80024f4:	fffbffff 	.word	0xfffbffff
 80024f8:	ffff80ff 	.word	0xffff80ff
 80024fc:	ffffc7ff 	.word	0xffffc7ff
 8002500:	00f42400 	.word	0x00f42400
 8002504:	20000004 	.word	0x20000004
 8002508:	20000008 	.word	0x20000008
 800250c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002510:	4bb1      	ldr	r3, [pc, #708]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	055b      	lsls	r3, r3, #21
 8002518:	4013      	ands	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x360>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x362>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d011      	beq.n	800254a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4bac      	ldr	r3, [pc, #688]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800252a:	4bab      	ldr	r3, [pc, #684]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0549      	lsls	r1, r1, #21
 8002530:	430a      	orrs	r2, r1
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c
 8002534:	4ba8      	ldr	r3, [pc, #672]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	055b      	lsls	r3, r3, #21
 800253c:	4013      	ands	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002542:	231f      	movs	r3, #31
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254a:	4ba4      	ldr	r3, [pc, #656]	; (80027dc <HAL_RCC_OscConfig+0x61c>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4013      	ands	r3, r2
 8002554:	d11a      	bne.n	800258c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002556:	4ba1      	ldr	r3, [pc, #644]	; (80027dc <HAL_RCC_OscConfig+0x61c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4ba0      	ldr	r3, [pc, #640]	; (80027dc <HAL_RCC_OscConfig+0x61c>)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	0049      	lsls	r1, r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002564:	f7fe fc54 	bl	8000e10 <HAL_GetTick>
 8002568:	0003      	movs	r3, r0
 800256a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256e:	f7fe fc4f 	bl	8000e10 <HAL_GetTick>
 8002572:	0002      	movs	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e127      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002580:	4b96      	ldr	r3, [pc, #600]	; (80027dc <HAL_RCC_OscConfig+0x61c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4013      	ands	r3, r2
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3e2>
 8002594:	4b90      	ldr	r3, [pc, #576]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002596:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002598:	4b8f      	ldr	r3, [pc, #572]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 800259a:	2101      	movs	r1, #1
 800259c:	430a      	orrs	r2, r1
 800259e:	65da      	str	r2, [r3, #92]	; 0x5c
 80025a0:	e01c      	b.n	80025dc <HAL_RCC_OscConfig+0x41c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x404>
 80025aa:	4b8b      	ldr	r3, [pc, #556]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80025ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025ae:	4b8a      	ldr	r3, [pc, #552]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80025b0:	2104      	movs	r1, #4
 80025b2:	430a      	orrs	r2, r1
 80025b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80025b6:	4b88      	ldr	r3, [pc, #544]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80025b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025ba:	4b87      	ldr	r3, [pc, #540]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80025bc:	2101      	movs	r1, #1
 80025be:	430a      	orrs	r2, r1
 80025c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0x41c>
 80025c4:	4b84      	ldr	r3, [pc, #528]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80025c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025c8:	4b83      	ldr	r3, [pc, #524]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	438a      	bics	r2, r1
 80025ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80025d0:	4b81      	ldr	r3, [pc, #516]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80025d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025d4:	4b80      	ldr	r3, [pc, #512]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80025d6:	2104      	movs	r1, #4
 80025d8:	438a      	bics	r2, r1
 80025da:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d014      	beq.n	800260e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fc14 	bl	8000e10 <HAL_GetTick>
 80025e8:	0003      	movs	r3, r0
 80025ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ec:	e009      	b.n	8002602 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe fc0f 	bl	8000e10 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	4a79      	ldr	r2, [pc, #484]	; (80027e0 <HAL_RCC_OscConfig+0x620>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e0e6      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	4b75      	ldr	r3, [pc, #468]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	2202      	movs	r2, #2
 8002608:	4013      	ands	r3, r2
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x42e>
 800260c:	e013      	b.n	8002636 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fbff 	bl	8000e10 <HAL_GetTick>
 8002612:	0003      	movs	r3, r0
 8002614:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002616:	e009      	b.n	800262c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe fbfa 	bl	8000e10 <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	4a6f      	ldr	r2, [pc, #444]	; (80027e0 <HAL_RCC_OscConfig+0x620>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0d1      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800262c:	4b6a      	ldr	r3, [pc, #424]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	2202      	movs	r2, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002636:	231f      	movs	r3, #31
 8002638:	18fb      	adds	r3, r7, r3
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d105      	bne.n	800264c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002640:	4b65      	ldr	r3, [pc, #404]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002644:	4b64      	ldr	r3, [pc, #400]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002646:	4967      	ldr	r1, [pc, #412]	; (80027e4 <HAL_RCC_OscConfig+0x624>)
 8002648:	400a      	ands	r2, r1
 800264a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d100      	bne.n	8002656 <HAL_RCC_OscConfig+0x496>
 8002654:	e0bb      	b.n	80027ce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002656:	4b60      	ldr	r3, [pc, #384]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2238      	movs	r2, #56	; 0x38
 800265c:	4013      	ands	r3, r2
 800265e:	2b10      	cmp	r3, #16
 8002660:	d100      	bne.n	8002664 <HAL_RCC_OscConfig+0x4a4>
 8002662:	e07b      	b.n	800275c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d156      	bne.n	800271a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b5a      	ldr	r3, [pc, #360]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b59      	ldr	r3, [pc, #356]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002672:	495d      	ldr	r1, [pc, #372]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 8002674:	400a      	ands	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fbca 	bl	8000e10 <HAL_GetTick>
 800267c:	0003      	movs	r3, r0
 800267e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe fbc5 	bl	8000e10 <HAL_GetTick>
 8002686:	0002      	movs	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e09d      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002694:	4b50      	ldr	r3, [pc, #320]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	049b      	lsls	r3, r3, #18
 800269c:	4013      	ands	r3, r2
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a0:	4b4d      	ldr	r3, [pc, #308]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a51      	ldr	r2, [pc, #324]	; (80027ec <HAL_RCC_OscConfig+0x62c>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026cc:	431a      	orrs	r2, r3
 80026ce:	4b42      	ldr	r3, [pc, #264]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d4:	4b40      	ldr	r3, [pc, #256]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	0449      	lsls	r1, r1, #17
 80026de:	430a      	orrs	r2, r1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026e2:	4b3d      	ldr	r3, [pc, #244]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	4b3c      	ldr	r3, [pc, #240]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0549      	lsls	r1, r1, #21
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fb8e 	bl	8000e10 <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fb89 	bl	8000e10 <HAL_GetTick>
 80026fe:	0002      	movs	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e061      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800270c:	4b32      	ldr	r3, [pc, #200]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2380      	movs	r3, #128	; 0x80
 8002712:	049b      	lsls	r3, r3, #18
 8002714:	4013      	ands	r3, r2
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x53a>
 8002718:	e059      	b.n	80027ce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b2f      	ldr	r3, [pc, #188]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b2e      	ldr	r3, [pc, #184]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002720:	4931      	ldr	r1, [pc, #196]	; (80027e8 <HAL_RCC_OscConfig+0x628>)
 8002722:	400a      	ands	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fb73 	bl	8000e10 <HAL_GetTick>
 800272a:	0003      	movs	r3, r0
 800272c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fb6e 	bl	8000e10 <HAL_GetTick>
 8002734:	0002      	movs	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e046      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002742:	4b25      	ldr	r3, [pc, #148]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	2380      	movs	r3, #128	; 0x80
 8002748:	049b      	lsls	r3, r3, #18
 800274a:	4013      	ands	r3, r2
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800274e:	4b22      	ldr	r3, [pc, #136]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	4b21      	ldr	r3, [pc, #132]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 8002754:	4926      	ldr	r1, [pc, #152]	; (80027f0 <HAL_RCC_OscConfig+0x630>)
 8002756:	400a      	ands	r2, r1
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	e038      	b.n	80027ce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e033      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x618>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2203      	movs	r2, #3
 8002772:	401a      	ands	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	429a      	cmp	r2, r3
 800277a:	d126      	bne.n	80027ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2270      	movs	r2, #112	; 0x70
 8002780:	401a      	ands	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d11f      	bne.n	80027ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	23fe      	movs	r3, #254	; 0xfe
 800278e:	01db      	lsls	r3, r3, #7
 8002790:	401a      	ands	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002798:	429a      	cmp	r2, r3
 800279a:	d116      	bne.n	80027ca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	23f8      	movs	r3, #248	; 0xf8
 80027a0:	039b      	lsls	r3, r3, #14
 80027a2:	401a      	ands	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d10e      	bne.n	80027ca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	23e0      	movs	r3, #224	; 0xe0
 80027b0:	051b      	lsls	r3, r3, #20
 80027b2:	401a      	ands	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	0f5b      	lsrs	r3, r3, #29
 80027c0:	075a      	lsls	r2, r3, #29
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b008      	add	sp, #32
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40021000 	.word	0x40021000
 80027dc:	40007000 	.word	0x40007000
 80027e0:	00001388 	.word	0x00001388
 80027e4:	efffffff 	.word	0xefffffff
 80027e8:	feffffff 	.word	0xfeffffff
 80027ec:	11c1808c 	.word	0x11c1808c
 80027f0:	eefefffc 	.word	0xeefefffc

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0e9      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b76      	ldr	r3, [pc, #472]	; (80029e4 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2207      	movs	r2, #7
 800280e:	4013      	ands	r3, r2
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d91e      	bls.n	8002854 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b73      	ldr	r3, [pc, #460]	; (80029e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2207      	movs	r2, #7
 800281c:	4393      	bics	r3, r2
 800281e:	0019      	movs	r1, r3
 8002820:	4b70      	ldr	r3, [pc, #448]	; (80029e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002828:	f7fe faf2 	bl	8000e10 <HAL_GetTick>
 800282c:	0003      	movs	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002830:	e009      	b.n	8002846 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002832:	f7fe faed 	bl	8000e10 <HAL_GetTick>
 8002836:	0002      	movs	r2, r0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	4a6a      	ldr	r2, [pc, #424]	; (80029e8 <HAL_RCC_ClockConfig+0x1f4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0ca      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002846:	4b67      	ldr	r3, [pc, #412]	; (80029e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2207      	movs	r2, #7
 800284c:	4013      	ands	r3, r2
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d1ee      	bne.n	8002832 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2202      	movs	r2, #2
 800285a:	4013      	ands	r3, r2
 800285c:	d015      	beq.n	800288a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2204      	movs	r2, #4
 8002864:	4013      	ands	r3, r2
 8002866:	d006      	beq.n	8002876 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002868:	4b60      	ldr	r3, [pc, #384]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	4b5f      	ldr	r3, [pc, #380]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 800286e:	21e0      	movs	r1, #224	; 0xe0
 8002870:	01c9      	lsls	r1, r1, #7
 8002872:	430a      	orrs	r2, r1
 8002874:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002876:	4b5d      	ldr	r3, [pc, #372]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	4a5d      	ldr	r2, [pc, #372]	; (80029f0 <HAL_RCC_ClockConfig+0x1fc>)
 800287c:	4013      	ands	r3, r2
 800287e:	0019      	movs	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 8002886:	430a      	orrs	r2, r1
 8002888:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2201      	movs	r2, #1
 8002890:	4013      	ands	r3, r2
 8002892:	d057      	beq.n	8002944 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d107      	bne.n	80028ac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	029b      	lsls	r3, r3, #10
 80028a4:	4013      	ands	r3, r2
 80028a6:	d12b      	bne.n	8002900 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e097      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d107      	bne.n	80028c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b4:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	049b      	lsls	r3, r3, #18
 80028bc:	4013      	ands	r3, r2
 80028be:	d11f      	bne.n	8002900 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e08b      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d107      	bne.n	80028dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4013      	ands	r3, r2
 80028d6:	d113      	bne.n	8002900 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e07f      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b03      	cmp	r3, #3
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e4:	4b41      	ldr	r3, [pc, #260]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	2202      	movs	r2, #2
 80028ea:	4013      	ands	r3, r2
 80028ec:	d108      	bne.n	8002900 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e074      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f2:	4b3e      	ldr	r3, [pc, #248]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2202      	movs	r2, #2
 80028f8:	4013      	ands	r3, r2
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e06d      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002900:	4b3a      	ldr	r3, [pc, #232]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2207      	movs	r2, #7
 8002906:	4393      	bics	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 8002910:	430a      	orrs	r2, r1
 8002912:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002914:	f7fe fa7c 	bl	8000e10 <HAL_GetTick>
 8002918:	0003      	movs	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291c:	e009      	b.n	8002932 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291e:	f7fe fa77 	bl	8000e10 <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <HAL_RCC_ClockConfig+0x1f4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e054      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b2e      	ldr	r3, [pc, #184]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2238      	movs	r2, #56	; 0x38
 8002938:	401a      	ands	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	429a      	cmp	r2, r3
 8002942:	d1ec      	bne.n	800291e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2207      	movs	r2, #7
 800294a:	4013      	ands	r3, r2
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	429a      	cmp	r2, r3
 8002950:	d21e      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2207      	movs	r2, #7
 8002958:	4393      	bics	r3, r2
 800295a:	0019      	movs	r1, r3
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCC_ClockConfig+0x1f0>)
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002964:	f7fe fa54 	bl	8000e10 <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800296c:	e009      	b.n	8002982 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296e:	f7fe fa4f 	bl	8000e10 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	4a1b      	ldr	r2, [pc, #108]	; (80029e8 <HAL_RCC_ClockConfig+0x1f4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e02c      	b.n	80029dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_RCC_ClockConfig+0x1f0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2207      	movs	r2, #7
 8002988:	4013      	ands	r3, r2
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d1ee      	bne.n	800296e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2204      	movs	r2, #4
 8002996:	4013      	ands	r3, r2
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_RCC_ClockConfig+0x200>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	0019      	movs	r1, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029ae:	f000 f829 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029b2:	0001      	movs	r1, r0
 80029b4:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <HAL_RCC_ClockConfig+0x1f8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	220f      	movs	r2, #15
 80029bc:	401a      	ands	r2, r3
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_RCC_ClockConfig+0x204>)
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	58d3      	ldr	r3, [r2, r3]
 80029c4:	221f      	movs	r2, #31
 80029c6:	4013      	ands	r3, r2
 80029c8:	000a      	movs	r2, r1
 80029ca:	40da      	lsrs	r2, r3
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_ClockConfig+0x208>)
 80029ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_ClockConfig+0x20c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7fe f9bf 	bl	8000d58 <HAL_InitTick>
 80029da:	0003      	movs	r3, r0
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b004      	add	sp, #16
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40022000 	.word	0x40022000
 80029e8:	00001388 	.word	0x00001388
 80029ec:	40021000 	.word	0x40021000
 80029f0:	fffff0ff 	.word	0xfffff0ff
 80029f4:	ffff8fff 	.word	0xffff8fff
 80029f8:	080042a4 	.word	0x080042a4
 80029fc:	20000004 	.word	0x20000004
 8002a00:	20000008 	.word	0x20000008

08002a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a0a:	4b3c      	ldr	r3, [pc, #240]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2238      	movs	r2, #56	; 0x38
 8002a10:	4013      	ands	r3, r2
 8002a12:	d10f      	bne.n	8002a34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a14:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	0adb      	lsrs	r3, r3, #11
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2201      	movs	r2, #1
 8002a20:	409a      	lsls	r2, r3
 8002a22:	0013      	movs	r3, r2
 8002a24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a26:	6839      	ldr	r1, [r7, #0]
 8002a28:	4835      	ldr	r0, [pc, #212]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a2a:	f7fd fb6b 	bl	8000104 <__udivsi3>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	e05d      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a34:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2238      	movs	r2, #56	; 0x38
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b08      	cmp	r3, #8
 8002a3e:	d102      	bne.n	8002a46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a40:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	e054      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a46:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2238      	movs	r2, #56	; 0x38
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d138      	bne.n	8002ac4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	2203      	movs	r2, #3
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a5c:	4b27      	ldr	r3, [pc, #156]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	2207      	movs	r2, #7
 8002a64:	4013      	ands	r3, r2
 8002a66:	3301      	adds	r3, #1
 8002a68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	d10d      	bne.n	8002a8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	4824      	ldr	r0, [pc, #144]	; (8002b04 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a74:	f7fd fb46 	bl	8000104 <__udivsi3>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	0019      	movs	r1, r3
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	227f      	movs	r2, #127	; 0x7f
 8002a84:	4013      	ands	r3, r2
 8002a86:	434b      	muls	r3, r1
 8002a88:	617b      	str	r3, [r7, #20]
        break;
 8002a8a:	e00d      	b.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	481c      	ldr	r0, [pc, #112]	; (8002b00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a90:	f7fd fb38 	bl	8000104 <__udivsi3>
 8002a94:	0003      	movs	r3, r0
 8002a96:	0019      	movs	r1, r3
 8002a98:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	227f      	movs	r2, #127	; 0x7f
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	434b      	muls	r3, r1
 8002aa4:	617b      	str	r3, [r7, #20]
        break;
 8002aa6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	0f5b      	lsrs	r3, r3, #29
 8002aae:	2207      	movs	r2, #7
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	6978      	ldr	r0, [r7, #20]
 8002aba:	f7fd fb23 	bl	8000104 <__udivsi3>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	e015      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2238      	movs	r2, #56	; 0x38
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d103      	bne.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	e00b      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	2238      	movs	r2, #56	; 0x38
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b18      	cmp	r3, #24
 8002ae2:	d103      	bne.n	8002aec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ae4:	23fa      	movs	r3, #250	; 0xfa
 8002ae6:	01db      	lsls	r3, r3, #7
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	e001      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002af0:	693b      	ldr	r3, [r7, #16]
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b006      	add	sp, #24
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	40021000 	.word	0x40021000
 8002b00:	00f42400 	.word	0x00f42400
 8002b04:	007a1200 	.word	0x007a1200

08002b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b0c:	4b02      	ldr	r3, [pc, #8]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	20000004 	.word	0x20000004

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b5b0      	push	{r4, r5, r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b20:	f7ff fff2 	bl	8002b08 <HAL_RCC_GetHCLKFreq>
 8002b24:	0004      	movs	r4, r0
 8002b26:	f7ff fb3f 	bl	80021a8 <LL_RCC_GetAPB1Prescaler>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	0b1a      	lsrs	r2, r3, #12
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b30:	0092      	lsls	r2, r2, #2
 8002b32:	58d3      	ldr	r3, [r2, r3]
 8002b34:	221f      	movs	r2, #31
 8002b36:	4013      	ands	r3, r2
 8002b38:	40dc      	lsrs	r4, r3
 8002b3a:	0023      	movs	r3, r4
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bdb0      	pop	{r4, r5, r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	080042e4 	.word	0x080042e4

08002b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b50:	2313      	movs	r3, #19
 8002b52:	18fb      	adds	r3, r7, r3
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b58:	2312      	movs	r3, #18
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	; 0x80
 8002b66:	029b      	lsls	r3, r3, #10
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b6c:	e0a3      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2011      	movs	r0, #17
 8002b70:	183b      	adds	r3, r7, r0
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b76:	4bc3      	ldr	r3, [pc, #780]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	055b      	lsls	r3, r3, #21
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d110      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	4bc0      	ldr	r3, [pc, #768]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b86:	4bbf      	ldr	r3, [pc, #764]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b88:	2180      	movs	r1, #128	; 0x80
 8002b8a:	0549      	lsls	r1, r1, #21
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b90:	4bbc      	ldr	r3, [pc, #752]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	055b      	lsls	r3, r3, #21
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9e:	183b      	adds	r3, r7, r0
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba4:	4bb8      	ldr	r3, [pc, #736]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4bb7      	ldr	r3, [pc, #732]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	0049      	lsls	r1, r1, #1
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bb2:	f7fe f92d 	bl	8000e10 <HAL_GetTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbc:	f7fe f928 	bl	8000e10 <HAL_GetTick>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d904      	bls.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002bca:	2313      	movs	r3, #19
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2203      	movs	r2, #3
 8002bd0:	701a      	strb	r2, [r3, #0]
        break;
 8002bd2:	e005      	b.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd4:	4bac      	ldr	r3, [pc, #688]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d0ed      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002be0:	2313      	movs	r3, #19
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d154      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bea:	4ba6      	ldr	r3, [pc, #664]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bee:	23c0      	movs	r3, #192	; 0xc0
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d019      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d014      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c06:	4b9f      	ldr	r3, [pc, #636]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	4aa0      	ldr	r2, [pc, #640]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c10:	4b9c      	ldr	r3, [pc, #624]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c14:	4b9b      	ldr	r3, [pc, #620]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	0249      	lsls	r1, r1, #9
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1e:	4b99      	ldr	r3, [pc, #612]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c22:	4b98      	ldr	r3, [pc, #608]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c24:	499a      	ldr	r1, [pc, #616]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c2a:	4b96      	ldr	r3, [pc, #600]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2201      	movs	r2, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	d016      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f8ea 	bl	8000e10 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c40:	e00c      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe f8e5 	bl	8000e10 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	4a91      	ldr	r2, [pc, #580]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d904      	bls.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c52:	2313      	movs	r3, #19
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	2203      	movs	r2, #3
 8002c58:	701a      	strb	r2, [r3, #0]
            break;
 8002c5a:	e004      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c5c:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	2202      	movs	r2, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d0ed      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c66:	2313      	movs	r3, #19
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c70:	4b84      	ldr	r3, [pc, #528]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	4a85      	ldr	r2, [pc, #532]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	0019      	movs	r1, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c7e:	4b81      	ldr	r3, [pc, #516]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c80:	430a      	orrs	r2, r1
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c84:	e00c      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c86:	2312      	movs	r3, #18
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2213      	movs	r2, #19
 8002c8c:	18ba      	adds	r2, r7, r2
 8002c8e:	7812      	ldrb	r2, [r2, #0]
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e005      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c94:	2312      	movs	r3, #18
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2213      	movs	r2, #19
 8002c9a:	18ba      	adds	r2, r7, r2
 8002c9c:	7812      	ldrb	r2, [r2, #0]
 8002c9e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ca0:	2311      	movs	r3, #17
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002caa:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cae:	4b75      	ldr	r3, [pc, #468]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cb0:	4979      	ldr	r1, [pc, #484]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d009      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cc0:	4b70      	ldr	r3, [pc, #448]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	4393      	bics	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d009      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cde:	4b69      	ldr	r3, [pc, #420]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	4b65      	ldr	r3, [pc, #404]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2210      	movs	r2, #16
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cfc:	4b61      	ldr	r3, [pc, #388]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	4a66      	ldr	r2, [pc, #408]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d009      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d20:	4a5f      	ldr	r2, [pc, #380]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	0019      	movs	r1, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	4b56      	ldr	r3, [pc, #344]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d3c:	4b51      	ldr	r3, [pc, #324]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	4a58      	ldr	r2, [pc, #352]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	4b4e      	ldr	r3, [pc, #312]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2220      	movs	r2, #32
 8002d56:	4013      	ands	r3, r2
 8002d58:	d009      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002d60:	4013      	ands	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	4b46      	ldr	r3, [pc, #280]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	01db      	lsls	r3, r3, #7
 8002d76:	4013      	ands	r3, r2
 8002d78:	d015      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d7a:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	0899      	lsrs	r1, r3, #2
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1a      	ldr	r2, [r3, #32]
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	05db      	lsls	r3, r3, #23
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d106      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d98:	4b3a      	ldr	r3, [pc, #232]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	4b39      	ldr	r3, [pc, #228]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d9e:	2180      	movs	r1, #128	; 0x80
 8002da0:	0249      	lsls	r1, r1, #9
 8002da2:	430a      	orrs	r2, r1
 8002da4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	031b      	lsls	r3, r3, #12
 8002dae:	4013      	ands	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	4393      	bics	r3, r2
 8002dba:	0019      	movs	r1, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	039b      	lsls	r3, r3, #14
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d016      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	4a35      	ldr	r2, [pc, #212]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	0019      	movs	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de0:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002de2:	430a      	orrs	r2, r1
 8002de4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	03db      	lsls	r3, r3, #15
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d106      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	4b23      	ldr	r3, [pc, #140]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0449      	lsls	r1, r1, #17
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	03db      	lsls	r3, r3, #15
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d016      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e10:	4a27      	ldr	r2, [pc, #156]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	045b      	lsls	r3, r3, #17
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d106      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e2e:	68da      	ldr	r2, [r3, #12]
 8002e30:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	0449      	lsls	r1, r1, #17
 8002e36:	430a      	orrs	r2, r1
 8002e38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	4013      	ands	r3, r2
 8002e44:	d016      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e46:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695a      	ldr	r2, [r3, #20]
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695a      	ldr	r2, [r3, #20]
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	01db      	lsls	r3, r3, #7
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d106      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	0249      	lsls	r1, r1, #9
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e74:	2312      	movs	r3, #18
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	781b      	ldrb	r3, [r3, #0]
}
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b006      	add	sp, #24
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	fffffcff 	.word	0xfffffcff
 8002e90:	fffeffff 	.word	0xfffeffff
 8002e94:	00001388 	.word	0x00001388
 8002e98:	efffffff 	.word	0xefffffff
 8002e9c:	fffff3ff 	.word	0xfffff3ff
 8002ea0:	fff3ffff 	.word	0xfff3ffff
 8002ea4:	ffcfffff 	.word	0xffcfffff
 8002ea8:	ffffcfff 	.word	0xffffcfff
 8002eac:	ffbfffff 	.word	0xffbfffff
 8002eb0:	feffffff 	.word	0xfeffffff
 8002eb4:	ffff3fff 	.word	0xffff3fff

08002eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e04a      	b.n	8002f60 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	223d      	movs	r2, #61	; 0x3d
 8002ece:	5c9b      	ldrb	r3, [r3, r2]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d107      	bne.n	8002ee6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	223c      	movs	r2, #60	; 0x3c
 8002eda:	2100      	movs	r1, #0
 8002edc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7fd fe57 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	223d      	movs	r2, #61	; 0x3d
 8002eea:	2102      	movs	r1, #2
 8002eec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	0010      	movs	r0, r2
 8002efa:	f000 f9f5 	bl	80032e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2248      	movs	r2, #72	; 0x48
 8002f02:	2101      	movs	r1, #1
 8002f04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	223e      	movs	r2, #62	; 0x3e
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	5499      	strb	r1, [r3, r2]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	223f      	movs	r2, #63	; 0x3f
 8002f12:	2101      	movs	r1, #1
 8002f14:	5499      	strb	r1, [r3, r2]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2240      	movs	r2, #64	; 0x40
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	5499      	strb	r1, [r3, r2]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2241      	movs	r2, #65	; 0x41
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2242      	movs	r2, #66	; 0x42
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	5499      	strb	r1, [r3, r2]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2243      	movs	r2, #67	; 0x43
 8002f32:	2101      	movs	r1, #1
 8002f34:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2244      	movs	r2, #68	; 0x44
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	5499      	strb	r1, [r3, r2]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2245      	movs	r2, #69	; 0x45
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2246      	movs	r2, #70	; 0x46
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2247      	movs	r2, #71	; 0x47
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	223d      	movs	r2, #61	; 0x3d
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d108      	bne.n	8002f8a <HAL_TIM_OC_Start+0x22>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	223e      	movs	r2, #62	; 0x3e
 8002f7c:	5c9b      	ldrb	r3, [r3, r2]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	1e5a      	subs	r2, r3, #1
 8002f84:	4193      	sbcs	r3, r2
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e037      	b.n	8002ffa <HAL_TIM_OC_Start+0x92>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d108      	bne.n	8002fa2 <HAL_TIM_OC_Start+0x3a>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	223f      	movs	r2, #63	; 0x3f
 8002f94:	5c9b      	ldrb	r3, [r3, r2]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	4193      	sbcs	r3, r2
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	e02b      	b.n	8002ffa <HAL_TIM_OC_Start+0x92>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d108      	bne.n	8002fba <HAL_TIM_OC_Start+0x52>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	5c9b      	ldrb	r3, [r3, r2]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	1e5a      	subs	r2, r3, #1
 8002fb4:	4193      	sbcs	r3, r2
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e01f      	b.n	8002ffa <HAL_TIM_OC_Start+0x92>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b0c      	cmp	r3, #12
 8002fbe:	d108      	bne.n	8002fd2 <HAL_TIM_OC_Start+0x6a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2241      	movs	r2, #65	; 0x41
 8002fc4:	5c9b      	ldrb	r3, [r3, r2]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	1e5a      	subs	r2, r3, #1
 8002fcc:	4193      	sbcs	r3, r2
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	e013      	b.n	8002ffa <HAL_TIM_OC_Start+0x92>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d108      	bne.n	8002fea <HAL_TIM_OC_Start+0x82>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2242      	movs	r2, #66	; 0x42
 8002fdc:	5c9b      	ldrb	r3, [r3, r2]
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	4193      	sbcs	r3, r2
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e007      	b.n	8002ffa <HAL_TIM_OC_Start+0x92>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2243      	movs	r2, #67	; 0x43
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	4193      	sbcs	r3, r2
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_TIM_OC_Start+0x9a>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e08b      	b.n	800311a <HAL_TIM_OC_Start+0x1b2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d104      	bne.n	8003012 <HAL_TIM_OC_Start+0xaa>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	223e      	movs	r2, #62	; 0x3e
 800300c:	2102      	movs	r1, #2
 800300e:	5499      	strb	r1, [r3, r2]
 8003010:	e023      	b.n	800305a <HAL_TIM_OC_Start+0xf2>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b04      	cmp	r3, #4
 8003016:	d104      	bne.n	8003022 <HAL_TIM_OC_Start+0xba>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	223f      	movs	r2, #63	; 0x3f
 800301c:	2102      	movs	r1, #2
 800301e:	5499      	strb	r1, [r3, r2]
 8003020:	e01b      	b.n	800305a <HAL_TIM_OC_Start+0xf2>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d104      	bne.n	8003032 <HAL_TIM_OC_Start+0xca>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2240      	movs	r2, #64	; 0x40
 800302c:	2102      	movs	r1, #2
 800302e:	5499      	strb	r1, [r3, r2]
 8003030:	e013      	b.n	800305a <HAL_TIM_OC_Start+0xf2>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d104      	bne.n	8003042 <HAL_TIM_OC_Start+0xda>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2241      	movs	r2, #65	; 0x41
 800303c:	2102      	movs	r1, #2
 800303e:	5499      	strb	r1, [r3, r2]
 8003040:	e00b      	b.n	800305a <HAL_TIM_OC_Start+0xf2>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b10      	cmp	r3, #16
 8003046:	d104      	bne.n	8003052 <HAL_TIM_OC_Start+0xea>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2242      	movs	r2, #66	; 0x42
 800304c:	2102      	movs	r1, #2
 800304e:	5499      	strb	r1, [r3, r2]
 8003050:	e003      	b.n	800305a <HAL_TIM_OC_Start+0xf2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2243      	movs	r2, #67	; 0x43
 8003056:	2102      	movs	r1, #2
 8003058:	5499      	strb	r1, [r3, r2]

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6839      	ldr	r1, [r7, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	0018      	movs	r0, r3
 8003064:	f000 fa5c 	bl	8003520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2d      	ldr	r2, [pc, #180]	; (8003124 <HAL_TIM_OC_Start+0x1bc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_TIM_OC_Start+0x128>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <HAL_TIM_OC_Start+0x1c0>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIM_OC_Start+0x128>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2a      	ldr	r2, [pc, #168]	; (800312c <HAL_TIM_OC_Start+0x1c4>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_TIM_OC_Start+0x128>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a29      	ldr	r2, [pc, #164]	; (8003130 <HAL_TIM_OC_Start+0x1c8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d101      	bne.n	8003094 <HAL_TIM_OC_Start+0x12c>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_TIM_OC_Start+0x12e>
 8003094:	2300      	movs	r3, #0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d008      	beq.n	80030ac <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2180      	movs	r1, #128	; 0x80
 80030a6:	0209      	lsls	r1, r1, #8
 80030a8:	430a      	orrs	r2, r1
 80030aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1c      	ldr	r2, [pc, #112]	; (8003124 <HAL_TIM_OC_Start+0x1bc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00f      	beq.n	80030d6 <HAL_TIM_OC_Start+0x16e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	2380      	movs	r3, #128	; 0x80
 80030bc:	05db      	lsls	r3, r3, #23
 80030be:	429a      	cmp	r2, r3
 80030c0:	d009      	beq.n	80030d6 <HAL_TIM_OC_Start+0x16e>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <HAL_TIM_OC_Start+0x1cc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d004      	beq.n	80030d6 <HAL_TIM_OC_Start+0x16e>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_TIM_OC_Start+0x1c0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d116      	bne.n	8003104 <HAL_TIM_OC_Start+0x19c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a16      	ldr	r2, [pc, #88]	; (8003138 <HAL_TIM_OC_Start+0x1d0>)
 80030de:	4013      	ands	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b06      	cmp	r3, #6
 80030e6:	d016      	beq.n	8003116 <HAL_TIM_OC_Start+0x1ae>
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	025b      	lsls	r3, r3, #9
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d011      	beq.n	8003116 <HAL_TIM_OC_Start+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	430a      	orrs	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003102:	e008      	b.n	8003116 <HAL_TIM_OC_Start+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2101      	movs	r1, #1
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e000      	b.n	8003118 <HAL_TIM_OC_Start+0x1b0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b004      	add	sp, #16
 8003120:	bd80      	pop	{r7, pc}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40014000 	.word	0x40014000
 800312c:	40014400 	.word	0x40014400
 8003130:	40014800 	.word	0x40014800
 8003134:	40000400 	.word	0x40000400
 8003138:	00010007 	.word	0x00010007

0800313c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003146:	230f      	movs	r3, #15
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	223c      	movs	r2, #60	; 0x3c
 8003152:	5c9b      	ldrb	r3, [r3, r2]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIM_ConfigClockSource+0x20>
 8003158:	2302      	movs	r3, #2
 800315a:	e0bc      	b.n	80032d6 <HAL_TIM_ConfigClockSource+0x19a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	223c      	movs	r2, #60	; 0x3c
 8003160:	2101      	movs	r1, #1
 8003162:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	223d      	movs	r2, #61	; 0x3d
 8003168:	2102      	movs	r1, #2
 800316a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4a5a      	ldr	r2, [pc, #360]	; (80032e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003178:	4013      	ands	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4a59      	ldr	r2, [pc, #356]	; (80032e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003180:	4013      	ands	r3, r2
 8003182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	0192      	lsls	r2, r2, #6
 8003194:	4293      	cmp	r3, r2
 8003196:	d040      	beq.n	800321a <HAL_TIM_ConfigClockSource+0xde>
 8003198:	2280      	movs	r2, #128	; 0x80
 800319a:	0192      	lsls	r2, r2, #6
 800319c:	4293      	cmp	r3, r2
 800319e:	d900      	bls.n	80031a2 <HAL_TIM_ConfigClockSource+0x66>
 80031a0:	e088      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	0152      	lsls	r2, r2, #5
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d100      	bne.n	80031ac <HAL_TIM_ConfigClockSource+0x70>
 80031aa:	e088      	b.n	80032be <HAL_TIM_ConfigClockSource+0x182>
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	0152      	lsls	r2, r2, #5
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d900      	bls.n	80031b6 <HAL_TIM_ConfigClockSource+0x7a>
 80031b4:	e07e      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031b6:	2b70      	cmp	r3, #112	; 0x70
 80031b8:	d018      	beq.n	80031ec <HAL_TIM_ConfigClockSource+0xb0>
 80031ba:	d900      	bls.n	80031be <HAL_TIM_ConfigClockSource+0x82>
 80031bc:	e07a      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031be:	2b60      	cmp	r3, #96	; 0x60
 80031c0:	d04f      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0x126>
 80031c2:	d900      	bls.n	80031c6 <HAL_TIM_ConfigClockSource+0x8a>
 80031c4:	e076      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031c6:	2b50      	cmp	r3, #80	; 0x50
 80031c8:	d03b      	beq.n	8003242 <HAL_TIM_ConfigClockSource+0x106>
 80031ca:	d900      	bls.n	80031ce <HAL_TIM_ConfigClockSource+0x92>
 80031cc:	e072      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d057      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x146>
 80031d2:	d900      	bls.n	80031d6 <HAL_TIM_ConfigClockSource+0x9a>
 80031d4:	e06e      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031d6:	2b30      	cmp	r3, #48	; 0x30
 80031d8:	d063      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 80031da:	d86b      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d060      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 80031e0:	d868      	bhi.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d05d      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 80031e6:	2b10      	cmp	r3, #16
 80031e8:	d05b      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 80031ea:	e063      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6899      	ldr	r1, [r3, #8]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f000 f970 	bl	80034e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2277      	movs	r2, #119	; 0x77
 800320c:	4313      	orrs	r3, r2
 800320e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	609a      	str	r2, [r3, #8]
      break;
 8003218:	e052      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6899      	ldr	r1, [r3, #8]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f000 f959 	bl	80034e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2180      	movs	r1, #128	; 0x80
 800323a:	01c9      	lsls	r1, r1, #7
 800323c:	430a      	orrs	r2, r1
 800323e:	609a      	str	r2, [r3, #8]
      break;
 8003240:	e03e      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6818      	ldr	r0, [r3, #0]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	6859      	ldr	r1, [r3, #4]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	001a      	movs	r2, r3
 8003250:	f000 f8ca 	bl	80033e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2150      	movs	r1, #80	; 0x50
 800325a:	0018      	movs	r0, r3
 800325c:	f000 f924 	bl	80034a8 <TIM_ITRx_SetConfig>
      break;
 8003260:	e02e      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	001a      	movs	r2, r3
 8003270:	f000 f8e8 	bl	8003444 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2160      	movs	r1, #96	; 0x60
 800327a:	0018      	movs	r0, r3
 800327c:	f000 f914 	bl	80034a8 <TIM_ITRx_SetConfig>
      break;
 8003280:	e01e      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	001a      	movs	r2, r3
 8003290:	f000 f8aa 	bl	80033e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2140      	movs	r1, #64	; 0x40
 800329a:	0018      	movs	r0, r3
 800329c:	f000 f904 	bl	80034a8 <TIM_ITRx_SetConfig>
      break;
 80032a0:	e00e      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	0019      	movs	r1, r3
 80032ac:	0010      	movs	r0, r2
 80032ae:	f000 f8fb 	bl	80034a8 <TIM_ITRx_SetConfig>
      break;
 80032b2:	e005      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80032b4:	230f      	movs	r3, #15
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
      break;
 80032bc:	e000      	b.n	80032c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80032be:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	223d      	movs	r2, #61	; 0x3d
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	223c      	movs	r2, #60	; 0x3c
 80032cc:	2100      	movs	r1, #0
 80032ce:	5499      	strb	r1, [r3, r2]

  return status;
 80032d0:	230f      	movs	r3, #15
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781b      	ldrb	r3, [r3, #0]
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	b004      	add	sp, #16
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	ffceff88 	.word	0xffceff88
 80032e4:	ffff00ff 	.word	0xffff00ff

080032e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a34      	ldr	r2, [pc, #208]	; (80033cc <TIM_Base_SetConfig+0xe4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d008      	beq.n	8003312 <TIM_Base_SetConfig+0x2a>
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	2380      	movs	r3, #128	; 0x80
 8003304:	05db      	lsls	r3, r3, #23
 8003306:	429a      	cmp	r2, r3
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0x2a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <TIM_Base_SetConfig+0xe8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2270      	movs	r2, #112	; 0x70
 8003316:	4393      	bics	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a29      	ldr	r2, [pc, #164]	; (80033cc <TIM_Base_SetConfig+0xe4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d018      	beq.n	800335e <TIM_Base_SetConfig+0x76>
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	429a      	cmp	r2, r3
 8003334:	d013      	beq.n	800335e <TIM_Base_SetConfig+0x76>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a25      	ldr	r2, [pc, #148]	; (80033d0 <TIM_Base_SetConfig+0xe8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00f      	beq.n	800335e <TIM_Base_SetConfig+0x76>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <TIM_Base_SetConfig+0xec>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0x76>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <TIM_Base_SetConfig+0xf0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0x76>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a22      	ldr	r2, [pc, #136]	; (80033dc <TIM_Base_SetConfig+0xf4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0x76>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <TIM_Base_SetConfig+0xf8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <TIM_Base_SetConfig+0xfc>)
 8003362:	4013      	ands	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	4393      	bics	r3, r2
 8003376:	001a      	movs	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <TIM_Base_SetConfig+0xe4>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d00b      	beq.n	80033b6 <TIM_Base_SetConfig+0xce>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a0d      	ldr	r2, [pc, #52]	; (80033d8 <TIM_Base_SetConfig+0xf0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d007      	beq.n	80033b6 <TIM_Base_SetConfig+0xce>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <TIM_Base_SetConfig+0xf4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d003      	beq.n	80033b6 <TIM_Base_SetConfig+0xce>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a0b      	ldr	r2, [pc, #44]	; (80033e0 <TIM_Base_SetConfig+0xf8>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d103      	bne.n	80033be <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	615a      	str	r2, [r3, #20]
}
 80033c4:	46c0      	nop			; (mov r8, r8)
 80033c6:	46bd      	mov	sp, r7
 80033c8:	b004      	add	sp, #16
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40002000 	.word	0x40002000
 80033d8:	40014000 	.word	0x40014000
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800
 80033e4:	fffffcff 	.word	0xfffffcff

080033e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	2201      	movs	r2, #1
 8003400:	4393      	bics	r3, r2
 8003402:	001a      	movs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	22f0      	movs	r2, #240	; 0xf0
 8003412:	4393      	bics	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	220a      	movs	r2, #10
 8003424:	4393      	bics	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b006      	add	sp, #24
 8003442:	bd80      	pop	{r7, pc}

08003444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	2210      	movs	r2, #16
 8003456:	4393      	bics	r3, r2
 8003458:	001a      	movs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <TIM_TI2_ConfigInputStage+0x60>)
 800346e:	4013      	ands	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	031b      	lsls	r3, r3, #12
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	22a0      	movs	r2, #160	; 0xa0
 8003480:	4393      	bics	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	ffff0fff 	.word	0xffff0fff

080034a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4a08      	ldr	r2, [pc, #32]	; (80034dc <TIM_ITRx_SetConfig+0x34>)
 80034bc:	4013      	ands	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	2207      	movs	r2, #7
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	609a      	str	r2, [r3, #8]
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b004      	add	sp, #16
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	ffcfff8f 	.word	0xffcfff8f

080034e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
 80034ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <TIM_ETR_SetConfig+0x3c>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	021a      	lsls	r2, r3, #8
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	431a      	orrs	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4313      	orrs	r3, r2
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	609a      	str	r2, [r3, #8]
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b006      	add	sp, #24
 800351a:	bd80      	pop	{r7, pc}
 800351c:	ffff00ff 	.word	0xffff00ff

08003520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	221f      	movs	r2, #31
 8003530:	4013      	ands	r3, r2
 8003532:	2201      	movs	r2, #1
 8003534:	409a      	lsls	r2, r3
 8003536:	0013      	movs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	43d2      	mvns	r2, r2
 8003542:	401a      	ands	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1a      	ldr	r2, [r3, #32]
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	211f      	movs	r1, #31
 8003550:	400b      	ands	r3, r1
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4099      	lsls	r1, r3
 8003556:	000b      	movs	r3, r1
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b006      	add	sp, #24
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	223c      	movs	r2, #60	; 0x3c
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800357c:	2302      	movs	r3, #2
 800357e:	e055      	b.n	800362c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	223c      	movs	r2, #60	; 0x3c
 8003584:	2101      	movs	r1, #1
 8003586:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	223d      	movs	r2, #61	; 0x3d
 800358c:	2102      	movs	r1, #2
 800358e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a23      	ldr	r2, [pc, #140]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d108      	bne.n	80035bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2270      	movs	r2, #112	; 0x70
 80035c0:	4393      	bics	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a16      	ldr	r2, [pc, #88]	; (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d00f      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	05db      	lsls	r3, r3, #23
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d009      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a12      	ldr	r2, [pc, #72]	; (800363c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a11      	ldr	r2, [pc, #68]	; (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10c      	bne.n	800361a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2280      	movs	r2, #128	; 0x80
 8003604:	4393      	bics	r3, r2
 8003606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	223d      	movs	r2, #61	; 0x3d
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	223c      	movs	r2, #60	; 0x3c
 8003626:	2100      	movs	r1, #0
 8003628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b004      	add	sp, #16
 8003632:	bd80      	pop	{r7, pc}
 8003634:	40012c00 	.word	0x40012c00
 8003638:	ff0fffff 	.word	0xff0fffff
 800363c:	40000400 	.word	0x40000400
 8003640:	40014000 	.word	0x40014000

08003644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e046      	b.n	80036e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2288      	movs	r2, #136	; 0x88
 800365a:	589b      	ldr	r3, [r3, r2]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d107      	bne.n	8003670 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2284      	movs	r2, #132	; 0x84
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	0018      	movs	r0, r3
 800366c:	f7fd faae 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2288      	movs	r2, #136	; 0x88
 8003674:	2124      	movs	r1, #36	; 0x24
 8003676:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2101      	movs	r1, #1
 8003684:	438a      	bics	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 f830 	bl	80036f0 <UART_SetConfig>
 8003690:	0003      	movs	r3, r0
 8003692:	2b01      	cmp	r3, #1
 8003694:	d101      	bne.n	800369a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e024      	b.n	80036e4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f000 fae1 	bl	8003c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	490d      	ldr	r1, [pc, #52]	; (80036ec <HAL_UART_Init+0xa8>)
 80036b6:	400a      	ands	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	212a      	movs	r1, #42	; 0x2a
 80036c6:	438a      	bics	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 fb79 	bl	8003dd4 <UART_CheckIdleState>
 80036e2:	0003      	movs	r3, r0
}
 80036e4:	0018      	movs	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b002      	add	sp, #8
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	ffffb7ff 	.word	0xffffb7ff

080036f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	b5b0      	push	{r4, r5, r7, lr}
 80036f2:	b090      	sub	sp, #64	; 0x40
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f8:	231a      	movs	r3, #26
 80036fa:	2220      	movs	r2, #32
 80036fc:	189b      	adds	r3, r3, r2
 80036fe:	19db      	adds	r3, r3, r7
 8003700:	2200      	movs	r2, #0
 8003702:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	431a      	orrs	r2, r3
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	431a      	orrs	r2, r3
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	4313      	orrs	r3, r2
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4aaf      	ldr	r2, [pc, #700]	; (80039e0 <UART_SetConfig+0x2f0>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372e:	430b      	orrs	r3, r1
 8003730:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	4aaa      	ldr	r2, [pc, #680]	; (80039e4 <UART_SetConfig+0x2f4>)
 800373a:	4013      	ands	r3, r2
 800373c:	0018      	movs	r0, r3
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	68d9      	ldr	r1, [r3, #12]
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	0003      	movs	r3, r0
 8003748:	430b      	orrs	r3, r1
 800374a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4aa4      	ldr	r2, [pc, #656]	; (80039e8 <UART_SetConfig+0x2f8>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003762:	4313      	orrs	r3, r2
 8003764:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4a9f      	ldr	r2, [pc, #636]	; (80039ec <UART_SetConfig+0x2fc>)
 800376e:	4013      	ands	r3, r2
 8003770:	0019      	movs	r1, r3
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003778:	430b      	orrs	r3, r1
 800377a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	220f      	movs	r2, #15
 8003784:	4393      	bics	r3, r2
 8003786:	0018      	movs	r0, r3
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	0003      	movs	r3, r0
 8003792:	430b      	orrs	r3, r1
 8003794:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a95      	ldr	r2, [pc, #596]	; (80039f0 <UART_SetConfig+0x300>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d131      	bne.n	8003804 <UART_SetConfig+0x114>
 80037a0:	4b94      	ldr	r3, [pc, #592]	; (80039f4 <UART_SetConfig+0x304>)
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	2203      	movs	r2, #3
 80037a6:	4013      	ands	r3, r2
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d01d      	beq.n	80037e8 <UART_SetConfig+0xf8>
 80037ac:	d823      	bhi.n	80037f6 <UART_SetConfig+0x106>
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d00c      	beq.n	80037cc <UART_SetConfig+0xdc>
 80037b2:	d820      	bhi.n	80037f6 <UART_SetConfig+0x106>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <UART_SetConfig+0xce>
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d00e      	beq.n	80037da <UART_SetConfig+0xea>
 80037bc:	e01b      	b.n	80037f6 <UART_SetConfig+0x106>
 80037be:	231b      	movs	r3, #27
 80037c0:	2220      	movs	r2, #32
 80037c2:	189b      	adds	r3, r3, r2
 80037c4:	19db      	adds	r3, r3, r7
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e0b4      	b.n	8003936 <UART_SetConfig+0x246>
 80037cc:	231b      	movs	r3, #27
 80037ce:	2220      	movs	r2, #32
 80037d0:	189b      	adds	r3, r3, r2
 80037d2:	19db      	adds	r3, r3, r7
 80037d4:	2202      	movs	r2, #2
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e0ad      	b.n	8003936 <UART_SetConfig+0x246>
 80037da:	231b      	movs	r3, #27
 80037dc:	2220      	movs	r2, #32
 80037de:	189b      	adds	r3, r3, r2
 80037e0:	19db      	adds	r3, r3, r7
 80037e2:	2204      	movs	r2, #4
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	e0a6      	b.n	8003936 <UART_SetConfig+0x246>
 80037e8:	231b      	movs	r3, #27
 80037ea:	2220      	movs	r2, #32
 80037ec:	189b      	adds	r3, r3, r2
 80037ee:	19db      	adds	r3, r3, r7
 80037f0:	2208      	movs	r2, #8
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e09f      	b.n	8003936 <UART_SetConfig+0x246>
 80037f6:	231b      	movs	r3, #27
 80037f8:	2220      	movs	r2, #32
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	19db      	adds	r3, r3, r7
 80037fe:	2210      	movs	r2, #16
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e098      	b.n	8003936 <UART_SetConfig+0x246>
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7b      	ldr	r2, [pc, #492]	; (80039f8 <UART_SetConfig+0x308>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d131      	bne.n	8003872 <UART_SetConfig+0x182>
 800380e:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <UART_SetConfig+0x304>)
 8003810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003812:	220c      	movs	r2, #12
 8003814:	4013      	ands	r3, r2
 8003816:	2b0c      	cmp	r3, #12
 8003818:	d01d      	beq.n	8003856 <UART_SetConfig+0x166>
 800381a:	d823      	bhi.n	8003864 <UART_SetConfig+0x174>
 800381c:	2b08      	cmp	r3, #8
 800381e:	d00c      	beq.n	800383a <UART_SetConfig+0x14a>
 8003820:	d820      	bhi.n	8003864 <UART_SetConfig+0x174>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <UART_SetConfig+0x13c>
 8003826:	2b04      	cmp	r3, #4
 8003828:	d00e      	beq.n	8003848 <UART_SetConfig+0x158>
 800382a:	e01b      	b.n	8003864 <UART_SetConfig+0x174>
 800382c:	231b      	movs	r3, #27
 800382e:	2220      	movs	r2, #32
 8003830:	189b      	adds	r3, r3, r2
 8003832:	19db      	adds	r3, r3, r7
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e07d      	b.n	8003936 <UART_SetConfig+0x246>
 800383a:	231b      	movs	r3, #27
 800383c:	2220      	movs	r2, #32
 800383e:	189b      	adds	r3, r3, r2
 8003840:	19db      	adds	r3, r3, r7
 8003842:	2202      	movs	r2, #2
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e076      	b.n	8003936 <UART_SetConfig+0x246>
 8003848:	231b      	movs	r3, #27
 800384a:	2220      	movs	r2, #32
 800384c:	189b      	adds	r3, r3, r2
 800384e:	19db      	adds	r3, r3, r7
 8003850:	2204      	movs	r2, #4
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e06f      	b.n	8003936 <UART_SetConfig+0x246>
 8003856:	231b      	movs	r3, #27
 8003858:	2220      	movs	r2, #32
 800385a:	189b      	adds	r3, r3, r2
 800385c:	19db      	adds	r3, r3, r7
 800385e:	2208      	movs	r2, #8
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	e068      	b.n	8003936 <UART_SetConfig+0x246>
 8003864:	231b      	movs	r3, #27
 8003866:	2220      	movs	r2, #32
 8003868:	189b      	adds	r3, r3, r2
 800386a:	19db      	adds	r3, r3, r7
 800386c:	2210      	movs	r2, #16
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e061      	b.n	8003936 <UART_SetConfig+0x246>
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a61      	ldr	r2, [pc, #388]	; (80039fc <UART_SetConfig+0x30c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d106      	bne.n	800388a <UART_SetConfig+0x19a>
 800387c:	231b      	movs	r3, #27
 800387e:	2220      	movs	r2, #32
 8003880:	189b      	adds	r3, r3, r2
 8003882:	19db      	adds	r3, r3, r7
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e055      	b.n	8003936 <UART_SetConfig+0x246>
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a5c      	ldr	r2, [pc, #368]	; (8003a00 <UART_SetConfig+0x310>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d106      	bne.n	80038a2 <UART_SetConfig+0x1b2>
 8003894:	231b      	movs	r3, #27
 8003896:	2220      	movs	r2, #32
 8003898:	189b      	adds	r3, r3, r2
 800389a:	19db      	adds	r3, r3, r7
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e049      	b.n	8003936 <UART_SetConfig+0x246>
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a50      	ldr	r2, [pc, #320]	; (80039e8 <UART_SetConfig+0x2f8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d13e      	bne.n	800392a <UART_SetConfig+0x23a>
 80038ac:	4b51      	ldr	r3, [pc, #324]	; (80039f4 <UART_SetConfig+0x304>)
 80038ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038b0:	23c0      	movs	r3, #192	; 0xc0
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	4013      	ands	r3, r2
 80038b6:	22c0      	movs	r2, #192	; 0xc0
 80038b8:	0112      	lsls	r2, r2, #4
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d027      	beq.n	800390e <UART_SetConfig+0x21e>
 80038be:	22c0      	movs	r2, #192	; 0xc0
 80038c0:	0112      	lsls	r2, r2, #4
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d82a      	bhi.n	800391c <UART_SetConfig+0x22c>
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d011      	beq.n	80038f2 <UART_SetConfig+0x202>
 80038ce:	2280      	movs	r2, #128	; 0x80
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d822      	bhi.n	800391c <UART_SetConfig+0x22c>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d004      	beq.n	80038e4 <UART_SetConfig+0x1f4>
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	00d2      	lsls	r2, r2, #3
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00e      	beq.n	8003900 <UART_SetConfig+0x210>
 80038e2:	e01b      	b.n	800391c <UART_SetConfig+0x22c>
 80038e4:	231b      	movs	r3, #27
 80038e6:	2220      	movs	r2, #32
 80038e8:	189b      	adds	r3, r3, r2
 80038ea:	19db      	adds	r3, r3, r7
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e021      	b.n	8003936 <UART_SetConfig+0x246>
 80038f2:	231b      	movs	r3, #27
 80038f4:	2220      	movs	r2, #32
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	19db      	adds	r3, r3, r7
 80038fa:	2202      	movs	r2, #2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	e01a      	b.n	8003936 <UART_SetConfig+0x246>
 8003900:	231b      	movs	r3, #27
 8003902:	2220      	movs	r2, #32
 8003904:	189b      	adds	r3, r3, r2
 8003906:	19db      	adds	r3, r3, r7
 8003908:	2204      	movs	r2, #4
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	e013      	b.n	8003936 <UART_SetConfig+0x246>
 800390e:	231b      	movs	r3, #27
 8003910:	2220      	movs	r2, #32
 8003912:	189b      	adds	r3, r3, r2
 8003914:	19db      	adds	r3, r3, r7
 8003916:	2208      	movs	r2, #8
 8003918:	701a      	strb	r2, [r3, #0]
 800391a:	e00c      	b.n	8003936 <UART_SetConfig+0x246>
 800391c:	231b      	movs	r3, #27
 800391e:	2220      	movs	r2, #32
 8003920:	189b      	adds	r3, r3, r2
 8003922:	19db      	adds	r3, r3, r7
 8003924:	2210      	movs	r2, #16
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e005      	b.n	8003936 <UART_SetConfig+0x246>
 800392a:	231b      	movs	r3, #27
 800392c:	2220      	movs	r2, #32
 800392e:	189b      	adds	r3, r3, r2
 8003930:	19db      	adds	r3, r3, r7
 8003932:	2210      	movs	r2, #16
 8003934:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <UART_SetConfig+0x2f8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d000      	beq.n	8003942 <UART_SetConfig+0x252>
 8003940:	e0a9      	b.n	8003a96 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003942:	231b      	movs	r3, #27
 8003944:	2220      	movs	r2, #32
 8003946:	189b      	adds	r3, r3, r2
 8003948:	19db      	adds	r3, r3, r7
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d015      	beq.n	800397c <UART_SetConfig+0x28c>
 8003950:	dc18      	bgt.n	8003984 <UART_SetConfig+0x294>
 8003952:	2b04      	cmp	r3, #4
 8003954:	d00d      	beq.n	8003972 <UART_SetConfig+0x282>
 8003956:	dc15      	bgt.n	8003984 <UART_SetConfig+0x294>
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <UART_SetConfig+0x272>
 800395c:	2b02      	cmp	r3, #2
 800395e:	d005      	beq.n	800396c <UART_SetConfig+0x27c>
 8003960:	e010      	b.n	8003984 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003962:	f7ff f8db 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8003966:	0003      	movs	r3, r0
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800396a:	e014      	b.n	8003996 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <UART_SetConfig+0x314>)
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003970:	e011      	b.n	8003996 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003972:	f7ff f847 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8003976:	0003      	movs	r3, r0
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800397a:	e00c      	b.n	8003996 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003982:	e008      	b.n	8003996 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003988:	231a      	movs	r3, #26
 800398a:	2220      	movs	r2, #32
 800398c:	189b      	adds	r3, r3, r2
 800398e:	19db      	adds	r3, r3, r7
 8003990:	2201      	movs	r2, #1
 8003992:	701a      	strb	r2, [r3, #0]
        break;
 8003994:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003998:	2b00      	cmp	r3, #0
 800399a:	d100      	bne.n	800399e <UART_SetConfig+0x2ae>
 800399c:	e14b      	b.n	8003c36 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a2:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <UART_SetConfig+0x318>)
 80039a4:	0052      	lsls	r2, r2, #1
 80039a6:	5ad3      	ldrh	r3, [r2, r3]
 80039a8:	0019      	movs	r1, r3
 80039aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039ac:	f7fc fbaa 	bl	8000104 <__udivsi3>
 80039b0:	0003      	movs	r3, r0
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	0013      	movs	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	189b      	adds	r3, r3, r2
 80039be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d305      	bcc.n	80039d0 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d91d      	bls.n	8003a0c <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80039d0:	231a      	movs	r3, #26
 80039d2:	2220      	movs	r2, #32
 80039d4:	189b      	adds	r3, r3, r2
 80039d6:	19db      	adds	r3, r3, r7
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	e12b      	b.n	8003c36 <UART_SetConfig+0x546>
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	cfff69f3 	.word	0xcfff69f3
 80039e4:	ffffcfff 	.word	0xffffcfff
 80039e8:	40008000 	.word	0x40008000
 80039ec:	11fff4ff 	.word	0x11fff4ff
 80039f0:	40013800 	.word	0x40013800
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40004400 	.word	0x40004400
 80039fc:	40004800 	.word	0x40004800
 8003a00:	40004c00 	.word	0x40004c00
 8003a04:	00f42400 	.word	0x00f42400
 8003a08:	08004304 	.word	0x08004304
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a18:	4b92      	ldr	r3, [pc, #584]	; (8003c64 <UART_SetConfig+0x574>)
 8003a1a:	0052      	lsls	r2, r2, #1
 8003a1c:	5ad3      	ldrh	r3, [r2, r3]
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	69b8      	ldr	r0, [r7, #24]
 8003a2a:	69f9      	ldr	r1, [r7, #28]
 8003a2c:	f7fc fce0 	bl	80003f0 <__aeabi_uldivmod>
 8003a30:	0002      	movs	r2, r0
 8003a32:	000b      	movs	r3, r1
 8003a34:	0e11      	lsrs	r1, r2, #24
 8003a36:	021d      	lsls	r5, r3, #8
 8003a38:	430d      	orrs	r5, r1
 8003a3a:	0214      	lsls	r4, r2, #8
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	60bb      	str	r3, [r7, #8]
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68b8      	ldr	r0, [r7, #8]
 8003a4a:	68f9      	ldr	r1, [r7, #12]
 8003a4c:	1900      	adds	r0, r0, r4
 8003a4e:	4169      	adcs	r1, r5
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f7fc fcc7 	bl	80003f0 <__aeabi_uldivmod>
 8003a62:	0002      	movs	r2, r0
 8003a64:	000b      	movs	r3, r1
 8003a66:	0013      	movs	r3, r2
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a6c:	23c0      	movs	r3, #192	; 0xc0
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d309      	bcc.n	8003a88 <UART_SetConfig+0x398>
 8003a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	035b      	lsls	r3, r3, #13
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d204      	bcs.n	8003a88 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	e0d6      	b.n	8003c36 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003a88:	231a      	movs	r3, #26
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	189b      	adds	r3, r3, r2
 8003a8e:	19db      	adds	r3, r3, r7
 8003a90:	2201      	movs	r2, #1
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e0cf      	b.n	8003c36 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	021b      	lsls	r3, r3, #8
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d000      	beq.n	8003aa4 <UART_SetConfig+0x3b4>
 8003aa2:	e070      	b.n	8003b86 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8003aa4:	231b      	movs	r3, #27
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	189b      	adds	r3, r3, r2
 8003aaa:	19db      	adds	r3, r3, r7
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d015      	beq.n	8003ade <UART_SetConfig+0x3ee>
 8003ab2:	dc18      	bgt.n	8003ae6 <UART_SetConfig+0x3f6>
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d00d      	beq.n	8003ad4 <UART_SetConfig+0x3e4>
 8003ab8:	dc15      	bgt.n	8003ae6 <UART_SetConfig+0x3f6>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <UART_SetConfig+0x3d4>
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d005      	beq.n	8003ace <UART_SetConfig+0x3de>
 8003ac2:	e010      	b.n	8003ae6 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ac4:	f7ff f82a 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003acc:	e014      	b.n	8003af8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ace:	4b66      	ldr	r3, [pc, #408]	; (8003c68 <UART_SetConfig+0x578>)
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ad2:	e011      	b.n	8003af8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ad4:	f7fe ff96 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003adc:	e00c      	b.n	8003af8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ae4:	e008      	b.n	8003af8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003aea:	231a      	movs	r3, #26
 8003aec:	2220      	movs	r2, #32
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	19db      	adds	r3, r3, r7
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
        break;
 8003af6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d100      	bne.n	8003b00 <UART_SetConfig+0x410>
 8003afe:	e09a      	b.n	8003c36 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b04:	4b57      	ldr	r3, [pc, #348]	; (8003c64 <UART_SetConfig+0x574>)
 8003b06:	0052      	lsls	r2, r2, #1
 8003b08:	5ad3      	ldrh	r3, [r2, r3]
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b0e:	f7fc faf9 	bl	8000104 <__udivsi3>
 8003b12:	0003      	movs	r3, r0
 8003b14:	005a      	lsls	r2, r3, #1
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	18d2      	adds	r2, r2, r3
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	0019      	movs	r1, r3
 8003b24:	0010      	movs	r0, r2
 8003b26:	f7fc faed 	bl	8000104 <__udivsi3>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d921      	bls.n	8003b78 <UART_SetConfig+0x488>
 8003b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b36:	2380      	movs	r3, #128	; 0x80
 8003b38:	025b      	lsls	r3, r3, #9
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d21c      	bcs.n	8003b78 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	200e      	movs	r0, #14
 8003b44:	2420      	movs	r4, #32
 8003b46:	1903      	adds	r3, r0, r4
 8003b48:	19db      	adds	r3, r3, r7
 8003b4a:	210f      	movs	r1, #15
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2207      	movs	r2, #7
 8003b58:	4013      	ands	r3, r2
 8003b5a:	b299      	uxth	r1, r3
 8003b5c:	1903      	adds	r3, r0, r4
 8003b5e:	19db      	adds	r3, r3, r7
 8003b60:	1902      	adds	r2, r0, r4
 8003b62:	19d2      	adds	r2, r2, r7
 8003b64:	8812      	ldrh	r2, [r2, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1902      	adds	r2, r0, r4
 8003b70:	19d2      	adds	r2, r2, r7
 8003b72:	8812      	ldrh	r2, [r2, #0]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	e05e      	b.n	8003c36 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003b78:	231a      	movs	r3, #26
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	189b      	adds	r3, r3, r2
 8003b7e:	19db      	adds	r3, r3, r7
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	e057      	b.n	8003c36 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b86:	231b      	movs	r3, #27
 8003b88:	2220      	movs	r2, #32
 8003b8a:	189b      	adds	r3, r3, r2
 8003b8c:	19db      	adds	r3, r3, r7
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d015      	beq.n	8003bc0 <UART_SetConfig+0x4d0>
 8003b94:	dc18      	bgt.n	8003bc8 <UART_SetConfig+0x4d8>
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d00d      	beq.n	8003bb6 <UART_SetConfig+0x4c6>
 8003b9a:	dc15      	bgt.n	8003bc8 <UART_SetConfig+0x4d8>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <UART_SetConfig+0x4b6>
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d005      	beq.n	8003bb0 <UART_SetConfig+0x4c0>
 8003ba4:	e010      	b.n	8003bc8 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba6:	f7fe ffb9 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8003baa:	0003      	movs	r3, r0
 8003bac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bae:	e014      	b.n	8003bda <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb0:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <UART_SetConfig+0x578>)
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bb4:	e011      	b.n	8003bda <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bb6:	f7fe ff25 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bbe:	e00c      	b.n	8003bda <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003bc6:	e008      	b.n	8003bda <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003bcc:	231a      	movs	r3, #26
 8003bce:	2220      	movs	r2, #32
 8003bd0:	189b      	adds	r3, r3, r2
 8003bd2:	19db      	adds	r3, r3, r7
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	701a      	strb	r2, [r3, #0]
        break;
 8003bd8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d02a      	beq.n	8003c36 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <UART_SetConfig+0x574>)
 8003be6:	0052      	lsls	r2, r2, #1
 8003be8:	5ad3      	ldrh	r3, [r2, r3]
 8003bea:	0019      	movs	r1, r3
 8003bec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bee:	f7fc fa89 	bl	8000104 <__udivsi3>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	001a      	movs	r2, r3
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	18d2      	adds	r2, r2, r3
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	0019      	movs	r1, r3
 8003c04:	0010      	movs	r0, r2
 8003c06:	f7fc fa7d 	bl	8000104 <__udivsi3>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c10:	2b0f      	cmp	r3, #15
 8003c12:	d90a      	bls.n	8003c2a <UART_SetConfig+0x53a>
 8003c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	025b      	lsls	r3, r3, #9
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d205      	bcs.n	8003c2a <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60da      	str	r2, [r3, #12]
 8003c28:	e005      	b.n	8003c36 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2a:	231a      	movs	r3, #26
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	189b      	adds	r3, r3, r2
 8003c30:	19db      	adds	r3, r3, r7
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	226a      	movs	r2, #106	; 0x6a
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2268      	movs	r2, #104	; 0x68
 8003c42:	2101      	movs	r1, #1
 8003c44:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	2200      	movs	r2, #0
 8003c4a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	2200      	movs	r2, #0
 8003c50:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003c52:	231a      	movs	r3, #26
 8003c54:	2220      	movs	r2, #32
 8003c56:	189b      	adds	r3, r3, r2
 8003c58:	19db      	adds	r3, r3, r7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b010      	add	sp, #64	; 0x40
 8003c62:	bdb0      	pop	{r4, r5, r7, pc}
 8003c64:	08004304 	.word	0x08004304
 8003c68:	00f42400 	.word	0x00f42400

08003c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	d00b      	beq.n	8003c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a4a      	ldr	r2, [pc, #296]	; (8003db0 <UART_AdvFeatureConfig+0x144>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d00b      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4a43      	ldr	r2, [pc, #268]	; (8003db4 <UART_AdvFeatureConfig+0x148>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	2204      	movs	r2, #4
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a3b      	ldr	r2, [pc, #236]	; (8003db8 <UART_AdvFeatureConfig+0x14c>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	0019      	movs	r1, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	2208      	movs	r2, #8
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d00b      	beq.n	8003cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a34      	ldr	r2, [pc, #208]	; (8003dbc <UART_AdvFeatureConfig+0x150>)
 8003cec:	4013      	ands	r3, r2
 8003cee:	0019      	movs	r1, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	2210      	movs	r2, #16
 8003d02:	4013      	ands	r3, r2
 8003d04:	d00b      	beq.n	8003d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	4a2c      	ldr	r2, [pc, #176]	; (8003dc0 <UART_AdvFeatureConfig+0x154>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	0019      	movs	r1, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	2220      	movs	r2, #32
 8003d24:	4013      	ands	r3, r2
 8003d26:	d00b      	beq.n	8003d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <UART_AdvFeatureConfig+0x158>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	0019      	movs	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	2240      	movs	r2, #64	; 0x40
 8003d46:	4013      	ands	r3, r2
 8003d48:	d01d      	beq.n	8003d86 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4a1d      	ldr	r2, [pc, #116]	; (8003dc8 <UART_AdvFeatureConfig+0x15c>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	035b      	lsls	r3, r3, #13
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10b      	bne.n	8003d86 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <UART_AdvFeatureConfig+0x160>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	0019      	movs	r1, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	2280      	movs	r2, #128	; 0x80
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a0e      	ldr	r2, [pc, #56]	; (8003dd0 <UART_AdvFeatureConfig+0x164>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }
}
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	fffdffff 	.word	0xfffdffff
 8003db4:	fffeffff 	.word	0xfffeffff
 8003db8:	fffbffff 	.word	0xfffbffff
 8003dbc:	ffff7fff 	.word	0xffff7fff
 8003dc0:	ffffefff 	.word	0xffffefff
 8003dc4:	ffffdfff 	.word	0xffffdfff
 8003dc8:	ffefffff 	.word	0xffefffff
 8003dcc:	ff9fffff 	.word	0xff9fffff
 8003dd0:	fff7ffff 	.word	0xfff7ffff

08003dd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2290      	movs	r2, #144	; 0x90
 8003de0:	2100      	movs	r1, #0
 8003de2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003de4:	f7fd f814 	bl	8000e10 <HAL_GetTick>
 8003de8:	0003      	movs	r3, r0
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2208      	movs	r2, #8
 8003df4:	4013      	ands	r3, r2
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d10c      	bne.n	8003e14 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2280      	movs	r2, #128	; 0x80
 8003dfe:	0391      	lsls	r1, r2, #14
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4a1a      	ldr	r2, [pc, #104]	; (8003e6c <UART_CheckIdleState+0x98>)
 8003e04:	9200      	str	r2, [sp, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f000 f832 	bl	8003e70 <UART_WaitOnFlagUntilTimeout>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d001      	beq.n	8003e14 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e026      	b.n	8003e62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d10c      	bne.n	8003e3c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	03d1      	lsls	r1, r2, #15
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <UART_CheckIdleState+0x98>)
 8003e2c:	9200      	str	r2, [sp, #0]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f000 f81e 	bl	8003e70 <UART_WaitOnFlagUntilTimeout>
 8003e34:	1e03      	subs	r3, r0, #0
 8003e36:	d001      	beq.n	8003e3c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e012      	b.n	8003e62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2288      	movs	r2, #136	; 0x88
 8003e40:	2120      	movs	r1, #32
 8003e42:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	228c      	movs	r2, #140	; 0x8c
 8003e48:	2120      	movs	r1, #32
 8003e4a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2284      	movs	r2, #132	; 0x84
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	01ffffff 	.word	0x01ffffff

08003e70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b094      	sub	sp, #80	; 0x50
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	1dfb      	adds	r3, r7, #7
 8003e7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e80:	e0a7      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e84:	3301      	adds	r3, #1
 8003e86:	d100      	bne.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x1a>
 8003e88:	e0a3      	b.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8a:	f7fc ffc1 	bl	8000e10 <HAL_GetTick>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d13f      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eaa:	2301      	movs	r3, #1
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	f383 8810 	msr	PRIMASK, r3
}
 8003eb4:	46c0      	nop			; (mov r8, r8)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	494e      	ldr	r1, [pc, #312]	; (8003ffc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003ec2:	400a      	ands	r2, r1
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	f383 8810 	msr	PRIMASK, r3
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eda:	643b      	str	r3, [r7, #64]	; 0x40
 8003edc:	2301      	movs	r3, #1
 8003ede:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee2:	f383 8810 	msr	PRIMASK, r3
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	438a      	bics	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efe:	f383 8810 	msr	PRIMASK, r3
}
 8003f02:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2288      	movs	r2, #136	; 0x88
 8003f08:	2120      	movs	r1, #32
 8003f0a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	228c      	movs	r2, #140	; 0x8c
 8003f10:	2120      	movs	r1, #32
 8003f12:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2284      	movs	r2, #132	; 0x84
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e069      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2204      	movs	r2, #4
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d052      	beq.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69da      	ldr	r2, [r3, #28]
 8003f32:	2380      	movs	r3, #128	; 0x80
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	401a      	ands	r2, r3
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d148      	bne.n	8003fd2 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2280      	movs	r2, #128	; 0x80
 8003f46:	0112      	lsls	r2, r2, #4
 8003f48:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f4e:	613b      	str	r3, [r7, #16]
  return(result);
 8003f50:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f54:	2301      	movs	r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4924      	ldr	r1, [pc, #144]	; (8003ffc <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f383 8810 	msr	PRIMASK, r3
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f82:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f86:	2301      	movs	r3, #1
 8003f88:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	609a      	str	r2, [r3, #8]
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2288      	movs	r2, #136	; 0x88
 8003fb2:	2120      	movs	r1, #32
 8003fb4:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	228c      	movs	r2, #140	; 0x8c
 8003fba:	2120      	movs	r1, #32
 8003fbc:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2290      	movs	r2, #144	; 0x90
 8003fc2:	2120      	movs	r1, #32
 8003fc4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2284      	movs	r2, #132	; 0x84
 8003fca:	2100      	movs	r1, #0
 8003fcc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e010      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	425a      	negs	r2, r3
 8003fe2:	4153      	adcs	r3, r2
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	001a      	movs	r2, r3
 8003fe8:	1dfb      	adds	r3, r7, #7
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d100      	bne.n	8003ff2 <UART_WaitOnFlagUntilTimeout+0x182>
 8003ff0:	e747      	b.n	8003e82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b014      	add	sp, #80	; 0x50
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	fffffe5f 	.word	0xfffffe5f

08004000 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2284      	movs	r2, #132	; 0x84
 800400c:	5c9b      	ldrb	r3, [r3, r2]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_UARTEx_DisableFifoMode+0x16>
 8004012:	2302      	movs	r3, #2
 8004014:	e027      	b.n	8004066 <HAL_UARTEx_DisableFifoMode+0x66>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2284      	movs	r2, #132	; 0x84
 800401a:	2101      	movs	r1, #1
 800401c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2288      	movs	r2, #136	; 0x88
 8004022:	2124      	movs	r1, #36	; 0x24
 8004024:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2101      	movs	r1, #1
 800403a:	438a      	bics	r2, r1
 800403c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2288      	movs	r2, #136	; 0x88
 8004058:	2120      	movs	r1, #32
 800405a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2284      	movs	r2, #132	; 0x84
 8004060:	2100      	movs	r1, #0
 8004062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	dfffffff 	.word	0xdfffffff

08004074 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2284      	movs	r2, #132	; 0x84
 8004082:	5c9b      	ldrb	r3, [r3, r2]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004088:	2302      	movs	r3, #2
 800408a:	e02e      	b.n	80040ea <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2284      	movs	r2, #132	; 0x84
 8004090:	2101      	movs	r1, #1
 8004092:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2288      	movs	r2, #136	; 0x88
 8004098:	2124      	movs	r1, #36	; 0x24
 800409a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2101      	movs	r1, #1
 80040b0:	438a      	bics	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	08d9      	lsrs	r1, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 f854 	bl	8004178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2288      	movs	r2, #136	; 0x88
 80040dc:	2120      	movs	r1, #32
 80040de:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2284      	movs	r2, #132	; 0x84
 80040e4:	2100      	movs	r1, #0
 80040e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	0018      	movs	r0, r3
 80040ec:	46bd      	mov	sp, r7
 80040ee:	b004      	add	sp, #16
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2284      	movs	r2, #132	; 0x84
 8004102:	5c9b      	ldrb	r3, [r3, r2]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e02f      	b.n	800416c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2284      	movs	r2, #132	; 0x84
 8004110:	2101      	movs	r1, #1
 8004112:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2288      	movs	r2, #136	; 0x88
 8004118:	2124      	movs	r1, #36	; 0x24
 800411a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2101      	movs	r1, #1
 8004130:	438a      	bics	r2, r1
 8004132:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800413c:	4013      	ands	r3, r2
 800413e:	0019      	movs	r1, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 f813 	bl	8004178 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2288      	movs	r2, #136	; 0x88
 800415e:	2120      	movs	r1, #32
 8004160:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2284      	movs	r2, #132	; 0x84
 8004166:	2100      	movs	r1, #0
 8004168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b004      	add	sp, #16
 8004172:	bd80      	pop	{r7, pc}
 8004174:	f1ffffff 	.word	0xf1ffffff

08004178 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004184:	2b00      	cmp	r3, #0
 8004186:	d108      	bne.n	800419a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	226a      	movs	r2, #106	; 0x6a
 800418c:	2101      	movs	r1, #1
 800418e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2268      	movs	r2, #104	; 0x68
 8004194:	2101      	movs	r1, #1
 8004196:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004198:	e043      	b.n	8004222 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800419a:	260f      	movs	r6, #15
 800419c:	19bb      	adds	r3, r7, r6
 800419e:	2208      	movs	r2, #8
 80041a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041a2:	200e      	movs	r0, #14
 80041a4:	183b      	adds	r3, r7, r0
 80041a6:	2208      	movs	r2, #8
 80041a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	0e5b      	lsrs	r3, r3, #25
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	240d      	movs	r4, #13
 80041b6:	193b      	adds	r3, r7, r4
 80041b8:	2107      	movs	r1, #7
 80041ba:	400a      	ands	r2, r1
 80041bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	0f5b      	lsrs	r3, r3, #29
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	250c      	movs	r5, #12
 80041ca:	197b      	adds	r3, r7, r5
 80041cc:	2107      	movs	r1, #7
 80041ce:	400a      	ands	r2, r1
 80041d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041d2:	183b      	adds	r3, r7, r0
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	197a      	adds	r2, r7, r5
 80041d8:	7812      	ldrb	r2, [r2, #0]
 80041da:	4914      	ldr	r1, [pc, #80]	; (800422c <UARTEx_SetNbDataToProcess+0xb4>)
 80041dc:	5c8a      	ldrb	r2, [r1, r2]
 80041de:	435a      	muls	r2, r3
 80041e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80041e2:	197b      	adds	r3, r7, r5
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <UARTEx_SetNbDataToProcess+0xb8>)
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ea:	0019      	movs	r1, r3
 80041ec:	f7fc f814 	bl	8000218 <__divsi3>
 80041f0:	0003      	movs	r3, r0
 80041f2:	b299      	uxth	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	226a      	movs	r2, #106	; 0x6a
 80041f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041fa:	19bb      	adds	r3, r7, r6
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	193a      	adds	r2, r7, r4
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	490a      	ldr	r1, [pc, #40]	; (800422c <UARTEx_SetNbDataToProcess+0xb4>)
 8004204:	5c8a      	ldrb	r2, [r1, r2]
 8004206:	435a      	muls	r2, r3
 8004208:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800420a:	193b      	adds	r3, r7, r4
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	4a08      	ldr	r2, [pc, #32]	; (8004230 <UARTEx_SetNbDataToProcess+0xb8>)
 8004210:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004212:	0019      	movs	r1, r3
 8004214:	f7fc f800 	bl	8000218 <__divsi3>
 8004218:	0003      	movs	r3, r0
 800421a:	b299      	uxth	r1, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2268      	movs	r2, #104	; 0x68
 8004220:	5299      	strh	r1, [r3, r2]
}
 8004222:	46c0      	nop			; (mov r8, r8)
 8004224:	46bd      	mov	sp, r7
 8004226:	b005      	add	sp, #20
 8004228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800422a:	46c0      	nop			; (mov r8, r8)
 800422c:	0800431c 	.word	0x0800431c
 8004230:	08004324 	.word	0x08004324

08004234 <__libc_init_array>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	2600      	movs	r6, #0
 8004238:	4d0c      	ldr	r5, [pc, #48]	; (800426c <__libc_init_array+0x38>)
 800423a:	4c0d      	ldr	r4, [pc, #52]	; (8004270 <__libc_init_array+0x3c>)
 800423c:	1b64      	subs	r4, r4, r5
 800423e:	10a4      	asrs	r4, r4, #2
 8004240:	42a6      	cmp	r6, r4
 8004242:	d109      	bne.n	8004258 <__libc_init_array+0x24>
 8004244:	2600      	movs	r6, #0
 8004246:	f000 f821 	bl	800428c <_init>
 800424a:	4d0a      	ldr	r5, [pc, #40]	; (8004274 <__libc_init_array+0x40>)
 800424c:	4c0a      	ldr	r4, [pc, #40]	; (8004278 <__libc_init_array+0x44>)
 800424e:	1b64      	subs	r4, r4, r5
 8004250:	10a4      	asrs	r4, r4, #2
 8004252:	42a6      	cmp	r6, r4
 8004254:	d105      	bne.n	8004262 <__libc_init_array+0x2e>
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	00b3      	lsls	r3, r6, #2
 800425a:	58eb      	ldr	r3, [r5, r3]
 800425c:	4798      	blx	r3
 800425e:	3601      	adds	r6, #1
 8004260:	e7ee      	b.n	8004240 <__libc_init_array+0xc>
 8004262:	00b3      	lsls	r3, r6, #2
 8004264:	58eb      	ldr	r3, [r5, r3]
 8004266:	4798      	blx	r3
 8004268:	3601      	adds	r6, #1
 800426a:	e7f2      	b.n	8004252 <__libc_init_array+0x1e>
 800426c:	08004334 	.word	0x08004334
 8004270:	08004334 	.word	0x08004334
 8004274:	08004334 	.word	0x08004334
 8004278:	08004338 	.word	0x08004338

0800427c <memset>:
 800427c:	0003      	movs	r3, r0
 800427e:	1882      	adds	r2, r0, r2
 8004280:	4293      	cmp	r3, r2
 8004282:	d100      	bne.n	8004286 <memset+0xa>
 8004284:	4770      	bx	lr
 8004286:	7019      	strb	r1, [r3, #0]
 8004288:	3301      	adds	r3, #1
 800428a:	e7f9      	b.n	8004280 <memset+0x4>

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr

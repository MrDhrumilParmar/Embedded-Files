
G0Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005514  08005514  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800551c  0800551c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005520  08005520  00015520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005524  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000000c  08005530  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005530  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014095  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e6  00000000  00000000  000340c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  000368b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  000379c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d1c  00000000  00000000  000389f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138ec  00000000  00000000  00052714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa0df  00000000  00000000  00066000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001100df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e8c  00000000  00000000  00110130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005474 	.word	0x08005474

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08005474 	.word	0x08005474

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	okflag = 1;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_UART_RxCpltCallback+0x18>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	2000003e 	.word	0x2000003e

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fc79 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f875 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f000 fa1d 	bl	8000a84 <MX_GPIO_Init>
  MX_DMA_Init();
 800064a:	f000 f9f5 	bl	8000a38 <MX_DMA_Init>
  MX_ADC1_Init();
 800064e:	f000 f8b7 	bl	80007c0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000652:	f000 f91d 	bl	8000890 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000656:	f000 f96d 	bl	8000934 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800065a:	f000 f9b9 	bl	80009d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

HAL_UART_Receive_DMA(&huart3,(uint8_t* )RxBuf,10);
 800065e:	492b      	ldr	r1, [pc, #172]	; (800070c <main+0xd4>)
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <main+0xd8>)
 8000662:	220a      	movs	r2, #10
 8000664:	0018      	movs	r0, r3
 8000666:	f003 faeb 	bl	8003c40 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (okflag == 1)
 800066a:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <main+0xdc>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d13c      	bne.n	80006ec <main+0xb4>
	  {	int i =9;
 8000672:	2309      	movs	r3, #9
 8000674:	607b      	str	r3, [r7, #4]
		  okflag =0;
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <main+0xdc>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
		  while(i--){
 800067c:	e008      	b.n	8000690 <main+0x58>
		  tempBuf[i] = RxBuf[i];
 800067e:	4a23      	ldr	r2, [pc, #140]	; (800070c <main+0xd4>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	18d3      	adds	r3, r2, r3
 8000684:	7819      	ldrb	r1, [r3, #0]
 8000686:	4a24      	ldr	r2, [pc, #144]	; (8000718 <main+0xe0>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	18d3      	adds	r3, r2, r3
 800068c:	1c0a      	adds	r2, r1, #0
 800068e:	701a      	strb	r2, [r3, #0]
		  while(i--){
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	1e5a      	subs	r2, r3, #1
 8000694:	607a      	str	r2, [r7, #4]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d1f1      	bne.n	800067e <main+0x46>
		  }
		  speed = RxBuf[0];
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <main+0xd4>)
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	4b1f      	ldr	r3, [pc, #124]	; (800071c <main+0xe4>)
 80006a0:	701a      	strb	r2, [r3, #0]
		  test  = RxBuf[2];
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <main+0xd4>)
 80006a4:	789a      	ldrb	r2, [r3, #2]
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <main+0xe8>)
 80006a8:	701a      	strb	r2, [r3, #0]
		  turn =  RxBuf[4];
 80006aa:	4b18      	ldr	r3, [pc, #96]	; (800070c <main+0xd4>)
 80006ac:	791a      	ldrb	r2, [r3, #4]
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <main+0xec>)
 80006b0:	701a      	strb	r2, [r3, #0]

		  noTurns = 100*(int)(RxBuf[6]) +10*(int)(RxBuf[7]) + (int)(RxBuf[8]);
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <main+0xd4>)
 80006b4:	799b      	ldrb	r3, [r3, #6]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	2264      	movs	r2, #100	; 0x64
 80006ba:	4353      	muls	r3, r2
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <main+0xd4>)
 80006c0:	79db      	ldrb	r3, [r3, #7]
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	1c19      	adds	r1, r3, #0
 80006c6:	0089      	lsls	r1, r1, #2
 80006c8:	18cb      	adds	r3, r1, r3
 80006ca:	18db      	adds	r3, r3, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	18d3      	adds	r3, r2, r3
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <main+0xd4>)
 80006d4:	7a1b      	ldrb	r3, [r3, #8]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	18d3      	adds	r3, r2, r3
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <main+0xf0>)
 80006de:	801a      	strh	r2, [r3, #0]


		  HAL_UART_Receive_DMA(&huart3, (uint8_t* )RxBuf,10);
 80006e0:	490a      	ldr	r1, [pc, #40]	; (800070c <main+0xd4>)
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <main+0xd8>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	0018      	movs	r0, r3
 80006e8:	f003 faaa 	bl	8003c40 <HAL_UART_Receive_DMA>
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  count = 38;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <main+0xf4>)
 80006ee:	2226      	movs	r2, #38	; 0x26
 80006f0:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t *)&count, 1, 10);
 80006f2:	490e      	ldr	r1, [pc, #56]	; (800072c <main+0xf4>)
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <main+0xd8>)
 80006f6:	230a      	movs	r3, #10
 80006f8:	2201      	movs	r2, #1
 80006fa:	f003 fa05 	bl	8003b08 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80006fe:	23fa      	movs	r3, #250	; 0xfa
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fc9c 	bl	8001040 <HAL_Delay>
	  if (okflag == 1)
 8000708:	e7af      	b.n	800066a <main+0x32>
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000028 	.word	0x20000028
 8000710:	200001e4 	.word	0x200001e4
 8000714:	2000003e 	.word	0x2000003e
 8000718:	20000034 	.word	0x20000034
 800071c:	2000003f 	.word	0x2000003f
 8000720:	20000040 	.word	0x20000040
 8000724:	20000041 	.word	0x20000041
 8000728:	20000042 	.word	0x20000042
 800072c:	200002d4 	.word	0x200002d4

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b093      	sub	sp, #76	; 0x4c
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	2410      	movs	r4, #16
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2338      	movs	r3, #56	; 0x38
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f004 fe8f 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000746:	003b      	movs	r3, r7
 8000748:	0018      	movs	r0, r3
 800074a:	2310      	movs	r3, #16
 800074c:	001a      	movs	r2, r3
 800074e:	2100      	movs	r1, #0
 8000750:	f004 fe88 	bl	8005464 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	0018      	movs	r0, r3
 800075a:	f001 ffff 	bl	800275c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2202      	movs	r2, #2
 8000762:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2280      	movs	r2, #128	; 0x80
 8000768:	0052      	lsls	r2, r2, #1
 800076a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	193b      	adds	r3, r7, r4
 8000780:	0018      	movs	r0, r3
 8000782:	f002 f837 	bl	80027f4 <HAL_RCC_OscConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800078a:	f000 f9cb 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078e:	003b      	movs	r3, r7
 8000790:	2207      	movs	r2, #7
 8000792:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000794:	003b      	movs	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	003b      	movs	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	003b      	movs	r3, r7
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a6:	003b      	movs	r3, r7
 80007a8:	2100      	movs	r1, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fb3c 	bl	8002e28 <HAL_RCC_ClockConfig>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80007b4:	f000 f9b6 	bl	8000b24 <Error_Handler>
  }
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b013      	add	sp, #76	; 0x4c
 80007be:	bd90      	pop	{r4, r7, pc}

080007c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	0018      	movs	r0, r3
 80007ca:	230c      	movs	r3, #12
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f004 fe48 	bl	8005464 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007d4:	4b2b      	ldr	r3, [pc, #172]	; (8000884 <MX_ADC1_Init+0xc4>)
 80007d6:	4a2c      	ldr	r2, [pc, #176]	; (8000888 <MX_ADC1_Init+0xc8>)
 80007d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_ADC1_Init+0xc4>)
 80007dc:	2280      	movs	r2, #128	; 0x80
 80007de:	05d2      	lsls	r2, r2, #23
 80007e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e2:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_ADC1_Init+0xc4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e8:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_ADC1_Init+0xc4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ee:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_ADC1_Init+0xc4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f4:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_ADC1_Init+0xc4>)
 80007f6:	2204      	movs	r2, #4
 80007f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_ADC1_Init+0xc4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <MX_ADC1_Init+0xc4>)
 8000802:	2200      	movs	r2, #0
 8000804:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ADC1_Init+0xc4>)
 8000808:	2201      	movs	r2, #1
 800080a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_ADC1_Init+0xc4>)
 800080e:	2201      	movs	r2, #1
 8000810:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_ADC1_Init+0xc4>)
 8000814:	2200      	movs	r2, #0
 8000816:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_ADC1_Init+0xc4>)
 800081a:	2200      	movs	r2, #0
 800081c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_ADC1_Init+0xc4>)
 8000820:	222c      	movs	r2, #44	; 0x2c
 8000822:	2100      	movs	r1, #0
 8000824:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_ADC1_Init+0xc4>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_ADC1_Init+0xc4>)
 800082e:	2200      	movs	r2, #0
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_ADC1_Init+0xc4>)
 8000834:	2200      	movs	r2, #0
 8000836:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_ADC1_Init+0xc4>)
 800083a:	223c      	movs	r2, #60	; 0x3c
 800083c:	2100      	movs	r1, #0
 800083e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_ADC1_Init+0xc4>)
 8000842:	2200      	movs	r2, #0
 8000844:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_ADC1_Init+0xc4>)
 8000848:	0018      	movs	r0, r3
 800084a:	f000 fd39 	bl	80012c0 <HAL_ADC_Init>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000852:	f000 f967 	bl	8000b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <MX_ADC1_Init+0xcc>)
 800085a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000868:	1d3a      	adds	r2, r7, #4
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_ADC1_Init+0xc4>)
 800086c:	0011      	movs	r1, r2
 800086e:	0018      	movs	r0, r3
 8000870:	f000 fffe 	bl	8001870 <HAL_ADC_ConfigChannel>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 8000878:	f000 f954 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800087c:	46c0      	nop			; (mov r8, r8)
 800087e:	46bd      	mov	sp, r7
 8000880:	b004      	add	sp, #16
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000044 	.word	0x20000044
 8000888:	40012400 	.word	0x40012400
 800088c:	04000002 	.word	0x04000002

08000890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000896:	2310      	movs	r3, #16
 8000898:	18fb      	adds	r3, r7, r3
 800089a:	0018      	movs	r0, r3
 800089c:	2310      	movs	r3, #16
 800089e:	001a      	movs	r2, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	f004 fddf 	bl	8005464 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	0018      	movs	r0, r3
 80008aa:	230c      	movs	r3, #12
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f004 fdd8 	bl	8005464 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_TIM2_Init+0xa0>)
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	05d2      	lsls	r2, r2, #23
 80008ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80008bc:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <MX_TIM2_Init+0xa0>)
 80008be:	220f      	movs	r2, #15
 80008c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_TIM2_Init+0xa0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30-1;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_TIM2_Init+0xa0>)
 80008ca:	221d      	movs	r2, #29
 80008cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_TIM2_Init+0xa0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_TIM2_Init+0xa0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <MX_TIM2_Init+0xa0>)
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 fe05 	bl	80034ec <HAL_TIM_Base_Init>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80008e6:	f000 f91d 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ea:	2110      	movs	r1, #16
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	0152      	lsls	r2, r2, #5
 80008f2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f4:	187a      	adds	r2, r7, r1
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_TIM2_Init+0xa0>)
 80008f8:	0011      	movs	r1, r2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 fe4e 	bl	800359c <HAL_TIM_ConfigClockSource>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000904:	f000 f90e 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000914:	1d3a      	adds	r2, r7, #4
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_TIM2_Init+0xa0>)
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f003 f830 	bl	8003980 <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000924:	f000 f8fe 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	b008      	add	sp, #32
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000104 	.word	0x20000104

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b23      	ldr	r3, [pc, #140]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <MX_USART2_UART_Init+0x98>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000940:	22e1      	movs	r2, #225	; 0xe1
 8000942:	0252      	lsls	r2, r2, #9
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800097e:	0018      	movs	r0, r3
 8000980:	f003 f86c 	bl	8003a5c <HAL_UART_Init>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f8cc 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 800098e:	2100      	movs	r1, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f004 fc63 	bl	800525c <HAL_UARTEx_SetTxFifoThreshold>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800099a:	f000 f8c3 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f004 fc9a 	bl	80052dc <HAL_UARTEx_SetRxFifoThreshold>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009ac:	f000 f8ba 	bl	8000b24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009b0:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <MX_USART2_UART_Init+0x94>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f004 fc18 	bl	80051e8 <HAL_UARTEx_DisableFifoMode>
 80009b8:	1e03      	subs	r3, r0, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f8b2 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	20000150 	.word	0x20000150
 80009cc:	40004400 	.word	0x40004400

080009d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 80009d6:	4a17      	ldr	r2, [pc, #92]	; (8000a34 <MX_USART3_UART_Init+0x64>)
 80009d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 80009dc:	22e1      	movs	r2, #225	; 0xe1
 80009de:	0252      	lsls	r2, r2, #9
 80009e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <MX_USART3_UART_Init+0x60>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f003 f81e 	bl	8003a5c <HAL_UART_Init>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a24:	f000 f87e 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	200001e4 	.word	0x200001e4
 8000a34:	40004800 	.word	0x40004800

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_DMA_Init+0x48>)
 8000a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_DMA_Init+0x48>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	430a      	orrs	r2, r1
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_DMA_Init+0x48>)
 8000a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4013      	ands	r3, r2
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2009      	movs	r0, #9
 8000a5c:	f001 f9ac 	bl	8001db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a60:	2009      	movs	r0, #9
 8000a62:	f001 f9be 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f001 f9a4 	bl	8001db8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000a70:	200a      	movs	r0, #10
 8000a72:	f001 f9b6 	bl	8001de2 <HAL_NVIC_EnableIRQ>

}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	b002      	add	sp, #8
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	40021000 	.word	0x40021000

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	240c      	movs	r4, #12
 8000a8c:	193b      	adds	r3, r7, r4
 8000a8e:	0018      	movs	r0, r3
 8000a90:	2314      	movs	r3, #20
 8000a92:	001a      	movs	r2, r3
 8000a94:	2100      	movs	r1, #0
 8000a96:	f004 fce5 	bl	8005464 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aaa:	2204      	movs	r2, #4
 8000aac:	4013      	ands	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000ab8:	2120      	movs	r1, #32
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac2:	2220      	movs	r2, #32
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_GPIO_Init+0x9c>)
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000ae2:	23a0      	movs	r3, #160	; 0xa0
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 fe18 	bl	8002720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000af0:	0021      	movs	r1, r4
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2220      	movs	r2, #32
 8000af6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2201      	movs	r2, #1
 8000afc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2202      	movs	r2, #2
 8000b08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	187a      	adds	r2, r7, r1
 8000b0c:	23a0      	movs	r3, #160	; 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fca0 	bl	8002458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b009      	add	sp, #36	; 0x24
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	40021000 	.word	0x40021000

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <HAL_MspInit+0x44>)
 8000b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <HAL_MspInit+0x44>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	641a      	str	r2, [r3, #64]	; 0x40
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x44>)
 8000b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_MspInit+0x44>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0549      	lsls	r1, r1, #21
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_MspInit+0x44>)
 8000b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	055b      	lsls	r3, r3, #21
 8000b64:	4013      	ands	r3, r2
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b08b      	sub	sp, #44	; 0x2c
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	2414      	movs	r4, #20
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f004 fc6a 	bl	8005464 <memset>
  if(hadc->Instance==ADC1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a31      	ldr	r2, [pc, #196]	; (8000c5c <HAL_ADC_MspInit+0xe4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d15c      	bne.n	8000c54 <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b9a:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <HAL_ADC_MspInit+0xe8>)
 8000b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b9e:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <HAL_ADC_MspInit+0xe8>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0349      	lsls	r1, r1, #13
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	; (8000c60 <HAL_ADC_MspInit+0xe8>)
 8000baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	035b      	lsls	r3, r3, #13
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b2a      	ldr	r3, [pc, #168]	; (8000c60 <HAL_ADC_MspInit+0xe8>)
 8000bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <HAL_ADC_MspInit+0xe8>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <HAL_ADC_MspInit+0xe8>)
 8000bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2203      	movs	r2, #3
 8000bd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	193a      	adds	r2, r7, r4
 8000be2:	23a0      	movs	r3, #160	; 0xa0
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	0011      	movs	r1, r2
 8000be8:	0018      	movs	r0, r3
 8000bea:	f001 fc35 	bl	8002458 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <HAL_ADC_MspInit+0xf0>)
 8000bf2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000bf6:	2205      	movs	r2, #5
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfa:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c08:	2280      	movs	r2, #128	; 0x80
 8000c0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c0c:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	0052      	lsls	r2, r2, #1
 8000c12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	00d2      	lsls	r2, r2, #3
 8000c1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 f8f6 	bl	8001e1c <HAL_DMA_Init>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000c34:	f7ff ff76 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c3c:	651a      	str	r2, [r3, #80]	; 0x50
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_ADC_MspInit+0xec>)
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2100      	movs	r1, #0
 8000c48:	200c      	movs	r0, #12
 8000c4a:	f001 f8b5 	bl	8001db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000c4e:	200c      	movs	r0, #12
 8000c50:	f001 f8c7 	bl	8001de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b00b      	add	sp, #44	; 0x2c
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	40012400 	.word	0x40012400
 8000c60:	40021000 	.word	0x40021000
 8000c64:	200000a8 	.word	0x200000a8
 8000c68:	40020008 	.word	0x40020008

08000c6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	05db      	lsls	r3, r3, #23
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d10b      	bne.n	8000c98 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <HAL_TIM_Base_MspInit+0x34>)
 8000c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_TIM_Base_MspInit+0x34>)
 8000c86:	2101      	movs	r1, #1
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <HAL_TIM_Base_MspInit+0x34>)
 8000c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c90:	2201      	movs	r2, #1
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b004      	add	sp, #16
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b099      	sub	sp, #100	; 0x64
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	234c      	movs	r3, #76	; 0x4c
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	2314      	movs	r3, #20
 8000cb4:	001a      	movs	r2, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	f004 fbd4 	bl	8005464 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cbc:	2418      	movs	r4, #24
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2334      	movs	r3, #52	; 0x34
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f004 fbcc 	bl	8005464 <memset>
  if(huart->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a56      	ldr	r2, [pc, #344]	; (8000e2c <HAL_UART_MspInit+0x188>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d13f      	bne.n	8000d56 <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2202      	movs	r2, #2
 8000cda:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f002 fa49 	bl	800317c <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	1e03      	subs	r3, r0, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cee:	f7ff ff19 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cf6:	4b4e      	ldr	r3, [pc, #312]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	0289      	lsls	r1, r1, #10
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d00:	4b4b      	ldr	r3, [pc, #300]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d04:	2380      	movs	r3, #128	; 0x80
 8000d06:	029b      	lsls	r3, r3, #10
 8000d08:	4013      	ands	r3, r2
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d12:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
 8000d1a:	4b45      	ldr	r3, [pc, #276]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000d26:	214c      	movs	r1, #76	; 0x4c
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2202      	movs	r2, #2
 8000d32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2201      	movs	r2, #1
 8000d38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2201      	movs	r2, #1
 8000d44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	187a      	adds	r2, r7, r1
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f001 fb82 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d54:	e066      	b.n	8000e24 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a36      	ldr	r2, [pc, #216]	; (8000e34 <HAL_UART_MspInit+0x190>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d161      	bne.n	8000e24 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d64:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	02c9      	lsls	r1, r1, #11
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d6e:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	02db      	lsls	r3, r3, #11
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d82:	2104      	movs	r1, #4
 8000d84:	430a      	orrs	r2, r1
 8000d86:	635a      	str	r2, [r3, #52]	; 0x34
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <HAL_UART_MspInit+0x18c>)
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8c:	2204      	movs	r2, #4
 8000d8e:	4013      	ands	r3, r2
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d94:	214c      	movs	r1, #76	; 0x4c
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2230      	movs	r2, #48	; 0x30
 8000d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2202      	movs	r2, #2
 8000da0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <HAL_UART_MspInit+0x194>)
 8000db8:	0019      	movs	r1, r3
 8000dba:	0010      	movs	r0, r2
 8000dbc:	f001 fb4c 	bl	8002458 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <HAL_UART_MspInit+0x19c>)
 8000dc4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000dc8:	2236      	movs	r2, #54	; 0x36
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000dda:	2280      	movs	r2, #128	; 0x80
 8000ddc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 f80f 	bl	8001e1c <HAL_DMA_Init>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_UART_MspInit+0x162>
      Error_Handler();
 8000e02:	f7ff fe8f 	bl	8000b24 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000e0c:	505a      	str	r2, [r3, r1]
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_UART_MspInit+0x198>)
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f000 ffcd 	bl	8001db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f000 ffdf 	bl	8001de2 <HAL_NVIC_EnableIRQ>
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b019      	add	sp, #100	; 0x64
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40004800 	.word	0x40004800
 8000e38:	50000800 	.word	0x50000800
 8000e3c:	20000278 	.word	0x20000278
 8000e40:	4002001c 	.word	0x4002001c

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e68:	f000 f8ce 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	46c0      	nop			; (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <DMA1_Channel1_IRQHandler+0x14>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f001 f9aa 	bl	80021d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	200000a8 	.word	0x200000a8

08000e8c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 f99e 	bl	80021d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	20000278 	.word	0x20000278

08000ea4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <ADC1_COMP_IRQHandler+0x14>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 fbb0 	bl	8001610 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000044 	.word	0x20000044

08000ebc <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <USART3_4_LPUART1_IRQHandler+0x14>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f002 ff1a 	bl	8003cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	200001e4 	.word	0x200001e4

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee4:	f7ff fff6 	bl	8000ed4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f0e:	f004 fa85 	bl	800541c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f12:	f7ff fb91 	bl	8000638 <main>

08000f16 <LoopForever>:

LoopForever:
  b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   r0, =_estack
 8000f18:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f24:	08005524 	.word	0x08005524
  ldr r2, =_sbss
 8000f28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f2c:	200002dc 	.word	0x200002dc

08000f30 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <CEC_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3a:	1dfb      	adds	r3, r7, #7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <HAL_Init+0x3c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_Init+0x3c>)
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	0049      	lsls	r1, r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f810 	bl	8000f74 <HAL_InitTick>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
 8000f5e:	e001      	b.n	8000f64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f60:	f7ff fde6 	bl	8000b30 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781b      	ldrb	r3, [r3, #0]
}
 8000f68:	0018      	movs	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40022000 	.word	0x40022000

08000f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_InitTick+0x88>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d02b      	beq.n	8000fe4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <HAL_InitTick+0x8c>)
 8000f8e:	681c      	ldr	r4, [r3, #0]
 8000f90:	4b1a      	ldr	r3, [pc, #104]	; (8000ffc <HAL_InitTick+0x88>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	0019      	movs	r1, r3
 8000f96:	23fa      	movs	r3, #250	; 0xfa
 8000f98:	0098      	lsls	r0, r3, #2
 8000f9a:	f7ff f8b3 	bl	8000104 <__udivsi3>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f7ff f8ae 	bl	8000104 <__udivsi3>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f000 ff29 	bl	8001e02 <HAL_SYSTICK_Config>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d112      	bne.n	8000fda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b03      	cmp	r3, #3
 8000fb8:	d80a      	bhi.n	8000fd0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f000 fef8 	bl	8001db8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_InitTick+0x90>)
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e00d      	b.n	8000fec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
 8000fd8:	e008      	b.n	8000fec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fda:	230f      	movs	r3, #15
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	e003      	b.n	8000fec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	2201      	movs	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fec:	230f      	movs	r3, #15
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	781b      	ldrb	r3, [r3, #0]
}
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	b005      	add	sp, #20
 8000ff8:	bd90      	pop	{r4, r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004

08001008 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_IncTick+0x1c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	001a      	movs	r2, r3
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x20>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	18d2      	adds	r2, r2, r3
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_IncTick+0x20>)
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	20000008 	.word	0x20000008
 8001028:	200002d8 	.word	0x200002d8

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <HAL_GetTick+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	200002d8 	.word	0x200002d8

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff fff0 	bl	800102c <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	001a      	movs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	189b      	adds	r3, r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	f7ff ffe0 	bl	800102c <HAL_GetTick>
 800106c:	0002      	movs	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b004      	add	sp, #16
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000008 	.word	0x20000008

08001088 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001098:	401a      	ands	r2, r3
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	fe3fffff 	.word	0xfe3fffff

080010b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	23e0      	movs	r3, #224	; 0xe0
 80010be:	045b      	lsls	r3, r3, #17
 80010c0:	4013      	ands	r3, r2
}
 80010c2:	0018      	movs	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b002      	add	sp, #8
 80010c8:	bd80      	pop	{r7, pc}

080010ca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	2104      	movs	r1, #4
 80010de:	400a      	ands	r2, r1
 80010e0:	2107      	movs	r1, #7
 80010e2:	4091      	lsls	r1, r2
 80010e4:	000a      	movs	r2, r1
 80010e6:	43d2      	mvns	r2, r2
 80010e8:	401a      	ands	r2, r3
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2104      	movs	r1, #4
 80010ee:	400b      	ands	r3, r1
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4099      	lsls	r1, r3
 80010f4:	000b      	movs	r3, r1
 80010f6:	431a      	orrs	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b004      	add	sp, #16
 8001102:	bd80      	pop	{r7, pc}

08001104 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	683a      	ldr	r2, [r7, #0]
 8001114:	2104      	movs	r1, #4
 8001116:	400a      	ands	r2, r1
 8001118:	2107      	movs	r1, #7
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2104      	movs	r1, #4
 8001124:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001126:	40da      	lsrs	r2, r3
 8001128:	0013      	movs	r3, r2
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}

08001132 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	23c0      	movs	r3, #192	; 0xc0
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4013      	ands	r3, r2
 8001144:	d101      	bne.n	800114a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800114a:	2300      	movs	r3, #0
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b002      	add	sp, #8
 8001152:	bd80      	pop	{r7, pc}

08001154 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	211f      	movs	r1, #31
 8001168:	400a      	ands	r2, r1
 800116a:	210f      	movs	r1, #15
 800116c:	4091      	lsls	r1, r2
 800116e:	000a      	movs	r2, r1
 8001170:	43d2      	mvns	r2, r2
 8001172:	401a      	ands	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	0e9b      	lsrs	r3, r3, #26
 8001178:	210f      	movs	r1, #15
 800117a:	4019      	ands	r1, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	201f      	movs	r0, #31
 8001180:	4003      	ands	r3, r0
 8001182:	4099      	lsls	r1, r3
 8001184:	000b      	movs	r3, r1
 8001186:	431a      	orrs	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b004      	add	sp, #16
 8001192:	bd80      	pop	{r7, pc}

08001194 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	035b      	lsls	r3, r3, #13
 80011a6:	0b5b      	lsrs	r3, r3, #13
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	0352      	lsls	r2, r2, #13
 80011c8:	0b52      	lsrs	r2, r2, #13
 80011ca:	43d2      	mvns	r2, r2
 80011cc:	401a      	ands	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}

080011da <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2203      	movs	r2, #3
 80011e8:	4013      	ands	r3, r2
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	0212      	lsls	r2, r2, #8
 8001208:	43d2      	mvns	r2, r2
 800120a:	401a      	ands	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	400b      	ands	r3, r1
 8001214:	4904      	ldr	r1, [pc, #16]	; (8001228 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001216:	400b      	ands	r3, r1
 8001218:	431a      	orrs	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b004      	add	sp, #16
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	07ffff00 	.word	0x07ffff00

0800122c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a05      	ldr	r2, [pc, #20]	; (8001250 <LL_ADC_EnableInternalRegulator+0x24>)
 800123a:	4013      	ands	r3, r2
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	0552      	lsls	r2, r2, #21
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	6fffffe8 	.word	0x6fffffe8

08001254 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	055b      	lsls	r3, r3, #21
 8001264:	401a      	ands	r2, r3
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	055b      	lsls	r3, r3, #21
 800126a:	429a      	cmp	r2, r3
 800126c:	d101      	bne.n	8001272 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001272:	2300      	movs	r3, #0
}
 8001274:	0018      	movs	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2201      	movs	r2, #1
 800128a:	4013      	ands	r3, r2
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <LL_ADC_IsEnabled+0x18>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <LL_ADC_IsEnabled+0x1a>
 8001294:	2300      	movs	r3, #0
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}

0800129e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2204      	movs	r2, #4
 80012ac:	4013      	ands	r3, r2
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d101      	bne.n	80012b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b002      	add	sp, #8
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c8:	231f      	movs	r3, #31
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e17f      	b.n	80015e6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10a      	bne.n	8001304 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	0018      	movs	r0, r3
 80012f2:	f7ff fc41 	bl	8000b78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2254      	movs	r2, #84	; 0x54
 8001300:	2100      	movs	r1, #0
 8001302:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0018      	movs	r0, r3
 800130a:	f7ff ffa3 	bl	8001254 <LL_ADC_IsInternalRegulatorEnabled>
 800130e:	1e03      	subs	r3, r0, #0
 8001310:	d115      	bne.n	800133e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	0018      	movs	r0, r3
 8001318:	f7ff ff88 	bl	800122c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800131c:	4bb4      	ldr	r3, [pc, #720]	; (80015f0 <HAL_ADC_Init+0x330>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	49b4      	ldr	r1, [pc, #720]	; (80015f4 <HAL_ADC_Init+0x334>)
 8001322:	0018      	movs	r0, r3
 8001324:	f7fe feee 	bl	8000104 <__udivsi3>
 8001328:	0003      	movs	r3, r0
 800132a:	3301      	adds	r3, #1
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001330:	e002      	b.n	8001338 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3b01      	subs	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f9      	bne.n	8001332 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	0018      	movs	r0, r3
 8001344:	f7ff ff86 	bl	8001254 <LL_ADC_IsInternalRegulatorEnabled>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d10f      	bne.n	800136c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	2210      	movs	r2, #16
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135c:	2201      	movs	r2, #1
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001364:	231f      	movs	r3, #31
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff ff94 	bl	800129e <LL_ADC_REG_IsConversionOngoing>
 8001376:	0003      	movs	r3, r0
 8001378:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137e:	2210      	movs	r2, #16
 8001380:	4013      	ands	r3, r2
 8001382:	d000      	beq.n	8001386 <HAL_ADC_Init+0xc6>
 8001384:	e122      	b.n	80015cc <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d000      	beq.n	800138e <HAL_ADC_Init+0xce>
 800138c:	e11e      	b.n	80015cc <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a99      	ldr	r2, [pc, #612]	; (80015f8 <HAL_ADC_Init+0x338>)
 8001394:	4013      	ands	r3, r2
 8001396:	2202      	movs	r2, #2
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0018      	movs	r0, r3
 80013a4:	f7ff ff6a 	bl	800127c <LL_ADC_IsEnabled>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d000      	beq.n	80013ae <HAL_ADC_Init+0xee>
 80013ac:	e0ad      	b.n	800150a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7e1b      	ldrb	r3, [r3, #24]
 80013b6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80013b8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7e5b      	ldrb	r3, [r3, #25]
 80013be:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80013c0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7e9b      	ldrb	r3, [r3, #26]
 80013c6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80013c8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <HAL_ADC_Init+0x118>
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	015b      	lsls	r3, r3, #5
 80013d6:	e000      	b.n	80013da <HAL_ADC_Init+0x11a>
 80013d8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80013da:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80013e0:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	da04      	bge.n	80013f4 <HAL_ADC_Init+0x134>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	085b      	lsrs	r3, r3, #1
 80013f2:	e001      	b.n	80013f8 <HAL_ADC_Init+0x138>
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80013f8:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	212c      	movs	r1, #44	; 0x2c
 80013fe:	5c5b      	ldrb	r3, [r3, r1]
 8001400:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001402:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2220      	movs	r2, #32
 800140e:	5c9b      	ldrb	r3, [r3, r2]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d115      	bne.n	8001440 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e9b      	ldrb	r3, [r3, #26]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	0252      	lsls	r2, r2, #9
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	e00b      	b.n	8001440 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	2220      	movs	r2, #32
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	2201      	movs	r2, #1
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00a      	beq.n	800145e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144c:	23e0      	movs	r3, #224	; 0xe0
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001456:	4313      	orrs	r3, r2
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	4a65      	ldr	r2, [pc, #404]	; (80015fc <HAL_ADC_Init+0x33c>)
 8001466:	4013      	ands	r3, r2
 8001468:	0019      	movs	r1, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	430a      	orrs	r2, r1
 8001472:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	0f9b      	lsrs	r3, r3, #30
 800147a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001480:	4313      	orrs	r3, r2
 8001482:	697a      	ldr	r2, [r7, #20]
 8001484:	4313      	orrs	r3, r2
 8001486:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	223c      	movs	r2, #60	; 0x3c
 800148c:	5c9b      	ldrb	r3, [r3, r2]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d111      	bne.n	80014b6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	0f9b      	lsrs	r3, r3, #30
 8001498:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800149e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80014a4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80014aa:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	2201      	movs	r2, #1
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4a50      	ldr	r2, [pc, #320]	; (8001600 <HAL_ADC_Init+0x340>)
 80014be:	4013      	ands	r3, r2
 80014c0:	0019      	movs	r1, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	430a      	orrs	r2, r1
 80014ca:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	23c0      	movs	r3, #192	; 0xc0
 80014d2:	061b      	lsls	r3, r3, #24
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d018      	beq.n	800150a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d012      	beq.n	800150a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	061b      	lsls	r3, r3, #24
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d00c      	beq.n	800150a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80014f0:	4b44      	ldr	r3, [pc, #272]	; (8001604 <HAL_ADC_Init+0x344>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a44      	ldr	r2, [pc, #272]	; (8001608 <HAL_ADC_Init+0x348>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	23f0      	movs	r3, #240	; 0xf0
 8001500:	039b      	lsls	r3, r3, #14
 8001502:	401a      	ands	r2, r3
 8001504:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_ADC_Init+0x344>)
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001512:	001a      	movs	r2, r3
 8001514:	2100      	movs	r1, #0
 8001516:	f7ff fdd8 	bl	80010ca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001522:	493a      	ldr	r1, [pc, #232]	; (800160c <HAL_ADC_Init+0x34c>)
 8001524:	001a      	movs	r2, r3
 8001526:	f7ff fdd0 	bl	80010ca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2110      	movs	r1, #16
 800153e:	4249      	negs	r1, r1
 8001540:	430a      	orrs	r2, r1
 8001542:	629a      	str	r2, [r3, #40]	; 0x28
 8001544:	e018      	b.n	8001578 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	2380      	movs	r3, #128	; 0x80
 800154c:	039b      	lsls	r3, r3, #14
 800154e:	429a      	cmp	r2, r3
 8001550:	d112      	bne.n	8001578 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	3b01      	subs	r3, #1
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	221c      	movs	r2, #28
 8001562:	4013      	ands	r3, r2
 8001564:	2210      	movs	r2, #16
 8001566:	4252      	negs	r2, r2
 8001568:	409a      	lsls	r2, r3
 800156a:	0011      	movs	r1, r2
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2100      	movs	r1, #0
 800157e:	0018      	movs	r0, r3
 8001580:	f7ff fdc0 	bl	8001104 <LL_ADC_GetSamplingTimeCommonChannels>
 8001584:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800158a:	429a      	cmp	r2, r3
 800158c:	d10b      	bne.n	80015a6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	2203      	movs	r2, #3
 800159a:	4393      	bics	r3, r2
 800159c:	2201      	movs	r2, #1
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015a4:	e01c      	b.n	80015e0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	2212      	movs	r2, #18
 80015ac:	4393      	bics	r3, r2
 80015ae:	2210      	movs	r2, #16
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ba:	2201      	movs	r2, #1
 80015bc:	431a      	orrs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80015c2:	231f      	movs	r3, #31
 80015c4:	18fb      	adds	r3, r7, r3
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015ca:	e009      	b.n	80015e0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	2210      	movs	r2, #16
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015d8:	231f      	movs	r3, #31
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80015e0:	231f      	movs	r3, #31
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	781b      	ldrb	r3, [r3, #0]
}
 80015e6:	0018      	movs	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	b008      	add	sp, #32
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	20000000 	.word	0x20000000
 80015f4:	00030d40 	.word	0x00030d40
 80015f8:	fffffefd 	.word	0xfffffefd
 80015fc:	fffe0201 	.word	0xfffe0201
 8001600:	1ffffc02 	.word	0x1ffffc02
 8001604:	40012708 	.word	0x40012708
 8001608:	ffc3ffff 	.word	0xffc3ffff
 800160c:	07ffff04 	.word	0x07ffff04

08001610 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	2202      	movs	r2, #2
 8001630:	4013      	ands	r3, r2
 8001632:	d017      	beq.n	8001664 <HAL_ADC_IRQHandler+0x54>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2202      	movs	r2, #2
 8001638:	4013      	ands	r3, r2
 800163a:	d013      	beq.n	8001664 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	2210      	movs	r2, #16
 8001642:	4013      	ands	r3, r2
 8001644:	d106      	bne.n	8001654 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	0112      	lsls	r2, r2, #4
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	0018      	movs	r0, r3
 8001658:	f000 faf2 	bl	8001c40 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2202      	movs	r2, #2
 8001662:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	2204      	movs	r2, #4
 8001668:	4013      	ands	r3, r2
 800166a:	d003      	beq.n	8001674 <HAL_ADC_IRQHandler+0x64>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2204      	movs	r2, #4
 8001670:	4013      	ands	r3, r2
 8001672:	d107      	bne.n	8001684 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	2208      	movs	r2, #8
 8001678:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800167a:	d04d      	beq.n	8001718 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2208      	movs	r2, #8
 8001680:	4013      	ands	r3, r2
 8001682:	d049      	beq.n	8001718 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001688:	2210      	movs	r2, #16
 800168a:	4013      	ands	r3, r2
 800168c:	d106      	bne.n	800169c <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	2280      	movs	r2, #128	; 0x80
 8001694:	0092      	lsls	r2, r2, #2
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7ff fd46 	bl	8001132 <LL_ADC_REG_IsTriggerSourceSWStart>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d02e      	beq.n	8001708 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	7e9b      	ldrb	r3, [r3, #26]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d12a      	bne.n	8001708 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2208      	movs	r2, #8
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b08      	cmp	r3, #8
 80016be:	d123      	bne.n	8001708 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff fdea 	bl	800129e <LL_ADC_REG_IsConversionOngoing>
 80016ca:	1e03      	subs	r3, r0, #0
 80016cc:	d110      	bne.n	80016f0 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	210c      	movs	r1, #12
 80016da:	438a      	bics	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e2:	4a56      	ldr	r2, [pc, #344]	; (800183c <HAL_ADC_IRQHandler+0x22c>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	2201      	movs	r2, #1
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	659a      	str	r2, [r3, #88]	; 0x58
 80016ee:	e00b      	b.n	8001708 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	2220      	movs	r2, #32
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001700:	2201      	movs	r2, #1
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	0018      	movs	r0, r3
 800170c:	f000 f898 	bl	8001840 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	220c      	movs	r2, #12
 8001716:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	4013      	ands	r3, r2
 800171e:	d012      	beq.n	8001746 <HAL_ADC_IRQHandler+0x136>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	4013      	ands	r3, r2
 8001726:	d00e      	beq.n	8001746 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	0252      	lsls	r2, r2, #9
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	0018      	movs	r0, r3
 800173a:	f000 f889 	bl	8001850 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4013      	ands	r3, r2
 800174e:	d014      	beq.n	800177a <HAL_ADC_IRQHandler+0x16a>
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	2380      	movs	r3, #128	; 0x80
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4013      	ands	r3, r2
 8001758:	d00f      	beq.n	800177a <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	0292      	lsls	r2, r2, #10
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	0018      	movs	r0, r3
 800176c:	f000 fa58 	bl	8001c20 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2280      	movs	r2, #128	; 0x80
 8001776:	0052      	lsls	r2, r2, #1
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d014      	beq.n	80017ae <HAL_ADC_IRQHandler+0x19e>
 8001784:	68fa      	ldr	r2, [r7, #12]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4013      	ands	r3, r2
 800178c:	d00f      	beq.n	80017ae <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	02d2      	lsls	r2, r2, #11
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	0018      	movs	r0, r3
 80017a0:	f000 fa46 	bl	8001c30 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	0092      	lsls	r2, r2, #2
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2210      	movs	r2, #16
 80017b2:	4013      	ands	r3, r2
 80017b4:	d02b      	beq.n	800180e <HAL_ADC_IRQHandler+0x1fe>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2210      	movs	r2, #16
 80017ba:	4013      	ands	r3, r2
 80017bc:	d027      	beq.n	800180e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80017c6:	2301      	movs	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e008      	b.n	80017de <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff fd02 	bl	80011da <LL_ADC_REG_GetDMATransfer>
 80017d6:	1e03      	subs	r3, r0, #0
 80017d8:	d001      	beq.n	80017de <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 80017da:	2301      	movs	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d110      	bne.n	8001806 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	2280      	movs	r2, #128	; 0x80
 80017ea:	00d2      	lsls	r2, r2, #3
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f6:	2202      	movs	r2, #2
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f000 f82d 	bl	8001860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2210      	movs	r2, #16
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	019b      	lsls	r3, r3, #6
 8001814:	4013      	ands	r3, r2
 8001816:	d00d      	beq.n	8001834 <HAL_ADC_IRQHandler+0x224>
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	019b      	lsls	r3, r3, #6
 800181e:	4013      	ands	r3, r2
 8001820:	d008      	beq.n	8001834 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0018      	movs	r0, r3
 8001826:	f000 fa13 	bl	8001c50 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	0192      	lsls	r2, r2, #6
 8001832:	601a      	str	r2, [r3, #0]
  }
}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b006      	add	sp, #24
 800183a:	bd80      	pop	{r7, pc}
 800183c:	fffffefe 	.word	0xfffffefe

08001840 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187a:	2317      	movs	r3, #23
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2254      	movs	r2, #84	; 0x54
 800188a:	5c9b      	ldrb	r3, [r3, r2]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x24>
 8001890:	2302      	movs	r3, #2
 8001892:	e1c0      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x3a6>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2254      	movs	r2, #84	; 0x54
 8001898:	2101      	movs	r1, #1
 800189a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f7ff fcfc 	bl	800129e <LL_ADC_REG_IsConversionOngoing>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d000      	beq.n	80018ac <HAL_ADC_ConfigChannel+0x3c>
 80018aa:	e1a3      	b.n	8001bf4 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d100      	bne.n	80018b6 <HAL_ADC_ConfigChannel+0x46>
 80018b4:	e143      	b.n	8001b3e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691a      	ldr	r2, [r3, #16]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	061b      	lsls	r3, r3, #24
 80018be:	429a      	cmp	r2, r3
 80018c0:	d004      	beq.n	80018cc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80018c6:	4ac1      	ldr	r2, [pc, #772]	; (8001bcc <HAL_ADC_ConfigChannel+0x35c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d108      	bne.n	80018de <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0019      	movs	r1, r3
 80018d6:	0010      	movs	r0, r2
 80018d8:	f7ff fc5c 	bl	8001194 <LL_ADC_REG_SetSequencerChAdd>
 80018dc:	e0c9      	b.n	8001a72 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	211f      	movs	r1, #31
 80018e8:	400b      	ands	r3, r1
 80018ea:	210f      	movs	r1, #15
 80018ec:	4099      	lsls	r1, r3
 80018ee:	000b      	movs	r3, r1
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4013      	ands	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	035b      	lsls	r3, r3, #13
 80018fc:	0b5b      	lsrs	r3, r3, #13
 80018fe:	d105      	bne.n	800190c <HAL_ADC_ConfigChannel+0x9c>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0e9b      	lsrs	r3, r3, #26
 8001906:	221f      	movs	r2, #31
 8001908:	4013      	ands	r3, r2
 800190a:	e098      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2201      	movs	r2, #1
 8001912:	4013      	ands	r3, r2
 8001914:	d000      	beq.n	8001918 <HAL_ADC_ConfigChannel+0xa8>
 8001916:	e091      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x1cc>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2202      	movs	r2, #2
 800191e:	4013      	ands	r3, r2
 8001920:	d000      	beq.n	8001924 <HAL_ADC_ConfigChannel+0xb4>
 8001922:	e089      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x1c8>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2204      	movs	r2, #4
 800192a:	4013      	ands	r3, r2
 800192c:	d000      	beq.n	8001930 <HAL_ADC_ConfigChannel+0xc0>
 800192e:	e081      	b.n	8001a34 <HAL_ADC_ConfigChannel+0x1c4>
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2208      	movs	r2, #8
 8001936:	4013      	ands	r3, r2
 8001938:	d000      	beq.n	800193c <HAL_ADC_ConfigChannel+0xcc>
 800193a:	e079      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x1c0>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2210      	movs	r2, #16
 8001942:	4013      	ands	r3, r2
 8001944:	d000      	beq.n	8001948 <HAL_ADC_ConfigChannel+0xd8>
 8001946:	e071      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x1bc>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2220      	movs	r2, #32
 800194e:	4013      	ands	r3, r2
 8001950:	d000      	beq.n	8001954 <HAL_ADC_ConfigChannel+0xe4>
 8001952:	e069      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x1b8>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2240      	movs	r2, #64	; 0x40
 800195a:	4013      	ands	r3, r2
 800195c:	d000      	beq.n	8001960 <HAL_ADC_ConfigChannel+0xf0>
 800195e:	e061      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1b4>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	4013      	ands	r3, r2
 8001968:	d000      	beq.n	800196c <HAL_ADC_ConfigChannel+0xfc>
 800196a:	e059      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x1b0>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	4013      	ands	r3, r2
 8001976:	d151      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1ac>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4013      	ands	r3, r2
 8001982:	d149      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x1a8>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4013      	ands	r3, r2
 800198e:	d141      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1a4>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	4013      	ands	r3, r2
 800199a:	d139      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1a0>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	015b      	lsls	r3, r3, #5
 80019a4:	4013      	ands	r3, r2
 80019a6:	d131      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x19c>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	019b      	lsls	r3, r3, #6
 80019b0:	4013      	ands	r3, r2
 80019b2:	d129      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x198>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	01db      	lsls	r3, r3, #7
 80019bc:	4013      	ands	r3, r2
 80019be:	d121      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x194>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	021b      	lsls	r3, r3, #8
 80019c8:	4013      	ands	r3, r2
 80019ca:	d119      	bne.n	8001a00 <HAL_ADC_ConfigChannel+0x190>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	4013      	ands	r3, r2
 80019d6:	d111      	bne.n	80019fc <HAL_ADC_ConfigChannel+0x18c>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4013      	ands	r3, r2
 80019e2:	d109      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x188>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	02db      	lsls	r3, r3, #11
 80019ec:	4013      	ands	r3, r2
 80019ee:	d001      	beq.n	80019f4 <HAL_ADC_ConfigChannel+0x184>
 80019f0:	2312      	movs	r3, #18
 80019f2:	e024      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 80019f4:	2300      	movs	r3, #0
 80019f6:	e022      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 80019f8:	2311      	movs	r3, #17
 80019fa:	e020      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 80019fc:	2310      	movs	r3, #16
 80019fe:	e01e      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a00:	230f      	movs	r3, #15
 8001a02:	e01c      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a04:	230e      	movs	r3, #14
 8001a06:	e01a      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a08:	230d      	movs	r3, #13
 8001a0a:	e018      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	e016      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a10:	230b      	movs	r3, #11
 8001a12:	e014      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a14:	230a      	movs	r3, #10
 8001a16:	e012      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a18:	2309      	movs	r3, #9
 8001a1a:	e010      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	e00e      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a20:	2307      	movs	r3, #7
 8001a22:	e00c      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a24:	2306      	movs	r3, #6
 8001a26:	e00a      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a28:	2305      	movs	r3, #5
 8001a2a:	e008      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	e006      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a30:	2303      	movs	r3, #3
 8001a32:	e004      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a34:	2302      	movs	r3, #2
 8001a36:	e002      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e000      	b.n	8001a3e <HAL_ADC_ConfigChannel+0x1ce>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	6852      	ldr	r2, [r2, #4]
 8001a42:	201f      	movs	r0, #31
 8001a44:	4002      	ands	r2, r0
 8001a46:	4093      	lsls	r3, r2
 8001a48:	000a      	movs	r2, r1
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d808      	bhi.n	8001a72 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6818      	ldr	r0, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	001a      	movs	r2, r3
 8001a6e:	f7ff fb71 	bl	8001154 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	6819      	ldr	r1, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	001a      	movs	r2, r3
 8001a80:	f7ff fbb8 	bl	80011f4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db00      	blt.n	8001a8e <HAL_ADC_ConfigChannel+0x21e>
 8001a8c:	e0bc      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a8e:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_ADC_ConfigChannel+0x360>)
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff fb0d 	bl	80010b0 <LL_ADC_GetCommonPathInternalCh>
 8001a96:	0003      	movs	r3, r0
 8001a98:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a4d      	ldr	r2, [pc, #308]	; (8001bd4 <HAL_ADC_ConfigChannel+0x364>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d122      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	041b      	lsls	r3, r3, #16
 8001aaa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001aac:	d11d      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	0412      	lsls	r2, r2, #16
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	4a46      	ldr	r2, [pc, #280]	; (8001bd0 <HAL_ADC_ConfigChannel+0x360>)
 8001ab8:	0019      	movs	r1, r3
 8001aba:	0010      	movs	r0, r2
 8001abc:	f7ff fae4 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ac0:	4b45      	ldr	r3, [pc, #276]	; (8001bd8 <HAL_ADC_ConfigChannel+0x368>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4945      	ldr	r1, [pc, #276]	; (8001bdc <HAL_ADC_ConfigChannel+0x36c>)
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7fe fb1c 	bl	8000104 <__udivsi3>
 8001acc:	0003      	movs	r3, r0
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	189b      	adds	r3, r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ada:	e002      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f9      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ae8:	e08e      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a3c      	ldr	r2, [pc, #240]	; (8001be0 <HAL_ADC_ConfigChannel+0x370>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d10e      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	4013      	ands	r3, r2
 8001afc:	d109      	bne.n	8001b12 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	0452      	lsls	r2, r2, #17
 8001b04:	4313      	orrs	r3, r2
 8001b06:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <HAL_ADC_ConfigChannel+0x360>)
 8001b08:	0019      	movs	r1, r3
 8001b0a:	0010      	movs	r0, r2
 8001b0c:	f7ff fabc 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001b10:	e07a      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <HAL_ADC_ConfigChannel+0x374>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d000      	beq.n	8001b1e <HAL_ADC_ConfigChannel+0x2ae>
 8001b1c:	e074      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	03db      	lsls	r3, r3, #15
 8001b24:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b26:	d000      	beq.n	8001b2a <HAL_ADC_ConfigChannel+0x2ba>
 8001b28:	e06e      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	03d2      	lsls	r2, r2, #15
 8001b30:	4313      	orrs	r3, r2
 8001b32:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <HAL_ADC_ConfigChannel+0x360>)
 8001b34:	0019      	movs	r1, r3
 8001b36:	0010      	movs	r0, r2
 8001b38:	f7ff faa6 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001b3c:	e064      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d004      	beq.n	8001b54 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b4e:	4a1f      	ldr	r2, [pc, #124]	; (8001bcc <HAL_ADC_ConfigChannel+0x35c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d107      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	0010      	movs	r0, r2
 8001b60:	f7ff fb29 	bl	80011b6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da4d      	bge.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_ADC_ConfigChannel+0x360>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f7ff fa9e 	bl	80010b0 <LL_ADC_GetCommonPathInternalCh>
 8001b74:	0003      	movs	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <HAL_ADC_ConfigChannel+0x364>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d108      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <HAL_ADC_ConfigChannel+0x378>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	4a11      	ldr	r2, [pc, #68]	; (8001bd0 <HAL_ADC_ConfigChannel+0x360>)
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	0010      	movs	r0, r2
 8001b8e:	f7ff fa7b 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001b92:	e039      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_ADC_ConfigChannel+0x370>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d108      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_ADC_ConfigChannel+0x37c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <HAL_ADC_ConfigChannel+0x360>)
 8001ba6:	0019      	movs	r1, r3
 8001ba8:	0010      	movs	r0, r2
 8001baa:	f7ff fa6d 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001bae:	e02b      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_ADC_ConfigChannel+0x374>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d126      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <HAL_ADC_ConfigChannel+0x380>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	4a03      	ldr	r2, [pc, #12]	; (8001bd0 <HAL_ADC_ConfigChannel+0x360>)
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	f7ff fa5f 	bl	8001088 <LL_ADC_SetCommonPathInternalCh>
 8001bca:	e01d      	b.n	8001c08 <HAL_ADC_ConfigChannel+0x398>
 8001bcc:	80000004 	.word	0x80000004
 8001bd0:	40012708 	.word	0x40012708
 8001bd4:	b0001000 	.word	0xb0001000
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	00030d40 	.word	0x00030d40
 8001be0:	b8004000 	.word	0xb8004000
 8001be4:	b4002000 	.word	0xb4002000
 8001be8:	ff7fffff 	.word	0xff7fffff
 8001bec:	feffffff 	.word	0xfeffffff
 8001bf0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c00:	2317      	movs	r3, #23
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2254      	movs	r2, #84	; 0x54
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001c10:	2317      	movs	r3, #23
 8001c12:	18fb      	adds	r3, r7, r3
 8001c14:	781b      	ldrb	r3, [r3, #0]
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b006      	add	sp, #24
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)

08001c20 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b002      	add	sp, #8
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	b002      	add	sp, #8
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	0002      	movs	r2, r0
 8001c68:	1dfb      	adds	r3, r7, #7
 8001c6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c6c:	1dfb      	adds	r3, r7, #7
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b7f      	cmp	r3, #127	; 0x7f
 8001c72:	d809      	bhi.n	8001c88 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c74:	1dfb      	adds	r3, r7, #7
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	001a      	movs	r2, r3
 8001c7a:	231f      	movs	r3, #31
 8001c7c:	401a      	ands	r2, r3
 8001c7e:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <__NVIC_EnableIRQ+0x30>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	4091      	lsls	r1, r2
 8001c84:	000a      	movs	r2, r1
 8001c86:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ca2:	1dfb      	adds	r3, r7, #7
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ca8:	d828      	bhi.n	8001cfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001caa:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <__NVIC_SetPriority+0xd4>)
 8001cac:	1dfb      	adds	r3, r7, #7
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	33c0      	adds	r3, #192	; 0xc0
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	589b      	ldr	r3, [r3, r2]
 8001cba:	1dfa      	adds	r2, r7, #7
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	400a      	ands	r2, r1
 8001cc4:	00d2      	lsls	r2, r2, #3
 8001cc6:	21ff      	movs	r1, #255	; 0xff
 8001cc8:	4091      	lsls	r1, r2
 8001cca:	000a      	movs	r2, r1
 8001ccc:	43d2      	mvns	r2, r2
 8001cce:	401a      	ands	r2, r3
 8001cd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	22ff      	movs	r2, #255	; 0xff
 8001cd8:	401a      	ands	r2, r3
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	4003      	ands	r3, r0
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce8:	481f      	ldr	r0, [pc, #124]	; (8001d68 <__NVIC_SetPriority+0xd4>)
 8001cea:	1dfb      	adds	r3, r7, #7
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	33c0      	adds	r3, #192	; 0xc0
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cfa:	e031      	b.n	8001d60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <__NVIC_SetPriority+0xd8>)
 8001cfe:	1dfb      	adds	r3, r7, #7
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	0019      	movs	r1, r3
 8001d04:	230f      	movs	r3, #15
 8001d06:	400b      	ands	r3, r1
 8001d08:	3b08      	subs	r3, #8
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3306      	adds	r3, #6
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	18d3      	adds	r3, r2, r3
 8001d12:	3304      	adds	r3, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	1dfa      	adds	r2, r7, #7
 8001d18:	7812      	ldrb	r2, [r2, #0]
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	400a      	ands	r2, r1
 8001d20:	00d2      	lsls	r2, r2, #3
 8001d22:	21ff      	movs	r1, #255	; 0xff
 8001d24:	4091      	lsls	r1, r2
 8001d26:	000a      	movs	r2, r1
 8001d28:	43d2      	mvns	r2, r2
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	22ff      	movs	r2, #255	; 0xff
 8001d34:	401a      	ands	r2, r3
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	4003      	ands	r3, r0
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <__NVIC_SetPriority+0xd8>)
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	001c      	movs	r4, r3
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	4023      	ands	r3, r4
 8001d50:	3b08      	subs	r3, #8
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	430a      	orrs	r2, r1
 8001d56:	3306      	adds	r3, #6
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	18c3      	adds	r3, r0, r3
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	601a      	str	r2, [r3, #0]
}
 8001d60:	46c0      	nop			; (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b003      	add	sp, #12
 8001d66:	bd90      	pop	{r4, r7, pc}
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	1e5a      	subs	r2, r3, #1
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	045b      	lsls	r3, r3, #17
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d301      	bcc.n	8001d88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d84:	2301      	movs	r3, #1
 8001d86:	e010      	b.n	8001daa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <SysTick_Config+0x44>)
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d90:	2301      	movs	r3, #1
 8001d92:	425b      	negs	r3, r3
 8001d94:	2103      	movs	r1, #3
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff ff7c 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <SysTick_Config+0x44>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <SysTick_Config+0x44>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	0018      	movs	r0, r3
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	1c02      	adds	r2, r0, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	0011      	movs	r1, r2
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff ff5d 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b004      	add	sp, #16
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	0002      	movs	r2, r0
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff ff33 	bl	8001c60 <__NVIC_EnableIRQ>
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b002      	add	sp, #8
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7ff ffaf 	bl	8001d70 <SysTick_Config>
 8001e12:	0003      	movs	r3, r0
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e077      	b.n	8001f1e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a3d      	ldr	r2, [pc, #244]	; (8001f28 <HAL_DMA_Init+0x10c>)
 8001e34:	4694      	mov	ip, r2
 8001e36:	4463      	add	r3, ip
 8001e38:	2114      	movs	r1, #20
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f7fe f962 	bl	8000104 <__udivsi3>
 8001e40:	0003      	movs	r3, r0
 8001e42:	009a      	lsls	r2, r3, #2
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2225      	movs	r2, #37	; 0x25
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4934      	ldr	r1, [pc, #208]	; (8001f2c <HAL_DMA_Init+0x110>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6819      	ldr	r1, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f000 fa8d 	bl	80023b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	01db      	lsls	r3, r3, #7
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d102      	bne.n	8001eb0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	213f      	movs	r1, #63	; 0x3f
 8001eba:	400a      	ands	r2, r1
 8001ebc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ec6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d011      	beq.n	8001ef4 <HAL_DMA_Init+0xd8>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d80d      	bhi.n	8001ef4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	0018      	movs	r0, r3
 8001edc:	f000 fa98 	bl	8002410 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	e008      	b.n	8001f06 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2225      	movs	r2, #37	; 0x25
 8001f10:	2101      	movs	r1, #1
 8001f12:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2224      	movs	r2, #36	; 0x24
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b002      	add	sp, #8
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	bffdfff8 	.word	0xbffdfff8
 8001f2c:	ffff800f 	.word	0xffff800f

08001f30 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2317      	movs	r3, #23
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2224      	movs	r2, #36	; 0x24
 8001f4a:	5c9b      	ldrb	r3, [r3, r2]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_DMA_Start_IT+0x24>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e06f      	b.n	8002034 <HAL_DMA_Start_IT+0x104>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2224      	movs	r2, #36	; 0x24
 8001f58:	2101      	movs	r1, #1
 8001f5a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2225      	movs	r2, #37	; 0x25
 8001f60:	5c9b      	ldrb	r3, [r3, r2]
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d157      	bne.n	8002018 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2225      	movs	r2, #37	; 0x25
 8001f6c:	2102      	movs	r1, #2
 8001f6e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	438a      	bics	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 f9d3 	bl	8002338 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d008      	beq.n	8001fac <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	210e      	movs	r1, #14
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	e00f      	b.n	8001fcc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	438a      	bics	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	210a      	movs	r1, #10
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	025b      	lsls	r3, r3, #9
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d008      	beq.n	8001fec <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0049      	lsls	r1, r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0049      	lsls	r1, r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e00a      	b.n	800202e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2224      	movs	r2, #36	; 0x24
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002026:	2317      	movs	r3, #23
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800202e:	2317      	movs	r3, #23
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	781b      	ldrb	r3, [r3, #0]
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b006      	add	sp, #24
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e050      	b.n	80020f0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2225      	movs	r2, #37	; 0x25
 8002052:	5c9b      	ldrb	r3, [r3, r2]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d008      	beq.n	800206c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2204      	movs	r2, #4
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	2100      	movs	r1, #0
 8002066:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e041      	b.n	80020f0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	210e      	movs	r1, #14
 8002078:	438a      	bics	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	491c      	ldr	r1, [pc, #112]	; (80020f8 <HAL_DMA_Abort+0xbc>)
 8002088:	400a      	ands	r2, r1
 800208a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2101      	movs	r1, #1
 8002098:	438a      	bics	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_DMA_Abort+0xc0>)
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	221c      	movs	r2, #28
 80020a6:	4013      	ands	r3, r2
 80020a8:	2201      	movs	r2, #1
 80020aa:	409a      	lsls	r2, r3
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_DMA_Abort+0xc0>)
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00c      	beq.n	80020de <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ce:	490a      	ldr	r1, [pc, #40]	; (80020f8 <HAL_DMA_Abort+0xbc>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80020dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2225      	movs	r2, #37	; 0x25
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2224      	movs	r2, #36	; 0x24
 80020ea:	2100      	movs	r1, #0
 80020ec:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	fffffeff 	.word	0xfffffeff
 80020fc:	40020000 	.word	0x40020000

08002100 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	210f      	movs	r1, #15
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2225      	movs	r2, #37	; 0x25
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d006      	beq.n	800212a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2204      	movs	r2, #4
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e049      	b.n	80021be <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	210e      	movs	r1, #14
 8002136:	438a      	bics	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	438a      	bics	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	491d      	ldr	r1, [pc, #116]	; (80021cc <HAL_DMA_Abort_IT+0xcc>)
 8002156:	400a      	ands	r2, r1
 8002158:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_DMA_Abort_IT+0xd0>)
 800215c:	6859      	ldr	r1, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	221c      	movs	r2, #28
 8002164:	4013      	ands	r3, r2
 8002166:	2201      	movs	r2, #1
 8002168:	409a      	lsls	r2, r3
 800216a:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_DMA_Abort_IT+0xd0>)
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002178:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00c      	beq.n	800219c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218c:	490f      	ldr	r1, [pc, #60]	; (80021cc <HAL_DMA_Abort_IT+0xcc>)
 800218e:	400a      	ands	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800219a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2225      	movs	r2, #37	; 0x25
 80021a0:	2101      	movs	r1, #1
 80021a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2224      	movs	r2, #36	; 0x24
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	0010      	movs	r0, r2
 80021bc:	4798      	blx	r3
    }
  }
  return status;
 80021be:	230f      	movs	r3, #15
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	781b      	ldrb	r3, [r3, #0]
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b004      	add	sp, #16
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	fffffeff 	.word	0xfffffeff
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80021dc:	4b55      	ldr	r3, [pc, #340]	; (8002334 <HAL_DMA_IRQHandler+0x160>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	221c      	movs	r2, #28
 80021f0:	4013      	ands	r3, r2
 80021f2:	2204      	movs	r2, #4
 80021f4:	409a      	lsls	r2, r3
 80021f6:	0013      	movs	r3, r2
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4013      	ands	r3, r2
 80021fc:	d027      	beq.n	800224e <HAL_DMA_IRQHandler+0x7a>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2204      	movs	r2, #4
 8002202:	4013      	ands	r3, r2
 8002204:	d023      	beq.n	800224e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2220      	movs	r2, #32
 800220e:	4013      	ands	r3, r2
 8002210:	d107      	bne.n	8002222 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2104      	movs	r1, #4
 800221e:	438a      	bics	r2, r1
 8002220:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002222:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_DMA_IRQHandler+0x160>)
 8002224:	6859      	ldr	r1, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	221c      	movs	r2, #28
 800222c:	4013      	ands	r3, r2
 800222e:	2204      	movs	r2, #4
 8002230:	409a      	lsls	r2, r3
 8002232:	4b40      	ldr	r3, [pc, #256]	; (8002334 <HAL_DMA_IRQHandler+0x160>)
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	2b00      	cmp	r3, #0
 800223e:	d100      	bne.n	8002242 <HAL_DMA_IRQHandler+0x6e>
 8002240:	e073      	b.n	800232a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	0010      	movs	r0, r2
 800224a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800224c:	e06d      	b.n	800232a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	221c      	movs	r2, #28
 8002254:	4013      	ands	r3, r2
 8002256:	2202      	movs	r2, #2
 8002258:	409a      	lsls	r2, r3
 800225a:	0013      	movs	r3, r2
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4013      	ands	r3, r2
 8002260:	d02e      	beq.n	80022c0 <HAL_DMA_IRQHandler+0xec>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2202      	movs	r2, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d02a      	beq.n	80022c0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2220      	movs	r2, #32
 8002272:	4013      	ands	r3, r2
 8002274:	d10b      	bne.n	800228e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	210a      	movs	r1, #10
 8002282:	438a      	bics	r2, r1
 8002284:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2225      	movs	r2, #37	; 0x25
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800228e:	4b29      	ldr	r3, [pc, #164]	; (8002334 <HAL_DMA_IRQHandler+0x160>)
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	221c      	movs	r2, #28
 8002298:	4013      	ands	r3, r2
 800229a:	2202      	movs	r2, #2
 800229c:	409a      	lsls	r2, r3
 800229e:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_DMA_IRQHandler+0x160>)
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	2100      	movs	r1, #0
 80022aa:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d03a      	beq.n	800232a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	0010      	movs	r0, r2
 80022bc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80022be:	e034      	b.n	800232a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	221c      	movs	r2, #28
 80022c6:	4013      	ands	r3, r2
 80022c8:	2208      	movs	r2, #8
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4013      	ands	r3, r2
 80022d2:	d02b      	beq.n	800232c <HAL_DMA_IRQHandler+0x158>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2208      	movs	r2, #8
 80022d8:	4013      	ands	r3, r2
 80022da:	d027      	beq.n	800232c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	210e      	movs	r1, #14
 80022e8:	438a      	bics	r2, r1
 80022ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <HAL_DMA_IRQHandler+0x160>)
 80022ee:	6859      	ldr	r1, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	221c      	movs	r2, #28
 80022f6:	4013      	ands	r3, r2
 80022f8:	2201      	movs	r2, #1
 80022fa:	409a      	lsls	r2, r3
 80022fc:	4b0d      	ldr	r3, [pc, #52]	; (8002334 <HAL_DMA_IRQHandler+0x160>)
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2225      	movs	r2, #37	; 0x25
 800230c:	2101      	movs	r1, #1
 800230e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	; 0x24
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	0010      	movs	r0, r2
 8002328:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46c0      	nop			; (mov r8, r8)
}
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40020000 	.word	0x40020000

08002338 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800234e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002360:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002362:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <DMA_SetConfig+0x7c>)
 8002364:	6859      	ldr	r1, [r3, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	221c      	movs	r2, #28
 800236c:	4013      	ands	r3, r2
 800236e:	2201      	movs	r2, #1
 8002370:	409a      	lsls	r2, r3
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <DMA_SetConfig+0x7c>)
 8002374:	430a      	orrs	r2, r1
 8002376:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b10      	cmp	r3, #16
 8002386:	d108      	bne.n	800239a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002398:	e007      	b.n	80023aa <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68ba      	ldr	r2, [r7, #8]
 80023a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	60da      	str	r2, [r3, #12]
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	40020000 	.word	0x40020000

080023b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80023c8:	4694      	mov	ip, r2
 80023ca:	4463      	add	r3, ip
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	001a      	movs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	001a      	movs	r2, r3
 80023da:	23ff      	movs	r3, #255	; 0xff
 80023dc:	4013      	ands	r3, r2
 80023de:	3b08      	subs	r3, #8
 80023e0:	2114      	movs	r1, #20
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7fd fe8e 	bl	8000104 <__udivsi3>
 80023e8:	0003      	movs	r3, r0
 80023ea:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80023f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	221f      	movs	r2, #31
 80023f6:	4013      	ands	r3, r2
 80023f8:	2201      	movs	r2, #1
 80023fa:	409a      	lsls	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b004      	add	sp, #16
 8002406:	bd80      	pop	{r7, pc}
 8002408:	10008200 	.word	0x10008200
 800240c:	40020880 	.word	0x40020880

08002410 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	223f      	movs	r2, #63	; 0x3f
 800241e:	4013      	ands	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002426:	4694      	mov	ip, r2
 8002428:	4463      	add	r3, ip
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	001a      	movs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a07      	ldr	r2, [pc, #28]	; (8002454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002436:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3b01      	subs	r3, #1
 800243c:	2203      	movs	r2, #3
 800243e:	4013      	ands	r3, r2
 8002440:	2201      	movs	r2, #1
 8002442:	409a      	lsls	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bd80      	pop	{r7, pc}
 8002450:	1000823f 	.word	0x1000823f
 8002454:	40020940 	.word	0x40020940

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002466:	e147      	b.n	80026f8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2101      	movs	r1, #1
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4091      	lsls	r1, r2
 8002472:	000a      	movs	r2, r1
 8002474:	4013      	ands	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d100      	bne.n	8002480 <HAL_GPIO_Init+0x28>
 800247e:	e138      	b.n	80026f2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	4013      	ands	r3, r2
 8002488:	2b01      	cmp	r3, #1
 800248a:	d005      	beq.n	8002498 <HAL_GPIO_Init+0x40>
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2203      	movs	r2, #3
 8002492:	4013      	ands	r3, r2
 8002494:	2b02      	cmp	r3, #2
 8002496:	d130      	bne.n	80024fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	409a      	lsls	r2, r3
 80024a6:	0013      	movs	r3, r2
 80024a8:	43da      	mvns	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	409a      	lsls	r2, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4313      	orrs	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024ce:	2201      	movs	r2, #1
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	409a      	lsls	r2, r3
 80024d4:	0013      	movs	r3, r2
 80024d6:	43da      	mvns	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	2201      	movs	r2, #1
 80024e6:	401a      	ands	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	409a      	lsls	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2203      	movs	r2, #3
 8002500:	4013      	ands	r3, r2
 8002502:	2b03      	cmp	r3, #3
 8002504:	d017      	beq.n	8002536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	2203      	movs	r2, #3
 8002512:	409a      	lsls	r2, r3
 8002514:	0013      	movs	r3, r2
 8002516:	43da      	mvns	r2, r3
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	409a      	lsls	r2, r3
 8002528:	0013      	movs	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2203      	movs	r2, #3
 800253c:	4013      	ands	r3, r2
 800253e:	2b02      	cmp	r3, #2
 8002540:	d123      	bne.n	800258a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	58d3      	ldr	r3, [r2, r3]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2207      	movs	r2, #7
 8002554:	4013      	ands	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	220f      	movs	r2, #15
 800255a:	409a      	lsls	r2, r3
 800255c:	0013      	movs	r3, r2
 800255e:	43da      	mvns	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4013      	ands	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	2107      	movs	r1, #7
 800256e:	400b      	ands	r3, r1
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	409a      	lsls	r2, r3
 8002574:	0013      	movs	r3, r2
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	08da      	lsrs	r2, r3, #3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3208      	adds	r2, #8
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	2203      	movs	r2, #3
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	401a      	ands	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	23c0      	movs	r3, #192	; 0xc0
 80025c4:	029b      	lsls	r3, r3, #10
 80025c6:	4013      	ands	r3, r2
 80025c8:	d100      	bne.n	80025cc <HAL_GPIO_Init+0x174>
 80025ca:	e092      	b.n	80026f2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025cc:	4a50      	ldr	r2, [pc, #320]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3318      	adds	r3, #24
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	589b      	ldr	r3, [r3, r2]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	2203      	movs	r2, #3
 80025de:	4013      	ands	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	220f      	movs	r2, #15
 80025e4:	409a      	lsls	r2, r3
 80025e6:	0013      	movs	r3, r2
 80025e8:	43da      	mvns	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	23a0      	movs	r3, #160	; 0xa0
 80025f4:	05db      	lsls	r3, r3, #23
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d013      	beq.n	8002622 <HAL_GPIO_Init+0x1ca>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a45      	ldr	r2, [pc, #276]	; (8002714 <HAL_GPIO_Init+0x2bc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d00d      	beq.n	800261e <HAL_GPIO_Init+0x1c6>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a44      	ldr	r2, [pc, #272]	; (8002718 <HAL_GPIO_Init+0x2c0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <HAL_GPIO_Init+0x1c2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a43      	ldr	r2, [pc, #268]	; (800271c <HAL_GPIO_Init+0x2c4>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d101      	bne.n	8002616 <HAL_GPIO_Init+0x1be>
 8002612:	2303      	movs	r3, #3
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x1cc>
 8002616:	2305      	movs	r3, #5
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x1cc>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x1cc>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x1cc>
 8002622:	2300      	movs	r3, #0
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	2103      	movs	r1, #3
 8002628:	400a      	ands	r2, r1
 800262a:	00d2      	lsls	r2, r2, #3
 800262c:	4093      	lsls	r3, r2
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002634:	4936      	ldr	r1, [pc, #216]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3318      	adds	r3, #24
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002642:	4b33      	ldr	r3, [pc, #204]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43da      	mvns	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	035b      	lsls	r3, r3, #13
 800265a:	4013      	ands	r3, r2
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002666:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800266c:	4b28      	ldr	r3, [pc, #160]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	43da      	mvns	r2, r3
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	039b      	lsls	r3, r3, #14
 8002684:	4013      	ands	r3, r2
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002696:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 8002698:	2384      	movs	r3, #132	; 0x84
 800269a:	58d3      	ldr	r3, [r2, r3]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	029b      	lsls	r3, r3, #10
 80026b0:	4013      	ands	r3, r2
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026bc:	4914      	ldr	r1, [pc, #80]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80026be:	2284      	movs	r2, #132	; 0x84
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80026c4:	4a12      	ldr	r2, [pc, #72]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	58d3      	ldr	r3, [r2, r3]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	025b      	lsls	r3, r3, #9
 80026de:	4013      	ands	r3, r2
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ea:	4909      	ldr	r1, [pc, #36]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	40da      	lsrs	r2, r3
 8002700:	1e13      	subs	r3, r2, #0
 8002702:	d000      	beq.n	8002706 <HAL_GPIO_Init+0x2ae>
 8002704:	e6b0      	b.n	8002468 <HAL_GPIO_Init+0x10>
  }
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b006      	add	sp, #24
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021800 	.word	0x40021800
 8002714:	50000400 	.word	0x50000400
 8002718:	50000800 	.word	0x50000800
 800271c:	50000c00 	.word	0x50000c00

08002720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	0008      	movs	r0, r1
 800272a:	0011      	movs	r1, r2
 800272c:	1cbb      	adds	r3, r7, #2
 800272e:	1c02      	adds	r2, r0, #0
 8002730:	801a      	strh	r2, [r3, #0]
 8002732:	1c7b      	adds	r3, r7, #1
 8002734:	1c0a      	adds	r2, r1, #0
 8002736:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002738:	1c7b      	adds	r3, r7, #1
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002740:	1cbb      	adds	r3, r7, #2
 8002742:	881a      	ldrh	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002748:	e003      	b.n	8002752 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800274a:	1cbb      	adds	r3, r7, #2
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	46bd      	mov	sp, r7
 8002756:	b002      	add	sp, #8
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a19      	ldr	r2, [pc, #100]	; (80027d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d11f      	bne.n	80027c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	0013      	movs	r3, r2
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	189b      	adds	r3, r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4912      	ldr	r1, [pc, #72]	; (80027d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800278e:	0018      	movs	r0, r3
 8002790:	f7fd fcb8 	bl	8000104 <__udivsi3>
 8002794:	0003      	movs	r3, r0
 8002796:	3301      	adds	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800279a:	e008      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e001      	b.n	80027ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e009      	b.n	80027c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027ae:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	401a      	ands	r2, r3
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	429a      	cmp	r2, r3
 80027be:	d0ed      	beq.n	800279c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	0018      	movs	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	b004      	add	sp, #16
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	40007000 	.word	0x40007000
 80027d0:	fffff9ff 	.word	0xfffff9ff
 80027d4:	20000000 	.word	0x20000000
 80027d8:	000f4240 	.word	0x000f4240

080027dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80027e0:	4b03      	ldr	r3, [pc, #12]	; (80027f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	23e0      	movs	r3, #224	; 0xe0
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	4013      	ands	r3, r2
}
 80027ea:	0018      	movs	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b088      	sub	sp, #32
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e2fe      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d100      	bne.n	8002812 <HAL_RCC_OscConfig+0x1e>
 8002810:	e07c      	b.n	800290c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002812:	4bc3      	ldr	r3, [pc, #780]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2238      	movs	r2, #56	; 0x38
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800281c:	4bc0      	ldr	r3, [pc, #768]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2203      	movs	r2, #3
 8002822:	4013      	ands	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b10      	cmp	r3, #16
 800282a:	d102      	bne.n	8002832 <HAL_RCC_OscConfig+0x3e>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d002      	beq.n	8002838 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d10b      	bne.n	8002850 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002838:	4bb9      	ldr	r3, [pc, #740]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	029b      	lsls	r3, r3, #10
 8002840:	4013      	ands	r3, r2
 8002842:	d062      	beq.n	800290a <HAL_RCC_OscConfig+0x116>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d15e      	bne.n	800290a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e2d9      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	025b      	lsls	r3, r3, #9
 8002858:	429a      	cmp	r2, r3
 800285a:	d107      	bne.n	800286c <HAL_RCC_OscConfig+0x78>
 800285c:	4bb0      	ldr	r3, [pc, #704]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4baf      	ldr	r3, [pc, #700]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0249      	lsls	r1, r1, #9
 8002866:	430a      	orrs	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	e020      	b.n	80028ae <HAL_RCC_OscConfig+0xba>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	23a0      	movs	r3, #160	; 0xa0
 8002872:	02db      	lsls	r3, r3, #11
 8002874:	429a      	cmp	r2, r3
 8002876:	d10e      	bne.n	8002896 <HAL_RCC_OscConfig+0xa2>
 8002878:	4ba9      	ldr	r3, [pc, #676]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4ba8      	ldr	r3, [pc, #672]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800287e:	2180      	movs	r1, #128	; 0x80
 8002880:	02c9      	lsls	r1, r1, #11
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	4ba6      	ldr	r3, [pc, #664]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	4ba5      	ldr	r3, [pc, #660]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0249      	lsls	r1, r1, #9
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	e00b      	b.n	80028ae <HAL_RCC_OscConfig+0xba>
 8002896:	4ba2      	ldr	r3, [pc, #648]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4ba1      	ldr	r3, [pc, #644]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800289c:	49a1      	ldr	r1, [pc, #644]	; (8002b24 <HAL_RCC_OscConfig+0x330>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	4b9f      	ldr	r3, [pc, #636]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b9e      	ldr	r3, [pc, #632]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80028a8:	499f      	ldr	r1, [pc, #636]	; (8002b28 <HAL_RCC_OscConfig+0x334>)
 80028aa:	400a      	ands	r2, r1
 80028ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d014      	beq.n	80028e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fbb9 	bl	800102c <HAL_GetTick>
 80028ba:	0003      	movs	r3, r0
 80028bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fbb4 	bl	800102c <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e298      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	4b93      	ldr	r3, [pc, #588]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	029b      	lsls	r3, r3, #10
 80028da:	4013      	ands	r3, r2
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0xcc>
 80028de:	e015      	b.n	800290c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fba4 	bl	800102c <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ea:	f7fe fb9f 	bl	800102c <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b64      	cmp	r3, #100	; 0x64
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e283      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fc:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	029b      	lsls	r3, r3, #10
 8002904:	4013      	ands	r3, r2
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0xf6>
 8002908:	e000      	b.n	800290c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2202      	movs	r2, #2
 8002912:	4013      	ands	r3, r2
 8002914:	d100      	bne.n	8002918 <HAL_RCC_OscConfig+0x124>
 8002916:	e099      	b.n	8002a4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002918:	4b81      	ldr	r3, [pc, #516]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2238      	movs	r2, #56	; 0x38
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2203      	movs	r2, #3
 8002928:	4013      	ands	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d102      	bne.n	8002938 <HAL_RCC_OscConfig+0x144>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d002      	beq.n	800293e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d135      	bne.n	80029aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293e:	4b78      	ldr	r3, [pc, #480]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4013      	ands	r3, r2
 8002948:	d005      	beq.n	8002956 <HAL_RCC_OscConfig+0x162>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e256      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b72      	ldr	r3, [pc, #456]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	4a74      	ldr	r2, [pc, #464]	; (8002b2c <HAL_RCC_OscConfig+0x338>)
 800295c:	4013      	ands	r3, r2
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	4b6e      	ldr	r3, [pc, #440]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002968:	430a      	orrs	r2, r1
 800296a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d112      	bne.n	8002998 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002972:	4b6b      	ldr	r3, [pc, #428]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6e      	ldr	r2, [pc, #440]	; (8002b30 <HAL_RCC_OscConfig+0x33c>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	4b67      	ldr	r3, [pc, #412]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002982:	430a      	orrs	r2, r1
 8002984:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002986:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0adb      	lsrs	r3, r3, #11
 800298c:	2207      	movs	r2, #7
 800298e:	4013      	ands	r3, r2
 8002990:	4a68      	ldr	r2, [pc, #416]	; (8002b34 <HAL_RCC_OscConfig+0x340>)
 8002992:	40da      	lsrs	r2, r3
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_OscConfig+0x344>)
 8002996:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002998:	4b68      	ldr	r3, [pc, #416]	; (8002b3c <HAL_RCC_OscConfig+0x348>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0018      	movs	r0, r3
 800299e:	f7fe fae9 	bl	8000f74 <HAL_InitTick>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d051      	beq.n	8002a4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e22c      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d030      	beq.n	8002a14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80029b2:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a5e      	ldr	r2, [pc, #376]	; (8002b30 <HAL_RCC_OscConfig+0x33c>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	4b57      	ldr	r3, [pc, #348]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80029c6:	4b56      	ldr	r3, [pc, #344]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b55      	ldr	r3, [pc, #340]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	0049      	lsls	r1, r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb2a 	bl	800102c <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe fb25 	bl	800102c <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e209      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029f0:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4013      	ands	r3, r2
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b48      	ldr	r3, [pc, #288]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_RCC_OscConfig+0x338>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	021a      	lsls	r2, r3, #8
 8002a0c:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e01b      	b.n	8002a4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002a14:	4b42      	ldr	r3, [pc, #264]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a1a:	4949      	ldr	r1, [pc, #292]	; (8002b40 <HAL_RCC_OscConfig+0x34c>)
 8002a1c:	400a      	ands	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fb04 	bl	800102c <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe faff 	bl	800102c <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e1e3      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a3c:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4013      	ands	r3, r2
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x236>
 8002a48:	e000      	b.n	8002a4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2208      	movs	r2, #8
 8002a52:	4013      	ands	r3, r2
 8002a54:	d047      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a56:	4b32      	ldr	r3, [pc, #200]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2238      	movs	r2, #56	; 0x38
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b18      	cmp	r3, #24
 8002a60:	d10a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002a62:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d03c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d138      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e1c5      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d019      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002a80:	4b27      	ldr	r3, [pc, #156]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a84:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe face 	bl	800102c <HAL_GetTick>
 8002a90:	0003      	movs	r3, r0
 8002a92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a96:	f7fe fac9 	bl	800102c <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e1ad      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa8:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aac:	2202      	movs	r2, #2
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d0f1      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2a2>
 8002ab2:	e018      	b.n	8002ae6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b1a      	ldr	r3, [pc, #104]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002ab6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	438a      	bics	r2, r1
 8002abe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fab4 	bl	800102c <HAL_GetTick>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aca:	f7fe faaf 	bl	800102c <HAL_GetTick>
 8002ace:	0002      	movs	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e193      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d1f1      	bne.n	8002aca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2204      	movs	r2, #4
 8002aec:	4013      	ands	r3, r2
 8002aee:	d100      	bne.n	8002af2 <HAL_RCC_OscConfig+0x2fe>
 8002af0:	e0c6      	b.n	8002c80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af2:	231f      	movs	r3, #31
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002afa:	4b09      	ldr	r3, [pc, #36]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2238      	movs	r2, #56	; 0x38
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d11e      	bne.n	8002b44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_RCC_OscConfig+0x32c>)
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d100      	bne.n	8002b12 <HAL_RCC_OscConfig+0x31e>
 8002b10:	e0b6      	b.n	8002c80 <HAL_RCC_OscConfig+0x48c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d000      	beq.n	8002b1c <HAL_RCC_OscConfig+0x328>
 8002b1a:	e0b1      	b.n	8002c80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e171      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
 8002b20:	40021000 	.word	0x40021000
 8002b24:	fffeffff 	.word	0xfffeffff
 8002b28:	fffbffff 	.word	0xfffbffff
 8002b2c:	ffff80ff 	.word	0xffff80ff
 8002b30:	ffffc7ff 	.word	0xffffc7ff
 8002b34:	00f42400 	.word	0x00f42400
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b44:	4bb1      	ldr	r3, [pc, #708]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002b46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	055b      	lsls	r3, r3, #21
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_OscConfig+0x360>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x362>
 8002b54:	2300      	movs	r3, #0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d011      	beq.n	8002b7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	4bac      	ldr	r3, [pc, #688]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b5e:	4bab      	ldr	r3, [pc, #684]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002b60:	2180      	movs	r1, #128	; 0x80
 8002b62:	0549      	lsls	r1, r1, #21
 8002b64:	430a      	orrs	r2, r1
 8002b66:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b68:	4ba8      	ldr	r3, [pc, #672]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	055b      	lsls	r3, r3, #21
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b7e:	4ba4      	ldr	r3, [pc, #656]	; (8002e10 <HAL_RCC_OscConfig+0x61c>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d11a      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b8a:	4ba1      	ldr	r3, [pc, #644]	; (8002e10 <HAL_RCC_OscConfig+0x61c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4ba0      	ldr	r3, [pc, #640]	; (8002e10 <HAL_RCC_OscConfig+0x61c>)
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0049      	lsls	r1, r1, #1
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002b98:	f7fe fa48 	bl	800102c <HAL_GetTick>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba2:	f7fe fa43 	bl	800102c <HAL_GetTick>
 8002ba6:	0002      	movs	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e127      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bb4:	4b96      	ldr	r3, [pc, #600]	; (8002e10 <HAL_RCC_OscConfig+0x61c>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d106      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3e2>
 8002bc8:	4b90      	ldr	r3, [pc, #576]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002bca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bcc:	4b8f      	ldr	r3, [pc, #572]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bd4:	e01c      	b.n	8002c10 <HAL_RCC_OscConfig+0x41c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x404>
 8002bde:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002be0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002be2:	4b8a      	ldr	r3, [pc, #552]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002be4:	2104      	movs	r1, #4
 8002be6:	430a      	orrs	r2, r1
 8002be8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002bec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bee:	4b87      	ldr	r3, [pc, #540]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0x41c>
 8002bf8:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002bfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bfc:	4b83      	ldr	r3, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	438a      	bics	r2, r1
 8002c02:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c04:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c08:	4b80      	ldr	r3, [pc, #512]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d014      	beq.n	8002c42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe fa08 	bl	800102c <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c20:	e009      	b.n	8002c36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7fe fa03 	bl	800102c <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	4a79      	ldr	r2, [pc, #484]	; (8002e14 <HAL_RCC_OscConfig+0x620>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e0e6      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c36:	4b75      	ldr	r3, [pc, #468]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x42e>
 8002c40:	e013      	b.n	8002c6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe f9f3 	bl	800102c <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c4a:	e009      	b.n	8002c60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7fe f9ee 	bl	800102c <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	4a6f      	ldr	r2, [pc, #444]	; (8002e14 <HAL_RCC_OscConfig+0x620>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e0d1      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c60:	4b6a      	ldr	r3, [pc, #424]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002c6a:	231f      	movs	r3, #31
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d105      	bne.n	8002c80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002c74:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c78:	4b64      	ldr	r3, [pc, #400]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002c7a:	4967      	ldr	r1, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x624>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d100      	bne.n	8002c8a <HAL_RCC_OscConfig+0x496>
 8002c88:	e0bb      	b.n	8002e02 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8a:	4b60      	ldr	r3, [pc, #384]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	2238      	movs	r2, #56	; 0x38
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b10      	cmp	r3, #16
 8002c94:	d100      	bne.n	8002c98 <HAL_RCC_OscConfig+0x4a4>
 8002c96:	e07b      	b.n	8002d90 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d156      	bne.n	8002d4e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca0:	4b5a      	ldr	r3, [pc, #360]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002ca6:	495d      	ldr	r1, [pc, #372]	; (8002e1c <HAL_RCC_OscConfig+0x628>)
 8002ca8:	400a      	ands	r2, r1
 8002caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe f9be 	bl	800102c <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7fe f9b9 	bl	800102c <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e09d      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	2380      	movs	r3, #128	; 0x80
 8002cce:	049b      	lsls	r3, r3, #18
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a51      	ldr	r2, [pc, #324]	; (8002e20 <HAL_RCC_OscConfig+0x62c>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1a      	ldr	r2, [r3, #32]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	021b      	lsls	r3, r3, #8
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	431a      	orrs	r2, r3
 8002d02:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	4b40      	ldr	r3, [pc, #256]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	0449      	lsls	r1, r1, #17
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d1c:	2180      	movs	r1, #128	; 0x80
 8002d1e:	0549      	lsls	r1, r1, #21
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe f982 	bl	800102c <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe f97d 	bl	800102c <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e061      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	2380      	movs	r3, #128	; 0x80
 8002d46:	049b      	lsls	r3, r3, #18
 8002d48:	4013      	ands	r3, r2
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x53a>
 8002d4c:	e059      	b.n	8002e02 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b2f      	ldr	r3, [pc, #188]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b2e      	ldr	r3, [pc, #184]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d54:	4931      	ldr	r1, [pc, #196]	; (8002e1c <HAL_RCC_OscConfig+0x628>)
 8002d56:	400a      	ands	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7fe f967 	bl	800102c <HAL_GetTick>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe f962 	bl	800102c <HAL_GetTick>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e046      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d76:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	2380      	movs	r3, #128	; 0x80
 8002d7c:	049b      	lsls	r3, r3, #18
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d1f0      	bne.n	8002d64 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d88:	4926      	ldr	r1, [pc, #152]	; (8002e24 <HAL_RCC_OscConfig+0x630>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]
 8002d8e:	e038      	b.n	8002e02 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e033      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002d9c:	4b1b      	ldr	r3, [pc, #108]	; (8002e0c <HAL_RCC_OscConfig+0x618>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2203      	movs	r2, #3
 8002da6:	401a      	ands	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d126      	bne.n	8002dfe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2270      	movs	r2, #112	; 0x70
 8002db4:	401a      	ands	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d11f      	bne.n	8002dfe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	23fe      	movs	r3, #254	; 0xfe
 8002dc2:	01db      	lsls	r3, r3, #7
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d116      	bne.n	8002dfe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	23f8      	movs	r3, #248	; 0xf8
 8002dd4:	039b      	lsls	r3, r3, #14
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d10e      	bne.n	8002dfe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	23e0      	movs	r3, #224	; 0xe0
 8002de4:	051b      	lsls	r3, r3, #20
 8002de6:	401a      	ands	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d106      	bne.n	8002dfe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	0f5b      	lsrs	r3, r3, #29
 8002df4:	075a      	lsls	r2, r3, #29
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b008      	add	sp, #32
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	40007000 	.word	0x40007000
 8002e14:	00001388 	.word	0x00001388
 8002e18:	efffffff 	.word	0xefffffff
 8002e1c:	feffffff 	.word	0xfeffffff
 8002e20:	11c1808c 	.word	0x11c1808c
 8002e24:	eefefffc 	.word	0xeefefffc

08002e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0e9      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e3c:	4b76      	ldr	r3, [pc, #472]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2207      	movs	r2, #7
 8002e42:	4013      	ands	r3, r2
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d91e      	bls.n	8002e88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e4a:	4b73      	ldr	r3, [pc, #460]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2207      	movs	r2, #7
 8002e50:	4393      	bics	r3, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	4b70      	ldr	r3, [pc, #448]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e5c:	f7fe f8e6 	bl	800102c <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e64:	e009      	b.n	8002e7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e66:	f7fe f8e1 	bl	800102c <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	4a6a      	ldr	r2, [pc, #424]	; (800301c <HAL_RCC_ClockConfig+0x1f4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0ca      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4013      	ands	r3, r2
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d1ee      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d015      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2204      	movs	r2, #4
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d006      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e9c:	4b60      	ldr	r3, [pc, #384]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002ea2:	21e0      	movs	r1, #224	; 0xe0
 8002ea4:	01c9      	lsls	r1, r1, #7
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eaa:	4b5d      	ldr	r3, [pc, #372]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4a5d      	ldr	r2, [pc, #372]	; (8003024 <HAL_RCC_ClockConfig+0x1fc>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d057      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	029b      	lsls	r3, r3, #10
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d12b      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e097      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d107      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee8:	4b4d      	ldr	r3, [pc, #308]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	049b      	lsls	r3, r3, #18
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d11f      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e08b      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f00:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d113      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e07f      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f18:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d108      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e074      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f26:	4b3e      	ldr	r3, [pc, #248]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e06d      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f34:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2207      	movs	r2, #7
 8002f3a:	4393      	bics	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f48:	f7fe f870 	bl	800102c <HAL_GetTick>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f50:	e009      	b.n	8002f66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f52:	f7fe f86b 	bl	800102c <HAL_GetTick>
 8002f56:	0002      	movs	r2, r0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	4a2f      	ldr	r2, [pc, #188]	; (800301c <HAL_RCC_ClockConfig+0x1f4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e054      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2238      	movs	r2, #56	; 0x38
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d1ec      	bne.n	8002f52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2207      	movs	r2, #7
 8002f7e:	4013      	ands	r3, r2
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d21e      	bcs.n	8002fc4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f86:	4b24      	ldr	r3, [pc, #144]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	4393      	bics	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f98:	f7fe f848 	bl	800102c <HAL_GetTick>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fa0:	e009      	b.n	8002fb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa2:	f7fe f843 	bl	800102c <HAL_GetTick>
 8002fa6:	0002      	movs	r2, r0
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	4a1b      	ldr	r2, [pc, #108]	; (800301c <HAL_RCC_ClockConfig+0x1f4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e02c      	b.n	8003010 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fb6:	4b18      	ldr	r3, [pc, #96]	; (8003018 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2207      	movs	r2, #7
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d1ee      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <HAL_RCC_ClockConfig+0x200>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fe2:	f000 f829 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8002fe6:	0001      	movs	r1, r0
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <HAL_RCC_ClockConfig+0x1f8>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	0a1b      	lsrs	r3, r3, #8
 8002fee:	220f      	movs	r2, #15
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	4b0e      	ldr	r3, [pc, #56]	; (800302c <HAL_RCC_ClockConfig+0x204>)
 8002ff4:	0092      	lsls	r2, r2, #2
 8002ff6:	58d3      	ldr	r3, [r2, r3]
 8002ff8:	221f      	movs	r2, #31
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	000a      	movs	r2, r1
 8002ffe:	40da      	lsrs	r2, r3
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_RCC_ClockConfig+0x208>)
 8003002:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003004:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCC_ClockConfig+0x20c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0018      	movs	r0, r3
 800300a:	f7fd ffb3 	bl	8000f74 <HAL_InitTick>
 800300e:	0003      	movs	r3, r0
}
 8003010:	0018      	movs	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	b004      	add	sp, #16
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40022000 	.word	0x40022000
 800301c:	00001388 	.word	0x00001388
 8003020:	40021000 	.word	0x40021000
 8003024:	fffff0ff 	.word	0xfffff0ff
 8003028:	ffff8fff 	.word	0xffff8fff
 800302c:	0800548c 	.word	0x0800548c
 8003030:	20000000 	.word	0x20000000
 8003034:	20000004 	.word	0x20000004

08003038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	4b3c      	ldr	r3, [pc, #240]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2238      	movs	r2, #56	; 0x38
 8003044:	4013      	ands	r3, r2
 8003046:	d10f      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0adb      	lsrs	r3, r3, #11
 800304e:	2207      	movs	r2, #7
 8003050:	4013      	ands	r3, r2
 8003052:	2201      	movs	r2, #1
 8003054:	409a      	lsls	r2, r3
 8003056:	0013      	movs	r3, r2
 8003058:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	4835      	ldr	r0, [pc, #212]	; (8003134 <HAL_RCC_GetSysClockFreq+0xfc>)
 800305e:	f7fd f851 	bl	8000104 <__udivsi3>
 8003062:	0003      	movs	r3, r0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	e05d      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003068:	4b31      	ldr	r3, [pc, #196]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2238      	movs	r2, #56	; 0x38
 800306e:	4013      	ands	r3, r2
 8003070:	2b08      	cmp	r3, #8
 8003072:	d102      	bne.n	800307a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003074:	4b30      	ldr	r3, [pc, #192]	; (8003138 <HAL_RCC_GetSysClockFreq+0x100>)
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	e054      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800307a:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2238      	movs	r2, #56	; 0x38
 8003080:	4013      	ands	r3, r2
 8003082:	2b10      	cmp	r3, #16
 8003084:	d138      	bne.n	80030f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2203      	movs	r2, #3
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003090:	4b27      	ldr	r3, [pc, #156]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	2207      	movs	r2, #7
 8003098:	4013      	ands	r3, r2
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d10d      	bne.n	80030c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	4824      	ldr	r0, [pc, #144]	; (8003138 <HAL_RCC_GetSysClockFreq+0x100>)
 80030a8:	f7fd f82c 	bl	8000104 <__udivsi3>
 80030ac:	0003      	movs	r3, r0
 80030ae:	0019      	movs	r1, r3
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	0a1b      	lsrs	r3, r3, #8
 80030b6:	227f      	movs	r2, #127	; 0x7f
 80030b8:	4013      	ands	r3, r2
 80030ba:	434b      	muls	r3, r1
 80030bc:	617b      	str	r3, [r7, #20]
        break;
 80030be:	e00d      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	481c      	ldr	r0, [pc, #112]	; (8003134 <HAL_RCC_GetSysClockFreq+0xfc>)
 80030c4:	f7fd f81e 	bl	8000104 <__udivsi3>
 80030c8:	0003      	movs	r3, r0
 80030ca:	0019      	movs	r1, r3
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	227f      	movs	r2, #127	; 0x7f
 80030d4:	4013      	ands	r3, r2
 80030d6:	434b      	muls	r3, r1
 80030d8:	617b      	str	r3, [r7, #20]
        break;
 80030da:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80030dc:	4b14      	ldr	r3, [pc, #80]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	0f5b      	lsrs	r3, r3, #29
 80030e2:	2207      	movs	r2, #7
 80030e4:	4013      	ands	r3, r2
 80030e6:	3301      	adds	r3, #1
 80030e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f7fd f809 	bl	8000104 <__udivsi3>
 80030f2:	0003      	movs	r3, r0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e015      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030f8:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2238      	movs	r2, #56	; 0x38
 80030fe:	4013      	ands	r3, r2
 8003100:	2b20      	cmp	r3, #32
 8003102:	d103      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	e00b      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800310c:	4b08      	ldr	r3, [pc, #32]	; (8003130 <HAL_RCC_GetSysClockFreq+0xf8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2238      	movs	r2, #56	; 0x38
 8003112:	4013      	ands	r3, r2
 8003114:	2b18      	cmp	r3, #24
 8003116:	d103      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003118:	23fa      	movs	r3, #250	; 0xfa
 800311a:	01db      	lsls	r3, r3, #7
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e001      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003124:	693b      	ldr	r3, [r7, #16]
}
 8003126:	0018      	movs	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	b006      	add	sp, #24
 800312c:	bd80      	pop	{r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	40021000 	.word	0x40021000
 8003134:	00f42400 	.word	0x00f42400
 8003138:	007a1200 	.word	0x007a1200

0800313c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003140:	4b02      	ldr	r3, [pc, #8]	; (800314c <HAL_RCC_GetHCLKFreq+0x10>)
 8003142:	681b      	ldr	r3, [r3, #0]
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	20000000 	.word	0x20000000

08003150 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003150:	b5b0      	push	{r4, r5, r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003154:	f7ff fff2 	bl	800313c <HAL_RCC_GetHCLKFreq>
 8003158:	0004      	movs	r4, r0
 800315a:	f7ff fb3f 	bl	80027dc <LL_RCC_GetAPB1Prescaler>
 800315e:	0003      	movs	r3, r0
 8003160:	0b1a      	lsrs	r2, r3, #12
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003164:	0092      	lsls	r2, r2, #2
 8003166:	58d3      	ldr	r3, [r2, r3]
 8003168:	221f      	movs	r2, #31
 800316a:	4013      	ands	r3, r2
 800316c:	40dc      	lsrs	r4, r3
 800316e:	0023      	movs	r3, r4
}
 8003170:	0018      	movs	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	bdb0      	pop	{r4, r5, r7, pc}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	080054cc 	.word	0x080054cc

0800317c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003184:	2313      	movs	r3, #19
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800318c:	2312      	movs	r3, #18
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	029b      	lsls	r3, r3, #10
 800319c:	4013      	ands	r3, r2
 800319e:	d100      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80031a0:	e0a3      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a2:	2011      	movs	r0, #17
 80031a4:	183b      	adds	r3, r7, r0
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031aa:	4bc3      	ldr	r3, [pc, #780]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	055b      	lsls	r3, r3, #21
 80031b2:	4013      	ands	r3, r2
 80031b4:	d110      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031b6:	4bc0      	ldr	r3, [pc, #768]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031ba:	4bbf      	ldr	r3, [pc, #764]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	0549      	lsls	r1, r1, #21
 80031c0:	430a      	orrs	r2, r1
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80031c4:	4bbc      	ldr	r3, [pc, #752]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80031c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c8:	2380      	movs	r3, #128	; 0x80
 80031ca:	055b      	lsls	r3, r3, #21
 80031cc:	4013      	ands	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d2:	183b      	adds	r3, r7, r0
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031d8:	4bb8      	ldr	r3, [pc, #736]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4bb7      	ldr	r3, [pc, #732]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80031de:	2180      	movs	r1, #128	; 0x80
 80031e0:	0049      	lsls	r1, r1, #1
 80031e2:	430a      	orrs	r2, r1
 80031e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031e6:	f7fd ff21 	bl	800102c <HAL_GetTick>
 80031ea:	0003      	movs	r3, r0
 80031ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031ee:	e00b      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f0:	f7fd ff1c 	bl	800102c <HAL_GetTick>
 80031f4:	0002      	movs	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d904      	bls.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80031fe:	2313      	movs	r3, #19
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	2203      	movs	r2, #3
 8003204:	701a      	strb	r2, [r3, #0]
        break;
 8003206:	e005      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003208:	4bac      	ldr	r3, [pc, #688]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4013      	ands	r3, r2
 8003212:	d0ed      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003214:	2313      	movs	r3, #19
 8003216:	18fb      	adds	r3, r7, r3
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d154      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800321e:	4ba6      	ldr	r3, [pc, #664]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003222:	23c0      	movs	r3, #192	; 0xc0
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4013      	ands	r3, r2
 8003228:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d019      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	429a      	cmp	r2, r3
 8003238:	d014      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800323a:	4b9f      	ldr	r3, [pc, #636]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800323c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323e:	4aa0      	ldr	r2, [pc, #640]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003240:	4013      	ands	r3, r2
 8003242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003244:	4b9c      	ldr	r3, [pc, #624]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003246:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003248:	4b9b      	ldr	r3, [pc, #620]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	0249      	lsls	r1, r1, #9
 800324e:	430a      	orrs	r2, r1
 8003250:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003252:	4b99      	ldr	r3, [pc, #612]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003254:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003256:	4b98      	ldr	r3, [pc, #608]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003258:	499a      	ldr	r1, [pc, #616]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800325a:	400a      	ands	r2, r1
 800325c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800325e:	4b96      	ldr	r3, [pc, #600]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2201      	movs	r2, #1
 8003268:	4013      	ands	r3, r2
 800326a:	d016      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fd fede 	bl	800102c <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003274:	e00c      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd fed9 	bl	800102c <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	4a91      	ldr	r2, [pc, #580]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d904      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003286:	2313      	movs	r3, #19
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	2203      	movs	r2, #3
 800328c:	701a      	strb	r2, [r3, #0]
            break;
 800328e:	e004      	b.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003290:	4b89      	ldr	r3, [pc, #548]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2202      	movs	r2, #2
 8003296:	4013      	ands	r3, r2
 8003298:	d0ed      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800329a:	2313      	movs	r3, #19
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10a      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a4:	4b84      	ldr	r3, [pc, #528]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	4a85      	ldr	r2, [pc, #532]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80032aa:	4013      	ands	r3, r2
 80032ac:	0019      	movs	r1, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b2:	4b81      	ldr	r3, [pc, #516]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032b4:	430a      	orrs	r2, r1
 80032b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80032b8:	e00c      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032ba:	2312      	movs	r3, #18
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	2213      	movs	r2, #19
 80032c0:	18ba      	adds	r2, r7, r2
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	e005      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c8:	2312      	movs	r3, #18
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	2213      	movs	r2, #19
 80032ce:	18ba      	adds	r2, r7, r2
 80032d0:	7812      	ldrb	r2, [r2, #0]
 80032d2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032d4:	2311      	movs	r3, #17
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d105      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032de:	4b76      	ldr	r3, [pc, #472]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e2:	4b75      	ldr	r3, [pc, #468]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032e4:	4979      	ldr	r1, [pc, #484]	; (80034cc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80032e6:	400a      	ands	r2, r1
 80032e8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2201      	movs	r2, #1
 80032f0:	4013      	ands	r3, r2
 80032f2:	d009      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032f4:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80032f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f8:	2203      	movs	r2, #3
 80032fa:	4393      	bics	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	4b6d      	ldr	r3, [pc, #436]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003304:	430a      	orrs	r2, r1
 8003306:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2202      	movs	r2, #2
 800330e:	4013      	ands	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003312:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	220c      	movs	r2, #12
 8003318:	4393      	bics	r3, r2
 800331a:	0019      	movs	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003322:	430a      	orrs	r2, r1
 8003324:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2210      	movs	r2, #16
 800332c:	4013      	ands	r3, r2
 800332e:	d009      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003330:	4b61      	ldr	r3, [pc, #388]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	4a66      	ldr	r2, [pc, #408]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003336:	4013      	ands	r3, r2
 8003338:	0019      	movs	r1, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68da      	ldr	r2, [r3, #12]
 800333e:	4b5e      	ldr	r3, [pc, #376]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003340:	430a      	orrs	r2, r1
 8003342:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4013      	ands	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003350:	4b59      	ldr	r3, [pc, #356]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	4a5f      	ldr	r2, [pc, #380]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003356:	4013      	ands	r3, r2
 8003358:	0019      	movs	r1, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	4b56      	ldr	r3, [pc, #344]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003360:	430a      	orrs	r2, r1
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4013      	ands	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003370:	4b51      	ldr	r3, [pc, #324]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003374:	4a58      	ldr	r2, [pc, #352]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003376:	4013      	ands	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	4b4e      	ldr	r3, [pc, #312]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003380:	430a      	orrs	r2, r1
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2220      	movs	r2, #32
 800338a:	4013      	ands	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800338e:	4b4a      	ldr	r3, [pc, #296]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003392:	4a52      	ldr	r2, [pc, #328]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800339e:	430a      	orrs	r2, r1
 80033a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	2380      	movs	r3, #128	; 0x80
 80033a8:	01db      	lsls	r3, r3, #7
 80033aa:	4013      	ands	r3, r2
 80033ac:	d015      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033ae:	4b42      	ldr	r3, [pc, #264]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	0899      	lsrs	r1, r3, #2
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1a      	ldr	r2, [r3, #32]
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	2380      	movs	r3, #128	; 0x80
 80033c6:	05db      	lsls	r3, r3, #23
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d106      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033cc:	4b3a      	ldr	r3, [pc, #232]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4b39      	ldr	r3, [pc, #228]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	0249      	lsls	r1, r1, #9
 80033d6:	430a      	orrs	r2, r1
 80033d8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	031b      	lsls	r3, r3, #12
 80033e2:	4013      	ands	r3, r2
 80033e4:	d009      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033e6:	4b34      	ldr	r3, [pc, #208]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	4393      	bics	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033f4:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	039b      	lsls	r3, r3, #14
 8003402:	4013      	ands	r3, r2
 8003404:	d016      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	4a35      	ldr	r2, [pc, #212]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800340c:	4013      	ands	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003414:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003416:	430a      	orrs	r2, r1
 8003418:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	03db      	lsls	r3, r3, #15
 8003422:	429a      	cmp	r2, r3
 8003424:	d106      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003426:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	0449      	lsls	r1, r1, #17
 8003430:	430a      	orrs	r2, r1
 8003432:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	03db      	lsls	r3, r3, #15
 800343c:	4013      	ands	r3, r2
 800343e:	d016      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003440:	4b1d      	ldr	r3, [pc, #116]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003444:	4a27      	ldr	r2, [pc, #156]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003446:	4013      	ands	r3, r2
 8003448:	0019      	movs	r1, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003450:	430a      	orrs	r2, r1
 8003452:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	045b      	lsls	r3, r3, #17
 800345c:	429a      	cmp	r2, r3
 800345e:	d106      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003460:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003466:	2180      	movs	r1, #128	; 0x80
 8003468:	0449      	lsls	r1, r1, #17
 800346a:	430a      	orrs	r2, r1
 800346c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	4013      	ands	r3, r2
 8003478:	d016      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800347a:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	4a1a      	ldr	r2, [pc, #104]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003480:	4013      	ands	r3, r2
 8003482:	0019      	movs	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800348a:	430a      	orrs	r2, r1
 800348c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	2380      	movs	r3, #128	; 0x80
 8003494:	01db      	lsls	r3, r3, #7
 8003496:	429a      	cmp	r2, r3
 8003498:	d106      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	0249      	lsls	r1, r1, #9
 80034a4:	430a      	orrs	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80034a8:	2312      	movs	r3, #18
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	781b      	ldrb	r3, [r3, #0]
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b006      	add	sp, #24
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40007000 	.word	0x40007000
 80034c0:	fffffcff 	.word	0xfffffcff
 80034c4:	fffeffff 	.word	0xfffeffff
 80034c8:	00001388 	.word	0x00001388
 80034cc:	efffffff 	.word	0xefffffff
 80034d0:	fffff3ff 	.word	0xfffff3ff
 80034d4:	fff3ffff 	.word	0xfff3ffff
 80034d8:	ffcfffff 	.word	0xffcfffff
 80034dc:	ffffcfff 	.word	0xffffcfff
 80034e0:	ffbfffff 	.word	0xffbfffff
 80034e4:	feffffff 	.word	0xfeffffff
 80034e8:	ffff3fff 	.word	0xffff3fff

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e04a      	b.n	8003594 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	223d      	movs	r2, #61	; 0x3d
 8003502:	5c9b      	ldrb	r3, [r3, r2]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	223c      	movs	r2, #60	; 0x3c
 800350e:	2100      	movs	r1, #0
 8003510:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	0018      	movs	r0, r3
 8003516:	f7fd fba9 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	223d      	movs	r2, #61	; 0x3d
 800351e:	2102      	movs	r1, #2
 8003520:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	0019      	movs	r1, r3
 800352c:	0010      	movs	r0, r2
 800352e:	f000 f90b 	bl	8003748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2248      	movs	r2, #72	; 0x48
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	223e      	movs	r2, #62	; 0x3e
 800353e:	2101      	movs	r1, #1
 8003540:	5499      	strb	r1, [r3, r2]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223f      	movs	r2, #63	; 0x3f
 8003546:	2101      	movs	r1, #1
 8003548:	5499      	strb	r1, [r3, r2]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2240      	movs	r2, #64	; 0x40
 800354e:	2101      	movs	r1, #1
 8003550:	5499      	strb	r1, [r3, r2]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2241      	movs	r2, #65	; 0x41
 8003556:	2101      	movs	r1, #1
 8003558:	5499      	strb	r1, [r3, r2]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2242      	movs	r2, #66	; 0x42
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2243      	movs	r2, #67	; 0x43
 8003566:	2101      	movs	r1, #1
 8003568:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2244      	movs	r2, #68	; 0x44
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2245      	movs	r2, #69	; 0x45
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2246      	movs	r2, #70	; 0x46
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2247      	movs	r2, #71	; 0x47
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	223d      	movs	r2, #61	; 0x3d
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a6:	230f      	movs	r3, #15
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	223c      	movs	r2, #60	; 0x3c
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_TIM_ConfigClockSource+0x20>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e0bc      	b.n	8003736 <HAL_TIM_ConfigClockSource+0x19a>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	223c      	movs	r2, #60	; 0x3c
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	223d      	movs	r2, #61	; 0x3d
 80035c8:	2102      	movs	r1, #2
 80035ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4a5a      	ldr	r2, [pc, #360]	; (8003740 <HAL_TIM_ConfigClockSource+0x1a4>)
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4a59      	ldr	r2, [pc, #356]	; (8003744 <HAL_TIM_ConfigClockSource+0x1a8>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2280      	movs	r2, #128	; 0x80
 80035f2:	0192      	lsls	r2, r2, #6
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d040      	beq.n	800367a <HAL_TIM_ConfigClockSource+0xde>
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	0192      	lsls	r2, r2, #6
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d900      	bls.n	8003602 <HAL_TIM_ConfigClockSource+0x66>
 8003600:	e088      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
 8003602:	2280      	movs	r2, #128	; 0x80
 8003604:	0152      	lsls	r2, r2, #5
 8003606:	4293      	cmp	r3, r2
 8003608:	d100      	bne.n	800360c <HAL_TIM_ConfigClockSource+0x70>
 800360a:	e088      	b.n	800371e <HAL_TIM_ConfigClockSource+0x182>
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	0152      	lsls	r2, r2, #5
 8003610:	4293      	cmp	r3, r2
 8003612:	d900      	bls.n	8003616 <HAL_TIM_ConfigClockSource+0x7a>
 8003614:	e07e      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
 8003616:	2b70      	cmp	r3, #112	; 0x70
 8003618:	d018      	beq.n	800364c <HAL_TIM_ConfigClockSource+0xb0>
 800361a:	d900      	bls.n	800361e <HAL_TIM_ConfigClockSource+0x82>
 800361c:	e07a      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
 800361e:	2b60      	cmp	r3, #96	; 0x60
 8003620:	d04f      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x126>
 8003622:	d900      	bls.n	8003626 <HAL_TIM_ConfigClockSource+0x8a>
 8003624:	e076      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
 8003626:	2b50      	cmp	r3, #80	; 0x50
 8003628:	d03b      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x106>
 800362a:	d900      	bls.n	800362e <HAL_TIM_ConfigClockSource+0x92>
 800362c:	e072      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d057      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x146>
 8003632:	d900      	bls.n	8003636 <HAL_TIM_ConfigClockSource+0x9a>
 8003634:	e06e      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
 8003636:	2b30      	cmp	r3, #48	; 0x30
 8003638:	d063      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x166>
 800363a:	d86b      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d060      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x166>
 8003640:	d868      	bhi.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d05d      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x166>
 8003646:	2b10      	cmp	r3, #16
 8003648:	d05b      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0x166>
 800364a:	e063      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	6899      	ldr	r1, [r3, #8]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f000 f970 	bl	8003940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2277      	movs	r2, #119	; 0x77
 800366c:	4313      	orrs	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	609a      	str	r2, [r3, #8]
      break;
 8003678:	e052      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	6899      	ldr	r1, [r3, #8]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f000 f959 	bl	8003940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2180      	movs	r1, #128	; 0x80
 800369a:	01c9      	lsls	r1, r1, #7
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
      break;
 80036a0:	e03e      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	001a      	movs	r2, r3
 80036b0:	f000 f8ca 	bl	8003848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2150      	movs	r1, #80	; 0x50
 80036ba:	0018      	movs	r0, r3
 80036bc:	f000 f924 	bl	8003908 <TIM_ITRx_SetConfig>
      break;
 80036c0:	e02e      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	001a      	movs	r2, r3
 80036d0:	f000 f8e8 	bl	80038a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2160      	movs	r1, #96	; 0x60
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f914 	bl	8003908 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e01e      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	001a      	movs	r2, r3
 80036f0:	f000 f8aa 	bl	8003848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2140      	movs	r1, #64	; 0x40
 80036fa:	0018      	movs	r0, r3
 80036fc:	f000 f904 	bl	8003908 <TIM_ITRx_SetConfig>
      break;
 8003700:	e00e      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	0019      	movs	r1, r3
 800370c:	0010      	movs	r0, r2
 800370e:	f000 f8fb 	bl	8003908 <TIM_ITRx_SetConfig>
      break;
 8003712:	e005      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003714:	230f      	movs	r3, #15
 8003716:	18fb      	adds	r3, r7, r3
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
      break;
 800371c:	e000      	b.n	8003720 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800371e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	223d      	movs	r2, #61	; 0x3d
 8003724:	2101      	movs	r1, #1
 8003726:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	223c      	movs	r2, #60	; 0x3c
 800372c:	2100      	movs	r1, #0
 800372e:	5499      	strb	r1, [r3, r2]

  return status;
 8003730:	230f      	movs	r3, #15
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	781b      	ldrb	r3, [r3, #0]
}
 8003736:	0018      	movs	r0, r3
 8003738:	46bd      	mov	sp, r7
 800373a:	b004      	add	sp, #16
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			; (mov r8, r8)
 8003740:	ffceff88 	.word	0xffceff88
 8003744:	ffff00ff 	.word	0xffff00ff

08003748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a34      	ldr	r2, [pc, #208]	; (800382c <TIM_Base_SetConfig+0xe4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d008      	beq.n	8003772 <TIM_Base_SetConfig+0x2a>
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	05db      	lsls	r3, r3, #23
 8003766:	429a      	cmp	r2, r3
 8003768:	d003      	beq.n	8003772 <TIM_Base_SetConfig+0x2a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a30      	ldr	r2, [pc, #192]	; (8003830 <TIM_Base_SetConfig+0xe8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d108      	bne.n	8003784 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2270      	movs	r2, #112	; 0x70
 8003776:	4393      	bics	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a29      	ldr	r2, [pc, #164]	; (800382c <TIM_Base_SetConfig+0xe4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d018      	beq.n	80037be <TIM_Base_SetConfig+0x76>
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	05db      	lsls	r3, r3, #23
 8003792:	429a      	cmp	r2, r3
 8003794:	d013      	beq.n	80037be <TIM_Base_SetConfig+0x76>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a25      	ldr	r2, [pc, #148]	; (8003830 <TIM_Base_SetConfig+0xe8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d00f      	beq.n	80037be <TIM_Base_SetConfig+0x76>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a24      	ldr	r2, [pc, #144]	; (8003834 <TIM_Base_SetConfig+0xec>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00b      	beq.n	80037be <TIM_Base_SetConfig+0x76>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a23      	ldr	r2, [pc, #140]	; (8003838 <TIM_Base_SetConfig+0xf0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d007      	beq.n	80037be <TIM_Base_SetConfig+0x76>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a22      	ldr	r2, [pc, #136]	; (800383c <TIM_Base_SetConfig+0xf4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d003      	beq.n	80037be <TIM_Base_SetConfig+0x76>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a21      	ldr	r2, [pc, #132]	; (8003840 <TIM_Base_SetConfig+0xf8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d108      	bne.n	80037d0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a20      	ldr	r2, [pc, #128]	; (8003844 <TIM_Base_SetConfig+0xfc>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2280      	movs	r2, #128	; 0x80
 80037d4:	4393      	bics	r3, r2
 80037d6:	001a      	movs	r2, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a0c      	ldr	r2, [pc, #48]	; (800382c <TIM_Base_SetConfig+0xe4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00b      	beq.n	8003816 <TIM_Base_SetConfig+0xce>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a0d      	ldr	r2, [pc, #52]	; (8003838 <TIM_Base_SetConfig+0xf0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d007      	beq.n	8003816 <TIM_Base_SetConfig+0xce>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0c      	ldr	r2, [pc, #48]	; (800383c <TIM_Base_SetConfig+0xf4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <TIM_Base_SetConfig+0xce>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <TIM_Base_SetConfig+0xf8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d103      	bne.n	800381e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	615a      	str	r2, [r3, #20]
}
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b004      	add	sp, #16
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40002000 	.word	0x40002000
 8003838:	40014000 	.word	0x40014000
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800
 8003844:	fffffcff 	.word	0xfffffcff

08003848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	2201      	movs	r2, #1
 8003860:	4393      	bics	r3, r2
 8003862:	001a      	movs	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	22f0      	movs	r2, #240	; 0xf0
 8003872:	4393      	bics	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	220a      	movs	r2, #10
 8003884:	4393      	bics	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b006      	add	sp, #24
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	2210      	movs	r2, #16
 80038b6:	4393      	bics	r3, r2
 80038b8:	001a      	movs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <TIM_TI2_ConfigInputStage+0x60>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	031b      	lsls	r3, r3, #12
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	22a0      	movs	r2, #160	; 0xa0
 80038e0:	4393      	bics	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b006      	add	sp, #24
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	ffff0fff 	.word	0xffff0fff

08003908 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a08      	ldr	r2, [pc, #32]	; (800393c <TIM_ITRx_SetConfig+0x34>)
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	2207      	movs	r2, #7
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	609a      	str	r2, [r3, #8]
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b004      	add	sp, #16
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	ffcfff8f 	.word	0xffcfff8f

08003940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	4a09      	ldr	r2, [pc, #36]	; (800397c <TIM_ETR_SetConfig+0x3c>)
 8003958:	4013      	ands	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	021a      	lsls	r2, r3, #8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	431a      	orrs	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4313      	orrs	r3, r2
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4313      	orrs	r3, r2
 800396c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	609a      	str	r2, [r3, #8]
}
 8003974:	46c0      	nop			; (mov r8, r8)
 8003976:	46bd      	mov	sp, r7
 8003978:	b006      	add	sp, #24
 800397a:	bd80      	pop	{r7, pc}
 800397c:	ffff00ff 	.word	0xffff00ff

08003980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	223c      	movs	r2, #60	; 0x3c
 800398e:	5c9b      	ldrb	r3, [r3, r2]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003994:	2302      	movs	r3, #2
 8003996:	e055      	b.n	8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	223c      	movs	r2, #60	; 0x3c
 800399c:	2101      	movs	r1, #1
 800399e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	223d      	movs	r2, #61	; 0x3d
 80039a4:	2102      	movs	r1, #2
 80039a6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2270      	movs	r2, #112	; 0x70
 80039d8:	4393      	bics	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00f      	beq.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	05db      	lsls	r3, r3, #23
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d009      	beq.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d004      	beq.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a11      	ldr	r2, [pc, #68]	; (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10c      	bne.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	4393      	bics	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	223d      	movs	r2, #61	; 0x3d
 8003a36:	2101      	movs	r1, #1
 8003a38:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	223c      	movs	r2, #60	; 0x3c
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	ff0fffff 	.word	0xff0fffff
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40014000 	.word	0x40014000

08003a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e046      	b.n	8003afc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2288      	movs	r2, #136	; 0x88
 8003a72:	589b      	ldr	r3, [r3, r2]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2284      	movs	r2, #132	; 0x84
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	0018      	movs	r0, r3
 8003a84:	f7fd f90e 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2288      	movs	r2, #136	; 0x88
 8003a8c:	2124      	movs	r1, #36	; 0x24
 8003a8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	438a      	bics	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 fc74 	bl	8004390 <UART_SetConfig>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e024      	b.n	8003afc <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0018      	movs	r0, r3
 8003abe:	f000 ff25 	bl	800490c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	490d      	ldr	r1, [pc, #52]	; (8003b04 <HAL_UART_Init+0xa8>)
 8003ace:	400a      	ands	r2, r1
 8003ad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	212a      	movs	r1, #42	; 0x2a
 8003ade:	438a      	bics	r2, r1
 8003ae0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2101      	movs	r1, #1
 8003aee:	430a      	orrs	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 ffbd 	bl	8004a74 <UART_CheckIdleState>
 8003afa:	0003      	movs	r3, r0
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	ffffb7ff 	.word	0xffffb7ff

08003b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	1dbb      	adds	r3, r7, #6
 8003b16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2288      	movs	r2, #136	; 0x88
 8003b1c:	589b      	ldr	r3, [r3, r2]
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d000      	beq.n	8003b24 <HAL_UART_Transmit+0x1c>
 8003b22:	e088      	b.n	8003c36 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <HAL_UART_Transmit+0x2a>
 8003b2a:	1dbb      	adds	r3, r7, #6
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e080      	b.n	8003c38 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	015b      	lsls	r3, r3, #5
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d109      	bne.n	8003b56 <HAL_UART_Transmit+0x4e>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d105      	bne.n	8003b56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d001      	beq.n	8003b56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e070      	b.n	8003c38 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2290      	movs	r2, #144	; 0x90
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2288      	movs	r2, #136	; 0x88
 8003b62:	2121      	movs	r1, #33	; 0x21
 8003b64:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b66:	f7fd fa61 	bl	800102c <HAL_GetTick>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1dba      	adds	r2, r7, #6
 8003b72:	2154      	movs	r1, #84	; 0x54
 8003b74:	8812      	ldrh	r2, [r2, #0]
 8003b76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1dba      	adds	r2, r7, #6
 8003b7c:	2156      	movs	r1, #86	; 0x56
 8003b7e:	8812      	ldrh	r2, [r2, #0]
 8003b80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	015b      	lsls	r3, r3, #5
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d108      	bne.n	8003ba0 <HAL_UART_Transmit+0x98>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d104      	bne.n	8003ba0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e003      	b.n	8003ba8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ba8:	e02c      	b.n	8003c04 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	0013      	movs	r3, r2
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	f000 ffaa 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e039      	b.n	8003c38 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10b      	bne.n	8003be2 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	001a      	movs	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	05d2      	lsls	r2, r2, #23
 8003bd6:	0dd2      	lsrs	r2, r2, #23
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	3302      	adds	r3, #2
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	e007      	b.n	8003bf2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	781a      	ldrb	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2256      	movs	r2, #86	; 0x56
 8003bf6:	5a9b      	ldrh	r3, [r3, r2]
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b299      	uxth	r1, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2256      	movs	r2, #86	; 0x56
 8003c02:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2256      	movs	r2, #86	; 0x56
 8003c08:	5a9b      	ldrh	r3, [r3, r2]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1cc      	bne.n	8003baa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	0013      	movs	r3, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2140      	movs	r1, #64	; 0x40
 8003c1e:	f000 ff77 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e006      	b.n	8003c38 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2288      	movs	r2, #136	; 0x88
 8003c2e:	2120      	movs	r1, #32
 8003c30:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	e000      	b.n	8003c38 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8003c36:	2302      	movs	r3, #2
  }
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b008      	add	sp, #32
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b088      	sub	sp, #32
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	1dbb      	adds	r3, r7, #6
 8003c4c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	228c      	movs	r2, #140	; 0x8c
 8003c52:	589b      	ldr	r3, [r3, r2]
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d14a      	bne.n	8003cee <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_UART_Receive_DMA+0x26>
 8003c5e:	1dbb      	adds	r3, r7, #6
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e042      	b.n	8003cf0 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	015b      	lsls	r3, r3, #5
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d109      	bne.n	8003c8a <HAL_UART_Receive_DMA+0x4a>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d105      	bne.n	8003c8a <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2201      	movs	r2, #1
 8003c82:	4013      	ands	r3, r2
 8003c84:	d001      	beq.n	8003c8a <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e032      	b.n	8003cf0 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a18      	ldr	r2, [pc, #96]	; (8003cf8 <HAL_UART_Receive_DMA+0xb8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d020      	beq.n	8003cdc <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	041b      	lsls	r3, r3, #16
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d019      	beq.n	8003cdc <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cac:	613b      	str	r3, [r7, #16]
  return(result);
 8003cae:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	04c9      	lsls	r1, r1, #19
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003cdc:	1dbb      	adds	r3, r7, #6
 8003cde:	881a      	ldrh	r2, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 ffdb 	bl	8004ca0 <UART_Start_Receive_DMA>
 8003cea:	0003      	movs	r3, r0
 8003cec:	e000      	b.n	8003cf0 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
  }
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b008      	add	sp, #32
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40008000 	.word	0x40008000

08003cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cfc:	b5b0      	push	{r4, r5, r7, lr}
 8003cfe:	b0aa      	sub	sp, #168	; 0xa8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	22a4      	movs	r2, #164	; 0xa4
 8003d0c:	18b9      	adds	r1, r7, r2
 8003d0e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	20a0      	movs	r0, #160	; 0xa0
 8003d18:	1839      	adds	r1, r7, r0
 8003d1a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	249c      	movs	r4, #156	; 0x9c
 8003d24:	1939      	adds	r1, r7, r4
 8003d26:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003d28:	0011      	movs	r1, r2
 8003d2a:	18bb      	adds	r3, r7, r2
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4aa2      	ldr	r2, [pc, #648]	; (8003fb8 <HAL_UART_IRQHandler+0x2bc>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	2298      	movs	r2, #152	; 0x98
 8003d34:	18bd      	adds	r5, r7, r2
 8003d36:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003d38:	18bb      	adds	r3, r7, r2
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d11a      	bne.n	8003d76 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d40:	187b      	adds	r3, r7, r1
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2220      	movs	r2, #32
 8003d46:	4013      	ands	r3, r2
 8003d48:	d015      	beq.n	8003d76 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d4a:	183b      	adds	r3, r7, r0
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	4013      	ands	r3, r2
 8003d52:	d105      	bne.n	8003d60 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d54:	193b      	adds	r3, r7, r4
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	2380      	movs	r3, #128	; 0x80
 8003d5a:	055b      	lsls	r3, r3, #21
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d00a      	beq.n	8003d76 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d100      	bne.n	8003d6a <HAL_UART_IRQHandler+0x6e>
 8003d68:	e2dc      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	0010      	movs	r0, r2
 8003d72:	4798      	blx	r3
      }
      return;
 8003d74:	e2d6      	b.n	8004324 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d76:	2398      	movs	r3, #152	; 0x98
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d100      	bne.n	8003d82 <HAL_UART_IRQHandler+0x86>
 8003d80:	e122      	b.n	8003fc8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003d82:	239c      	movs	r3, #156	; 0x9c
 8003d84:	18fb      	adds	r3, r7, r3
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a8c      	ldr	r2, [pc, #560]	; (8003fbc <HAL_UART_IRQHandler+0x2c0>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d106      	bne.n	8003d9c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003d8e:	23a0      	movs	r3, #160	; 0xa0
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a8a      	ldr	r2, [pc, #552]	; (8003fc0 <HAL_UART_IRQHandler+0x2c4>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	d100      	bne.n	8003d9c <HAL_UART_IRQHandler+0xa0>
 8003d9a:	e115      	b.n	8003fc8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d9c:	23a4      	movs	r3, #164	; 0xa4
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d012      	beq.n	8003dce <HAL_UART_IRQHandler+0xd2>
 8003da8:	23a0      	movs	r3, #160	; 0xa0
 8003daa:	18fb      	adds	r3, r7, r3
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	2380      	movs	r3, #128	; 0x80
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4013      	ands	r3, r2
 8003db4:	d00b      	beq.n	8003dce <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2290      	movs	r2, #144	; 0x90
 8003dc2:	589b      	ldr	r3, [r3, r2]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2190      	movs	r1, #144	; 0x90
 8003dcc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dce:	23a4      	movs	r3, #164	; 0xa4
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d011      	beq.n	8003dfe <HAL_UART_IRQHandler+0x102>
 8003dda:	239c      	movs	r3, #156	; 0x9c
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2201      	movs	r2, #1
 8003de2:	4013      	ands	r3, r2
 8003de4:	d00b      	beq.n	8003dfe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2202      	movs	r2, #2
 8003dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2290      	movs	r2, #144	; 0x90
 8003df2:	589b      	ldr	r3, [r3, r2]
 8003df4:	2204      	movs	r2, #4
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2190      	movs	r1, #144	; 0x90
 8003dfc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003dfe:	23a4      	movs	r3, #164	; 0xa4
 8003e00:	18fb      	adds	r3, r7, r3
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2204      	movs	r2, #4
 8003e06:	4013      	ands	r3, r2
 8003e08:	d011      	beq.n	8003e2e <HAL_UART_IRQHandler+0x132>
 8003e0a:	239c      	movs	r3, #156	; 0x9c
 8003e0c:	18fb      	adds	r3, r7, r3
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2201      	movs	r2, #1
 8003e12:	4013      	ands	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2204      	movs	r2, #4
 8003e1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2290      	movs	r2, #144	; 0x90
 8003e22:	589b      	ldr	r3, [r3, r2]
 8003e24:	2202      	movs	r2, #2
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2190      	movs	r1, #144	; 0x90
 8003e2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003e2e:	23a4      	movs	r3, #164	; 0xa4
 8003e30:	18fb      	adds	r3, r7, r3
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2208      	movs	r2, #8
 8003e36:	4013      	ands	r3, r2
 8003e38:	d017      	beq.n	8003e6a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e3a:	23a0      	movs	r3, #160	; 0xa0
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2220      	movs	r2, #32
 8003e42:	4013      	ands	r3, r2
 8003e44:	d105      	bne.n	8003e52 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003e46:	239c      	movs	r3, #156	; 0x9c
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5b      	ldr	r2, [pc, #364]	; (8003fbc <HAL_UART_IRQHandler+0x2c0>)
 8003e4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2208      	movs	r2, #8
 8003e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2290      	movs	r2, #144	; 0x90
 8003e5e:	589b      	ldr	r3, [r3, r2]
 8003e60:	2208      	movs	r2, #8
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2190      	movs	r1, #144	; 0x90
 8003e68:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003e6a:	23a4      	movs	r3, #164	; 0xa4
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	4013      	ands	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x1a4>
 8003e78:	23a0      	movs	r3, #160	; 0xa0
 8003e7a:	18fb      	adds	r3, r7, r3
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	04db      	lsls	r3, r3, #19
 8003e82:	4013      	ands	r3, r2
 8003e84:	d00c      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	0112      	lsls	r2, r2, #4
 8003e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2290      	movs	r2, #144	; 0x90
 8003e94:	589b      	ldr	r3, [r3, r2]
 8003e96:	2220      	movs	r2, #32
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2190      	movs	r1, #144	; 0x90
 8003e9e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2290      	movs	r2, #144	; 0x90
 8003ea4:	589b      	ldr	r3, [r3, r2]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d100      	bne.n	8003eac <HAL_UART_IRQHandler+0x1b0>
 8003eaa:	e23d      	b.n	8004328 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003eac:	23a4      	movs	r3, #164	; 0xa4
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d015      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003eb8:	23a0      	movs	r3, #160	; 0xa0
 8003eba:	18fb      	adds	r3, r7, r3
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d106      	bne.n	8003ed2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ec4:	239c      	movs	r3, #156	; 0x9c
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	055b      	lsls	r3, r3, #21
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d008      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d004      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	0010      	movs	r0, r2
 8003ee2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2290      	movs	r2, #144	; 0x90
 8003ee8:	589b      	ldr	r3, [r3, r2]
 8003eea:	2194      	movs	r1, #148	; 0x94
 8003eec:	187a      	adds	r2, r7, r1
 8003eee:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2240      	movs	r2, #64	; 0x40
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d004      	beq.n	8003f08 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003efe:	187b      	adds	r3, r7, r1
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2228      	movs	r2, #40	; 0x28
 8003f04:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f06:	d04c      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f000 ffae 	bl	8004e6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b40      	cmp	r3, #64	; 0x40
 8003f1c:	d13c      	bne.n	8003f98 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f22:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	2090      	movs	r0, #144	; 0x90
 8003f28:	183a      	adds	r2, r7, r0
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f32:	f383 8810 	msr	PRIMASK, r3
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2140      	movs	r1, #64	; 0x40
 8003f44:	438a      	bics	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	183b      	adds	r3, r7, r0
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f50:	f383 8810 	msr	PRIMASK, r3
}
 8003f54:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2280      	movs	r2, #128	; 0x80
 8003f5a:	589b      	ldr	r3, [r3, r2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d016      	beq.n	8003f8e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2280      	movs	r2, #128	; 0x80
 8003f64:	589b      	ldr	r3, [r3, r2]
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_UART_IRQHandler+0x2c8>)
 8003f68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	589b      	ldr	r3, [r3, r2]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7fe f8c5 	bl	8002100 <HAL_DMA_Abort_IT>
 8003f76:	1e03      	subs	r3, r0, #0
 8003f78:	d01c      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2280      	movs	r2, #128	; 0x80
 8003f7e:	589b      	ldr	r3, [r3, r2]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	5852      	ldr	r2, [r2, r1]
 8003f88:	0010      	movs	r0, r2
 8003f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	e012      	b.n	8003fb4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	0018      	movs	r0, r3
 8003f92:	f000 f9e9 	bl	8004368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f96:	e00d      	b.n	8003fb4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 f9e4 	bl	8004368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e008      	b.n	8003fb4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f9df 	bl	8004368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2290      	movs	r2, #144	; 0x90
 8003fae:	2100      	movs	r1, #0
 8003fb0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003fb2:	e1b9      	b.n	8004328 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	46c0      	nop			; (mov r8, r8)
    return;
 8003fb6:	e1b7      	b.n	8004328 <HAL_UART_IRQHandler+0x62c>
 8003fb8:	0000080f 	.word	0x0000080f
 8003fbc:	10000001 	.word	0x10000001
 8003fc0:	04000120 	.word	0x04000120
 8003fc4:	08005131 	.word	0x08005131

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d000      	beq.n	8003fd2 <HAL_UART_IRQHandler+0x2d6>
 8003fd0:	e13e      	b.n	8004250 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003fd2:	23a4      	movs	r3, #164	; 0xa4
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2210      	movs	r2, #16
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d100      	bne.n	8003fe0 <HAL_UART_IRQHandler+0x2e4>
 8003fde:	e137      	b.n	8004250 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003fe0:	23a0      	movs	r3, #160	; 0xa0
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2210      	movs	r2, #16
 8003fe8:	4013      	ands	r3, r2
 8003fea:	d100      	bne.n	8003fee <HAL_UART_IRQHandler+0x2f2>
 8003fec:	e130      	b.n	8004250 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2240      	movs	r2, #64	; 0x40
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d000      	beq.n	8004006 <HAL_UART_IRQHandler+0x30a>
 8004004:	e0a4      	b.n	8004150 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2280      	movs	r2, #128	; 0x80
 800400a:	589b      	ldr	r3, [r3, r2]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	217e      	movs	r1, #126	; 0x7e
 8004012:	187b      	adds	r3, r7, r1
 8004014:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004016:	187b      	adds	r3, r7, r1
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d100      	bne.n	8004020 <HAL_UART_IRQHandler+0x324>
 800401e:	e185      	b.n	800432c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	225c      	movs	r2, #92	; 0x5c
 8004024:	5a9b      	ldrh	r3, [r3, r2]
 8004026:	187a      	adds	r2, r7, r1
 8004028:	8812      	ldrh	r2, [r2, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d300      	bcc.n	8004030 <HAL_UART_IRQHandler+0x334>
 800402e:	e17d      	b.n	800432c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	187a      	adds	r2, r7, r1
 8004034:	215e      	movs	r1, #94	; 0x5e
 8004036:	8812      	ldrh	r2, [r2, #0]
 8004038:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2280      	movs	r2, #128	; 0x80
 800403e:	589b      	ldr	r3, [r3, r2]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2220      	movs	r2, #32
 8004046:	4013      	ands	r3, r2
 8004048:	d170      	bne.n	800412c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404a:	f3ef 8310 	mrs	r3, PRIMASK
 800404e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004052:	67bb      	str	r3, [r7, #120]	; 0x78
 8004054:	2301      	movs	r3, #1
 8004056:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405a:	f383 8810 	msr	PRIMASK, r3
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	49b4      	ldr	r1, [pc, #720]	; (800433c <HAL_UART_IRQHandler+0x640>)
 800406c:	400a      	ands	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004072:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	677b      	str	r3, [r7, #116]	; 0x74
 8004086:	2301      	movs	r3, #1
 8004088:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800408c:	f383 8810 	msr	PRIMASK, r3
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	438a      	bics	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
 80040a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a8:	f383 8810 	msr	PRIMASK, r3
}
 80040ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ae:	f3ef 8310 	mrs	r3, PRIMASK
 80040b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80040b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040b6:	673b      	str	r3, [r7, #112]	; 0x70
 80040b8:	2301      	movs	r3, #1
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689a      	ldr	r2, [r3, #8]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2140      	movs	r1, #64	; 0x40
 80040d0:	438a      	bics	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
 80040d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040da:	f383 8810 	msr	PRIMASK, r3
}
 80040de:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	228c      	movs	r2, #140	; 0x8c
 80040e4:	2120      	movs	r1, #32
 80040e6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ee:	f3ef 8310 	mrs	r3, PRIMASK
 80040f2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80040f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040f8:	2301      	movs	r3, #1
 80040fa:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040fe:	f383 8810 	msr	PRIMASK, r3
}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2110      	movs	r1, #16
 8004110:	438a      	bics	r2, r1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004116:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411a:	f383 8810 	msr	PRIMASK, r3
}
 800411e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2280      	movs	r2, #128	; 0x80
 8004124:	589b      	ldr	r3, [r3, r2]
 8004126:	0018      	movs	r0, r3
 8004128:	f7fd ff88 	bl	800203c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2202      	movs	r2, #2
 8004130:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	225c      	movs	r2, #92	; 0x5c
 8004136:	5a9a      	ldrh	r2, [r3, r2]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	215e      	movs	r1, #94	; 0x5e
 800413c:	5a5b      	ldrh	r3, [r3, r1]
 800413e:	b29b      	uxth	r3, r3
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	0011      	movs	r1, r2
 8004148:	0018      	movs	r0, r3
 800414a:	f000 f915 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800414e:	e0ed      	b.n	800432c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	225c      	movs	r2, #92	; 0x5c
 8004154:	5a99      	ldrh	r1, [r3, r2]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	225e      	movs	r2, #94	; 0x5e
 800415a:	5a9b      	ldrh	r3, [r3, r2]
 800415c:	b29a      	uxth	r2, r3
 800415e:	208e      	movs	r0, #142	; 0x8e
 8004160:	183b      	adds	r3, r7, r0
 8004162:	1a8a      	subs	r2, r1, r2
 8004164:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	225e      	movs	r2, #94	; 0x5e
 800416a:	5a9b      	ldrh	r3, [r3, r2]
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d100      	bne.n	8004174 <HAL_UART_IRQHandler+0x478>
 8004172:	e0dd      	b.n	8004330 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004174:	183b      	adds	r3, r7, r0
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d100      	bne.n	800417e <HAL_UART_IRQHandler+0x482>
 800417c:	e0d8      	b.n	8004330 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417e:	f3ef 8310 	mrs	r3, PRIMASK
 8004182:	60fb      	str	r3, [r7, #12]
  return(result);
 8004184:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004186:	2488      	movs	r4, #136	; 0x88
 8004188:	193a      	adds	r2, r7, r4
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	2301      	movs	r3, #1
 800418e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f383 8810 	msr	PRIMASK, r3
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4967      	ldr	r1, [pc, #412]	; (8004340 <HAL_UART_IRQHandler+0x644>)
 80041a4:	400a      	ands	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	193b      	adds	r3, r7, r4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f383 8810 	msr	PRIMASK, r3
}
 80041b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80041bc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80041be:	2484      	movs	r4, #132	; 0x84
 80041c0:	193a      	adds	r2, r7, r4
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	2301      	movs	r3, #1
 80041c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	495a      	ldr	r1, [pc, #360]	; (8004344 <HAL_UART_IRQHandler+0x648>)
 80041dc:	400a      	ands	r2, r1
 80041de:	609a      	str	r2, [r3, #8]
 80041e0:	193b      	adds	r3, r7, r4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f383 8810 	msr	PRIMASK, r3
}
 80041ec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	228c      	movs	r2, #140	; 0x8c
 80041f2:	2120      	movs	r1, #32
 80041f4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004202:	f3ef 8310 	mrs	r3, PRIMASK
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420a:	2480      	movs	r4, #128	; 0x80
 800420c:	193a      	adds	r2, r7, r4
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	2301      	movs	r3, #1
 8004212:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2110      	movs	r1, #16
 8004228:	438a      	bics	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	193b      	adds	r3, r7, r4
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004234:	f383 8810 	msr	PRIMASK, r3
}
 8004238:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2202      	movs	r2, #2
 800423e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004240:	183b      	adds	r3, r7, r0
 8004242:	881a      	ldrh	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	0011      	movs	r1, r2
 8004248:	0018      	movs	r0, r3
 800424a:	f000 f895 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800424e:	e06f      	b.n	8004330 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004250:	23a4      	movs	r3, #164	; 0xa4
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	2380      	movs	r3, #128	; 0x80
 8004258:	035b      	lsls	r3, r3, #13
 800425a:	4013      	ands	r3, r2
 800425c:	d010      	beq.n	8004280 <HAL_UART_IRQHandler+0x584>
 800425e:	239c      	movs	r3, #156	; 0x9c
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	2380      	movs	r3, #128	; 0x80
 8004266:	03db      	lsls	r3, r3, #15
 8004268:	4013      	ands	r3, r2
 800426a:	d009      	beq.n	8004280 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2280      	movs	r2, #128	; 0x80
 8004272:	0352      	lsls	r2, r2, #13
 8004274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0018      	movs	r0, r3
 800427a:	f000 ff9c 	bl	80051b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800427e:	e05a      	b.n	8004336 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004280:	23a4      	movs	r3, #164	; 0xa4
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2280      	movs	r2, #128	; 0x80
 8004288:	4013      	ands	r3, r2
 800428a:	d016      	beq.n	80042ba <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800428c:	23a0      	movs	r3, #160	; 0xa0
 800428e:	18fb      	adds	r3, r7, r3
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	4013      	ands	r3, r2
 8004296:	d106      	bne.n	80042a6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004298:	239c      	movs	r3, #156	; 0x9c
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	4013      	ands	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d042      	beq.n	8004334 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	0010      	movs	r0, r2
 80042b6:	4798      	blx	r3
    }
    return;
 80042b8:	e03c      	b.n	8004334 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042ba:	23a4      	movs	r3, #164	; 0xa4
 80042bc:	18fb      	adds	r3, r7, r3
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2240      	movs	r2, #64	; 0x40
 80042c2:	4013      	ands	r3, r2
 80042c4:	d00a      	beq.n	80042dc <HAL_UART_IRQHandler+0x5e0>
 80042c6:	23a0      	movs	r3, #160	; 0xa0
 80042c8:	18fb      	adds	r3, r7, r3
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2240      	movs	r2, #64	; 0x40
 80042ce:	4013      	ands	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 ff42 	bl	800515e <UART_EndTransmit_IT>
    return;
 80042da:	e02c      	b.n	8004336 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80042dc:	23a4      	movs	r3, #164	; 0xa4
 80042de:	18fb      	adds	r3, r7, r3
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	2380      	movs	r3, #128	; 0x80
 80042e4:	041b      	lsls	r3, r3, #16
 80042e6:	4013      	ands	r3, r2
 80042e8:	d00b      	beq.n	8004302 <HAL_UART_IRQHandler+0x606>
 80042ea:	23a0      	movs	r3, #160	; 0xa0
 80042ec:	18fb      	adds	r3, r7, r3
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	05db      	lsls	r3, r3, #23
 80042f4:	4013      	ands	r3, r2
 80042f6:	d004      	beq.n	8004302 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 ff6b 	bl	80051d6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004300:	e019      	b.n	8004336 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004302:	23a4      	movs	r3, #164	; 0xa4
 8004304:	18fb      	adds	r3, r7, r3
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	045b      	lsls	r3, r3, #17
 800430c:	4013      	ands	r3, r2
 800430e:	d012      	beq.n	8004336 <HAL_UART_IRQHandler+0x63a>
 8004310:	23a0      	movs	r3, #160	; 0xa0
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	da0d      	bge.n	8004336 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0018      	movs	r0, r3
 800431e:	f000 ff52 	bl	80051c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004322:	e008      	b.n	8004336 <HAL_UART_IRQHandler+0x63a>
      return;
 8004324:	46c0      	nop			; (mov r8, r8)
 8004326:	e006      	b.n	8004336 <HAL_UART_IRQHandler+0x63a>
    return;
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	e004      	b.n	8004336 <HAL_UART_IRQHandler+0x63a>
      return;
 800432c:	46c0      	nop			; (mov r8, r8)
 800432e:	e002      	b.n	8004336 <HAL_UART_IRQHandler+0x63a>
      return;
 8004330:	46c0      	nop			; (mov r8, r8)
 8004332:	e000      	b.n	8004336 <HAL_UART_IRQHandler+0x63a>
    return;
 8004334:	46c0      	nop			; (mov r8, r8)
  }
}
 8004336:	46bd      	mov	sp, r7
 8004338:	b02a      	add	sp, #168	; 0xa8
 800433a:	bdb0      	pop	{r4, r5, r7, pc}
 800433c:	fffffeff 	.word	0xfffffeff
 8004340:	fffffedf 	.word	0xfffffedf
 8004344:	effffffe 	.word	0xeffffffe

08004348 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004350:	46c0      	nop			; (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004360:	46c0      	nop			; (mov r8, r8)
 8004362:	46bd      	mov	sp, r7
 8004364:	b002      	add	sp, #8
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	000a      	movs	r2, r1
 8004382:	1cbb      	adds	r3, r7, #2
 8004384:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004386:	46c0      	nop			; (mov r8, r8)
 8004388:	46bd      	mov	sp, r7
 800438a:	b002      	add	sp, #8
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004390:	b5b0      	push	{r4, r5, r7, lr}
 8004392:	b090      	sub	sp, #64	; 0x40
 8004394:	af00      	add	r7, sp, #0
 8004396:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004398:	231a      	movs	r3, #26
 800439a:	2220      	movs	r2, #32
 800439c:	189b      	adds	r3, r3, r2
 800439e:	19db      	adds	r3, r3, r7
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4aaf      	ldr	r2, [pc, #700]	; (8004680 <UART_SetConfig+0x2f0>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	0019      	movs	r1, r3
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ce:	430b      	orrs	r3, r1
 80043d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4aaa      	ldr	r2, [pc, #680]	; (8004684 <UART_SetConfig+0x2f4>)
 80043da:	4013      	ands	r3, r2
 80043dc:	0018      	movs	r0, r3
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	0003      	movs	r3, r0
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4aa4      	ldr	r2, [pc, #656]	; (8004688 <UART_SetConfig+0x2f8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004402:	4313      	orrs	r3, r2
 8004404:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a9f      	ldr	r2, [pc, #636]	; (800468c <UART_SetConfig+0x2fc>)
 800440e:	4013      	ands	r3, r2
 8004410:	0019      	movs	r1, r3
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004418:	430b      	orrs	r3, r1
 800441a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	220f      	movs	r2, #15
 8004424:	4393      	bics	r3, r2
 8004426:	0018      	movs	r0, r3
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	0003      	movs	r3, r0
 8004432:	430b      	orrs	r3, r1
 8004434:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a95      	ldr	r2, [pc, #596]	; (8004690 <UART_SetConfig+0x300>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d131      	bne.n	80044a4 <UART_SetConfig+0x114>
 8004440:	4b94      	ldr	r3, [pc, #592]	; (8004694 <UART_SetConfig+0x304>)
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	2203      	movs	r2, #3
 8004446:	4013      	ands	r3, r2
 8004448:	2b03      	cmp	r3, #3
 800444a:	d01d      	beq.n	8004488 <UART_SetConfig+0xf8>
 800444c:	d823      	bhi.n	8004496 <UART_SetConfig+0x106>
 800444e:	2b02      	cmp	r3, #2
 8004450:	d00c      	beq.n	800446c <UART_SetConfig+0xdc>
 8004452:	d820      	bhi.n	8004496 <UART_SetConfig+0x106>
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <UART_SetConfig+0xce>
 8004458:	2b01      	cmp	r3, #1
 800445a:	d00e      	beq.n	800447a <UART_SetConfig+0xea>
 800445c:	e01b      	b.n	8004496 <UART_SetConfig+0x106>
 800445e:	231b      	movs	r3, #27
 8004460:	2220      	movs	r2, #32
 8004462:	189b      	adds	r3, r3, r2
 8004464:	19db      	adds	r3, r3, r7
 8004466:	2200      	movs	r2, #0
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e0b4      	b.n	80045d6 <UART_SetConfig+0x246>
 800446c:	231b      	movs	r3, #27
 800446e:	2220      	movs	r2, #32
 8004470:	189b      	adds	r3, r3, r2
 8004472:	19db      	adds	r3, r3, r7
 8004474:	2202      	movs	r2, #2
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e0ad      	b.n	80045d6 <UART_SetConfig+0x246>
 800447a:	231b      	movs	r3, #27
 800447c:	2220      	movs	r2, #32
 800447e:	189b      	adds	r3, r3, r2
 8004480:	19db      	adds	r3, r3, r7
 8004482:	2204      	movs	r2, #4
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	e0a6      	b.n	80045d6 <UART_SetConfig+0x246>
 8004488:	231b      	movs	r3, #27
 800448a:	2220      	movs	r2, #32
 800448c:	189b      	adds	r3, r3, r2
 800448e:	19db      	adds	r3, r3, r7
 8004490:	2208      	movs	r2, #8
 8004492:	701a      	strb	r2, [r3, #0]
 8004494:	e09f      	b.n	80045d6 <UART_SetConfig+0x246>
 8004496:	231b      	movs	r3, #27
 8004498:	2220      	movs	r2, #32
 800449a:	189b      	adds	r3, r3, r2
 800449c:	19db      	adds	r3, r3, r7
 800449e:	2210      	movs	r2, #16
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	e098      	b.n	80045d6 <UART_SetConfig+0x246>
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a7b      	ldr	r2, [pc, #492]	; (8004698 <UART_SetConfig+0x308>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d131      	bne.n	8004512 <UART_SetConfig+0x182>
 80044ae:	4b79      	ldr	r3, [pc, #484]	; (8004694 <UART_SetConfig+0x304>)
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	220c      	movs	r2, #12
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d01d      	beq.n	80044f6 <UART_SetConfig+0x166>
 80044ba:	d823      	bhi.n	8004504 <UART_SetConfig+0x174>
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d00c      	beq.n	80044da <UART_SetConfig+0x14a>
 80044c0:	d820      	bhi.n	8004504 <UART_SetConfig+0x174>
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <UART_SetConfig+0x13c>
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00e      	beq.n	80044e8 <UART_SetConfig+0x158>
 80044ca:	e01b      	b.n	8004504 <UART_SetConfig+0x174>
 80044cc:	231b      	movs	r3, #27
 80044ce:	2220      	movs	r2, #32
 80044d0:	189b      	adds	r3, r3, r2
 80044d2:	19db      	adds	r3, r3, r7
 80044d4:	2200      	movs	r2, #0
 80044d6:	701a      	strb	r2, [r3, #0]
 80044d8:	e07d      	b.n	80045d6 <UART_SetConfig+0x246>
 80044da:	231b      	movs	r3, #27
 80044dc:	2220      	movs	r2, #32
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	19db      	adds	r3, r3, r7
 80044e2:	2202      	movs	r2, #2
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e076      	b.n	80045d6 <UART_SetConfig+0x246>
 80044e8:	231b      	movs	r3, #27
 80044ea:	2220      	movs	r2, #32
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	19db      	adds	r3, r3, r7
 80044f0:	2204      	movs	r2, #4
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e06f      	b.n	80045d6 <UART_SetConfig+0x246>
 80044f6:	231b      	movs	r3, #27
 80044f8:	2220      	movs	r2, #32
 80044fa:	189b      	adds	r3, r3, r2
 80044fc:	19db      	adds	r3, r3, r7
 80044fe:	2208      	movs	r2, #8
 8004500:	701a      	strb	r2, [r3, #0]
 8004502:	e068      	b.n	80045d6 <UART_SetConfig+0x246>
 8004504:	231b      	movs	r3, #27
 8004506:	2220      	movs	r2, #32
 8004508:	189b      	adds	r3, r3, r2
 800450a:	19db      	adds	r3, r3, r7
 800450c:	2210      	movs	r2, #16
 800450e:	701a      	strb	r2, [r3, #0]
 8004510:	e061      	b.n	80045d6 <UART_SetConfig+0x246>
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a61      	ldr	r2, [pc, #388]	; (800469c <UART_SetConfig+0x30c>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d106      	bne.n	800452a <UART_SetConfig+0x19a>
 800451c:	231b      	movs	r3, #27
 800451e:	2220      	movs	r2, #32
 8004520:	189b      	adds	r3, r3, r2
 8004522:	19db      	adds	r3, r3, r7
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	e055      	b.n	80045d6 <UART_SetConfig+0x246>
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a5c      	ldr	r2, [pc, #368]	; (80046a0 <UART_SetConfig+0x310>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d106      	bne.n	8004542 <UART_SetConfig+0x1b2>
 8004534:	231b      	movs	r3, #27
 8004536:	2220      	movs	r2, #32
 8004538:	189b      	adds	r3, r3, r2
 800453a:	19db      	adds	r3, r3, r7
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	e049      	b.n	80045d6 <UART_SetConfig+0x246>
 8004542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a50      	ldr	r2, [pc, #320]	; (8004688 <UART_SetConfig+0x2f8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d13e      	bne.n	80045ca <UART_SetConfig+0x23a>
 800454c:	4b51      	ldr	r3, [pc, #324]	; (8004694 <UART_SetConfig+0x304>)
 800454e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004550:	23c0      	movs	r3, #192	; 0xc0
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	4013      	ands	r3, r2
 8004556:	22c0      	movs	r2, #192	; 0xc0
 8004558:	0112      	lsls	r2, r2, #4
 800455a:	4293      	cmp	r3, r2
 800455c:	d027      	beq.n	80045ae <UART_SetConfig+0x21e>
 800455e:	22c0      	movs	r2, #192	; 0xc0
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	4293      	cmp	r3, r2
 8004564:	d82a      	bhi.n	80045bc <UART_SetConfig+0x22c>
 8004566:	2280      	movs	r2, #128	; 0x80
 8004568:	0112      	lsls	r2, r2, #4
 800456a:	4293      	cmp	r3, r2
 800456c:	d011      	beq.n	8004592 <UART_SetConfig+0x202>
 800456e:	2280      	movs	r2, #128	; 0x80
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	4293      	cmp	r3, r2
 8004574:	d822      	bhi.n	80045bc <UART_SetConfig+0x22c>
 8004576:	2b00      	cmp	r3, #0
 8004578:	d004      	beq.n	8004584 <UART_SetConfig+0x1f4>
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	00d2      	lsls	r2, r2, #3
 800457e:	4293      	cmp	r3, r2
 8004580:	d00e      	beq.n	80045a0 <UART_SetConfig+0x210>
 8004582:	e01b      	b.n	80045bc <UART_SetConfig+0x22c>
 8004584:	231b      	movs	r3, #27
 8004586:	2220      	movs	r2, #32
 8004588:	189b      	adds	r3, r3, r2
 800458a:	19db      	adds	r3, r3, r7
 800458c:	2200      	movs	r2, #0
 800458e:	701a      	strb	r2, [r3, #0]
 8004590:	e021      	b.n	80045d6 <UART_SetConfig+0x246>
 8004592:	231b      	movs	r3, #27
 8004594:	2220      	movs	r2, #32
 8004596:	189b      	adds	r3, r3, r2
 8004598:	19db      	adds	r3, r3, r7
 800459a:	2202      	movs	r2, #2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e01a      	b.n	80045d6 <UART_SetConfig+0x246>
 80045a0:	231b      	movs	r3, #27
 80045a2:	2220      	movs	r2, #32
 80045a4:	189b      	adds	r3, r3, r2
 80045a6:	19db      	adds	r3, r3, r7
 80045a8:	2204      	movs	r2, #4
 80045aa:	701a      	strb	r2, [r3, #0]
 80045ac:	e013      	b.n	80045d6 <UART_SetConfig+0x246>
 80045ae:	231b      	movs	r3, #27
 80045b0:	2220      	movs	r2, #32
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	19db      	adds	r3, r3, r7
 80045b6:	2208      	movs	r2, #8
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e00c      	b.n	80045d6 <UART_SetConfig+0x246>
 80045bc:	231b      	movs	r3, #27
 80045be:	2220      	movs	r2, #32
 80045c0:	189b      	adds	r3, r3, r2
 80045c2:	19db      	adds	r3, r3, r7
 80045c4:	2210      	movs	r2, #16
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e005      	b.n	80045d6 <UART_SetConfig+0x246>
 80045ca:	231b      	movs	r3, #27
 80045cc:	2220      	movs	r2, #32
 80045ce:	189b      	adds	r3, r3, r2
 80045d0:	19db      	adds	r3, r3, r7
 80045d2:	2210      	movs	r2, #16
 80045d4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a2b      	ldr	r2, [pc, #172]	; (8004688 <UART_SetConfig+0x2f8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d000      	beq.n	80045e2 <UART_SetConfig+0x252>
 80045e0:	e0a9      	b.n	8004736 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045e2:	231b      	movs	r3, #27
 80045e4:	2220      	movs	r2, #32
 80045e6:	189b      	adds	r3, r3, r2
 80045e8:	19db      	adds	r3, r3, r7
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d015      	beq.n	800461c <UART_SetConfig+0x28c>
 80045f0:	dc18      	bgt.n	8004624 <UART_SetConfig+0x294>
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d00d      	beq.n	8004612 <UART_SetConfig+0x282>
 80045f6:	dc15      	bgt.n	8004624 <UART_SetConfig+0x294>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <UART_SetConfig+0x272>
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d005      	beq.n	800460c <UART_SetConfig+0x27c>
 8004600:	e010      	b.n	8004624 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004602:	f7fe fda5 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8004606:	0003      	movs	r3, r0
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800460a:	e014      	b.n	8004636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800460c:	4b25      	ldr	r3, [pc, #148]	; (80046a4 <UART_SetConfig+0x314>)
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004610:	e011      	b.n	8004636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004612:	f7fe fd11 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8004616:	0003      	movs	r3, r0
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800461a:	e00c      	b.n	8004636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004622:	e008      	b.n	8004636 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004628:	231a      	movs	r3, #26
 800462a:	2220      	movs	r2, #32
 800462c:	189b      	adds	r3, r3, r2
 800462e:	19db      	adds	r3, r3, r7
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
        break;
 8004634:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004638:	2b00      	cmp	r3, #0
 800463a:	d100      	bne.n	800463e <UART_SetConfig+0x2ae>
 800463c:	e14b      	b.n	80048d6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004642:	4b19      	ldr	r3, [pc, #100]	; (80046a8 <UART_SetConfig+0x318>)
 8004644:	0052      	lsls	r2, r2, #1
 8004646:	5ad3      	ldrh	r3, [r2, r3]
 8004648:	0019      	movs	r1, r3
 800464a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800464c:	f7fb fd5a 	bl	8000104 <__udivsi3>
 8004650:	0003      	movs	r3, r0
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	0013      	movs	r3, r2
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	189b      	adds	r3, r3, r2
 800465e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004660:	429a      	cmp	r2, r3
 8004662:	d305      	bcc.n	8004670 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800466a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800466c:	429a      	cmp	r2, r3
 800466e:	d91d      	bls.n	80046ac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004670:	231a      	movs	r3, #26
 8004672:	2220      	movs	r2, #32
 8004674:	189b      	adds	r3, r3, r2
 8004676:	19db      	adds	r3, r3, r7
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
 800467c:	e12b      	b.n	80048d6 <UART_SetConfig+0x546>
 800467e:	46c0      	nop			; (mov r8, r8)
 8004680:	cfff69f3 	.word	0xcfff69f3
 8004684:	ffffcfff 	.word	0xffffcfff
 8004688:	40008000 	.word	0x40008000
 800468c:	11fff4ff 	.word	0x11fff4ff
 8004690:	40013800 	.word	0x40013800
 8004694:	40021000 	.word	0x40021000
 8004698:	40004400 	.word	0x40004400
 800469c:	40004800 	.word	0x40004800
 80046a0:	40004c00 	.word	0x40004c00
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	080054ec 	.word	0x080054ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	2300      	movs	r3, #0
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b8:	4b92      	ldr	r3, [pc, #584]	; (8004904 <UART_SetConfig+0x574>)
 80046ba:	0052      	lsls	r2, r2, #1
 80046bc:	5ad3      	ldrh	r3, [r2, r3]
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	69b8      	ldr	r0, [r7, #24]
 80046ca:	69f9      	ldr	r1, [r7, #28]
 80046cc:	f7fb fe90 	bl	80003f0 <__aeabi_uldivmod>
 80046d0:	0002      	movs	r2, r0
 80046d2:	000b      	movs	r3, r1
 80046d4:	0e11      	lsrs	r1, r2, #24
 80046d6:	021d      	lsls	r5, r3, #8
 80046d8:	430d      	orrs	r5, r1
 80046da:	0214      	lsls	r4, r2, #8
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	085b      	lsrs	r3, r3, #1
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68b8      	ldr	r0, [r7, #8]
 80046ea:	68f9      	ldr	r1, [r7, #12]
 80046ec:	1900      	adds	r0, r0, r4
 80046ee:	4169      	adcs	r1, r5
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f7fb fe77 	bl	80003f0 <__aeabi_uldivmod>
 8004702:	0002      	movs	r2, r0
 8004704:	000b      	movs	r3, r1
 8004706:	0013      	movs	r3, r2
 8004708:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800470a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470c:	23c0      	movs	r3, #192	; 0xc0
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	429a      	cmp	r2, r3
 8004712:	d309      	bcc.n	8004728 <UART_SetConfig+0x398>
 8004714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	035b      	lsls	r3, r3, #13
 800471a:	429a      	cmp	r2, r3
 800471c:	d204      	bcs.n	8004728 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	e0d6      	b.n	80048d6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004728:	231a      	movs	r3, #26
 800472a:	2220      	movs	r2, #32
 800472c:	189b      	adds	r3, r3, r2
 800472e:	19db      	adds	r3, r3, r7
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e0cf      	b.n	80048d6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004738:	69da      	ldr	r2, [r3, #28]
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	429a      	cmp	r2, r3
 8004740:	d000      	beq.n	8004744 <UART_SetConfig+0x3b4>
 8004742:	e070      	b.n	8004826 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004744:	231b      	movs	r3, #27
 8004746:	2220      	movs	r2, #32
 8004748:	189b      	adds	r3, r3, r2
 800474a:	19db      	adds	r3, r3, r7
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b08      	cmp	r3, #8
 8004750:	d015      	beq.n	800477e <UART_SetConfig+0x3ee>
 8004752:	dc18      	bgt.n	8004786 <UART_SetConfig+0x3f6>
 8004754:	2b04      	cmp	r3, #4
 8004756:	d00d      	beq.n	8004774 <UART_SetConfig+0x3e4>
 8004758:	dc15      	bgt.n	8004786 <UART_SetConfig+0x3f6>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <UART_SetConfig+0x3d4>
 800475e:	2b02      	cmp	r3, #2
 8004760:	d005      	beq.n	800476e <UART_SetConfig+0x3de>
 8004762:	e010      	b.n	8004786 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004764:	f7fe fcf4 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 8004768:	0003      	movs	r3, r0
 800476a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800476c:	e014      	b.n	8004798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800476e:	4b66      	ldr	r3, [pc, #408]	; (8004908 <UART_SetConfig+0x578>)
 8004770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004772:	e011      	b.n	8004798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004774:	f7fe fc60 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 8004778:	0003      	movs	r3, r0
 800477a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800477c:	e00c      	b.n	8004798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004784:	e008      	b.n	8004798 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004786:	2300      	movs	r3, #0
 8004788:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800478a:	231a      	movs	r3, #26
 800478c:	2220      	movs	r2, #32
 800478e:	189b      	adds	r3, r3, r2
 8004790:	19db      	adds	r3, r3, r7
 8004792:	2201      	movs	r2, #1
 8004794:	701a      	strb	r2, [r3, #0]
        break;
 8004796:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <UART_SetConfig+0x410>
 800479e:	e09a      	b.n	80048d6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047a4:	4b57      	ldr	r3, [pc, #348]	; (8004904 <UART_SetConfig+0x574>)
 80047a6:	0052      	lsls	r2, r2, #1
 80047a8:	5ad3      	ldrh	r3, [r2, r3]
 80047aa:	0019      	movs	r1, r3
 80047ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80047ae:	f7fb fca9 	bl	8000104 <__udivsi3>
 80047b2:	0003      	movs	r3, r0
 80047b4:	005a      	lsls	r2, r3, #1
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	085b      	lsrs	r3, r3, #1
 80047bc:	18d2      	adds	r2, r2, r3
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	0019      	movs	r1, r3
 80047c4:	0010      	movs	r0, r2
 80047c6:	f7fb fc9d 	bl	8000104 <__udivsi3>
 80047ca:	0003      	movs	r3, r0
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	2b0f      	cmp	r3, #15
 80047d2:	d921      	bls.n	8004818 <UART_SetConfig+0x488>
 80047d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	025b      	lsls	r3, r3, #9
 80047da:	429a      	cmp	r2, r3
 80047dc:	d21c      	bcs.n	8004818 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	200e      	movs	r0, #14
 80047e4:	2420      	movs	r4, #32
 80047e6:	1903      	adds	r3, r0, r4
 80047e8:	19db      	adds	r3, r3, r7
 80047ea:	210f      	movs	r1, #15
 80047ec:	438a      	bics	r2, r1
 80047ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2207      	movs	r2, #7
 80047f8:	4013      	ands	r3, r2
 80047fa:	b299      	uxth	r1, r3
 80047fc:	1903      	adds	r3, r0, r4
 80047fe:	19db      	adds	r3, r3, r7
 8004800:	1902      	adds	r2, r0, r4
 8004802:	19d2      	adds	r2, r2, r7
 8004804:	8812      	ldrh	r2, [r2, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1902      	adds	r2, r0, r4
 8004810:	19d2      	adds	r2, r2, r7
 8004812:	8812      	ldrh	r2, [r2, #0]
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	e05e      	b.n	80048d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004818:	231a      	movs	r3, #26
 800481a:	2220      	movs	r2, #32
 800481c:	189b      	adds	r3, r3, r2
 800481e:	19db      	adds	r3, r3, r7
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e057      	b.n	80048d6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004826:	231b      	movs	r3, #27
 8004828:	2220      	movs	r2, #32
 800482a:	189b      	adds	r3, r3, r2
 800482c:	19db      	adds	r3, r3, r7
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d015      	beq.n	8004860 <UART_SetConfig+0x4d0>
 8004834:	dc18      	bgt.n	8004868 <UART_SetConfig+0x4d8>
 8004836:	2b04      	cmp	r3, #4
 8004838:	d00d      	beq.n	8004856 <UART_SetConfig+0x4c6>
 800483a:	dc15      	bgt.n	8004868 <UART_SetConfig+0x4d8>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <UART_SetConfig+0x4b6>
 8004840:	2b02      	cmp	r3, #2
 8004842:	d005      	beq.n	8004850 <UART_SetConfig+0x4c0>
 8004844:	e010      	b.n	8004868 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004846:	f7fe fc83 	bl	8003150 <HAL_RCC_GetPCLK1Freq>
 800484a:	0003      	movs	r3, r0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800484e:	e014      	b.n	800487a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004850:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <UART_SetConfig+0x578>)
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004854:	e011      	b.n	800487a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004856:	f7fe fbef 	bl	8003038 <HAL_RCC_GetSysClockFreq>
 800485a:	0003      	movs	r3, r0
 800485c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800485e:	e00c      	b.n	800487a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	021b      	lsls	r3, r3, #8
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004866:	e008      	b.n	800487a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800486c:	231a      	movs	r3, #26
 800486e:	2220      	movs	r2, #32
 8004870:	189b      	adds	r3, r3, r2
 8004872:	19db      	adds	r3, r3, r7
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
        break;
 8004878:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800487a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02a      	beq.n	80048d6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004884:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <UART_SetConfig+0x574>)
 8004886:	0052      	lsls	r2, r2, #1
 8004888:	5ad3      	ldrh	r3, [r2, r3]
 800488a:	0019      	movs	r1, r3
 800488c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800488e:	f7fb fc39 	bl	8000104 <__udivsi3>
 8004892:	0003      	movs	r3, r0
 8004894:	001a      	movs	r2, r3
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	18d2      	adds	r2, r2, r3
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	0019      	movs	r1, r3
 80048a4:	0010      	movs	r0, r2
 80048a6:	f7fb fc2d 	bl	8000104 <__udivsi3>
 80048aa:	0003      	movs	r3, r0
 80048ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b0:	2b0f      	cmp	r3, #15
 80048b2:	d90a      	bls.n	80048ca <UART_SetConfig+0x53a>
 80048b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	025b      	lsls	r3, r3, #9
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d205      	bcs.n	80048ca <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e005      	b.n	80048d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80048ca:	231a      	movs	r3, #26
 80048cc:	2220      	movs	r2, #32
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	19db      	adds	r3, r3, r7
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	226a      	movs	r2, #106	; 0x6a
 80048da:	2101      	movs	r1, #1
 80048dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	2268      	movs	r2, #104	; 0x68
 80048e2:	2101      	movs	r1, #1
 80048e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	2200      	movs	r2, #0
 80048ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	2200      	movs	r2, #0
 80048f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80048f2:	231a      	movs	r3, #26
 80048f4:	2220      	movs	r2, #32
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	19db      	adds	r3, r3, r7
 80048fa:	781b      	ldrb	r3, [r3, #0]
}
 80048fc:	0018      	movs	r0, r3
 80048fe:	46bd      	mov	sp, r7
 8004900:	b010      	add	sp, #64	; 0x40
 8004902:	bdb0      	pop	{r4, r5, r7, pc}
 8004904:	080054ec 	.word	0x080054ec
 8004908:	00f42400 	.word	0x00f42400

0800490c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	2201      	movs	r2, #1
 800491a:	4013      	ands	r3, r2
 800491c:	d00b      	beq.n	8004936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	4a4a      	ldr	r2, [pc, #296]	; (8004a50 <UART_AdvFeatureConfig+0x144>)
 8004926:	4013      	ands	r3, r2
 8004928:	0019      	movs	r1, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	430a      	orrs	r2, r1
 8004934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	2202      	movs	r2, #2
 800493c:	4013      	ands	r3, r2
 800493e:	d00b      	beq.n	8004958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4a43      	ldr	r2, [pc, #268]	; (8004a54 <UART_AdvFeatureConfig+0x148>)
 8004948:	4013      	ands	r3, r2
 800494a:	0019      	movs	r1, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	430a      	orrs	r2, r1
 8004956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	2204      	movs	r2, #4
 800495e:	4013      	ands	r3, r2
 8004960:	d00b      	beq.n	800497a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a3b      	ldr	r2, [pc, #236]	; (8004a58 <UART_AdvFeatureConfig+0x14c>)
 800496a:	4013      	ands	r3, r2
 800496c:	0019      	movs	r1, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	2208      	movs	r2, #8
 8004980:	4013      	ands	r3, r2
 8004982:	d00b      	beq.n	800499c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4a34      	ldr	r2, [pc, #208]	; (8004a5c <UART_AdvFeatureConfig+0x150>)
 800498c:	4013      	ands	r3, r2
 800498e:	0019      	movs	r1, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a0:	2210      	movs	r2, #16
 80049a2:	4013      	ands	r3, r2
 80049a4:	d00b      	beq.n	80049be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <UART_AdvFeatureConfig+0x154>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	0019      	movs	r1, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	2220      	movs	r2, #32
 80049c4:	4013      	ands	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <UART_AdvFeatureConfig+0x158>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	0019      	movs	r1, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	2240      	movs	r2, #64	; 0x40
 80049e6:	4013      	ands	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <UART_AdvFeatureConfig+0x15c>)
 80049f2:	4013      	ands	r3, r2
 80049f4:	0019      	movs	r1, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	035b      	lsls	r3, r3, #13
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d10b      	bne.n	8004a26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <UART_AdvFeatureConfig+0x160>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	0019      	movs	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	2280      	movs	r2, #128	; 0x80
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d00b      	beq.n	8004a48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	4a0e      	ldr	r2, [pc, #56]	; (8004a70 <UART_AdvFeatureConfig+0x164>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	0019      	movs	r1, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	fffdffff 	.word	0xfffdffff
 8004a54:	fffeffff 	.word	0xfffeffff
 8004a58:	fffbffff 	.word	0xfffbffff
 8004a5c:	ffff7fff 	.word	0xffff7fff
 8004a60:	ffffefff 	.word	0xffffefff
 8004a64:	ffffdfff 	.word	0xffffdfff
 8004a68:	ffefffff 	.word	0xffefffff
 8004a6c:	ff9fffff 	.word	0xff9fffff
 8004a70:	fff7ffff 	.word	0xfff7ffff

08004a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2290      	movs	r2, #144	; 0x90
 8004a80:	2100      	movs	r1, #0
 8004a82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a84:	f7fc fad2 	bl	800102c <HAL_GetTick>
 8004a88:	0003      	movs	r3, r0
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2208      	movs	r2, #8
 8004a94:	4013      	ands	r3, r2
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d10c      	bne.n	8004ab4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2280      	movs	r2, #128	; 0x80
 8004a9e:	0391      	lsls	r1, r2, #14
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <UART_CheckIdleState+0x98>)
 8004aa4:	9200      	str	r2, [sp, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f000 f832 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 8004aac:	1e03      	subs	r3, r0, #0
 8004aae:	d001      	beq.n	8004ab4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e026      	b.n	8004b02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2204      	movs	r2, #4
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d10c      	bne.n	8004adc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	03d1      	lsls	r1, r2, #15
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <UART_CheckIdleState+0x98>)
 8004acc:	9200      	str	r2, [sp, #0]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f000 f81e 	bl	8004b10 <UART_WaitOnFlagUntilTimeout>
 8004ad4:	1e03      	subs	r3, r0, #0
 8004ad6:	d001      	beq.n	8004adc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e012      	b.n	8004b02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2288      	movs	r2, #136	; 0x88
 8004ae0:	2120      	movs	r1, #32
 8004ae2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	228c      	movs	r2, #140	; 0x8c
 8004ae8:	2120      	movs	r1, #32
 8004aea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2284      	movs	r2, #132	; 0x84
 8004afc:	2100      	movs	r1, #0
 8004afe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b004      	add	sp, #16
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	01ffffff 	.word	0x01ffffff

08004b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b094      	sub	sp, #80	; 0x50
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	1dfb      	adds	r3, r7, #7
 8004b1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b20:	e0a7      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b24:	3301      	adds	r3, #1
 8004b26:	d100      	bne.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004b28:	e0a3      	b.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2a:	f7fc fa7f 	bl	800102c <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d302      	bcc.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d13f      	bne.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b40:	f3ef 8310 	mrs	r3, PRIMASK
 8004b44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b48:	647b      	str	r3, [r7, #68]	; 0x44
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	f383 8810 	msr	PRIMASK, r3
}
 8004b54:	46c0      	nop			; (mov r8, r8)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	494e      	ldr	r1, [pc, #312]	; (8004c9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004b62:	400a      	ands	r2, r1
 8004b64:	601a      	str	r2, [r3, #0]
 8004b66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6c:	f383 8810 	msr	PRIMASK, r3
}
 8004b70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b72:	f3ef 8310 	mrs	r3, PRIMASK
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	f383 8810 	msr	PRIMASK, r3
}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2101      	movs	r1, #1
 8004b94:	438a      	bics	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ba2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2288      	movs	r2, #136	; 0x88
 8004ba8:	2120      	movs	r1, #32
 8004baa:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	228c      	movs	r2, #140	; 0x8c
 8004bb0:	2120      	movs	r1, #32
 8004bb2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2284      	movs	r2, #132	; 0x84
 8004bb8:	2100      	movs	r1, #0
 8004bba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e069      	b.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	4013      	ands	r3, r2
 8004bca:	d052      	beq.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	011b      	lsls	r3, r3, #4
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d148      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2280      	movs	r2, #128	; 0x80
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bea:	f3ef 8310 	mrs	r3, PRIMASK
 8004bee:	613b      	str	r3, [r7, #16]
  return(result);
 8004bf0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bf2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f383 8810 	msr	PRIMASK, r3
}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4924      	ldr	r1, [pc, #144]	; (8004c9c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	f383 8810 	msr	PRIMASK, r3
}
 8004c1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c20:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c22:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c26:	2301      	movs	r3, #1
 8004c28:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			; (mov r8, r8)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689a      	ldr	r2, [r3, #8]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	438a      	bics	r2, r1
 8004c40:	609a      	str	r2, [r3, #8]
 8004c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	f383 8810 	msr	PRIMASK, r3
}
 8004c4c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2288      	movs	r2, #136	; 0x88
 8004c52:	2120      	movs	r1, #32
 8004c54:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	228c      	movs	r2, #140	; 0x8c
 8004c5a:	2120      	movs	r1, #32
 8004c5c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2290      	movs	r2, #144	; 0x90
 8004c62:	2120      	movs	r1, #32
 8004c64:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2284      	movs	r2, #132	; 0x84
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e010      	b.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	425a      	negs	r2, r3
 8004c82:	4153      	adcs	r3, r2
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	001a      	movs	r2, r3
 8004c88:	1dfb      	adds	r3, r7, #7
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d100      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0x182>
 8004c90:	e747      	b.n	8004b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b014      	add	sp, #80	; 0x50
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	fffffe5f 	.word	0xfffffe5f

08004ca0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b090      	sub	sp, #64	; 0x40
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	1dbb      	adds	r3, r7, #6
 8004cac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1dba      	adds	r2, r7, #6
 8004cb8:	215c      	movs	r1, #92	; 0x5c
 8004cba:	8812      	ldrh	r2, [r2, #0]
 8004cbc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2290      	movs	r2, #144	; 0x90
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	228c      	movs	r2, #140	; 0x8c
 8004cca:	2122      	movs	r1, #34	; 0x22
 8004ccc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2280      	movs	r2, #128	; 0x80
 8004cd2:	589b      	ldr	r3, [r3, r2]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02d      	beq.n	8004d34 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2280      	movs	r2, #128	; 0x80
 8004cdc:	589b      	ldr	r3, [r3, r2]
 8004cde:	4a40      	ldr	r2, [pc, #256]	; (8004de0 <UART_Start_Receive_DMA+0x140>)
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2280      	movs	r2, #128	; 0x80
 8004ce6:	589b      	ldr	r3, [r3, r2]
 8004ce8:	4a3e      	ldr	r2, [pc, #248]	; (8004de4 <UART_Start_Receive_DMA+0x144>)
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2280      	movs	r2, #128	; 0x80
 8004cf0:	589b      	ldr	r3, [r3, r2]
 8004cf2:	4a3d      	ldr	r2, [pc, #244]	; (8004de8 <UART_Start_Receive_DMA+0x148>)
 8004cf4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2280      	movs	r2, #128	; 0x80
 8004cfa:	589b      	ldr	r3, [r3, r2]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	5898      	ldr	r0, [r3, r2]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3324      	adds	r3, #36	; 0x24
 8004d0c:	0019      	movs	r1, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d12:	001a      	movs	r2, r3
 8004d14:	1dbb      	adds	r3, r7, #6
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	f7fd f90a 	bl	8001f30 <HAL_DMA_Start_IT>
 8004d1c:	1e03      	subs	r3, r0, #0
 8004d1e:	d009      	beq.n	8004d34 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2290      	movs	r2, #144	; 0x90
 8004d24:	2110      	movs	r1, #16
 8004d26:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	228c      	movs	r2, #140	; 0x8c
 8004d2c:	2120      	movs	r1, #32
 8004d2e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e050      	b.n	8004dd6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d019      	beq.n	8004d70 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d46:	2301      	movs	r3, #1
 8004d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4c:	f383 8810 	msr	PRIMASK, r3
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2180      	movs	r1, #128	; 0x80
 8004d5e:	0049      	lsls	r1, r1, #1
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d66:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d70:	f3ef 8310 	mrs	r3, PRIMASK
 8004d74:	613b      	str	r3, [r7, #16]
  return(result);
 8004d76:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	46c0      	nop			; (mov r8, r8)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2101      	movs	r1, #1
 8004d92:	430a      	orrs	r2, r1
 8004d94:	609a      	str	r2, [r3, #8]
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f383 8810 	msr	PRIMASK, r3
}
 8004da0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004da2:	f3ef 8310 	mrs	r3, PRIMASK
 8004da6:	61fb      	str	r3, [r7, #28]
  return(result);
 8004da8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dac:	2301      	movs	r3, #1
 8004dae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2140      	movs	r1, #64	; 0x40
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	f383 8810 	msr	PRIMASK, r3
}
 8004dd2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b010      	add	sp, #64	; 0x40
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	08004f39 	.word	0x08004f39
 8004de4:	08005069 	.word	0x08005069
 8004de8:	080050ab 	.word	0x080050ab

08004dec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df4:	f3ef 8310 	mrs	r3, PRIMASK
 8004df8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfe:	2301      	movs	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f383 8810 	msr	PRIMASK, r3
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	21c0      	movs	r1, #192	; 0xc0
 8004e16:	438a      	bics	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f383 8810 	msr	PRIMASK, r3
}
 8004e24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e26:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2a:	617b      	str	r3, [r7, #20]
  return(result);
 8004e2c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004e2e:	623b      	str	r3, [r7, #32]
 8004e30:	2301      	movs	r3, #1
 8004e32:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f383 8810 	msr	PRIMASK, r3
}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4908      	ldr	r1, [pc, #32]	; (8004e68 <UART_EndTxTransfer+0x7c>)
 8004e48:	400a      	ands	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f383 8810 	msr	PRIMASK, r3
}
 8004e56:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2288      	movs	r2, #136	; 0x88
 8004e5c:	2120      	movs	r1, #32
 8004e5e:	5099      	str	r1, [r3, r2]
}
 8004e60:	46c0      	nop			; (mov r8, r8)
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b00a      	add	sp, #40	; 0x28
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	ff7fffff 	.word	0xff7fffff

08004e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08e      	sub	sp, #56	; 0x38
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e74:	f3ef 8310 	mrs	r3, PRIMASK
 8004e78:	617b      	str	r3, [r7, #20]
  return(result);
 8004e7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f383 8810 	msr	PRIMASK, r3
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4926      	ldr	r1, [pc, #152]	; (8004f30 <UART_EndRxTransfer+0xc4>)
 8004e96:	400a      	ands	r2, r1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f383 8810 	msr	PRIMASK, r3
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8004eaa:	623b      	str	r3, [r7, #32]
  return(result);
 8004eac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eae:	633b      	str	r3, [r7, #48]	; 0x30
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	f383 8810 	msr	PRIMASK, r3
}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	491b      	ldr	r1, [pc, #108]	; (8004f34 <UART_EndRxTransfer+0xc8>)
 8004ec8:	400a      	ands	r2, r1
 8004eca:	609a      	str	r2, [r3, #8]
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	f383 8810 	msr	PRIMASK, r3
}
 8004ed6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d118      	bne.n	8004f12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eea:	2301      	movs	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f383 8810 	msr	PRIMASK, r3
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2110      	movs	r1, #16
 8004f02:	438a      	bics	r2, r1
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f383 8810 	msr	PRIMASK, r3
}
 8004f10:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	228c      	movs	r2, #140	; 0x8c
 8004f16:	2120      	movs	r1, #32
 8004f18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	b00e      	add	sp, #56	; 0x38
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	fffffedf 	.word	0xfffffedf
 8004f34:	effffffe 	.word	0xeffffffe

08004f38 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b094      	sub	sp, #80	; 0x50
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d16f      	bne.n	8005032 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f54:	225e      	movs	r2, #94	; 0x5e
 8004f56:	2100      	movs	r1, #0
 8004f58:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f60:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f64:	2301      	movs	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	f383 8810 	msr	PRIMASK, r3
}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	493a      	ldr	r1, [pc, #232]	; (8005064 <UART_DMAReceiveCplt+0x12c>)
 8004f7c:	400a      	ands	r2, r1
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f94:	647b      	str	r3, [r7, #68]	; 0x44
 8004f96:	2301      	movs	r3, #1
 8004f98:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	f383 8810 	msr	PRIMASK, r3
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2101      	movs	r1, #1
 8004fae:	438a      	bics	r2, r1
 8004fb0:	609a      	str	r2, [r3, #8]
 8004fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	f383 8810 	msr	PRIMASK, r3
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004fc2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	643b      	str	r3, [r7, #64]	; 0x40
 8004fc8:	2301      	movs	r3, #1
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	f383 8810 	msr	PRIMASK, r3
}
 8004fd2:	46c0      	nop			; (mov r8, r8)
 8004fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2140      	movs	r1, #64	; 0x40
 8004fe0:	438a      	bics	r2, r1
 8004fe2:	609a      	str	r2, [r3, #8]
 8004fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	f383 8810 	msr	PRIMASK, r3
}
 8004fee:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff2:	228c      	movs	r2, #140	; 0x8c
 8004ff4:	2120      	movs	r1, #32
 8004ff6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d118      	bne.n	8005032 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005000:	f3ef 8310 	mrs	r3, PRIMASK
 8005004:	60fb      	str	r3, [r7, #12]
  return(result);
 8005006:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005008:	63fb      	str	r3, [r7, #60]	; 0x3c
 800500a:	2301      	movs	r3, #1
 800500c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f383 8810 	msr	PRIMASK, r3
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2110      	movs	r1, #16
 8005022:	438a      	bics	r2, r1
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005028:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f383 8810 	msr	PRIMASK, r3
}
 8005030:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005034:	2200      	movs	r2, #0
 8005036:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800503a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d108      	bne.n	8005052 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005042:	225c      	movs	r2, #92	; 0x5c
 8005044:	5a9a      	ldrh	r2, [r3, r2]
 8005046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005048:	0011      	movs	r1, r2
 800504a:	0018      	movs	r0, r3
 800504c:	f7ff f994 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005050:	e003      	b.n	800505a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005054:	0018      	movs	r0, r3
 8005056:	f7fb fae1 	bl	800061c <HAL_UART_RxCpltCallback>
}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	46bd      	mov	sp, r7
 800505e:	b014      	add	sp, #80	; 0x50
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	fffffeff 	.word	0xfffffeff

08005068 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2201      	movs	r2, #1
 800507a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10a      	bne.n	800509a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	225c      	movs	r2, #92	; 0x5c
 8005088:	5a9b      	ldrh	r3, [r3, r2]
 800508a:	085b      	lsrs	r3, r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	0011      	movs	r1, r2
 8005092:	0018      	movs	r0, r3
 8005094:	f7ff f970 	bl	8004378 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005098:	e003      	b.n	80050a2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	0018      	movs	r0, r3
 800509e:	f7ff f95b 	bl	8004358 <HAL_UART_RxHalfCpltCallback>
}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b004      	add	sp, #16
 80050a8:	bd80      	pop	{r7, pc}

080050aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b086      	sub	sp, #24
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2288      	movs	r2, #136	; 0x88
 80050bc:	589b      	ldr	r3, [r3, r2]
 80050be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	228c      	movs	r2, #140	; 0x8c
 80050c4:	589b      	ldr	r3, [r3, r2]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	2280      	movs	r2, #128	; 0x80
 80050d0:	4013      	ands	r3, r2
 80050d2:	2b80      	cmp	r3, #128	; 0x80
 80050d4:	d10a      	bne.n	80050ec <UART_DMAError+0x42>
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	2b21      	cmp	r3, #33	; 0x21
 80050da:	d107      	bne.n	80050ec <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2256      	movs	r2, #86	; 0x56
 80050e0:	2100      	movs	r1, #0
 80050e2:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	0018      	movs	r0, r3
 80050e8:	f7ff fe80 	bl	8004dec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2240      	movs	r2, #64	; 0x40
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d10a      	bne.n	8005110 <UART_DMAError+0x66>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b22      	cmp	r3, #34	; 0x22
 80050fe:	d107      	bne.n	8005110 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	225e      	movs	r2, #94	; 0x5e
 8005104:	2100      	movs	r1, #0
 8005106:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	0018      	movs	r0, r3
 800510c:	f7ff feae 	bl	8004e6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	2290      	movs	r2, #144	; 0x90
 8005114:	589b      	ldr	r3, [r3, r2]
 8005116:	2210      	movs	r2, #16
 8005118:	431a      	orrs	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2190      	movs	r1, #144	; 0x90
 800511e:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	0018      	movs	r0, r3
 8005124:	f7ff f920 	bl	8004368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005128:	46c0      	nop			; (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b006      	add	sp, #24
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	225e      	movs	r2, #94	; 0x5e
 8005142:	2100      	movs	r1, #0
 8005144:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2256      	movs	r2, #86	; 0x56
 800514a:	2100      	movs	r1, #0
 800514c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	0018      	movs	r0, r3
 8005152:	f7ff f909 	bl	8004368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	46bd      	mov	sp, r7
 800515a:	b004      	add	sp, #16
 800515c:	bd80      	pop	{r7, pc}

0800515e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005166:	f3ef 8310 	mrs	r3, PRIMASK
 800516a:	60bb      	str	r3, [r7, #8]
  return(result);
 800516c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800516e:	617b      	str	r3, [r7, #20]
 8005170:	2301      	movs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f383 8810 	msr	PRIMASK, r3
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2140      	movs	r1, #64	; 0x40
 8005188:	438a      	bics	r2, r1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f383 8810 	msr	PRIMASK, r3
}
 8005196:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2288      	movs	r2, #136	; 0x88
 800519c:	2120      	movs	r1, #32
 800519e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	0018      	movs	r0, r3
 80051aa:	f7ff f8cd 	bl	8004348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b006      	add	sp, #24
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	46bd      	mov	sp, r7
 80051c2:	b002      	add	sp, #8
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	46bd      	mov	sp, r7
 80051d2:	b002      	add	sp, #8
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	46bd      	mov	sp, r7
 80051e2:	b002      	add	sp, #8
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2284      	movs	r2, #132	; 0x84
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <HAL_UARTEx_DisableFifoMode+0x16>
 80051fa:	2302      	movs	r3, #2
 80051fc:	e027      	b.n	800524e <HAL_UARTEx_DisableFifoMode+0x66>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2284      	movs	r2, #132	; 0x84
 8005202:	2101      	movs	r1, #1
 8005204:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2288      	movs	r2, #136	; 0x88
 800520a:	2124      	movs	r1, #36	; 0x24
 800520c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2101      	movs	r1, #1
 8005222:	438a      	bics	r2, r1
 8005224:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a0b      	ldr	r2, [pc, #44]	; (8005258 <HAL_UARTEx_DisableFifoMode+0x70>)
 800522a:	4013      	ands	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2288      	movs	r2, #136	; 0x88
 8005240:	2120      	movs	r1, #32
 8005242:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2284      	movs	r2, #132	; 0x84
 8005248:	2100      	movs	r1, #0
 800524a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	0018      	movs	r0, r3
 8005250:	46bd      	mov	sp, r7
 8005252:	b004      	add	sp, #16
 8005254:	bd80      	pop	{r7, pc}
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	dfffffff 	.word	0xdfffffff

0800525c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2284      	movs	r2, #132	; 0x84
 800526a:	5c9b      	ldrb	r3, [r3, r2]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005270:	2302      	movs	r3, #2
 8005272:	e02e      	b.n	80052d2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2284      	movs	r2, #132	; 0x84
 8005278:	2101      	movs	r1, #1
 800527a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2288      	movs	r2, #136	; 0x88
 8005280:	2124      	movs	r1, #36	; 0x24
 8005282:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2101      	movs	r1, #1
 8005298:	438a      	bics	r2, r1
 800529a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	08d9      	lsrs	r1, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	0018      	movs	r0, r3
 80052b4:	f000 f854 	bl	8005360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2288      	movs	r2, #136	; 0x88
 80052c4:	2120      	movs	r1, #32
 80052c6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2284      	movs	r2, #132	; 0x84
 80052cc:	2100      	movs	r1, #0
 80052ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	0018      	movs	r0, r3
 80052d4:	46bd      	mov	sp, r7
 80052d6:	b004      	add	sp, #16
 80052d8:	bd80      	pop	{r7, pc}
	...

080052dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2284      	movs	r2, #132	; 0x84
 80052ea:	5c9b      	ldrb	r3, [r3, r2]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e02f      	b.n	8005354 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2284      	movs	r2, #132	; 0x84
 80052f8:	2101      	movs	r1, #1
 80052fa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2288      	movs	r2, #136	; 0x88
 8005300:	2124      	movs	r1, #36	; 0x24
 8005302:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2101      	movs	r1, #1
 8005318:	438a      	bics	r2, r1
 800531a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	4a0e      	ldr	r2, [pc, #56]	; (800535c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005324:	4013      	ands	r3, r2
 8005326:	0019      	movs	r1, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 f813 	bl	8005360 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2288      	movs	r2, #136	; 0x88
 8005346:	2120      	movs	r1, #32
 8005348:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2284      	movs	r2, #132	; 0x84
 800534e:	2100      	movs	r1, #0
 8005350:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	0018      	movs	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	b004      	add	sp, #16
 800535a:	bd80      	pop	{r7, pc}
 800535c:	f1ffffff 	.word	0xf1ffffff

08005360 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	226a      	movs	r2, #106	; 0x6a
 8005374:	2101      	movs	r1, #1
 8005376:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2268      	movs	r2, #104	; 0x68
 800537c:	2101      	movs	r1, #1
 800537e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005380:	e043      	b.n	800540a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005382:	260f      	movs	r6, #15
 8005384:	19bb      	adds	r3, r7, r6
 8005386:	2208      	movs	r2, #8
 8005388:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800538a:	200e      	movs	r0, #14
 800538c:	183b      	adds	r3, r7, r0
 800538e:	2208      	movs	r2, #8
 8005390:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	0e5b      	lsrs	r3, r3, #25
 800539a:	b2da      	uxtb	r2, r3
 800539c:	240d      	movs	r4, #13
 800539e:	193b      	adds	r3, r7, r4
 80053a0:	2107      	movs	r1, #7
 80053a2:	400a      	ands	r2, r1
 80053a4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	0f5b      	lsrs	r3, r3, #29
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	250c      	movs	r5, #12
 80053b2:	197b      	adds	r3, r7, r5
 80053b4:	2107      	movs	r1, #7
 80053b6:	400a      	ands	r2, r1
 80053b8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	197a      	adds	r2, r7, r5
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	4914      	ldr	r1, [pc, #80]	; (8005414 <UARTEx_SetNbDataToProcess+0xb4>)
 80053c4:	5c8a      	ldrb	r2, [r1, r2]
 80053c6:	435a      	muls	r2, r3
 80053c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80053ca:	197b      	adds	r3, r7, r5
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	4a12      	ldr	r2, [pc, #72]	; (8005418 <UARTEx_SetNbDataToProcess+0xb8>)
 80053d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053d2:	0019      	movs	r1, r3
 80053d4:	f7fa ff20 	bl	8000218 <__divsi3>
 80053d8:	0003      	movs	r3, r0
 80053da:	b299      	uxth	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	226a      	movs	r2, #106	; 0x6a
 80053e0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053e2:	19bb      	adds	r3, r7, r6
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	193a      	adds	r2, r7, r4
 80053e8:	7812      	ldrb	r2, [r2, #0]
 80053ea:	490a      	ldr	r1, [pc, #40]	; (8005414 <UARTEx_SetNbDataToProcess+0xb4>)
 80053ec:	5c8a      	ldrb	r2, [r1, r2]
 80053ee:	435a      	muls	r2, r3
 80053f0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80053f2:	193b      	adds	r3, r7, r4
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	4a08      	ldr	r2, [pc, #32]	; (8005418 <UARTEx_SetNbDataToProcess+0xb8>)
 80053f8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053fa:	0019      	movs	r1, r3
 80053fc:	f7fa ff0c 	bl	8000218 <__divsi3>
 8005400:	0003      	movs	r3, r0
 8005402:	b299      	uxth	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2268      	movs	r2, #104	; 0x68
 8005408:	5299      	strh	r1, [r3, r2]
}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b005      	add	sp, #20
 8005410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	08005504 	.word	0x08005504
 8005418:	0800550c 	.word	0x0800550c

0800541c <__libc_init_array>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	2600      	movs	r6, #0
 8005420:	4d0c      	ldr	r5, [pc, #48]	; (8005454 <__libc_init_array+0x38>)
 8005422:	4c0d      	ldr	r4, [pc, #52]	; (8005458 <__libc_init_array+0x3c>)
 8005424:	1b64      	subs	r4, r4, r5
 8005426:	10a4      	asrs	r4, r4, #2
 8005428:	42a6      	cmp	r6, r4
 800542a:	d109      	bne.n	8005440 <__libc_init_array+0x24>
 800542c:	2600      	movs	r6, #0
 800542e:	f000 f821 	bl	8005474 <_init>
 8005432:	4d0a      	ldr	r5, [pc, #40]	; (800545c <__libc_init_array+0x40>)
 8005434:	4c0a      	ldr	r4, [pc, #40]	; (8005460 <__libc_init_array+0x44>)
 8005436:	1b64      	subs	r4, r4, r5
 8005438:	10a4      	asrs	r4, r4, #2
 800543a:	42a6      	cmp	r6, r4
 800543c:	d105      	bne.n	800544a <__libc_init_array+0x2e>
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	00b3      	lsls	r3, r6, #2
 8005442:	58eb      	ldr	r3, [r5, r3]
 8005444:	4798      	blx	r3
 8005446:	3601      	adds	r6, #1
 8005448:	e7ee      	b.n	8005428 <__libc_init_array+0xc>
 800544a:	00b3      	lsls	r3, r6, #2
 800544c:	58eb      	ldr	r3, [r5, r3]
 800544e:	4798      	blx	r3
 8005450:	3601      	adds	r6, #1
 8005452:	e7f2      	b.n	800543a <__libc_init_array+0x1e>
 8005454:	0800551c 	.word	0x0800551c
 8005458:	0800551c 	.word	0x0800551c
 800545c:	0800551c 	.word	0x0800551c
 8005460:	08005520 	.word	0x08005520

08005464 <memset>:
 8005464:	0003      	movs	r3, r0
 8005466:	1882      	adds	r2, r0, r2
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	7019      	strb	r1, [r3, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <_init>:
 8005474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547a:	bc08      	pop	{r3}
 800547c:	469e      	mov	lr, r3
 800547e:	4770      	bx	lr

08005480 <_fini>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr


G0Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f38  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005ff4  08005ff4  00015ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800607c  0800607c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800607c  0800607c  0001607c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006084  08006084  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006084  08006084  00016084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006088  08006088  00016088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800608c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000010  0800609c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  0800609c  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014dc9  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298e  00000000  00000000  00034e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  00037790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00038920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f81  00000000  00000000  000399b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001443f  00000000  00000000  00053939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa459  00000000  00000000  00067d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001121d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004010  00000000  00000000  00112224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005fdc 	.word	0x08005fdc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08005fdc 	.word	0x08005fdc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	okflag = true;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <HAL_UART_RxCpltCallback+0x18>)
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	20000042 	.word	0x20000042

08000638 <HAL_ADC_ConvCpltCallback>:
  return sum / 100;
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dmaBuffer, Buflen);
 8000640:	4904      	ldr	r1, [pc, #16]	; (8000654 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_ADC_ConvCpltCallback+0x20>)
 8000644:	2203      	movs	r2, #3
 8000646:	0018      	movs	r0, r3
 8000648:	f001 f9d0 	bl	80019ec <HAL_ADC_Start_DMA>
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000048 	.word	0x20000048
 8000658:	20000054 	.word	0x20000054

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000662:	f000 fe41 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000666:	f000 f8f7 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066a:	f000 fb41 	bl	8000cf0 <MX_GPIO_Init>
  MX_DMA_Init();
 800066e:	f000 fb11 	bl	8000c94 <MX_DMA_Init>
  MX_ADC1_Init();
 8000672:	f000 f94f 	bl	8000914 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000676:	f000 fa39 	bl	8000aec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800067a:	f000 fa89 	bl	8000b90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800067e:	f000 fad5 	bl	8000c2c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000682:	f000 f9d7 	bl	8000a34 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

   HAL_UART_Receive_DMA(&huart3,(uint8_t* )RxBuf,10);
 8000686:	4962      	ldr	r1, [pc, #392]	; (8000810 <main+0x1b4>)
 8000688:	4b62      	ldr	r3, [pc, #392]	; (8000814 <main+0x1b8>)
 800068a:	220a      	movs	r2, #10
 800068c:	0018      	movs	r0, r3
 800068e:	f004 f88b 	bl	80047a8 <HAL_UART_Receive_DMA>

    /* USER CODE BEGIN 3 */
    //	  count = 38;
    //	  HAL_UART_Transmit(&huart3, (uint8_t *)&count, 1, 10);
    //	  HAL_Delay(1000);
    if (okflag == true)
 8000692:	4b61      	ldr	r3, [pc, #388]	; (8000818 <main+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d050      	beq.n	800073c <main+0xe0>
    {
      int i = 9;
 800069a:	2309      	movs	r3, #9
 800069c:	607b      	str	r3, [r7, #4]
      okflag = false;
 800069e:	4b5e      	ldr	r3, [pc, #376]	; (8000818 <main+0x1bc>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
      while (i--)
 80006a4:	e008      	b.n	80006b8 <main+0x5c>
      {
        tempBuf[i] = RxBuf[i];
 80006a6:	4a5a      	ldr	r2, [pc, #360]	; (8000810 <main+0x1b4>)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	18d3      	adds	r3, r2, r3
 80006ac:	7819      	ldrb	r1, [r3, #0]
 80006ae:	4a5b      	ldr	r2, [pc, #364]	; (800081c <main+0x1c0>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	18d3      	adds	r3, r2, r3
 80006b4:	1c0a      	adds	r2, r1, #0
 80006b6:	701a      	strb	r2, [r3, #0]
      while (i--)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	1e5a      	subs	r2, r3, #1
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1f1      	bne.n	80006a6 <main+0x4a>
      }
      speed = RxBuf[0];
 80006c2:	4b53      	ldr	r3, [pc, #332]	; (8000810 <main+0x1b4>)
 80006c4:	781a      	ldrb	r2, [r3, #0]
 80006c6:	4b56      	ldr	r3, [pc, #344]	; (8000820 <main+0x1c4>)
 80006c8:	701a      	strb	r2, [r3, #0]
      test = RxBuf[2];
 80006ca:	4b51      	ldr	r3, [pc, #324]	; (8000810 <main+0x1b4>)
 80006cc:	789a      	ldrb	r2, [r3, #2]
 80006ce:	4b55      	ldr	r3, [pc, #340]	; (8000824 <main+0x1c8>)
 80006d0:	701a      	strb	r2, [r3, #0]
      turn = RxBuf[4];
 80006d2:	4b4f      	ldr	r3, [pc, #316]	; (8000810 <main+0x1b4>)
 80006d4:	791a      	ldrb	r2, [r3, #4]
 80006d6:	4b54      	ldr	r3, [pc, #336]	; (8000828 <main+0x1cc>)
 80006d8:	701a      	strb	r2, [r3, #0]

      noTurns = 100 * (int)(RxBuf[6]-48) + 10 * (int)(RxBuf[7]-48) + (int)(RxBuf[8]-48);
 80006da:	4b4d      	ldr	r3, [pc, #308]	; (8000810 <main+0x1b4>)
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	3b30      	subs	r3, #48	; 0x30
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	2264      	movs	r2, #100	; 0x64
 80006e4:	4353      	muls	r3, r2
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b49      	ldr	r3, [pc, #292]	; (8000810 <main+0x1b4>)
 80006ea:	79db      	ldrb	r3, [r3, #7]
 80006ec:	3b30      	subs	r3, #48	; 0x30
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	1c19      	adds	r1, r3, #0
 80006f2:	0089      	lsls	r1, r1, #2
 80006f4:	18cb      	adds	r3, r1, r3
 80006f6:	18db      	adds	r3, r3, r3
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	18d3      	adds	r3, r2, r3
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b44      	ldr	r3, [pc, #272]	; (8000810 <main+0x1b4>)
 8000700:	7a1b      	ldrb	r3, [r3, #8]
 8000702:	b29b      	uxth	r3, r3
 8000704:	18d3      	adds	r3, r2, r3
 8000706:	b29b      	uxth	r3, r3
 8000708:	3b30      	subs	r3, #48	; 0x30
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b47      	ldr	r3, [pc, #284]	; (800082c <main+0x1d0>)
 800070e:	801a      	strh	r2, [r3, #0]
      HAL_TIM_Base_Start_IT(&htim1);
 8000710:	4b47      	ldr	r3, [pc, #284]	; (8000830 <main+0x1d4>)
 8000712:	0018      	movs	r0, r3
 8000714:	f003 fb96 	bl	8003e44 <HAL_TIM_Base_Start_IT>
      HAL_GPIO_WritePin(driverDirection_GPIO_Port, driverDirection_Pin, GPIO_PIN_SET);
 8000718:	4b46      	ldr	r3, [pc, #280]	; (8000834 <main+0x1d8>)
 800071a:	2201      	movs	r2, #1
 800071c:	2120      	movs	r1, #32
 800071e:	0018      	movs	r0, r3
 8000720:	f002 fbe4 	bl	8002eec <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(driverEnable_GPIO_Port, driverEnable_Pin, GPIO_PIN_SET);
 8000724:	4b43      	ldr	r3, [pc, #268]	; (8000834 <main+0x1d8>)
 8000726:	2201      	movs	r2, #1
 8000728:	2108      	movs	r1, #8
 800072a:	0018      	movs	r0, r3
 800072c:	f002 fbde 	bl	8002eec <HAL_GPIO_WritePin>

      HAL_UART_Receive_DMA(&huart3, (uint8_t *)RxBuf, 10);
 8000730:	4937      	ldr	r1, [pc, #220]	; (8000810 <main+0x1b4>)
 8000732:	4b38      	ldr	r3, [pc, #224]	; (8000814 <main+0x1b8>)
 8000734:	220a      	movs	r2, #10
 8000736:	0018      	movs	r0, r3
 8000738:	f004 f836 	bl	80047a8 <HAL_UART_Receive_DMA>
    }

    if (timerFlag)
 800073c:	4b3e      	ldr	r3, [pc, #248]	; (8000838 <main+0x1dc>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d05e      	beq.n	8000804 <main+0x1a8>
    {
      timerFlag = false;
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <main+0x1dc>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
      timerCount += 1;
 800074c:	4b3b      	ldr	r3, [pc, #236]	; (800083c <main+0x1e0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	3301      	adds	r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <main+0x1e0>)
 8000758:	701a      	strb	r2, [r3, #0]
      switch (timerCount)
 800075a:	4b38      	ldr	r3, [pc, #224]	; (800083c <main+0x1e0>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b24      	cmp	r3, #36	; 0x24
 8000762:	d037      	beq.n	80007d4 <main+0x178>
 8000764:	dc95      	bgt.n	8000692 <main+0x36>
 8000766:	2b18      	cmp	r3, #24
 8000768:	d04e      	beq.n	8000808 <main+0x1ac>
 800076a:	dc92      	bgt.n	8000692 <main+0x36>
 800076c:	2b01      	cmp	r3, #1
 800076e:	d002      	beq.n	8000776 <main+0x11a>
 8000770:	2b0c      	cmp	r3, #12
 8000772:	d00e      	beq.n	8000792 <main+0x136>
 8000774:	e04b      	b.n	800080e <main+0x1b2>
      {
      case 1:

        HAL_GPIO_WritePin(driverStepClock_GPIO_Port, driverStepClock_Pin, GPIO_PIN_SET);
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <main+0x1d8>)
 8000778:	2201      	movs	r2, #1
 800077a:	2110      	movs	r1, #16
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fbb5 	bl	8002eec <HAL_GPIO_WritePin>
        motorStepCount += 1;
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <main+0x1e4>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	b29b      	uxth	r3, r3
 8000788:	3301      	adds	r3, #1
 800078a:	b29a      	uxth	r2, r3
 800078c:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <main+0x1e4>)
 800078e:	801a      	strh	r2, [r3, #0]
        break;
 8000790:	e03d      	b.n	800080e <main+0x1b2>
      case 12:
        HAL_GPIO_WritePin(driverStepClock_GPIO_Port, driverStepClock_Pin, GPIO_PIN_RESET);
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <main+0x1d8>)
 8000794:	2200      	movs	r2, #0
 8000796:	2110      	movs	r1, #16
 8000798:	0018      	movs	r0, r3
 800079a:	f002 fba7 	bl	8002eec <HAL_GPIO_WritePin>
        if (motorStepCount == noSteptoGive)
 800079e:	4b28      	ldr	r3, [pc, #160]	; (8000840 <main+0x1e4>)
 80007a0:	881b      	ldrh	r3, [r3, #0]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <main+0x1e8>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	429a      	cmp	r2, r3
 80007ac:	d107      	bne.n	80007be <main+0x162>
        {
          motorStepCount = 0;
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <main+0x1e4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	801a      	strh	r2, [r3, #0]
          HAL_GPIO_TogglePin(driverDirection_GPIO_Port, driverDirection_Pin);
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <main+0x1d8>)
 80007b6:	2120      	movs	r1, #32
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fbb4 	bl	8002f26 <HAL_GPIO_TogglePin>
        }
        // write logic for ADC Start and its timer (on ADCwithdma and timer for its trigger)

        // ADC Logic START
        HAL_TIM_Base_Start(&htim2);
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <main+0x1ec>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f003 faeb 	bl	8003d9c <HAL_TIM_Base_Start>
          HAL_ADC_Start_DMA(&hadc1, (uint32_t *)dmaBuffer, Buflen);
 80007c6:	4921      	ldr	r1, [pc, #132]	; (800084c <main+0x1f0>)
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <main+0x1f4>)
 80007ca:	2203      	movs	r2, #3
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 f90d 	bl	80019ec <HAL_ADC_Start_DMA>
        // ADC Logic END

        break;
 80007d2:	e01c      	b.n	800080e <main+0x1b2>
        // Data Transmit START

        // Data Transmit END

      case 36:
        timerCount = 0;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <main+0x1e0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
        if (motorRotateCount == 2 * noSteptoGive)
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <main+0x1f8>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	001a      	movs	r2, r3
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <main+0x1e8>)
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d10e      	bne.n	800080c <main+0x1b0>
        {
          HAL_TIM_Base_Stop_IT(&htim1);
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <main+0x1d4>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f003 fb83 	bl	8003efc <HAL_TIM_Base_Stop_IT>
          HAL_GPIO_WritePin(driverEnable_GPIO_Port, driverEnable_Pin, GPIO_PIN_RESET);
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <main+0x1d8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	2108      	movs	r1, #8
 80007fc:	0018      	movs	r0, r3
 80007fe:	f002 fb75 	bl	8002eec <HAL_GPIO_WritePin>
        }
        break;
 8000802:	e003      	b.n	800080c <main+0x1b0>
      }
    }
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	e744      	b.n	8000692 <main+0x36>
        break;
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	e742      	b.n	8000692 <main+0x36>
        break;
 800080c:	46c0      	nop			; (mov r8, r8)
    if (okflag == true)
 800080e:	e740      	b.n	8000692 <main+0x36>
 8000810:	2000002c 	.word	0x2000002c
 8000814:	20000240 	.word	0x20000240
 8000818:	20000042 	.word	0x20000042
 800081c:	20000038 	.word	0x20000038
 8000820:	20000043 	.word	0x20000043
 8000824:	20000044 	.word	0x20000044
 8000828:	20000045 	.word	0x20000045
 800082c:	20000046 	.word	0x20000046
 8000830:	20000114 	.word	0x20000114
 8000834:	50000400 	.word	0x50000400
 8000838:	2000004f 	.word	0x2000004f
 800083c:	2000004e 	.word	0x2000004e
 8000840:	20000050 	.word	0x20000050
 8000844:	20000000 	.word	0x20000000
 8000848:	20000160 	.word	0x20000160
 800084c:	20000048 	.word	0x20000048
 8000850:	20000054 	.word	0x20000054
 8000854:	20000052 	.word	0x20000052

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b093      	sub	sp, #76	; 0x4c
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	2410      	movs	r4, #16
 8000860:	193b      	adds	r3, r7, r4
 8000862:	0018      	movs	r0, r3
 8000864:	2338      	movs	r3, #56	; 0x38
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f005 fbaf 	bl	8005fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086e:	003b      	movs	r3, r7
 8000870:	0018      	movs	r0, r3
 8000872:	2310      	movs	r3, #16
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f005 fba8 	bl	8005fcc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	0018      	movs	r0, r3
 8000882:	f002 fb6b 	bl	8002f5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2202      	movs	r2, #2
 800088a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	0052      	lsls	r2, r2, #1
 8000892:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000894:	0021      	movs	r1, r4
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2240      	movs	r2, #64	; 0x40
 80008a0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2202      	movs	r2, #2
 80008a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2202      	movs	r2, #2
 80008ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2208      	movs	r2, #8
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0292      	lsls	r2, r2, #10
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0492      	lsls	r2, r2, #18
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0592      	lsls	r2, r2, #22
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	0018      	movs	r0, r3
 80008d6:	f002 fb8d 	bl	8002ff4 <HAL_RCC_OscConfig>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008de:	f000 fa7d 	bl	8000ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	003b      	movs	r3, r7
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e8:	003b      	movs	r3, r7
 80008ea:	2202      	movs	r2, #2
 80008ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	003b      	movs	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008f4:	003b      	movs	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008fa:	003b      	movs	r3, r7
 80008fc:	2102      	movs	r1, #2
 80008fe:	0018      	movs	r0, r3
 8000900:	f002 fe92 	bl	8003628 <HAL_RCC_ClockConfig>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000908:	f000 fa68 	bl	8000ddc <Error_Handler>
  }
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b013      	add	sp, #76	; 0x4c
 8000912:	bd90      	pop	{r4, r7, pc}

08000914 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	0018      	movs	r0, r3
 800091e:	230c      	movs	r3, #12
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f005 fb52 	bl	8005fcc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000928:	4b3e      	ldr	r3, [pc, #248]	; (8000a24 <MX_ADC1_Init+0x110>)
 800092a:	4a3f      	ldr	r2, [pc, #252]	; (8000a28 <MX_ADC1_Init+0x114>)
 800092c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800092e:	4b3d      	ldr	r3, [pc, #244]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000934:	4b3b      	ldr	r3, [pc, #236]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800093a:	4b3a      	ldr	r3, [pc, #232]	; (8000a24 <MX_ADC1_Init+0x110>)
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000940:	4b38      	ldr	r3, [pc, #224]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	0392      	lsls	r2, r2, #14
 8000946:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000948:	4b36      	ldr	r3, [pc, #216]	; (8000a24 <MX_ADC1_Init+0x110>)
 800094a:	2208      	movs	r2, #8
 800094c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094e:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000950:	2200      	movs	r2, #0
 8000952:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000956:	2200      	movs	r2, #0
 8000958:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800095a:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <MX_ADC1_Init+0x110>)
 800095c:	2200      	movs	r2, #0
 800095e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000962:	2203      	movs	r2, #3
 8000964:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000968:	2220      	movs	r2, #32
 800096a:	2100      	movs	r1, #0
 800096c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800096e:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000970:	2290      	movs	r2, #144	; 0x90
 8000972:	00d2      	lsls	r2, r2, #3
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000978:	22c0      	movs	r2, #192	; 0xc0
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000980:	222c      	movs	r2, #44	; 0x2c
 8000982:	2101      	movs	r1, #1
 8000984:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000986:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800098c:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <MX_ADC1_Init+0x110>)
 800098e:	2200      	movs	r2, #0
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000992:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000994:	2200      	movs	r2, #0
 8000996:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <MX_ADC1_Init+0x110>)
 800099a:	223c      	movs	r2, #60	; 0x3c
 800099c:	2100      	movs	r1, #0
 800099e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009a0:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <MX_ADC1_Init+0x110>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <MX_ADC1_Init+0x110>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fe77 	bl	800169c <HAL_ADC_Init>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80009b2:	f000 fa13 	bl	8000ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	1d3a      	adds	r2, r7, #4
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_ADC1_Init+0x110>)
 80009cc:	0011      	movs	r1, r2
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 f9ca 	bl	8001d68 <HAL_ADC_ConfigChannel>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009d8:	f000 fa00 	bl	8000ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <MX_ADC1_Init+0x118>)
 80009e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2204      	movs	r2, #4
 80009e6:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e8:	1d3a      	adds	r2, r7, #4
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_ADC1_Init+0x110>)
 80009ec:	0011      	movs	r1, r2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 f9ba 	bl	8001d68 <HAL_ADC_ConfigChannel>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80009f8:	f000 f9f0 	bl	8000ddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4a0c      	ldr	r2, [pc, #48]	; (8000a30 <MX_ADC1_Init+0x11c>)
 8000a00:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2208      	movs	r2, #8
 8000a06:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	1d3a      	adds	r2, r7, #4
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_ADC1_Init+0x110>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 f9aa 	bl	8001d68 <HAL_ADC_ConfigChannel>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8000a18:	f000 f9e0 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b004      	add	sp, #16
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000054 	.word	0x20000054
 8000a28:	40012400 	.word	0x40012400
 8000a2c:	04000002 	.word	0x04000002
 8000a30:	10000010 	.word	0x10000010

08000a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2310      	movs	r3, #16
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f005 fac1 	bl	8005fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	230c      	movs	r3, #12
 8000a50:	001a      	movs	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f005 faba 	bl	8005fcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a58:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000a5a:	4a22      	ldr	r2, [pc, #136]	; (8000ae4 <MX_TIM1_Init+0xb0>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000a5e:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000a60:	223f      	movs	r2, #63	; 0x3f
 8000a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <MX_TIM1_Init+0xb4>)
 8000a6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f003 f931 	bl	8003cec <HAL_TIM_Base_Init>
 8000a8a:	1e03      	subs	r3, r0, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000a8e:	f000 f9a5 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a92:	2110      	movs	r1, #16
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2280      	movs	r2, #128	; 0x80
 8000a98:	0152      	lsls	r2, r2, #5
 8000a9a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a9c:	187a      	adds	r2, r7, r1
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000aa0:	0011      	movs	r1, r2
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f003 fb8a 	bl	80041bc <HAL_TIM_ConfigClockSource>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f000 f996 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac2:	1d3a      	adds	r2, r7, #4
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_TIM1_Init+0xac>)
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f003 fd91 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	1e03      	subs	r3, r0, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000ad2:	f000 f983 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b008      	add	sp, #32
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	20000114 	.word	0x20000114
 8000ae4:	40012c00 	.word	0x40012c00
 8000ae8:	000003e7 	.word	0x000003e7

08000aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	2310      	movs	r3, #16
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	0018      	movs	r0, r3
 8000af8:	2310      	movs	r3, #16
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f005 fa65 	bl	8005fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	0018      	movs	r0, r3
 8000b06:	230c      	movs	r3, #12
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f005 fa5e 	bl	8005fcc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b10:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	05d2      	lsls	r2, r2, #23
 8000b16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b1a:	223f      	movs	r2, #63	; 0x3f
 8000b1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30-1;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b26:	221d      	movs	r2, #29
 8000b28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f003 f8d7 	bl	8003cec <HAL_TIM_Base_Init>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b42:	f000 f94b 	bl	8000ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b46:	2110      	movs	r1, #16
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	0152      	lsls	r2, r2, #5
 8000b4e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b50:	187a      	adds	r2, r7, r1
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b54:	0011      	movs	r1, r2
 8000b56:	0018      	movs	r0, r3
 8000b58:	f003 fb30 	bl	80041bc <HAL_TIM_ConfigClockSource>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b60:	f000 f93c 	bl	8000ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2220      	movs	r2, #32
 8000b68:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b70:	1d3a      	adds	r2, r7, #4
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_TIM2_Init+0xa0>)
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f003 fd3a 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b80:	f000 f92c 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b008      	add	sp, #32
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000160 	.word	0x20000160

08000b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000b96:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <MX_USART2_UART_Init+0x98>)
 8000b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000b9c:	22e1      	movs	r2, #225	; 0xe1
 8000b9e:	0252      	lsls	r2, r2, #9
 8000ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb4:	4b1b      	ldr	r3, [pc, #108]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f003 fd8e 	bl	80046fc <HAL_UART_Init>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 f8fa 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bea:	2100      	movs	r1, #0
 8000bec:	0018      	movs	r0, r3
 8000bee:	f005 f8e9 	bl	8005dc4 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf2:	1e03      	subs	r3, r0, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 f8f1 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f005 f920 	bl	8005e44 <HAL_UARTEx_SetRxFifoThreshold>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c08:	f000 f8e8 	bl	8000ddc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <MX_USART2_UART_Init+0x94>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f005 f89e 	bl	8005d50 <HAL_UARTEx_DisableFifoMode>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c18:	f000 f8e0 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	200001ac 	.word	0x200001ac
 8000c28:	40004400 	.word	0x40004400

08000c2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <MX_USART3_UART_Init+0x64>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c38:	22e1      	movs	r2, #225	; 0xe1
 8000c3a:	0252      	lsls	r2, r2, #9
 8000c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <MX_USART3_UART_Init+0x60>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f003 fd40 	bl	80046fc <HAL_UART_Init>
 8000c7c:	1e03      	subs	r3, r0, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c80:	f000 f8ac 	bl	8000ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	20000240 	.word	0x20000240
 8000c90:	40004800 	.word	0x40004800

08000c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_DMA_Init+0x58>)
 8000c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_DMA_Init+0x58>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_DMA_Init+0x58>)
 8000ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2009      	movs	r0, #9
 8000cb8:	f001 fc0e 	bl	80024d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cbc:	2009      	movs	r0, #9
 8000cbe:	f001 fc20 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	200a      	movs	r0, #10
 8000cc8:	f001 fc06 	bl	80024d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f001 fc18 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMAMUX1_OVR_IRQn, 0, 0);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	200b      	movs	r0, #11
 8000cd8:	f001 fbfe 	bl	80024d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMAMUX1_OVR_IRQn);
 8000cdc:	200b      	movs	r0, #11
 8000cde:	f001 fc10 	bl	8002502 <HAL_NVIC_EnableIRQ>

}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b002      	add	sp, #8
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40021000 	.word	0x40021000

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b08b      	sub	sp, #44	; 0x2c
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	2414      	movs	r4, #20
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	2314      	movs	r3, #20
 8000cfe:	001a      	movs	r2, r3
 8000d00:	2100      	movs	r1, #0
 8000d02:	f005 f963 	bl	8005fcc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	4b33      	ldr	r3, [pc, #204]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0a:	4b32      	ldr	r3, [pc, #200]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34
 8000d12:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d16:	2204      	movs	r2, #4
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d1e:	4b2d      	ldr	r3, [pc, #180]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d22:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d24:	2120      	movs	r1, #32
 8000d26:	430a      	orrs	r2, r1
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	2220      	movs	r2, #32
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b27      	ldr	r3, [pc, #156]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d3a:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	635a      	str	r2, [r3, #52]	; 0x34
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d46:	2201      	movs	r2, #1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d54:	2102      	movs	r1, #2
 8000d56:	430a      	orrs	r2, r1
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <MX_GPIO_Init+0xe4>)
 8000d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5e:	2202      	movs	r2, #2
 8000d60:	4013      	ands	r3, r2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000d66:	23a0      	movs	r3, #160	; 0xa0
 8000d68:	05db      	lsls	r3, r3, #23
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f002 f8bc 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, driverEnable_Pin|driverStepClock_Pin|driverDirection_Pin, GPIO_PIN_RESET);
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	2138      	movs	r1, #56	; 0x38
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f002 f8b6 	bl	8002eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	2220      	movs	r2, #32
 8000d84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	2201      	movs	r2, #1
 8000d8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	2202      	movs	r2, #2
 8000d96:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000d98:	193a      	adds	r2, r7, r4
 8000d9a:	23a0      	movs	r3, #160	; 0xa0
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f001 ff3f 	bl	8002c24 <HAL_GPIO_Init>

  /*Configure GPIO pins : driverEnable_Pin driverStepClock_Pin driverDirection_Pin */
  GPIO_InitStruct.Pin = driverEnable_Pin|driverStepClock_Pin|driverDirection_Pin;
 8000da6:	0021      	movs	r1, r4
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	2238      	movs	r2, #56	; 0x38
 8000dac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2201      	movs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <MX_GPIO_Init+0xe8>)
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	0010      	movs	r0, r2
 8000dc8:	f001 ff2c 	bl	8002c24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b00b      	add	sp, #44	; 0x2c
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	50000400 	.word	0x50000400

08000ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de0:	b672      	cpsid	i
}
 8000de2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <Error_Handler+0x8>
	...

08000de8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x44>)
 8000df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_MspInit+0x44>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	430a      	orrs	r2, r1
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x44>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4013      	ands	r3, r2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <HAL_MspInit+0x44>)
 8000e08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_MspInit+0x44>)
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	0549      	lsls	r1, r1, #21
 8000e10:	430a      	orrs	r2, r1
 8000e12:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_MspInit+0x44>)
 8000e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	055b      	lsls	r3, r3, #21
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b002      	add	sp, #8
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40021000 	.word	0x40021000

08000e30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b097      	sub	sp, #92	; 0x5c
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	2344      	movs	r3, #68	; 0x44
 8000e3a:	18fb      	adds	r3, r7, r3
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	2314      	movs	r3, #20
 8000e40:	001a      	movs	r2, r3
 8000e42:	2100      	movs	r1, #0
 8000e44:	f005 f8c2 	bl	8005fcc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	2410      	movs	r4, #16
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2334      	movs	r3, #52	; 0x34
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f005 f8ba 	bl	8005fcc <memset>
  if(hadc->Instance==ADC1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a39      	ldr	r2, [pc, #228]	; (8000f44 <HAL_ADC_MspInit+0x114>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d16c      	bne.n	8000f3c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2280      	movs	r2, #128	; 0x80
 8000e66:	01d2      	lsls	r2, r2, #7
 8000e68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	0018      	movs	r0, r3
 8000e74:	f002 fd82 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 8000e78:	1e03      	subs	r3, r0, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000e7c:	f7ff ffae 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e80:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <HAL_ADC_MspInit+0x118>)
 8000e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <HAL_ADC_MspInit+0x118>)
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0349      	lsls	r1, r1, #13
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e8e:	4b2e      	ldr	r3, [pc, #184]	; (8000f48 <HAL_ADC_MspInit+0x118>)
 8000e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	035b      	lsls	r3, r3, #13
 8000e96:	4013      	ands	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b2a      	ldr	r3, [pc, #168]	; (8000f48 <HAL_ADC_MspInit+0x118>)
 8000e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_ADC_MspInit+0x118>)
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <HAL_ADC_MspInit+0x118>)
 8000eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eac:	2201      	movs	r2, #1
 8000eae:	4013      	ands	r3, r2
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8000eb4:	2144      	movs	r1, #68	; 0x44
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2213      	movs	r2, #19
 8000eba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec8:	187a      	adds	r2, r7, r1
 8000eca:	23a0      	movs	r3, #160	; 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 fea7 	bl	8002c24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	; (8000f50 <HAL_ADC_MspInit+0x120>)
 8000eda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000ede:	2205      	movs	r2, #5
 8000ee0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee2:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000eee:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000efe:	2280      	movs	r2, #128	; 0x80
 8000f00:	00d2      	lsls	r2, r2, #3
 8000f02:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000f06:	2220      	movs	r2, #32
 8000f08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fb12 	bl	800253c <HAL_DMA_Init>
 8000f18:	1e03      	subs	r3, r0, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8000f1c:	f7ff ff5e 	bl	8000ddc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000f24:	651a      	str	r2, [r3, #80]	; 0x50
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <HAL_ADC_MspInit+0x11c>)
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2100      	movs	r1, #0
 8000f30:	200c      	movs	r0, #12
 8000f32:	f001 fad1 	bl	80024d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000f36:	200c      	movs	r0, #12
 8000f38:	f001 fae3 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b017      	add	sp, #92	; 0x5c
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	40012400 	.word	0x40012400
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	200000b8 	.word	0x200000b8
 8000f50:	40020008 	.word	0x40020008

08000f54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b093      	sub	sp, #76	; 0x4c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5c:	2414      	movs	r4, #20
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	0018      	movs	r0, r3
 8000f62:	2334      	movs	r3, #52	; 0x34
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f005 f830 	bl	8005fcc <memset>
  if(htim_base->Instance==TIM1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a23      	ldr	r2, [pc, #140]	; (8001000 <HAL_TIM_Base_MspInit+0xac>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d125      	bne.n	8000fc2 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	0392      	lsls	r2, r2, #14
 8000f7c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2200      	movs	r2, #0
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	0018      	movs	r0, r3
 8000f88:	f002 fcf8 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000f90:	f7ff ff24 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <HAL_TIM_Base_MspInit+0xb0>)
 8000f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_TIM_Base_MspInit+0xb0>)
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	0109      	lsls	r1, r1, #4
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_TIM_Base_MspInit+0xb0>)
 8000fa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	200d      	movs	r0, #13
 8000fb6:	f001 fa8f 	bl	80024d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000fba:	200d      	movs	r0, #13
 8000fbc:	f001 faa1 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fc0:	e019      	b.n	8000ff6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	05db      	lsls	r3, r3, #23
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d113      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_TIM_Base_MspInit+0xb0>)
 8000fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_TIM_Base_MspInit+0xb0>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <HAL_TIM_Base_MspInit+0xb0>)
 8000fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	200f      	movs	r0, #15
 8000fec:	f001 fa74 	bl	80024d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	f001 fa86 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b013      	add	sp, #76	; 0x4c
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	40012c00 	.word	0x40012c00
 8001004:	40021000 	.word	0x40021000

08001008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b099      	sub	sp, #100	; 0x64
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001010:	234c      	movs	r3, #76	; 0x4c
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	0018      	movs	r0, r3
 8001016:	2314      	movs	r3, #20
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f004 ffd6 	bl	8005fcc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001020:	2418      	movs	r4, #24
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0018      	movs	r0, r3
 8001026:	2334      	movs	r3, #52	; 0x34
 8001028:	001a      	movs	r2, r3
 800102a:	2100      	movs	r1, #0
 800102c:	f004 ffce 	bl	8005fcc <memset>
  if(huart->Instance==USART2)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a56      	ldr	r2, [pc, #344]	; (8001190 <HAL_UART_MspInit+0x188>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d13f      	bne.n	80010ba <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103a:	193b      	adds	r3, r7, r4
 800103c:	2202      	movs	r2, #2
 800103e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001040:	193b      	adds	r3, r7, r4
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001046:	193b      	adds	r3, r7, r4
 8001048:	0018      	movs	r0, r3
 800104a:	f002 fc97 	bl	800397c <HAL_RCCEx_PeriphCLKConfig>
 800104e:	1e03      	subs	r3, r0, #0
 8001050:	d001      	beq.n	8001056 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001052:	f7ff fec3 	bl	8000ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001056:	4b4f      	ldr	r3, [pc, #316]	; (8001194 <HAL_UART_MspInit+0x18c>)
 8001058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800105a:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <HAL_UART_MspInit+0x18c>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	0289      	lsls	r1, r1, #10
 8001060:	430a      	orrs	r2, r1
 8001062:	63da      	str	r2, [r3, #60]	; 0x3c
 8001064:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <HAL_UART_MspInit+0x18c>)
 8001066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	4013      	ands	r3, r2
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <HAL_UART_MspInit+0x18c>)
 8001074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001076:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_UART_MspInit+0x18c>)
 8001078:	2101      	movs	r1, #1
 800107a:	430a      	orrs	r2, r1
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
 800107e:	4b45      	ldr	r3, [pc, #276]	; (8001194 <HAL_UART_MspInit+0x18c>)
 8001080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001082:	2201      	movs	r2, #1
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 800108a:	214c      	movs	r1, #76	; 0x4c
 800108c:	187b      	adds	r3, r7, r1
 800108e:	220c      	movs	r2, #12
 8001090:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	187b      	adds	r3, r7, r1
 8001094:	2202      	movs	r2, #2
 8001096:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001098:	187b      	adds	r3, r7, r1
 800109a:	2201      	movs	r2, #1
 800109c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	2201      	movs	r2, #1
 80010a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	187a      	adds	r2, r7, r1
 80010ac:	23a0      	movs	r3, #160	; 0xa0
 80010ae:	05db      	lsls	r3, r3, #23
 80010b0:	0011      	movs	r1, r2
 80010b2:	0018      	movs	r0, r3
 80010b4:	f001 fdb6 	bl	8002c24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010b8:	e066      	b.n	8001188 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a36      	ldr	r2, [pc, #216]	; (8001198 <HAL_UART_MspInit+0x190>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d161      	bne.n	8001188 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c4:	4b33      	ldr	r3, [pc, #204]	; (8001194 <HAL_UART_MspInit+0x18c>)
 80010c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <HAL_UART_MspInit+0x18c>)
 80010ca:	2180      	movs	r1, #128	; 0x80
 80010cc:	02c9      	lsls	r1, r1, #11
 80010ce:	430a      	orrs	r2, r1
 80010d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <HAL_UART_MspInit+0x18c>)
 80010d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	02db      	lsls	r3, r3, #11
 80010da:	4013      	ands	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_UART_MspInit+0x18c>)
 80010e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_UART_MspInit+0x18c>)
 80010e6:	2104      	movs	r1, #4
 80010e8:	430a      	orrs	r2, r1
 80010ea:	635a      	str	r2, [r3, #52]	; 0x34
 80010ec:	4b29      	ldr	r3, [pc, #164]	; (8001194 <HAL_UART_MspInit+0x18c>)
 80010ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f0:	2204      	movs	r2, #4
 80010f2:	4013      	ands	r3, r2
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010f8:	214c      	movs	r1, #76	; 0x4c
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2230      	movs	r2, #48	; 0x30
 80010fe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2202      	movs	r2, #2
 8001104:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001118:	187b      	adds	r3, r7, r1
 800111a:	4a20      	ldr	r2, [pc, #128]	; (800119c <HAL_UART_MspInit+0x194>)
 800111c:	0019      	movs	r1, r3
 800111e:	0010      	movs	r0, r2
 8001120:	f001 fd80 	bl	8002c24 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel2;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <HAL_UART_MspInit+0x198>)
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_UART_MspInit+0x19c>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_UART_MspInit+0x198>)
 800112c:	2236      	movs	r2, #54	; 0x36
 800112e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_UART_MspInit+0x198>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <HAL_UART_MspInit+0x198>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_UART_MspInit+0x198>)
 800113e:	2280      	movs	r2, #128	; 0x80
 8001140:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_UART_MspInit+0x198>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <HAL_UART_MspInit+0x198>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_UART_MspInit+0x198>)
 8001150:	2200      	movs	r2, #0
 8001152:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_UART_MspInit+0x198>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_UART_MspInit+0x198>)
 800115c:	0018      	movs	r0, r3
 800115e:	f001 f9ed 	bl	800253c <HAL_DMA_Init>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d001      	beq.n	800116a <HAL_UART_MspInit+0x162>
      Error_Handler();
 8001166:	f7ff fe39 	bl	8000ddc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2180      	movs	r1, #128	; 0x80
 800116e:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <HAL_UART_MspInit+0x198>)
 8001170:	505a      	str	r2, [r3, r1]
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_UART_MspInit+0x198>)
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_4_LPUART1_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	201d      	movs	r0, #29
 800117e:	f001 f9ab 	bl	80024d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_LPUART1_IRQn);
 8001182:	201d      	movs	r0, #29
 8001184:	f001 f9bd 	bl	8002502 <HAL_NVIC_EnableIRQ>
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b019      	add	sp, #100	; 0x64
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	40004400 	.word	0x40004400
 8001194:	40021000 	.word	0x40021000
 8001198:	40004800 	.word	0x40004800
 800119c:	50000800 	.word	0x50000800
 80011a0:	200002d4 	.word	0x200002d4
 80011a4:	4002001c 	.word	0x4002001c

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f8f6 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011dc:	4b03      	ldr	r3, [pc, #12]	; (80011ec <DMA1_Channel1_IRQHandler+0x14>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f001 fb88 	bl	80028f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	200000b8 	.word	0x200000b8

080011f0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <DMA1_Channel2_3_IRQHandler+0x14>)
 80011f6:	0018      	movs	r0, r3
 80011f8:	f001 fb7c 	bl	80028f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	200002d4 	.word	0x200002d4

08001208 <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6, channel 7 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 0 */
  // Handle DMAMUX
  // Handle DMA1_Channel1
  HAL_DMAEx_MUX_IRQHandler(&hdma_adc1);
 800120c:	4b03      	ldr	r3, [pc, #12]	; (800121c <DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler+0x14>)
 800120e:	0018      	movs	r0, r3
 8001210:	f001 fcb2 	bl	8002b78 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMAMUX1_OVR_IRQn 1 */
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	200000b8 	.word	0x200000b8

08001220 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <ADC1_COMP_IRQHandler+0x14>)
 8001226:	0018      	movs	r0, r3
 8001228:	f000 fc6e 	bl	8001b08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	20000054 	.word	0x20000054

08001238 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	timerFlag = true;
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x18>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x1c>)
 8001244:	0018      	movs	r0, r3
 8001246:	f002 fe87 	bl	8003f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000004f 	.word	0x2000004f
 8001254:	20000114 	.word	0x20000114

08001258 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800125c:	4b03      	ldr	r3, [pc, #12]	; (800126c <TIM2_IRQHandler+0x14>)
 800125e:	0018      	movs	r0, r3
 8001260:	f002 fe7a 	bl	8003f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000160 	.word	0x20000160

08001270 <USART3_4_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4 and LPUART1 interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void USART3_4_LPUART1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <USART3_4_LPUART1_IRQHandler+0x14>)
 8001276:	0018      	movs	r0, r3
 8001278:	f003 faf4 	bl	8004864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_LPUART1_IRQn 1 */
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	20000240 	.word	0x20000240

08001288 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001296:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001298:	f7ff fff6 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopForever+0xe>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopForever+0x16>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012c2:	f004 fe5f 	bl	8005f84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80012c6:	f7ff f9c9 	bl	800065c <main>

080012ca <LoopForever>:

LoopForever:
  b LoopForever
 80012ca:	e7fe      	b.n	80012ca <LoopForever>
  ldr   r0, =_estack
 80012cc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80012d8:	0800608c 	.word	0x0800608c
  ldr r2, =_sbss
 80012dc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80012e0:	20000334 	.word	0x20000334

080012e4 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <CEC_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_Init+0x3c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_Init+0x3c>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0049      	lsls	r1, r1, #1
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f810 	bl	8001328 <HAL_InitTick>
 8001308:	1e03      	subs	r3, r0, #0
 800130a:	d003      	beq.n	8001314 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800130c:	1dfb      	adds	r3, r7, #7
 800130e:	2201      	movs	r2, #1
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	e001      	b.n	8001318 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fd68 	bl	8000de8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40022000 	.word	0x40022000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001330:	230f      	movs	r3, #15
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_InitTick+0x88>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d02b      	beq.n	8001398 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_InitTick+0x8c>)
 8001342:	681c      	ldr	r4, [r3, #0]
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_InitTick+0x88>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	0019      	movs	r1, r3
 800134a:	23fa      	movs	r3, #250	; 0xfa
 800134c:	0098      	lsls	r0, r3, #2
 800134e:	f7fe fed9 	bl	8000104 <__udivsi3>
 8001352:	0003      	movs	r3, r0
 8001354:	0019      	movs	r1, r3
 8001356:	0020      	movs	r0, r4
 8001358:	f7fe fed4 	bl	8000104 <__udivsi3>
 800135c:	0003      	movs	r3, r0
 800135e:	0018      	movs	r0, r3
 8001360:	f001 f8df 	bl	8002522 <HAL_SYSTICK_Config>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d112      	bne.n	800138e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d80a      	bhi.n	8001384 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	2301      	movs	r3, #1
 8001372:	425b      	negs	r3, r3
 8001374:	2200      	movs	r2, #0
 8001376:	0018      	movs	r0, r3
 8001378:	f001 f8ae 	bl	80024d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_InitTick+0x90>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e00d      	b.n	80013a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001384:	230f      	movs	r3, #15
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e008      	b.n	80013a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800138e:	230f      	movs	r3, #15
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e003      	b.n	80013a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001398:	230f      	movs	r3, #15
 800139a:	18fb      	adds	r3, r7, r3
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80013a0:	230f      	movs	r3, #15
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b005      	add	sp, #20
 80013ac:	bd90      	pop	{r4, r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	2000000c 	.word	0x2000000c
 80013b4:	20000004 	.word	0x20000004
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	001a      	movs	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x20>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	18d2      	adds	r2, r2, r3
 80013cc:	4b03      	ldr	r3, [pc, #12]	; (80013dc <HAL_IncTick+0x20>)
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	20000330 	.word	0x20000330

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b02      	ldr	r3, [pc, #8]	; (80013f0 <HAL_GetTick+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	20000330 	.word	0x20000330

080013f4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001404:	401a      	ands	r2, r3
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	fe3fffff 	.word	0xfe3fffff

0800141c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	23e0      	movs	r3, #224	; 0xe0
 800142a:	045b      	lsls	r3, r3, #17
 800142c:	4013      	ands	r3, r2
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b002      	add	sp, #8
 8001434:	bd80      	pop	{r7, pc}

08001436 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b084      	sub	sp, #16
 800143a:	af00      	add	r7, sp, #0
 800143c:	60f8      	str	r0, [r7, #12]
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	2104      	movs	r1, #4
 800144a:	400a      	ands	r2, r1
 800144c:	2107      	movs	r1, #7
 800144e:	4091      	lsls	r1, r2
 8001450:	000a      	movs	r2, r1
 8001452:	43d2      	mvns	r2, r2
 8001454:	401a      	ands	r2, r3
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2104      	movs	r1, #4
 800145a:	400b      	ands	r3, r1
 800145c:	6879      	ldr	r1, [r7, #4]
 800145e:	4099      	lsls	r1, r3
 8001460:	000b      	movs	r3, r1
 8001462:	431a      	orrs	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}

08001470 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	2104      	movs	r1, #4
 8001482:	400a      	ands	r2, r1
 8001484:	2107      	movs	r1, #7
 8001486:	4091      	lsls	r1, r2
 8001488:	000a      	movs	r2, r1
 800148a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2104      	movs	r1, #4
 8001490:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001492:	40da      	lsrs	r2, r3
 8001494:	0013      	movs	r3, r2
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}

0800149e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68da      	ldr	r2, [r3, #12]
 80014aa:	23c0      	movs	r3, #192	; 0xc0
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	4013      	ands	r3, r2
 80014b0:	d101      	bne.n	80014b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	0018      	movs	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b002      	add	sp, #8
 80014be:	bd80      	pop	{r7, pc}

080014c0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d0:	68ba      	ldr	r2, [r7, #8]
 80014d2:	211f      	movs	r1, #31
 80014d4:	400a      	ands	r2, r1
 80014d6:	210f      	movs	r1, #15
 80014d8:	4091      	lsls	r1, r2
 80014da:	000a      	movs	r2, r1
 80014dc:	43d2      	mvns	r2, r2
 80014de:	401a      	ands	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	0e9b      	lsrs	r3, r3, #26
 80014e4:	210f      	movs	r1, #15
 80014e6:	4019      	ands	r1, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	201f      	movs	r0, #31
 80014ec:	4003      	ands	r3, r0
 80014ee:	4099      	lsls	r1, r3
 80014f0:	000b      	movs	r3, r1
 80014f2:	431a      	orrs	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b004      	add	sp, #16
 80014fe:	bd80      	pop	{r7, pc}

08001500 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	035b      	lsls	r3, r3, #13
 8001512:	0b5b      	lsrs	r3, r3, #13
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}

08001522 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	0352      	lsls	r2, r2, #13
 8001534:	0b52      	lsrs	r2, r2, #13
 8001536:	43d2      	mvns	r2, r2
 8001538:	401a      	ands	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}

08001546 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2203      	movs	r2, #3
 8001554:	4013      	ands	r3, r2
}
 8001556:	0018      	movs	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	0212      	lsls	r2, r2, #8
 8001574:	43d2      	mvns	r2, r2
 8001576:	401a      	ands	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	021b      	lsls	r3, r3, #8
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	400b      	ands	r3, r1
 8001580:	4904      	ldr	r1, [pc, #16]	; (8001594 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001582:	400b      	ands	r3, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	07ffff00 	.word	0x07ffff00

08001598 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	4a05      	ldr	r2, [pc, #20]	; (80015bc <LL_ADC_EnableInternalRegulator+0x24>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	2280      	movs	r2, #128	; 0x80
 80015aa:	0552      	lsls	r2, r2, #21
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	6fffffe8 	.word	0x6fffffe8

080015c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	401a      	ands	r2, r3
 80015d2:	2380      	movs	r3, #128	; 0x80
 80015d4:	055b      	lsls	r3, r3, #21
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d101      	bne.n	80015de <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80015da:	2301      	movs	r3, #1
 80015dc:	e000      	b.n	80015e0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80015de:	2300      	movs	r3, #0
}
 80015e0:	0018      	movs	r0, r3
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <LL_ADC_Enable+0x20>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	2201      	movs	r2, #1
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}
 8001608:	7fffffe8 	.word	0x7fffffe8

0800160c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	4a04      	ldr	r2, [pc, #16]	; (800162c <LL_ADC_Disable+0x20>)
 800161a:	4013      	ands	r3, r2
 800161c:	2202      	movs	r2, #2
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b002      	add	sp, #8
 800162a:	bd80      	pop	{r7, pc}
 800162c:	7fffffe8 	.word	0x7fffffe8

08001630 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2201      	movs	r2, #1
 800163e:	4013      	ands	r3, r2
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <LL_ADC_IsEnabled+0x18>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <LL_ADC_IsEnabled+0x1a>
 8001648:	2300      	movs	r3, #0
}
 800164a:	0018      	movs	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <LL_ADC_REG_StartConversion+0x20>)
 8001662:	4013      	ands	r3, r2
 8001664:	2204      	movs	r2, #4
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800166c:	46c0      	nop			; (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b002      	add	sp, #8
 8001672:	bd80      	pop	{r7, pc}
 8001674:	7fffffe8 	.word	0x7fffffe8

08001678 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2204      	movs	r2, #4
 8001686:	4013      	ands	r3, r2
 8001688:	2b04      	cmp	r3, #4
 800168a:	d101      	bne.n	8001690 <LL_ADC_REG_IsConversionOngoing+0x18>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001690:	2300      	movs	r3, #0
}
 8001692:	0018      	movs	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	b002      	add	sp, #8
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a4:	231f      	movs	r3, #31
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e17f      	b.n	80019c2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10a      	bne.n	80016e0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff fbaf 	bl	8000e30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2254      	movs	r2, #84	; 0x54
 80016dc:	2100      	movs	r1, #0
 80016de:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff ff6b 	bl	80015c0 <LL_ADC_IsInternalRegulatorEnabled>
 80016ea:	1e03      	subs	r3, r0, #0
 80016ec:	d115      	bne.n	800171a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff ff50 	bl	8001598 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016f8:	4bb4      	ldr	r3, [pc, #720]	; (80019cc <HAL_ADC_Init+0x330>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	49b4      	ldr	r1, [pc, #720]	; (80019d0 <HAL_ADC_Init+0x334>)
 80016fe:	0018      	movs	r0, r3
 8001700:	f7fe fd00 	bl	8000104 <__udivsi3>
 8001704:	0003      	movs	r3, r0
 8001706:	3301      	adds	r3, #1
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800170c:	e002      	b.n	8001714 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3b01      	subs	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f9      	bne.n	800170e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff ff4e 	bl	80015c0 <LL_ADC_IsInternalRegulatorEnabled>
 8001724:	1e03      	subs	r3, r0, #0
 8001726:	d10f      	bne.n	8001748 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172c:	2210      	movs	r2, #16
 800172e:	431a      	orrs	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001738:	2201      	movs	r2, #1
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001740:	231f      	movs	r3, #31
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff ff93 	bl	8001678 <LL_ADC_REG_IsConversionOngoing>
 8001752:	0003      	movs	r3, r0
 8001754:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	2210      	movs	r2, #16
 800175c:	4013      	ands	r3, r2
 800175e:	d000      	beq.n	8001762 <HAL_ADC_Init+0xc6>
 8001760:	e122      	b.n	80019a8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d000      	beq.n	800176a <HAL_ADC_Init+0xce>
 8001768:	e11e      	b.n	80019a8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	4a99      	ldr	r2, [pc, #612]	; (80019d4 <HAL_ADC_Init+0x338>)
 8001770:	4013      	ands	r3, r2
 8001772:	2202      	movs	r2, #2
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	0018      	movs	r0, r3
 8001780:	f7ff ff56 	bl	8001630 <LL_ADC_IsEnabled>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d000      	beq.n	800178a <HAL_ADC_Init+0xee>
 8001788:	e0ad      	b.n	80018e6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7e1b      	ldrb	r3, [r3, #24]
 8001792:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001794:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7e5b      	ldrb	r3, [r3, #25]
 800179a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800179c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7e9b      	ldrb	r3, [r3, #26]
 80017a2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80017a4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_ADC_Init+0x118>
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	015b      	lsls	r3, r3, #5
 80017b2:	e000      	b.n	80017b6 <HAL_ADC_Init+0x11a>
 80017b4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80017b6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80017bc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	da04      	bge.n	80017d0 <HAL_ADC_Init+0x134>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	085b      	lsrs	r3, r3, #1
 80017ce:	e001      	b.n	80017d4 <HAL_ADC_Init+0x138>
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80017d4:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	5c5b      	ldrb	r3, [r3, r1]
 80017dc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80017de:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2220      	movs	r2, #32
 80017ea:	5c9b      	ldrb	r3, [r3, r2]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d115      	bne.n	800181c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7e9b      	ldrb	r3, [r3, #26]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	0252      	lsls	r2, r2, #9
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	e00b      	b.n	800181c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001808:	2220      	movs	r2, #32
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001814:	2201      	movs	r2, #1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00a      	beq.n	800183a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001828:	23e0      	movs	r3, #224	; 0xe0
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001832:	4313      	orrs	r3, r2
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4a65      	ldr	r2, [pc, #404]	; (80019d8 <HAL_ADC_Init+0x33c>)
 8001842:	4013      	ands	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	430a      	orrs	r2, r1
 800184e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	0f9b      	lsrs	r3, r3, #30
 8001856:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800185c:	4313      	orrs	r3, r2
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	223c      	movs	r2, #60	; 0x3c
 8001868:	5c9b      	ldrb	r3, [r3, r2]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d111      	bne.n	8001892 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	0f9b      	lsrs	r3, r3, #30
 8001874:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800187a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001880:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001886:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	4313      	orrs	r3, r2
 800188c:	2201      	movs	r2, #1
 800188e:	4313      	orrs	r3, r2
 8001890:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	4a50      	ldr	r2, [pc, #320]	; (80019dc <HAL_ADC_Init+0x340>)
 800189a:	4013      	ands	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	23c0      	movs	r3, #192	; 0xc0
 80018ae:	061b      	lsls	r3, r3, #24
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d018      	beq.n	80018e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	05db      	lsls	r3, r3, #23
 80018bc:	429a      	cmp	r2, r3
 80018be:	d012      	beq.n	80018e6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	061b      	lsls	r3, r3, #24
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d00c      	beq.n	80018e6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <HAL_ADC_Init+0x344>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a44      	ldr	r2, [pc, #272]	; (80019e4 <HAL_ADC_Init+0x348>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	23f0      	movs	r3, #240	; 0xf0
 80018dc:	039b      	lsls	r3, r3, #14
 80018de:	401a      	ands	r2, r3
 80018e0:	4b3f      	ldr	r3, [pc, #252]	; (80019e0 <HAL_ADC_Init+0x344>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ee:	001a      	movs	r2, r3
 80018f0:	2100      	movs	r1, #0
 80018f2:	f7ff fda0 	bl	8001436 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	493a      	ldr	r1, [pc, #232]	; (80019e8 <HAL_ADC_Init+0x34c>)
 8001900:	001a      	movs	r2, r3
 8001902:	f7ff fd98 	bl	8001436 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2110      	movs	r1, #16
 800191a:	4249      	negs	r1, r1
 800191c:	430a      	orrs	r2, r1
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
 8001920:	e018      	b.n	8001954 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691a      	ldr	r2, [r3, #16]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	039b      	lsls	r3, r3, #14
 800192a:	429a      	cmp	r2, r3
 800192c:	d112      	bne.n	8001954 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	3b01      	subs	r3, #1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	221c      	movs	r2, #28
 800193e:	4013      	ands	r3, r2
 8001940:	2210      	movs	r2, #16
 8001942:	4252      	negs	r2, r2
 8001944:	409a      	lsls	r2, r3
 8001946:	0011      	movs	r1, r2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2100      	movs	r1, #0
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff fd88 	bl	8001470 <LL_ADC_GetSamplingTimeCommonChannels>
 8001960:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001966:	429a      	cmp	r2, r3
 8001968:	d10b      	bne.n	8001982 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	2203      	movs	r2, #3
 8001976:	4393      	bics	r3, r2
 8001978:	2201      	movs	r2, #1
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001980:	e01c      	b.n	80019bc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	2212      	movs	r2, #18
 8001988:	4393      	bics	r3, r2
 800198a:	2210      	movs	r2, #16
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001996:	2201      	movs	r2, #1
 8001998:	431a      	orrs	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800199e:	231f      	movs	r3, #31
 80019a0:	18fb      	adds	r3, r7, r3
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80019a6:	e009      	b.n	80019bc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ac:	2210      	movs	r2, #16
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80019b4:	231f      	movs	r3, #31
 80019b6:	18fb      	adds	r3, r7, r3
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80019bc:	231f      	movs	r3, #31
 80019be:	18fb      	adds	r3, r7, r3
 80019c0:	781b      	ldrb	r3, [r3, #0]
}
 80019c2:	0018      	movs	r0, r3
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b008      	add	sp, #32
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	20000004 	.word	0x20000004
 80019d0:	00030d40 	.word	0x00030d40
 80019d4:	fffffefd 	.word	0xfffffefd
 80019d8:	fffe0201 	.word	0xfffe0201
 80019dc:	1ffffc02 	.word	0x1ffffc02
 80019e0:	40012708 	.word	0x40012708
 80019e4:	ffc3ffff 	.word	0xffc3ffff
 80019e8:	07ffff04 	.word	0x07ffff04

080019ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80019ec:	b5b0      	push	{r4, r5, r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fe3b 	bl	8001678 <LL_ADC_REG_IsConversionOngoing>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d16c      	bne.n	8001ae0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2254      	movs	r2, #84	; 0x54
 8001a0a:	5c9b      	ldrb	r3, [r3, r2]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_Start_DMA+0x28>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e06c      	b.n	8001aee <HAL_ADC_Start_DMA+0x102>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2254      	movs	r2, #84	; 0x54
 8001a18:	2101      	movs	r1, #1
 8001a1a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	d113      	bne.n	8001a50 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	f7ff fdff 	bl	8001630 <LL_ADC_IsEnabled>
 8001a32:	1e03      	subs	r3, r0, #0
 8001a34:	d004      	beq.n	8001a40 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f7ff fde6 	bl	800160c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a50:	2517      	movs	r5, #23
 8001a52:	197c      	adds	r4, r7, r5
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 fb5e 	bl	8002118 <ADC_Enable>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a60:	002c      	movs	r4, r5
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d13e      	bne.n	8001ae8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	4a22      	ldr	r2, [pc, #136]	; (8001af8 <HAL_ADC_Start_DMA+0x10c>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	0052      	lsls	r2, r2, #1
 8001a76:	431a      	orrs	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <HAL_ADC_Start_DMA+0x110>)
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <HAL_ADC_Start_DMA+0x114>)
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <HAL_ADC_Start_DMA+0x118>)
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	221c      	movs	r2, #28
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2254      	movs	r2, #84	; 0x54
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	3340      	adds	r3, #64	; 0x40
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	193c      	adds	r4, r7, r4
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f000 fdc0 	bl	8002650 <HAL_DMA_Start_IT>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7ff fdbb 	bl	8001654 <LL_ADC_REG_StartConversion>
 8001ade:	e003      	b.n	8001ae8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae0:	2317      	movs	r3, #23
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001ae8:	2317      	movs	r3, #23
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	781b      	ldrb	r3, [r3, #0]
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b006      	add	sp, #24
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	fffff0fe 	.word	0xfffff0fe
 8001afc:	08002225 	.word	0x08002225
 8001b00:	080022ed 	.word	0x080022ed
 8001b04:	0800230b 	.word	0x0800230b

08001b08 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d017      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x54>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4013      	ands	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	2210      	movs	r2, #16
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d106      	bne.n	8001b4c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f000 fc06 	bl	8002360 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4013      	ands	r3, r2
 8001b62:	d003      	beq.n	8001b6c <HAL_ADC_IRQHandler+0x64>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2204      	movs	r2, #4
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d107      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2208      	movs	r2, #8
 8001b70:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b72:	d04d      	beq.n	8001c10 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2208      	movs	r2, #8
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d049      	beq.n	8001c10 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	2210      	movs	r2, #16
 8001b82:	4013      	ands	r3, r2
 8001b84:	d106      	bne.n	8001b94 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	0092      	lsls	r2, r2, #2
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff fc80 	bl	800149e <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b9e:	1e03      	subs	r3, r0, #0
 8001ba0:	d02e      	beq.n	8001c00 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7e9b      	ldrb	r3, [r3, #26]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d12a      	bne.n	8001c00 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2208      	movs	r2, #8
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d123      	bne.n	8001c00 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff fd5b 	bl	8001678 <LL_ADC_REG_IsConversionOngoing>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d110      	bne.n	8001be8 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	210c      	movs	r1, #12
 8001bd2:	438a      	bics	r2, r1
 8001bd4:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bda:	4a56      	ldr	r2, [pc, #344]	; (8001d34 <HAL_ADC_IRQHandler+0x22c>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	2201      	movs	r2, #1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	659a      	str	r2, [r3, #88]	; 0x58
 8001be6:	e00b      	b.n	8001c00 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bec:	2220      	movs	r2, #32
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	0018      	movs	r0, r3
 8001c04:	f7fe fd18 	bl	8000638 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	220c      	movs	r2, #12
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	4013      	ands	r3, r2
 8001c16:	d012      	beq.n	8001c3e <HAL_ADC_IRQHandler+0x136>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2280      	movs	r2, #128	; 0x80
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d00e      	beq.n	8001c3e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c24:	2280      	movs	r2, #128	; 0x80
 8001c26:	0252      	lsls	r2, r2, #9
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 f889 	bl	8001d48 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d014      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x16a>
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d00f      	beq.n	8001c72 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	0292      	lsls	r2, r2, #10
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 fb6c 	bl	8002340 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2280      	movs	r2, #128	; 0x80
 8001c6e:	0052      	lsls	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d014      	beq.n	8001ca6 <HAL_ADC_IRQHandler+0x19e>
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4013      	ands	r3, r2
 8001c84:	d00f      	beq.n	8001ca6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8a:	2280      	movs	r2, #128	; 0x80
 8001c8c:	02d2      	lsls	r2, r2, #11
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f000 fb5a 	bl	8002350 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2280      	movs	r2, #128	; 0x80
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	4013      	ands	r3, r2
 8001cac:	d02b      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x1fe>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2210      	movs	r2, #16
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d027      	beq.n	8001d06 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d102      	bne.n	8001cc4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	e008      	b.n	8001cd6 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff fc3c 	bl	8001546 <LL_ADC_REG_GetDMATransfer>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d110      	bne.n	8001cfe <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	00d2      	lsls	r2, r2, #3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2202      	movs	r2, #2
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 f82d 	bl	8001d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2210      	movs	r2, #16
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	019b      	lsls	r3, r3, #6
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d00d      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x224>
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	019b      	lsls	r3, r3, #6
 8001d16:	4013      	ands	r3, r2
 8001d18:	d008      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 fb27 	bl	8002370 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2280      	movs	r2, #128	; 0x80
 8001d28:	0192      	lsls	r2, r2, #6
 8001d2a:	601a      	str	r2, [r3, #0]
  }
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b006      	add	sp, #24
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	fffffefe 	.word	0xfffffefe

08001d38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b002      	add	sp, #8
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d60:	46c0      	nop			; (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b002      	add	sp, #8
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d72:	2317      	movs	r3, #23
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2254      	movs	r2, #84	; 0x54
 8001d82:	5c9b      	ldrb	r3, [r3, r2]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x24>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e1c0      	b.n	800210e <HAL_ADC_ConfigChannel+0x3a6>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2254      	movs	r2, #84	; 0x54
 8001d90:	2101      	movs	r1, #1
 8001d92:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f7ff fc6d 	bl	8001678 <LL_ADC_REG_IsConversionOngoing>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d000      	beq.n	8001da4 <HAL_ADC_ConfigChannel+0x3c>
 8001da2:	e1a3      	b.n	80020ec <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d100      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x46>
 8001dac:	e143      	b.n	8002036 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d004      	beq.n	8001dc4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dbe:	4ac1      	ldr	r2, [pc, #772]	; (80020c4 <HAL_ADC_ConfigChannel+0x35c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d108      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0019      	movs	r1, r3
 8001dce:	0010      	movs	r0, r2
 8001dd0:	f7ff fb96 	bl	8001500 <LL_ADC_REG_SetSequencerChAdd>
 8001dd4:	e0c9      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	211f      	movs	r1, #31
 8001de0:	400b      	ands	r3, r1
 8001de2:	210f      	movs	r1, #15
 8001de4:	4099      	lsls	r1, r3
 8001de6:	000b      	movs	r3, r1
 8001de8:	43db      	mvns	r3, r3
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	035b      	lsls	r3, r3, #13
 8001df4:	0b5b      	lsrs	r3, r3, #13
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x9c>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	221f      	movs	r2, #31
 8001e00:	4013      	ands	r3, r2
 8001e02:	e098      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d000      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0xa8>
 8001e0e:	e091      	b.n	8001f34 <HAL_ADC_ConfigChannel+0x1cc>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2202      	movs	r2, #2
 8001e16:	4013      	ands	r3, r2
 8001e18:	d000      	beq.n	8001e1c <HAL_ADC_ConfigChannel+0xb4>
 8001e1a:	e089      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x1c8>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2204      	movs	r2, #4
 8001e22:	4013      	ands	r3, r2
 8001e24:	d000      	beq.n	8001e28 <HAL_ADC_ConfigChannel+0xc0>
 8001e26:	e081      	b.n	8001f2c <HAL_ADC_ConfigChannel+0x1c4>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2208      	movs	r2, #8
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d000      	beq.n	8001e34 <HAL_ADC_ConfigChannel+0xcc>
 8001e32:	e079      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1c0>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2210      	movs	r2, #16
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d000      	beq.n	8001e40 <HAL_ADC_ConfigChannel+0xd8>
 8001e3e:	e071      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x1bc>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2220      	movs	r2, #32
 8001e46:	4013      	ands	r3, r2
 8001e48:	d000      	beq.n	8001e4c <HAL_ADC_ConfigChannel+0xe4>
 8001e4a:	e069      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x1b8>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2240      	movs	r2, #64	; 0x40
 8001e52:	4013      	ands	r3, r2
 8001e54:	d000      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0xf0>
 8001e56:	e061      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x1b4>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2280      	movs	r2, #128	; 0x80
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d000      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0xfc>
 8001e62:	e059      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x1b0>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d151      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1ac>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d149      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1a8>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4013      	ands	r3, r2
 8001e86:	d141      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1a4>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	4013      	ands	r3, r2
 8001e92:	d139      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1a0>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	015b      	lsls	r3, r3, #5
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d131      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x19c>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	019b      	lsls	r3, r3, #6
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d129      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x198>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	01db      	lsls	r3, r3, #7
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d121      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x194>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	; 0x80
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d119      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x190>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d111      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x18c>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	029b      	lsls	r3, r3, #10
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d109      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x188>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	02db      	lsls	r3, r3, #11
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d001      	beq.n	8001eec <HAL_ADC_ConfigChannel+0x184>
 8001ee8:	2312      	movs	r3, #18
 8001eea:	e024      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001eec:	2300      	movs	r3, #0
 8001eee:	e022      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef0:	2311      	movs	r3, #17
 8001ef2:	e020      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	e01e      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef8:	230f      	movs	r3, #15
 8001efa:	e01c      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001efc:	230e      	movs	r3, #14
 8001efe:	e01a      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f00:	230d      	movs	r3, #13
 8001f02:	e018      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f04:	230c      	movs	r3, #12
 8001f06:	e016      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f08:	230b      	movs	r3, #11
 8001f0a:	e014      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	e012      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f10:	2309      	movs	r3, #9
 8001f12:	e010      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f14:	2308      	movs	r3, #8
 8001f16:	e00e      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f18:	2307      	movs	r3, #7
 8001f1a:	e00c      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f1c:	2306      	movs	r3, #6
 8001f1e:	e00a      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f20:	2305      	movs	r3, #5
 8001f22:	e008      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e006      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e004      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x1ce>
 8001f34:	2300      	movs	r3, #0
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	6852      	ldr	r2, [r2, #4]
 8001f3a:	201f      	movs	r0, #31
 8001f3c:	4002      	ands	r2, r0
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	000a      	movs	r2, r1
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d808      	bhi.n	8001f6a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	001a      	movs	r2, r3
 8001f66:	f7ff faab 	bl	80014c0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6819      	ldr	r1, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	001a      	movs	r2, r3
 8001f78:	f7ff faf2 	bl	8001560 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db00      	blt.n	8001f86 <HAL_ADC_ConfigChannel+0x21e>
 8001f84:	e0bc      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f86:	4b50      	ldr	r3, [pc, #320]	; (80020c8 <HAL_ADC_ConfigChannel+0x360>)
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f7ff fa47 	bl	800141c <LL_ADC_GetCommonPathInternalCh>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4d      	ldr	r2, [pc, #308]	; (80020cc <HAL_ADC_ConfigChannel+0x364>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d122      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	041b      	lsls	r3, r3, #16
 8001fa2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fa4:	d11d      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	0412      	lsls	r2, r2, #16
 8001fac:	4313      	orrs	r3, r2
 8001fae:	4a46      	ldr	r2, [pc, #280]	; (80020c8 <HAL_ADC_ConfigChannel+0x360>)
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	0010      	movs	r0, r2
 8001fb4:	f7ff fa1e 	bl	80013f4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fb8:	4b45      	ldr	r3, [pc, #276]	; (80020d0 <HAL_ADC_ConfigChannel+0x368>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4945      	ldr	r1, [pc, #276]	; (80020d4 <HAL_ADC_ConfigChannel+0x36c>)
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7fe f8a0 	bl	8000104 <__udivsi3>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	0013      	movs	r3, r2
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	189b      	adds	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fd2:	e002      	b.n	8001fda <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f9      	bne.n	8001fd4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fe0:	e08e      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a3c      	ldr	r2, [pc, #240]	; (80020d8 <HAL_ADC_ConfigChannel+0x370>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10e      	bne.n	800200a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	045b      	lsls	r3, r3, #17
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d109      	bne.n	800200a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2280      	movs	r2, #128	; 0x80
 8001ffa:	0452      	lsls	r2, r2, #17
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	4a32      	ldr	r2, [pc, #200]	; (80020c8 <HAL_ADC_ConfigChannel+0x360>)
 8002000:	0019      	movs	r1, r3
 8002002:	0010      	movs	r0, r2
 8002004:	f7ff f9f6 	bl	80013f4 <LL_ADC_SetCommonPathInternalCh>
 8002008:	e07a      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a33      	ldr	r2, [pc, #204]	; (80020dc <HAL_ADC_ConfigChannel+0x374>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d000      	beq.n	8002016 <HAL_ADC_ConfigChannel+0x2ae>
 8002014:	e074      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	03db      	lsls	r3, r3, #15
 800201c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800201e:	d000      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x2ba>
 8002020:	e06e      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	03d2      	lsls	r2, r2, #15
 8002028:	4313      	orrs	r3, r2
 800202a:	4a27      	ldr	r2, [pc, #156]	; (80020c8 <HAL_ADC_ConfigChannel+0x360>)
 800202c:	0019      	movs	r1, r3
 800202e:	0010      	movs	r0, r2
 8002030:	f7ff f9e0 	bl	80013f4 <LL_ADC_SetCommonPathInternalCh>
 8002034:	e064      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	061b      	lsls	r3, r3, #24
 800203e:	429a      	cmp	r2, r3
 8002040:	d004      	beq.n	800204c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002046:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <HAL_ADC_ConfigChannel+0x35c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d107      	bne.n	800205c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0019      	movs	r1, r3
 8002056:	0010      	movs	r0, r2
 8002058:	f7ff fa63 	bl	8001522 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da4d      	bge.n	8002100 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_ADC_ConfigChannel+0x360>)
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff f9d8 	bl	800141c <LL_ADC_GetCommonPathInternalCh>
 800206c:	0003      	movs	r3, r0
 800206e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_ADC_ConfigChannel+0x364>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_ADC_ConfigChannel+0x378>)
 800207e:	4013      	ands	r3, r2
 8002080:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_ADC_ConfigChannel+0x360>)
 8002082:	0019      	movs	r1, r3
 8002084:	0010      	movs	r0, r2
 8002086:	f7ff f9b5 	bl	80013f4 <LL_ADC_SetCommonPathInternalCh>
 800208a:	e039      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <HAL_ADC_ConfigChannel+0x370>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d108      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4a12      	ldr	r2, [pc, #72]	; (80020e4 <HAL_ADC_ConfigChannel+0x37c>)
 800209a:	4013      	ands	r3, r2
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_ADC_ConfigChannel+0x360>)
 800209e:	0019      	movs	r1, r3
 80020a0:	0010      	movs	r0, r2
 80020a2:	f7ff f9a7 	bl	80013f4 <LL_ADC_SetCommonPathInternalCh>
 80020a6:	e02b      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <HAL_ADC_ConfigChannel+0x374>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d126      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4a0c      	ldr	r2, [pc, #48]	; (80020e8 <HAL_ADC_ConfigChannel+0x380>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <HAL_ADC_ConfigChannel+0x360>)
 80020ba:	0019      	movs	r1, r3
 80020bc:	0010      	movs	r0, r2
 80020be:	f7ff f999 	bl	80013f4 <LL_ADC_SetCommonPathInternalCh>
 80020c2:	e01d      	b.n	8002100 <HAL_ADC_ConfigChannel+0x398>
 80020c4:	80000004 	.word	0x80000004
 80020c8:	40012708 	.word	0x40012708
 80020cc:	b0001000 	.word	0xb0001000
 80020d0:	20000004 	.word	0x20000004
 80020d4:	00030d40 	.word	0x00030d40
 80020d8:	b8004000 	.word	0xb8004000
 80020dc:	b4002000 	.word	0xb4002000
 80020e0:	ff7fffff 	.word	0xff7fffff
 80020e4:	feffffff 	.word	0xfeffffff
 80020e8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	2220      	movs	r2, #32
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020f8:	2317      	movs	r3, #23
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2254      	movs	r2, #84	; 0x54
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002108:	2317      	movs	r3, #23
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	781b      	ldrb	r3, [r3, #0]
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b006      	add	sp, #24
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)

08002118 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff fa81 	bl	8001630 <LL_ADC_IsEnabled>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d000      	beq.n	8002134 <ADC_Enable+0x1c>
 8002132:	e069      	b.n	8002208 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4a36      	ldr	r2, [pc, #216]	; (8002214 <ADC_Enable+0xfc>)
 800213c:	4013      	ands	r3, r2
 800213e:	d00d      	beq.n	800215c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	2210      	movs	r2, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	2201      	movs	r2, #1
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e056      	b.n	800220a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff fa41 	bl	80015e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002166:	4b2c      	ldr	r3, [pc, #176]	; (8002218 <ADC_Enable+0x100>)
 8002168:	0018      	movs	r0, r3
 800216a:	f7ff f957 	bl	800141c <LL_ADC_GetCommonPathInternalCh>
 800216e:	0002      	movs	r2, r0
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	041b      	lsls	r3, r3, #16
 8002174:	4013      	ands	r3, r2
 8002176:	d00f      	beq.n	8002198 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002178:	4b28      	ldr	r3, [pc, #160]	; (800221c <ADC_Enable+0x104>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4928      	ldr	r1, [pc, #160]	; (8002220 <ADC_Enable+0x108>)
 800217e:	0018      	movs	r0, r3
 8002180:	f7fd ffc0 	bl	8000104 <__udivsi3>
 8002184:	0003      	movs	r3, r0
 8002186:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002188:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800218a:	e002      	b.n	8002192 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	3b01      	subs	r3, #1
 8002190:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f9      	bne.n	800218c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	7e5b      	ldrb	r3, [r3, #25]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d033      	beq.n	8002208 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80021a0:	f7ff f91e 	bl	80013e0 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021a8:	e027      	b.n	80021fa <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7ff fa3e 	bl	8001630 <LL_ADC_IsEnabled>
 80021b4:	1e03      	subs	r3, r0, #0
 80021b6:	d104      	bne.n	80021c2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff fa13 	bl	80015e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021c2:	f7ff f90d 	bl	80013e0 <HAL_GetTick>
 80021c6:	0002      	movs	r2, r0
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d914      	bls.n	80021fa <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d00d      	beq.n	80021fa <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	2210      	movs	r2, #16
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	2201      	movs	r2, #1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e007      	b.n	800220a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	2b01      	cmp	r3, #1
 8002206:	d1d0      	bne.n	80021aa <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	80000017 	.word	0x80000017
 8002218:	40012708 	.word	0x40012708
 800221c:	20000004 	.word	0x20000004
 8002220:	00030d40 	.word	0x00030d40

08002224 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	2250      	movs	r2, #80	; 0x50
 8002238:	4013      	ands	r3, r2
 800223a:	d141      	bne.n	80022c0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	2280      	movs	r2, #128	; 0x80
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	431a      	orrs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0018      	movs	r0, r3
 8002250:	f7ff f925 	bl	800149e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d02e      	beq.n	80022b6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	7e9b      	ldrb	r3, [r3, #26]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d12a      	bne.n	80022b6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2208      	movs	r2, #8
 8002268:	4013      	ands	r3, r2
 800226a:	2b08      	cmp	r3, #8
 800226c:	d123      	bne.n	80022b6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	f7ff fa00 	bl	8001678 <LL_ADC_REG_IsConversionOngoing>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d110      	bne.n	800229e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	210c      	movs	r1, #12
 8002288:	438a      	bics	r2, r1
 800228a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	4a15      	ldr	r2, [pc, #84]	; (80022e8 <ADC_DMAConvCplt+0xc4>)
 8002292:	4013      	ands	r3, r2
 8002294:	2201      	movs	r2, #1
 8002296:	431a      	orrs	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	659a      	str	r2, [r3, #88]	; 0x58
 800229c:	e00b      	b.n	80022b6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a2:	2220      	movs	r2, #32
 80022a4:	431a      	orrs	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ae:	2201      	movs	r2, #1
 80022b0:	431a      	orrs	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	0018      	movs	r0, r3
 80022ba:	f7fe f9bd 	bl	8000638 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022be:	e00f      	b.n	80022e0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	2210      	movs	r2, #16
 80022c6:	4013      	ands	r3, r2
 80022c8:	d004      	beq.n	80022d4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fd43 	bl	8001d58 <HAL_ADC_ErrorCallback>
}
 80022d2:	e005      	b.n	80022e0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	0010      	movs	r0, r2
 80022de:	4798      	blx	r3
}
 80022e0:	46c0      	nop			; (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b004      	add	sp, #16
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	fffffefe 	.word	0xfffffefe

080022ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff fd1b 	bl	8001d38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	46bd      	mov	sp, r7
 8002306:	b004      	add	sp, #16
 8002308:	bd80      	pop	{r7, pc}

0800230a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	2240      	movs	r2, #64	; 0x40
 800231e:	431a      	orrs	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2204      	movs	r2, #4
 800232a:	431a      	orrs	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	0018      	movs	r0, r3
 8002334:	f7ff fd10 	bl	8001d58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002338:	46c0      	nop			; (mov r8, r8)
 800233a:	46bd      	mov	sp, r7
 800233c:	b004      	add	sp, #16
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	0002      	movs	r2, r0
 8002388:	1dfb      	adds	r3, r7, #7
 800238a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b7f      	cmp	r3, #127	; 0x7f
 8002392:	d809      	bhi.n	80023a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	001a      	movs	r2, r3
 800239a:	231f      	movs	r3, #31
 800239c:	401a      	ands	r2, r3
 800239e:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <__NVIC_EnableIRQ+0x30>)
 80023a0:	2101      	movs	r1, #1
 80023a2:	4091      	lsls	r1, r2
 80023a4:	000a      	movs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	0002      	movs	r2, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	1dfb      	adds	r3, r7, #7
 80023c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b7f      	cmp	r3, #127	; 0x7f
 80023c8:	d828      	bhi.n	800241c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023ca:	4a2f      	ldr	r2, [pc, #188]	; (8002488 <__NVIC_SetPriority+0xd4>)
 80023cc:	1dfb      	adds	r3, r7, #7
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	089b      	lsrs	r3, r3, #2
 80023d4:	33c0      	adds	r3, #192	; 0xc0
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	589b      	ldr	r3, [r3, r2]
 80023da:	1dfa      	adds	r2, r7, #7
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	0011      	movs	r1, r2
 80023e0:	2203      	movs	r2, #3
 80023e2:	400a      	ands	r2, r1
 80023e4:	00d2      	lsls	r2, r2, #3
 80023e6:	21ff      	movs	r1, #255	; 0xff
 80023e8:	4091      	lsls	r1, r2
 80023ea:	000a      	movs	r2, r1
 80023ec:	43d2      	mvns	r2, r2
 80023ee:	401a      	ands	r2, r3
 80023f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	22ff      	movs	r2, #255	; 0xff
 80023f8:	401a      	ands	r2, r3
 80023fa:	1dfb      	adds	r3, r7, #7
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	0018      	movs	r0, r3
 8002400:	2303      	movs	r3, #3
 8002402:	4003      	ands	r3, r0
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002408:	481f      	ldr	r0, [pc, #124]	; (8002488 <__NVIC_SetPriority+0xd4>)
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b25b      	sxtb	r3, r3
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	430a      	orrs	r2, r1
 8002414:	33c0      	adds	r3, #192	; 0xc0
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800241a:	e031      	b.n	8002480 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <__NVIC_SetPriority+0xd8>)
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	0019      	movs	r1, r3
 8002424:	230f      	movs	r3, #15
 8002426:	400b      	ands	r3, r1
 8002428:	3b08      	subs	r3, #8
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3306      	adds	r3, #6
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	18d3      	adds	r3, r2, r3
 8002432:	3304      	adds	r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	1dfa      	adds	r2, r7, #7
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	0011      	movs	r1, r2
 800243c:	2203      	movs	r2, #3
 800243e:	400a      	ands	r2, r1
 8002440:	00d2      	lsls	r2, r2, #3
 8002442:	21ff      	movs	r1, #255	; 0xff
 8002444:	4091      	lsls	r1, r2
 8002446:	000a      	movs	r2, r1
 8002448:	43d2      	mvns	r2, r2
 800244a:	401a      	ands	r2, r3
 800244c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	019b      	lsls	r3, r3, #6
 8002452:	22ff      	movs	r2, #255	; 0xff
 8002454:	401a      	ands	r2, r3
 8002456:	1dfb      	adds	r3, r7, #7
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	0018      	movs	r0, r3
 800245c:	2303      	movs	r3, #3
 800245e:	4003      	ands	r3, r0
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002464:	4809      	ldr	r0, [pc, #36]	; (800248c <__NVIC_SetPriority+0xd8>)
 8002466:	1dfb      	adds	r3, r7, #7
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	001c      	movs	r4, r3
 800246c:	230f      	movs	r3, #15
 800246e:	4023      	ands	r3, r4
 8002470:	3b08      	subs	r3, #8
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	430a      	orrs	r2, r1
 8002476:	3306      	adds	r3, #6
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	18c3      	adds	r3, r0, r3
 800247c:	3304      	adds	r3, #4
 800247e:	601a      	str	r2, [r3, #0]
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b003      	add	sp, #12
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	045b      	lsls	r3, r3, #17
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d301      	bcc.n	80024a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a4:	2301      	movs	r3, #1
 80024a6:	e010      	b.n	80024ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <SysTick_Config+0x44>)
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	3a01      	subs	r2, #1
 80024ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b0:	2301      	movs	r3, #1
 80024b2:	425b      	negs	r3, r3
 80024b4:	2103      	movs	r1, #3
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7ff ff7c 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x44>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x44>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
 80024e2:	210f      	movs	r1, #15
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	1c02      	adds	r2, r0, #0
 80024e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b25b      	sxtb	r3, r3
 80024f2:	0011      	movs	r1, r2
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	0002      	movs	r2, r0
 800250a:	1dfb      	adds	r3, r7, #7
 800250c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b25b      	sxtb	r3, r3
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff ff33 	bl	8002380 <__NVIC_EnableIRQ>
}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b082      	sub	sp, #8
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	0018      	movs	r0, r3
 800252e:	f7ff ffaf 	bl	8002490 <SysTick_Config>
 8002532:	0003      	movs	r3, r0
}
 8002534:	0018      	movs	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e077      	b.n	800263e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a3d      	ldr	r2, [pc, #244]	; (8002648 <HAL_DMA_Init+0x10c>)
 8002554:	4694      	mov	ip, r2
 8002556:	4463      	add	r3, ip
 8002558:	2114      	movs	r1, #20
 800255a:	0018      	movs	r0, r3
 800255c:	f7fd fdd2 	bl	8000104 <__udivsi3>
 8002560:	0003      	movs	r3, r0
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2225      	movs	r2, #37	; 0x25
 800256c:	2102      	movs	r1, #2
 800256e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4934      	ldr	r1, [pc, #208]	; (800264c <HAL_DMA_Init+0x110>)
 800257c:	400a      	ands	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f000 fa8d 	bl	8002ad8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	01db      	lsls	r3, r3, #7
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d102      	bne.n	80025d0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d8:	213f      	movs	r1, #63	; 0x3f
 80025da:	400a      	ands	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d011      	beq.n	8002614 <HAL_DMA_Init+0xd8>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d80d      	bhi.n	8002614 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f000 fa98 	bl	8002b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e008      	b.n	8002626 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2225      	movs	r2, #37	; 0x25
 8002630:	2101      	movs	r1, #1
 8002632:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	2100      	movs	r1, #0
 800263a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b002      	add	sp, #8
 8002644:	bd80      	pop	{r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	bffdfff8 	.word	0xbffdfff8
 800264c:	ffff800f 	.word	0xffff800f

08002650 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2317      	movs	r3, #23
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2224      	movs	r2, #36	; 0x24
 800266a:	5c9b      	ldrb	r3, [r3, r2]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_DMA_Start_IT+0x24>
 8002670:	2302      	movs	r3, #2
 8002672:	e06f      	b.n	8002754 <HAL_DMA_Start_IT+0x104>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	2101      	movs	r1, #1
 800267a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2225      	movs	r2, #37	; 0x25
 8002680:	5c9b      	ldrb	r3, [r3, r2]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d157      	bne.n	8002738 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2225      	movs	r2, #37	; 0x25
 800268c:	2102      	movs	r1, #2
 800268e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2101      	movs	r1, #1
 80026a2:	438a      	bics	r2, r1
 80026a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f9d3 	bl	8002a58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	210e      	movs	r1, #14
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e00f      	b.n	80026ec <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2104      	movs	r1, #4
 80026d8:	438a      	bics	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	210a      	movs	r1, #10
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	025b      	lsls	r3, r3, #9
 80026f6:	4013      	ands	r3, r2
 80026f8:	d008      	beq.n	800270c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002704:	2180      	movs	r1, #128	; 0x80
 8002706:	0049      	lsls	r1, r1, #1
 8002708:	430a      	orrs	r2, r1
 800270a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	0049      	lsls	r1, r1, #1
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e00a      	b.n	800274e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2280      	movs	r2, #128	; 0x80
 800273c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2224      	movs	r2, #36	; 0x24
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002746:	2317      	movs	r3, #23
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800274e:	2317      	movs	r3, #23
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	781b      	ldrb	r3, [r3, #0]
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b006      	add	sp, #24
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e050      	b.n	8002810 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2225      	movs	r2, #37	; 0x25
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d008      	beq.n	800278c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2204      	movs	r2, #4
 800277e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2224      	movs	r2, #36	; 0x24
 8002784:	2100      	movs	r1, #0
 8002786:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e041      	b.n	8002810 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	210e      	movs	r1, #14
 8002798:	438a      	bics	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	491c      	ldr	r1, [pc, #112]	; (8002818 <HAL_DMA_Abort+0xbc>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2101      	movs	r1, #1
 80027b8:	438a      	bics	r2, r1
 80027ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_DMA_Abort+0xc0>)
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	221c      	movs	r2, #28
 80027c6:	4013      	ands	r3, r2
 80027c8:	2201      	movs	r2, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_DMA_Abort+0xc0>)
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027da:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	490a      	ldr	r1, [pc, #40]	; (8002818 <HAL_DMA_Abort+0xbc>)
 80027f0:	400a      	ands	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80027fc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2225      	movs	r2, #37	; 0x25
 8002802:	2101      	movs	r1, #1
 8002804:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2224      	movs	r2, #36	; 0x24
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b002      	add	sp, #8
 8002816:	bd80      	pop	{r7, pc}
 8002818:	fffffeff 	.word	0xfffffeff
 800281c:	40020000 	.word	0x40020000

08002820 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002828:	210f      	movs	r1, #15
 800282a:	187b      	adds	r3, r7, r1
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2225      	movs	r2, #37	; 0x25
 8002834:	5c9b      	ldrb	r3, [r3, r2]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d006      	beq.n	800284a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2204      	movs	r2, #4
 8002840:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002842:	187b      	adds	r3, r7, r1
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e049      	b.n	80028de <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	210e      	movs	r1, #14
 8002856:	438a      	bics	r2, r1
 8002858:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	438a      	bics	r2, r1
 8002868:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	491d      	ldr	r1, [pc, #116]	; (80028ec <HAL_DMA_Abort_IT+0xcc>)
 8002876:	400a      	ands	r2, r1
 8002878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <HAL_DMA_Abort_IT+0xd0>)
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	221c      	movs	r2, #28
 8002884:	4013      	ands	r3, r2
 8002886:	2201      	movs	r2, #1
 8002888:	409a      	lsls	r2, r3
 800288a:	4b19      	ldr	r3, [pc, #100]	; (80028f0 <HAL_DMA_Abort_IT+0xd0>)
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002898:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00c      	beq.n	80028bc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ac:	490f      	ldr	r1, [pc, #60]	; (80028ec <HAL_DMA_Abort_IT+0xcc>)
 80028ae:	400a      	ands	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2225      	movs	r2, #37	; 0x25
 80028c0:	2101      	movs	r1, #1
 80028c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2224      	movs	r2, #36	; 0x24
 80028c8:	2100      	movs	r1, #0
 80028ca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d004      	beq.n	80028de <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	0010      	movs	r0, r2
 80028dc:	4798      	blx	r3
    }
  }
  return status;
 80028de:	230f      	movs	r3, #15
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	781b      	ldrb	r3, [r3, #0]
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b004      	add	sp, #16
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	fffffeff 	.word	0xfffffeff
 80028f0:	40020000 	.word	0x40020000

080028f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80028fc:	4b55      	ldr	r3, [pc, #340]	; (8002a54 <HAL_DMA_IRQHandler+0x160>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	221c      	movs	r2, #28
 8002910:	4013      	ands	r3, r2
 8002912:	2204      	movs	r2, #4
 8002914:	409a      	lsls	r2, r3
 8002916:	0013      	movs	r3, r2
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	4013      	ands	r3, r2
 800291c:	d027      	beq.n	800296e <HAL_DMA_IRQHandler+0x7a>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	2204      	movs	r2, #4
 8002922:	4013      	ands	r3, r2
 8002924:	d023      	beq.n	800296e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2220      	movs	r2, #32
 800292e:	4013      	ands	r3, r2
 8002930:	d107      	bne.n	8002942 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2104      	movs	r1, #4
 800293e:	438a      	bics	r2, r1
 8002940:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002942:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_DMA_IRQHandler+0x160>)
 8002944:	6859      	ldr	r1, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	221c      	movs	r2, #28
 800294c:	4013      	ands	r3, r2
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <HAL_DMA_IRQHandler+0x160>)
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	2b00      	cmp	r3, #0
 800295e:	d100      	bne.n	8002962 <HAL_DMA_IRQHandler+0x6e>
 8002960:	e073      	b.n	8002a4a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	0010      	movs	r0, r2
 800296a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800296c:	e06d      	b.n	8002a4a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	221c      	movs	r2, #28
 8002974:	4013      	ands	r3, r2
 8002976:	2202      	movs	r2, #2
 8002978:	409a      	lsls	r2, r3
 800297a:	0013      	movs	r3, r2
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	d02e      	beq.n	80029e0 <HAL_DMA_IRQHandler+0xec>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2202      	movs	r2, #2
 8002986:	4013      	ands	r3, r2
 8002988:	d02a      	beq.n	80029e0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2220      	movs	r2, #32
 8002992:	4013      	ands	r3, r2
 8002994:	d10b      	bne.n	80029ae <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	210a      	movs	r1, #10
 80029a2:	438a      	bics	r2, r1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2225      	movs	r2, #37	; 0x25
 80029aa:	2101      	movs	r1, #1
 80029ac:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80029ae:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_DMA_IRQHandler+0x160>)
 80029b0:	6859      	ldr	r1, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	221c      	movs	r2, #28
 80029b8:	4013      	ands	r3, r2
 80029ba:	2202      	movs	r2, #2
 80029bc:	409a      	lsls	r2, r3
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_DMA_IRQHandler+0x160>)
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	2100      	movs	r1, #0
 80029ca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d03a      	beq.n	8002a4a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	0010      	movs	r0, r2
 80029dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80029de:	e034      	b.n	8002a4a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	221c      	movs	r2, #28
 80029e6:	4013      	ands	r3, r2
 80029e8:	2208      	movs	r2, #8
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4013      	ands	r3, r2
 80029f2:	d02b      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x158>
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2208      	movs	r2, #8
 80029f8:	4013      	ands	r3, r2
 80029fa:	d027      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	210e      	movs	r1, #14
 8002a08:	438a      	bics	r2, r1
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_DMA_IRQHandler+0x160>)
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	221c      	movs	r2, #28
 8002a16:	4013      	ands	r3, r2
 8002a18:	2201      	movs	r2, #1
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_DMA_IRQHandler+0x160>)
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2225      	movs	r2, #37	; 0x25
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2224      	movs	r2, #36	; 0x24
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	0010      	movs	r0, r2
 8002a48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46c0      	nop			; (mov r8, r8)
}
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	b004      	add	sp, #16
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40020000 	.word	0x40020000

08002a58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d004      	beq.n	8002a82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a80:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <DMA_SetConfig+0x7c>)
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	221c      	movs	r2, #28
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2201      	movs	r2, #1
 8002a90:	409a      	lsls	r2, r3
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <DMA_SetConfig+0x7c>)
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d108      	bne.n	8002aba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ab8:	e007      	b.n	8002aca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	60da      	str	r2, [r3, #12]
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b004      	add	sp, #16
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	089b      	lsrs	r3, r3, #2
 8002ae6:	4a10      	ldr	r2, [pc, #64]	; (8002b28 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002ae8:	4694      	mov	ip, r2
 8002aea:	4463      	add	r3, ip
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	001a      	movs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	001a      	movs	r2, r3
 8002afa:	23ff      	movs	r3, #255	; 0xff
 8002afc:	4013      	ands	r3, r2
 8002afe:	3b08      	subs	r3, #8
 8002b00:	2114      	movs	r1, #20
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7fd fafe 	bl	8000104 <__udivsi3>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a07      	ldr	r2, [pc, #28]	; (8002b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002b10:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	221f      	movs	r2, #31
 8002b16:	4013      	ands	r3, r2
 8002b18:	2201      	movs	r2, #1
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	10008200 	.word	0x10008200
 8002b2c:	40020880 	.word	0x40020880

08002b30 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	223f      	movs	r2, #63	; 0x3f
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002b46:	4694      	mov	ip, r2
 8002b48:	4463      	add	r3, ip
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a07      	ldr	r2, [pc, #28]	; (8002b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	b004      	add	sp, #16
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	1000823f 	.word	0x1000823f
 8002b74:	40020940 	.word	0x40020940

08002b78 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d01c      	beq.n	8002bc8 <HAL_DMAEx_MUX_IRQHandler+0x50>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b98:	4921      	ldr	r1, [pc, #132]	; (8002c20 <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ba6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d004      	beq.n	8002bc8 <HAL_DMAEx_MUX_IRQHandler+0x50>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	0010      	movs	r0, r2
 8002bc6:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d023      	beq.n	8002c18 <HAL_DMAEx_MUX_IRQHandler+0xa0>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d01c      	beq.n	8002c18 <HAL_DMAEx_MUX_IRQHandler+0xa0>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be8:	490d      	ldr	r1, [pc, #52]	; (8002c20 <HAL_DMAEx_MUX_IRQHandler+0xa8>)
 8002bea:	400a      	ands	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002bf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfc:	2280      	movs	r2, #128	; 0x80
 8002bfe:	00d2      	lsls	r2, r2, #3
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d004      	beq.n	8002c18 <HAL_DMAEx_MUX_IRQHandler+0xa0>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	0010      	movs	r0, r2
 8002c16:	4798      	blx	r3
      }
    }
  }
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	fffffeff 	.word	0xfffffeff

08002c24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c32:	e147      	b.n	8002ec4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2101      	movs	r1, #1
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4091      	lsls	r1, r2
 8002c3e:	000a      	movs	r2, r1
 8002c40:	4013      	ands	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d100      	bne.n	8002c4c <HAL_GPIO_Init+0x28>
 8002c4a:	e138      	b.n	8002ebe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2203      	movs	r2, #3
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d005      	beq.n	8002c64 <HAL_GPIO_Init+0x40>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2203      	movs	r2, #3
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d130      	bne.n	8002cc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	409a      	lsls	r2, r3
 8002c72:	0013      	movs	r3, r2
 8002c74:	43da      	mvns	r2, r3
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68da      	ldr	r2, [r3, #12]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	409a      	lsls	r2, r3
 8002c86:	0013      	movs	r3, r2
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	0013      	movs	r3, r2
 8002ca2:	43da      	mvns	r2, r3
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	091b      	lsrs	r3, r3, #4
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b03      	cmp	r3, #3
 8002cd0:	d017      	beq.n	8002d02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	2203      	movs	r2, #3
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	0013      	movs	r3, r2
 8002ce2:	43da      	mvns	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	0013      	movs	r3, r2
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2203      	movs	r2, #3
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d123      	bne.n	8002d56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	0092      	lsls	r2, r2, #2
 8002d18:	58d3      	ldr	r3, [r2, r3]
 8002d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2207      	movs	r2, #7
 8002d20:	4013      	ands	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	220f      	movs	r2, #15
 8002d26:	409a      	lsls	r2, r3
 8002d28:	0013      	movs	r3, r2
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2107      	movs	r1, #7
 8002d3a:	400b      	ands	r3, r1
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	0013      	movs	r3, r2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	08da      	lsrs	r2, r3, #3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3208      	adds	r2, #8
 8002d50:	0092      	lsls	r2, r2, #2
 8002d52:	6939      	ldr	r1, [r7, #16]
 8002d54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	409a      	lsls	r2, r3
 8002d64:	0013      	movs	r3, r2
 8002d66:	43da      	mvns	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2203      	movs	r2, #3
 8002d74:	401a      	ands	r2, r3
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	0013      	movs	r3, r2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	23c0      	movs	r3, #192	; 0xc0
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	4013      	ands	r3, r2
 8002d94:	d100      	bne.n	8002d98 <HAL_GPIO_Init+0x174>
 8002d96:	e092      	b.n	8002ebe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002d98:	4a50      	ldr	r2, [pc, #320]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	3318      	adds	r3, #24
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	589b      	ldr	r3, [r3, r2]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2203      	movs	r2, #3
 8002daa:	4013      	ands	r3, r2
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	220f      	movs	r2, #15
 8002db0:	409a      	lsls	r2, r3
 8002db2:	0013      	movs	r3, r2
 8002db4:	43da      	mvns	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	23a0      	movs	r3, #160	; 0xa0
 8002dc0:	05db      	lsls	r3, r3, #23
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x1ca>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a45      	ldr	r2, [pc, #276]	; (8002ee0 <HAL_GPIO_Init+0x2bc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x1c6>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a44      	ldr	r2, [pc, #272]	; (8002ee4 <HAL_GPIO_Init+0x2c0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x1c2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <HAL_GPIO_Init+0x2c4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x1be>
 8002dde:	2303      	movs	r3, #3
 8002de0:	e006      	b.n	8002df0 <HAL_GPIO_Init+0x1cc>
 8002de2:	2305      	movs	r3, #5
 8002de4:	e004      	b.n	8002df0 <HAL_GPIO_Init+0x1cc>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e002      	b.n	8002df0 <HAL_GPIO_Init+0x1cc>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <HAL_GPIO_Init+0x1cc>
 8002dee:	2300      	movs	r3, #0
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	2103      	movs	r1, #3
 8002df4:	400a      	ands	r2, r1
 8002df6:	00d2      	lsls	r2, r2, #3
 8002df8:	4093      	lsls	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002e00:	4936      	ldr	r1, [pc, #216]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3318      	adds	r3, #24
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	43da      	mvns	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	035b      	lsls	r3, r3, #13
 8002e26:	4013      	ands	r3, r2
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e32:	4b2a      	ldr	r3, [pc, #168]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002e38:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43da      	mvns	r2, r3
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	039b      	lsls	r3, r3, #14
 8002e50:	4013      	ands	r3, r2
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e5c:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e62:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002e64:	2384      	movs	r3, #132	; 0x84
 8002e66:	58d3      	ldr	r3, [r2, r3]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	029b      	lsls	r3, r3, #10
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d003      	beq.n	8002e88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e88:	4914      	ldr	r1, [pc, #80]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002e8a:	2284      	movs	r2, #132	; 0x84
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002e90:	4a12      	ldr	r2, [pc, #72]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	58d3      	ldr	r3, [r2, r3]
 8002e96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	025b      	lsls	r3, r3, #9
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eb6:	4909      	ldr	r1, [pc, #36]	; (8002edc <HAL_GPIO_Init+0x2b8>)
 8002eb8:	2280      	movs	r2, #128	; 0x80
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	40da      	lsrs	r2, r3
 8002ecc:	1e13      	subs	r3, r2, #0
 8002ece:	d000      	beq.n	8002ed2 <HAL_GPIO_Init+0x2ae>
 8002ed0:	e6b0      	b.n	8002c34 <HAL_GPIO_Init+0x10>
  }
}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b006      	add	sp, #24
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40021800 	.word	0x40021800
 8002ee0:	50000400 	.word	0x50000400
 8002ee4:	50000800 	.word	0x50000800
 8002ee8:	50000c00 	.word	0x50000c00

08002eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	0008      	movs	r0, r1
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	1cbb      	adds	r3, r7, #2
 8002efa:	1c02      	adds	r2, r0, #0
 8002efc:	801a      	strh	r2, [r3, #0]
 8002efe:	1c7b      	adds	r3, r7, #1
 8002f00:	1c0a      	adds	r2, r1, #0
 8002f02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f04:	1c7b      	adds	r3, r7, #1
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f0c:	1cbb      	adds	r3, r7, #2
 8002f0e:	881a      	ldrh	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f14:	e003      	b.n	8002f1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f16:	1cbb      	adds	r3, r7, #2
 8002f18:	881a      	ldrh	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
 8002f20:	46bd      	mov	sp, r7
 8002f22:	b002      	add	sp, #8
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	000a      	movs	r2, r1
 8002f30:	1cbb      	adds	r3, r7, #2
 8002f32:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f3a:	1cbb      	adds	r3, r7, #2
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4013      	ands	r3, r2
 8002f42:	041a      	lsls	r2, r3, #16
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	1cb9      	adds	r1, r7, #2
 8002f4a:	8809      	ldrh	r1, [r1, #0]
 8002f4c:	400b      	ands	r3, r1
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	619a      	str	r2, [r3, #24]
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b004      	add	sp, #16
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a19      	ldr	r2, [pc, #100]	; (8002fd0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d11f      	bne.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	0013      	movs	r3, r2
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	189b      	adds	r3, r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4912      	ldr	r1, [pc, #72]	; (8002fd8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fd f8b8 	bl	8000104 <__udivsi3>
 8002f94:	0003      	movs	r3, r0
 8002f96:	3301      	adds	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f9a:	e008      	b.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	e001      	b.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e009      	b.n	8002fc2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d0ed      	beq.n	8002f9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	40007000 	.word	0x40007000
 8002fd0:	fffff9ff 	.word	0xfffff9ff
 8002fd4:	20000004 	.word	0x20000004
 8002fd8:	000f4240 	.word	0x000f4240

08002fdc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	23e0      	movs	r3, #224	; 0xe0
 8002fe6:	01db      	lsls	r3, r3, #7
 8002fe8:	4013      	ands	r3, r2
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e2fe      	b.n	8003604 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d100      	bne.n	8003012 <HAL_RCC_OscConfig+0x1e>
 8003010:	e07c      	b.n	800310c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003012:	4bc3      	ldr	r3, [pc, #780]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2238      	movs	r2, #56	; 0x38
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800301c:	4bc0      	ldr	r3, [pc, #768]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2203      	movs	r2, #3
 8003022:	4013      	ands	r3, r2
 8003024:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d102      	bne.n	8003032 <HAL_RCC_OscConfig+0x3e>
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d002      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4bb9      	ldr	r3, [pc, #740]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	4013      	ands	r3, r2
 8003042:	d062      	beq.n	800310a <HAL_RCC_OscConfig+0x116>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d15e      	bne.n	800310a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e2d9      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	025b      	lsls	r3, r3, #9
 8003058:	429a      	cmp	r2, r3
 800305a:	d107      	bne.n	800306c <HAL_RCC_OscConfig+0x78>
 800305c:	4bb0      	ldr	r3, [pc, #704]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4baf      	ldr	r3, [pc, #700]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	0249      	lsls	r1, r1, #9
 8003066:	430a      	orrs	r2, r1
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e020      	b.n	80030ae <HAL_RCC_OscConfig+0xba>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	23a0      	movs	r3, #160	; 0xa0
 8003072:	02db      	lsls	r3, r3, #11
 8003074:	429a      	cmp	r2, r3
 8003076:	d10e      	bne.n	8003096 <HAL_RCC_OscConfig+0xa2>
 8003078:	4ba9      	ldr	r3, [pc, #676]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4ba8      	ldr	r3, [pc, #672]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800307e:	2180      	movs	r1, #128	; 0x80
 8003080:	02c9      	lsls	r1, r1, #11
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	4ba6      	ldr	r3, [pc, #664]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4ba5      	ldr	r3, [pc, #660]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	0249      	lsls	r1, r1, #9
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e00b      	b.n	80030ae <HAL_RCC_OscConfig+0xba>
 8003096:	4ba2      	ldr	r3, [pc, #648]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4ba1      	ldr	r3, [pc, #644]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800309c:	49a1      	ldr	r1, [pc, #644]	; (8003324 <HAL_RCC_OscConfig+0x330>)
 800309e:	400a      	ands	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	4b9f      	ldr	r3, [pc, #636]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b9e      	ldr	r3, [pc, #632]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80030a8:	499f      	ldr	r1, [pc, #636]	; (8003328 <HAL_RCC_OscConfig+0x334>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d014      	beq.n	80030e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe f993 	bl	80013e0 <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fe f98e 	bl	80013e0 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	; 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e298      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d2:	4b93      	ldr	r3, [pc, #588]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	029b      	lsls	r3, r3, #10
 80030da:	4013      	ands	r3, r2
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0xcc>
 80030de:	e015      	b.n	800310c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe f97e 	bl	80013e0 <HAL_GetTick>
 80030e4:	0003      	movs	r3, r0
 80030e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ea:	f7fe f979 	bl	80013e0 <HAL_GetTick>
 80030ee:	0002      	movs	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b64      	cmp	r3, #100	; 0x64
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e283      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fc:	4b88      	ldr	r3, [pc, #544]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	029b      	lsls	r3, r3, #10
 8003104:	4013      	ands	r3, r2
 8003106:	d1f0      	bne.n	80030ea <HAL_RCC_OscConfig+0xf6>
 8003108:	e000      	b.n	800310c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2202      	movs	r2, #2
 8003112:	4013      	ands	r3, r2
 8003114:	d100      	bne.n	8003118 <HAL_RCC_OscConfig+0x124>
 8003116:	e099      	b.n	800324c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003118:	4b81      	ldr	r3, [pc, #516]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2238      	movs	r2, #56	; 0x38
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003122:	4b7f      	ldr	r3, [pc, #508]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2203      	movs	r2, #3
 8003128:	4013      	ands	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d102      	bne.n	8003138 <HAL_RCC_OscConfig+0x144>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d002      	beq.n	800313e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d135      	bne.n	80031aa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800313e:	4b78      	ldr	r3, [pc, #480]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4013      	ands	r3, r2
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x162>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e256      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003156:	4b72      	ldr	r3, [pc, #456]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4a74      	ldr	r2, [pc, #464]	; (800332c <HAL_RCC_OscConfig+0x338>)
 800315c:	4013      	ands	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	021a      	lsls	r2, r3, #8
 8003166:	4b6e      	ldr	r3, [pc, #440]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003168:	430a      	orrs	r2, r1
 800316a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d112      	bne.n	8003198 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003172:	4b6b      	ldr	r3, [pc, #428]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a6e      	ldr	r2, [pc, #440]	; (8003330 <HAL_RCC_OscConfig+0x33c>)
 8003178:	4013      	ands	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	4b67      	ldr	r3, [pc, #412]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003182:	430a      	orrs	r2, r1
 8003184:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003186:	4b66      	ldr	r3, [pc, #408]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	0adb      	lsrs	r3, r3, #11
 800318c:	2207      	movs	r2, #7
 800318e:	4013      	ands	r3, r2
 8003190:	4a68      	ldr	r2, [pc, #416]	; (8003334 <HAL_RCC_OscConfig+0x340>)
 8003192:	40da      	lsrs	r2, r3
 8003194:	4b68      	ldr	r3, [pc, #416]	; (8003338 <HAL_RCC_OscConfig+0x344>)
 8003196:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003198:	4b68      	ldr	r3, [pc, #416]	; (800333c <HAL_RCC_OscConfig+0x348>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0018      	movs	r0, r3
 800319e:	f7fe f8c3 	bl	8001328 <HAL_InitTick>
 80031a2:	1e03      	subs	r3, r0, #0
 80031a4:	d051      	beq.n	800324a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e22c      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d030      	beq.n	8003214 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031b2:	4b5b      	ldr	r3, [pc, #364]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a5e      	ldr	r2, [pc, #376]	; (8003330 <HAL_RCC_OscConfig+0x33c>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	4b57      	ldr	r3, [pc, #348]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80031c6:	4b56      	ldr	r3, [pc, #344]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b55      	ldr	r3, [pc, #340]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80031cc:	2180      	movs	r1, #128	; 0x80
 80031ce:	0049      	lsls	r1, r1, #1
 80031d0:	430a      	orrs	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7fe f904 	bl	80013e0 <HAL_GetTick>
 80031d8:	0003      	movs	r3, r0
 80031da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031de:	f7fe f8ff 	bl	80013e0 <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e209      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	4b4b      	ldr	r3, [pc, #300]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	2380      	movs	r3, #128	; 0x80
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4013      	ands	r3, r2
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031fc:	4b48      	ldr	r3, [pc, #288]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a4a      	ldr	r2, [pc, #296]	; (800332c <HAL_RCC_OscConfig+0x338>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	021a      	lsls	r2, r3, #8
 800320c:	4b44      	ldr	r3, [pc, #272]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
 8003212:	e01b      	b.n	800324c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003214:	4b42      	ldr	r3, [pc, #264]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b41      	ldr	r3, [pc, #260]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800321a:	4949      	ldr	r1, [pc, #292]	; (8003340 <HAL_RCC_OscConfig+0x34c>)
 800321c:	400a      	ands	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fe f8de 	bl	80013e0 <HAL_GetTick>
 8003224:	0003      	movs	r3, r0
 8003226:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800322a:	f7fe f8d9 	bl	80013e0 <HAL_GetTick>
 800322e:	0002      	movs	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1e3      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800323c:	4b38      	ldr	r3, [pc, #224]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	4013      	ands	r3, r2
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x236>
 8003248:	e000      	b.n	800324c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800324a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2208      	movs	r2, #8
 8003252:	4013      	ands	r3, r2
 8003254:	d047      	beq.n	80032e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003256:	4b32      	ldr	r3, [pc, #200]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2238      	movs	r2, #56	; 0x38
 800325c:	4013      	ands	r3, r2
 800325e:	2b18      	cmp	r3, #24
 8003260:	d10a      	bne.n	8003278 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003262:	4b2f      	ldr	r3, [pc, #188]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	2202      	movs	r2, #2
 8003268:	4013      	ands	r3, r2
 800326a:	d03c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x2f2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d138      	bne.n	80032e6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e1c5      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d019      	beq.n	80032b4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003280:	4b27      	ldr	r3, [pc, #156]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003282:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003284:	4b26      	ldr	r3, [pc, #152]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003286:	2101      	movs	r1, #1
 8003288:	430a      	orrs	r2, r1
 800328a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe f8a8 	bl	80013e0 <HAL_GetTick>
 8003290:	0003      	movs	r3, r0
 8003292:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe f8a3 	bl	80013e0 <HAL_GetTick>
 800329a:	0002      	movs	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e1ad      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032a8:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80032aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ac:	2202      	movs	r2, #2
 80032ae:	4013      	ands	r3, r2
 80032b0:	d0f1      	beq.n	8003296 <HAL_RCC_OscConfig+0x2a2>
 80032b2:	e018      	b.n	80032e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80032b4:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80032b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032b8:	4b19      	ldr	r3, [pc, #100]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80032ba:	2101      	movs	r1, #1
 80032bc:	438a      	bics	r2, r1
 80032be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe f88e 	bl	80013e0 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032c8:	e008      	b.n	80032dc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ca:	f7fe f889 	bl	80013e0 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e193      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032dc:	4b10      	ldr	r3, [pc, #64]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80032de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e0:	2202      	movs	r2, #2
 80032e2:	4013      	ands	r3, r2
 80032e4:	d1f1      	bne.n	80032ca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2204      	movs	r2, #4
 80032ec:	4013      	ands	r3, r2
 80032ee:	d100      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2fe>
 80032f0:	e0c6      	b.n	8003480 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f2:	231f      	movs	r3, #31
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2238      	movs	r2, #56	; 0x38
 8003300:	4013      	ands	r3, r2
 8003302:	2b20      	cmp	r3, #32
 8003304:	d11e      	bne.n	8003344 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003306:	4b06      	ldr	r3, [pc, #24]	; (8003320 <HAL_RCC_OscConfig+0x32c>)
 8003308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330a:	2202      	movs	r2, #2
 800330c:	4013      	ands	r3, r2
 800330e:	d100      	bne.n	8003312 <HAL_RCC_OscConfig+0x31e>
 8003310:	e0b6      	b.n	8003480 <HAL_RCC_OscConfig+0x48c>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d000      	beq.n	800331c <HAL_RCC_OscConfig+0x328>
 800331a:	e0b1      	b.n	8003480 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e171      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
 8003320:	40021000 	.word	0x40021000
 8003324:	fffeffff 	.word	0xfffeffff
 8003328:	fffbffff 	.word	0xfffbffff
 800332c:	ffff80ff 	.word	0xffff80ff
 8003330:	ffffc7ff 	.word	0xffffc7ff
 8003334:	00f42400 	.word	0x00f42400
 8003338:	20000004 	.word	0x20000004
 800333c:	20000008 	.word	0x20000008
 8003340:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003344:	4bb1      	ldr	r3, [pc, #708]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003346:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	055b      	lsls	r3, r3, #21
 800334c:	4013      	ands	r3, r2
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x360>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x362>
 8003354:	2300      	movs	r3, #0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d011      	beq.n	800337e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800335a:	4bac      	ldr	r3, [pc, #688]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800335c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335e:	4bab      	ldr	r3, [pc, #684]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0549      	lsls	r1, r1, #21
 8003364:	430a      	orrs	r2, r1
 8003366:	63da      	str	r2, [r3, #60]	; 0x3c
 8003368:	4ba8      	ldr	r3, [pc, #672]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800336a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	055b      	lsls	r3, r3, #21
 8003370:	4013      	ands	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003376:	231f      	movs	r3, #31
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337e:	4ba4      	ldr	r3, [pc, #656]	; (8003610 <HAL_RCC_OscConfig+0x61c>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	2380      	movs	r3, #128	; 0x80
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	4013      	ands	r3, r2
 8003388:	d11a      	bne.n	80033c0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800338a:	4ba1      	ldr	r3, [pc, #644]	; (8003610 <HAL_RCC_OscConfig+0x61c>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	4ba0      	ldr	r3, [pc, #640]	; (8003610 <HAL_RCC_OscConfig+0x61c>)
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	0049      	lsls	r1, r1, #1
 8003394:	430a      	orrs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003398:	f7fe f822 	bl	80013e0 <HAL_GetTick>
 800339c:	0003      	movs	r3, r0
 800339e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fe f81d 	bl	80013e0 <HAL_GetTick>
 80033a6:	0002      	movs	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e127      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b4:	4b96      	ldr	r3, [pc, #600]	; (8003610 <HAL_RCC_OscConfig+0x61c>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x3e2>
 80033c8:	4b90      	ldr	r3, [pc, #576]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80033ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033cc:	4b8f      	ldr	r3, [pc, #572]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x41c>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x404>
 80033de:	4b8b      	ldr	r3, [pc, #556]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80033e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033e2:	4b8a      	ldr	r3, [pc, #552]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80033e4:	2104      	movs	r1, #4
 80033e6:	430a      	orrs	r2, r1
 80033e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80033ea:	4b88      	ldr	r3, [pc, #544]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80033ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033ee:	4b87      	ldr	r3, [pc, #540]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80033f0:	2101      	movs	r1, #1
 80033f2:	430a      	orrs	r2, r1
 80033f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0x41c>
 80033f8:	4b84      	ldr	r3, [pc, #528]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80033fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033fc:	4b83      	ldr	r3, [pc, #524]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80033fe:	2101      	movs	r1, #1
 8003400:	438a      	bics	r2, r1
 8003402:	65da      	str	r2, [r3, #92]	; 0x5c
 8003404:	4b81      	ldr	r3, [pc, #516]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003406:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003408:	4b80      	ldr	r3, [pc, #512]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800340a:	2104      	movs	r1, #4
 800340c:	438a      	bics	r2, r1
 800340e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d014      	beq.n	8003442 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fd ffe2 	bl	80013e0 <HAL_GetTick>
 800341c:	0003      	movs	r3, r0
 800341e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003420:	e009      	b.n	8003436 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003422:	f7fd ffdd 	bl	80013e0 <HAL_GetTick>
 8003426:	0002      	movs	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	4a79      	ldr	r2, [pc, #484]	; (8003614 <HAL_RCC_OscConfig+0x620>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0e6      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003436:	4b75      	ldr	r3, [pc, #468]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	2202      	movs	r2, #2
 800343c:	4013      	ands	r3, r2
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x42e>
 8003440:	e013      	b.n	800346a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fd ffcd 	bl	80013e0 <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800344a:	e009      	b.n	8003460 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fd ffc8 	bl	80013e0 <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	4a6f      	ldr	r2, [pc, #444]	; (8003614 <HAL_RCC_OscConfig+0x620>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e0d1      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003460:	4b6a      	ldr	r3, [pc, #424]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003464:	2202      	movs	r2, #2
 8003466:	4013      	ands	r3, r2
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800346a:	231f      	movs	r3, #31
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003474:	4b65      	ldr	r3, [pc, #404]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003478:	4b64      	ldr	r3, [pc, #400]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800347a:	4967      	ldr	r1, [pc, #412]	; (8003618 <HAL_RCC_OscConfig+0x624>)
 800347c:	400a      	ands	r2, r1
 800347e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d100      	bne.n	800348a <HAL_RCC_OscConfig+0x496>
 8003488:	e0bb      	b.n	8003602 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800348a:	4b60      	ldr	r3, [pc, #384]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2238      	movs	r2, #56	; 0x38
 8003490:	4013      	ands	r3, r2
 8003492:	2b10      	cmp	r3, #16
 8003494:	d100      	bne.n	8003498 <HAL_RCC_OscConfig+0x4a4>
 8003496:	e07b      	b.n	8003590 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d156      	bne.n	800354e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a0:	4b5a      	ldr	r3, [pc, #360]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b59      	ldr	r3, [pc, #356]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80034a6:	495d      	ldr	r1, [pc, #372]	; (800361c <HAL_RCC_OscConfig+0x628>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fd ff98 	bl	80013e0 <HAL_GetTick>
 80034b0:	0003      	movs	r3, r0
 80034b2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fd ff93 	bl	80013e0 <HAL_GetTick>
 80034ba:	0002      	movs	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e09d      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c8:	4b50      	ldr	r3, [pc, #320]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	049b      	lsls	r3, r3, #18
 80034d0:	4013      	ands	r3, r2
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034d4:	4b4d      	ldr	r3, [pc, #308]	; (800360c <HAL_RCC_OscConfig+0x618>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a51      	ldr	r2, [pc, #324]	; (8003620 <HAL_RCC_OscConfig+0x62c>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1a      	ldr	r2, [r3, #32]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003500:	431a      	orrs	r2, r3
 8003502:	4b42      	ldr	r3, [pc, #264]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003508:	4b40      	ldr	r3, [pc, #256]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	0449      	lsls	r1, r1, #17
 8003512:	430a      	orrs	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003516:	4b3d      	ldr	r3, [pc, #244]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	4b3c      	ldr	r3, [pc, #240]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	0549      	lsls	r1, r1, #21
 8003520:	430a      	orrs	r2, r1
 8003522:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003524:	f7fd ff5c 	bl	80013e0 <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
 800352a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352c:	e008      	b.n	8003540 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fd ff57 	bl	80013e0 <HAL_GetTick>
 8003532:	0002      	movs	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e061      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	049b      	lsls	r3, r3, #18
 8003548:	4013      	ands	r3, r2
 800354a:	d0f0      	beq.n	800352e <HAL_RCC_OscConfig+0x53a>
 800354c:	e059      	b.n	8003602 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b2f      	ldr	r3, [pc, #188]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b2e      	ldr	r3, [pc, #184]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003554:	4931      	ldr	r1, [pc, #196]	; (800361c <HAL_RCC_OscConfig+0x628>)
 8003556:	400a      	ands	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fd ff41 	bl	80013e0 <HAL_GetTick>
 800355e:	0003      	movs	r3, r0
 8003560:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fd ff3c 	bl	80013e0 <HAL_GetTick>
 8003568:	0002      	movs	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e046      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003576:	4b25      	ldr	r3, [pc, #148]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	049b      	lsls	r3, r3, #18
 800357e:	4013      	ands	r3, r2
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	4b21      	ldr	r3, [pc, #132]	; (800360c <HAL_RCC_OscConfig+0x618>)
 8003588:	4926      	ldr	r1, [pc, #152]	; (8003624 <HAL_RCC_OscConfig+0x630>)
 800358a:	400a      	ands	r2, r1
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	e038      	b.n	8003602 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e033      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800359c:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x618>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2203      	movs	r2, #3
 80035a6:	401a      	ands	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d126      	bne.n	80035fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2270      	movs	r2, #112	; 0x70
 80035b4:	401a      	ands	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d11f      	bne.n	80035fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	23fe      	movs	r3, #254	; 0xfe
 80035c2:	01db      	lsls	r3, r3, #7
 80035c4:	401a      	ands	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d116      	bne.n	80035fe <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	23f8      	movs	r3, #248	; 0xf8
 80035d4:	039b      	lsls	r3, r3, #14
 80035d6:	401a      	ands	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d10e      	bne.n	80035fe <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	23e0      	movs	r3, #224	; 0xe0
 80035e4:	051b      	lsls	r3, r3, #20
 80035e6:	401a      	ands	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	0f5b      	lsrs	r3, r3, #29
 80035f4:	075a      	lsls	r2, r3, #29
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b008      	add	sp, #32
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	40007000 	.word	0x40007000
 8003614:	00001388 	.word	0x00001388
 8003618:	efffffff 	.word	0xefffffff
 800361c:	feffffff 	.word	0xfeffffff
 8003620:	11c1808c 	.word	0x11c1808c
 8003624:	eefefffc 	.word	0xeefefffc

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0e9      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b76      	ldr	r3, [pc, #472]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2207      	movs	r2, #7
 8003642:	4013      	ands	r3, r2
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d91e      	bls.n	8003688 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b73      	ldr	r3, [pc, #460]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2207      	movs	r2, #7
 8003650:	4393      	bics	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	4b70      	ldr	r3, [pc, #448]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800365c:	f7fd fec0 	bl	80013e0 <HAL_GetTick>
 8003660:	0003      	movs	r3, r0
 8003662:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003664:	e009      	b.n	800367a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003666:	f7fd febb 	bl	80013e0 <HAL_GetTick>
 800366a:	0002      	movs	r2, r0
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	4a6a      	ldr	r2, [pc, #424]	; (800381c <HAL_RCC_ClockConfig+0x1f4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d901      	bls.n	800367a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e0ca      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800367a:	4b67      	ldr	r3, [pc, #412]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2207      	movs	r2, #7
 8003680:	4013      	ands	r3, r2
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d1ee      	bne.n	8003666 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2202      	movs	r2, #2
 800368e:	4013      	ands	r3, r2
 8003690:	d015      	beq.n	80036be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2204      	movs	r2, #4
 8003698:	4013      	ands	r3, r2
 800369a:	d006      	beq.n	80036aa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800369c:	4b60      	ldr	r3, [pc, #384]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80036a2:	21e0      	movs	r1, #224	; 0xe0
 80036a4:	01c9      	lsls	r1, r1, #7
 80036a6:	430a      	orrs	r2, r1
 80036a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036aa:	4b5d      	ldr	r3, [pc, #372]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4a5d      	ldr	r2, [pc, #372]	; (8003824 <HAL_RCC_ClockConfig+0x1fc>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	0019      	movs	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b59      	ldr	r3, [pc, #356]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	4013      	ands	r3, r2
 80036c6:	d057      	beq.n	8003778 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d0:	4b53      	ldr	r3, [pc, #332]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	2380      	movs	r3, #128	; 0x80
 80036d6:	029b      	lsls	r3, r3, #10
 80036d8:	4013      	ands	r3, r2
 80036da:	d12b      	bne.n	8003734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e097      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d107      	bne.n	80036f8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e8:	4b4d      	ldr	r3, [pc, #308]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	049b      	lsls	r3, r3, #18
 80036f0:	4013      	ands	r3, r2
 80036f2:	d11f      	bne.n	8003734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e08b      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003700:	4b47      	ldr	r3, [pc, #284]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4013      	ands	r3, r2
 800370a:	d113      	bne.n	8003734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e07f      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d106      	bne.n	8003726 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003718:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 800371a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	d108      	bne.n	8003734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e074      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003726:	4b3e      	ldr	r3, [pc, #248]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 8003728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372a:	2202      	movs	r2, #2
 800372c:	4013      	ands	r3, r2
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e06d      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003734:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2207      	movs	r2, #7
 800373a:	4393      	bics	r3, r2
 800373c:	0019      	movs	r1, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	4b37      	ldr	r3, [pc, #220]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003748:	f7fd fe4a 	bl	80013e0 <HAL_GetTick>
 800374c:	0003      	movs	r3, r0
 800374e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003750:	e009      	b.n	8003766 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003752:	f7fd fe45 	bl	80013e0 <HAL_GetTick>
 8003756:	0002      	movs	r2, r0
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	4a2f      	ldr	r2, [pc, #188]	; (800381c <HAL_RCC_ClockConfig+0x1f4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e054      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003766:	4b2e      	ldr	r3, [pc, #184]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2238      	movs	r2, #56	; 0x38
 800376c:	401a      	ands	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	429a      	cmp	r2, r3
 8003776:	d1ec      	bne.n	8003752 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003778:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2207      	movs	r2, #7
 800377e:	4013      	ands	r3, r2
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d21e      	bcs.n	80037c4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2207      	movs	r2, #7
 800378c:	4393      	bics	r3, r2
 800378e:	0019      	movs	r1, r3
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 8003792:	683a      	ldr	r2, [r7, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003798:	f7fd fe22 	bl	80013e0 <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037a0:	e009      	b.n	80037b6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a2:	f7fd fe1d 	bl	80013e0 <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	4a1b      	ldr	r2, [pc, #108]	; (800381c <HAL_RCC_ClockConfig+0x1f4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e02c      	b.n	8003810 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037b6:	4b18      	ldr	r3, [pc, #96]	; (8003818 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2207      	movs	r2, #7
 80037bc:	4013      	ands	r3, r2
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1ee      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2204      	movs	r2, #4
 80037ca:	4013      	ands	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80037ce:	4b14      	ldr	r3, [pc, #80]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <HAL_RCC_ClockConfig+0x200>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	0019      	movs	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80037de:	430a      	orrs	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80037e2:	f000 f829 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80037e6:	0001      	movs	r1, r0
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_RCC_ClockConfig+0x1f8>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	0a1b      	lsrs	r3, r3, #8
 80037ee:	220f      	movs	r2, #15
 80037f0:	401a      	ands	r2, r3
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_RCC_ClockConfig+0x204>)
 80037f4:	0092      	lsls	r2, r2, #2
 80037f6:	58d3      	ldr	r3, [r2, r3]
 80037f8:	221f      	movs	r2, #31
 80037fa:	4013      	ands	r3, r2
 80037fc:	000a      	movs	r2, r1
 80037fe:	40da      	lsrs	r2, r3
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_ClockConfig+0x208>)
 8003802:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003804:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_RCC_ClockConfig+0x20c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0018      	movs	r0, r3
 800380a:	f7fd fd8d 	bl	8001328 <HAL_InitTick>
 800380e:	0003      	movs	r3, r0
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b004      	add	sp, #16
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40022000 	.word	0x40022000
 800381c:	00001388 	.word	0x00001388
 8003820:	40021000 	.word	0x40021000
 8003824:	fffff0ff 	.word	0xfffff0ff
 8003828:	ffff8fff 	.word	0xffff8fff
 800382c:	08005ff4 	.word	0x08005ff4
 8003830:	20000004 	.word	0x20000004
 8003834:	20000008 	.word	0x20000008

08003838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800383e:	4b3c      	ldr	r3, [pc, #240]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2238      	movs	r2, #56	; 0x38
 8003844:	4013      	ands	r3, r2
 8003846:	d10f      	bne.n	8003868 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	0adb      	lsrs	r3, r3, #11
 800384e:	2207      	movs	r2, #7
 8003850:	4013      	ands	r3, r2
 8003852:	2201      	movs	r2, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	0013      	movs	r3, r2
 8003858:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	4835      	ldr	r0, [pc, #212]	; (8003934 <HAL_RCC_GetSysClockFreq+0xfc>)
 800385e:	f7fc fc51 	bl	8000104 <__udivsi3>
 8003862:	0003      	movs	r3, r0
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	e05d      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003868:	4b31      	ldr	r3, [pc, #196]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2238      	movs	r2, #56	; 0x38
 800386e:	4013      	ands	r3, r2
 8003870:	2b08      	cmp	r3, #8
 8003872:	d102      	bne.n	800387a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003874:	4b30      	ldr	r3, [pc, #192]	; (8003938 <HAL_RCC_GetSysClockFreq+0x100>)
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	e054      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800387a:	4b2d      	ldr	r3, [pc, #180]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2238      	movs	r2, #56	; 0x38
 8003880:	4013      	ands	r3, r2
 8003882:	2b10      	cmp	r3, #16
 8003884:	d138      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003886:	4b2a      	ldr	r3, [pc, #168]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	2203      	movs	r2, #3
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003890:	4b27      	ldr	r3, [pc, #156]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	2207      	movs	r2, #7
 8003898:	4013      	ands	r3, r2
 800389a:	3301      	adds	r3, #1
 800389c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b03      	cmp	r3, #3
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	4824      	ldr	r0, [pc, #144]	; (8003938 <HAL_RCC_GetSysClockFreq+0x100>)
 80038a8:	f7fc fc2c 	bl	8000104 <__udivsi3>
 80038ac:	0003      	movs	r3, r0
 80038ae:	0019      	movs	r1, r3
 80038b0:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	227f      	movs	r2, #127	; 0x7f
 80038b8:	4013      	ands	r3, r2
 80038ba:	434b      	muls	r3, r1
 80038bc:	617b      	str	r3, [r7, #20]
        break;
 80038be:	e00d      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80038c0:	68b9      	ldr	r1, [r7, #8]
 80038c2:	481c      	ldr	r0, [pc, #112]	; (8003934 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038c4:	f7fc fc1e 	bl	8000104 <__udivsi3>
 80038c8:	0003      	movs	r3, r0
 80038ca:	0019      	movs	r1, r3
 80038cc:	4b18      	ldr	r3, [pc, #96]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	227f      	movs	r2, #127	; 0x7f
 80038d4:	4013      	ands	r3, r2
 80038d6:	434b      	muls	r3, r1
 80038d8:	617b      	str	r3, [r7, #20]
        break;
 80038da:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	0f5b      	lsrs	r3, r3, #29
 80038e2:	2207      	movs	r2, #7
 80038e4:	4013      	ands	r3, r2
 80038e6:	3301      	adds	r3, #1
 80038e8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	6978      	ldr	r0, [r7, #20]
 80038ee:	f7fc fc09 	bl	8000104 <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e015      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2238      	movs	r2, #56	; 0x38
 80038fe:	4013      	ands	r3, r2
 8003900:	2b20      	cmp	r3, #32
 8003902:	d103      	bne.n	800390c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	e00b      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <HAL_RCC_GetSysClockFreq+0xf8>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2238      	movs	r2, #56	; 0x38
 8003912:	4013      	ands	r3, r2
 8003914:	2b18      	cmp	r3, #24
 8003916:	d103      	bne.n	8003920 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003918:	23fa      	movs	r3, #250	; 0xfa
 800391a:	01db      	lsls	r3, r3, #7
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	e001      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003924:	693b      	ldr	r3, [r7, #16]
}
 8003926:	0018      	movs	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	b006      	add	sp, #24
 800392c:	bd80      	pop	{r7, pc}
 800392e:	46c0      	nop			; (mov r8, r8)
 8003930:	40021000 	.word	0x40021000
 8003934:	00f42400 	.word	0x00f42400
 8003938:	007a1200 	.word	0x007a1200

0800393c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003940:	4b02      	ldr	r3, [pc, #8]	; (800394c <HAL_RCC_GetHCLKFreq+0x10>)
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	0018      	movs	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	20000004 	.word	0x20000004

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b5b0      	push	{r4, r5, r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003954:	f7ff fff2 	bl	800393c <HAL_RCC_GetHCLKFreq>
 8003958:	0004      	movs	r4, r0
 800395a:	f7ff fb3f 	bl	8002fdc <LL_RCC_GetAPB1Prescaler>
 800395e:	0003      	movs	r3, r0
 8003960:	0b1a      	lsrs	r2, r3, #12
 8003962:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003964:	0092      	lsls	r2, r2, #2
 8003966:	58d3      	ldr	r3, [r2, r3]
 8003968:	221f      	movs	r2, #31
 800396a:	4013      	ands	r3, r2
 800396c:	40dc      	lsrs	r4, r3
 800396e:	0023      	movs	r3, r4
}
 8003970:	0018      	movs	r0, r3
 8003972:	46bd      	mov	sp, r7
 8003974:	bdb0      	pop	{r4, r5, r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	08006034 	.word	0x08006034

0800397c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003984:	2313      	movs	r3, #19
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800398c:	2312      	movs	r3, #18
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	2200      	movs	r2, #0
 8003992:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	029b      	lsls	r3, r3, #10
 800399c:	4013      	ands	r3, r2
 800399e:	d100      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80039a0:	e0a3      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2011      	movs	r0, #17
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039aa:	4bc3      	ldr	r3, [pc, #780]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	055b      	lsls	r3, r3, #21
 80039b2:	4013      	ands	r3, r2
 80039b4:	d110      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	4bc0      	ldr	r3, [pc, #768]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ba:	4bbf      	ldr	r3, [pc, #764]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	0549      	lsls	r1, r1, #21
 80039c0:	430a      	orrs	r2, r1
 80039c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80039c4:	4bbc      	ldr	r3, [pc, #752]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80039c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c8:	2380      	movs	r3, #128	; 0x80
 80039ca:	055b      	lsls	r3, r3, #21
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
 80039d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d2:	183b      	adds	r3, r7, r0
 80039d4:	2201      	movs	r2, #1
 80039d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4bb8      	ldr	r3, [pc, #736]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4bb7      	ldr	r3, [pc, #732]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	0049      	lsls	r1, r1, #1
 80039e2:	430a      	orrs	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e6:	f7fd fcfb 	bl	80013e0 <HAL_GetTick>
 80039ea:	0003      	movs	r3, r0
 80039ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ee:	e00b      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f0:	f7fd fcf6 	bl	80013e0 <HAL_GetTick>
 80039f4:	0002      	movs	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d904      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80039fe:	2313      	movs	r3, #19
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	2203      	movs	r2, #3
 8003a04:	701a      	strb	r2, [r3, #0]
        break;
 8003a06:	e005      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a08:	4bac      	ldr	r3, [pc, #688]	; (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	2380      	movs	r3, #128	; 0x80
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4013      	ands	r3, r2
 8003a12:	d0ed      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003a14:	2313      	movs	r3, #19
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d154      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a1e:	4ba6      	ldr	r3, [pc, #664]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a22:	23c0      	movs	r3, #192	; 0xc0
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4013      	ands	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d019      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d014      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a3a:	4b9f      	ldr	r3, [pc, #636]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3e:	4aa0      	ldr	r2, [pc, #640]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a44:	4b9c      	ldr	r3, [pc, #624]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a48:	4b9b      	ldr	r3, [pc, #620]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a4a:	2180      	movs	r1, #128	; 0x80
 8003a4c:	0249      	lsls	r1, r1, #9
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a52:	4b99      	ldr	r3, [pc, #612]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a56:	4b98      	ldr	r3, [pc, #608]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a58:	499a      	ldr	r1, [pc, #616]	; (8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a5e:	4b96      	ldr	r3, [pc, #600]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2201      	movs	r2, #1
 8003a68:	4013      	ands	r3, r2
 8003a6a:	d016      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fcb8 	bl	80013e0 <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a74:	e00c      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd fcb3 	bl	80013e0 <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	4a91      	ldr	r2, [pc, #580]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d904      	bls.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003a86:	2313      	movs	r3, #19
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	701a      	strb	r2, [r3, #0]
            break;
 8003a8e:	e004      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a90:	4b89      	ldr	r3, [pc, #548]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2202      	movs	r2, #2
 8003a96:	4013      	ands	r3, r2
 8003a98:	d0ed      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003a9a:	2313      	movs	r3, #19
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa4:	4b84      	ldr	r3, [pc, #528]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa8:	4a85      	ldr	r2, [pc, #532]	; (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ab2:	4b81      	ldr	r3, [pc, #516]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ab8:	e00c      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aba:	2312      	movs	r3, #18
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	2213      	movs	r2, #19
 8003ac0:	18ba      	adds	r2, r7, r2
 8003ac2:	7812      	ldrb	r2, [r2, #0]
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e005      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	2312      	movs	r3, #18
 8003aca:	18fb      	adds	r3, r7, r3
 8003acc:	2213      	movs	r2, #19
 8003ace:	18ba      	adds	r2, r7, r2
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ad4:	2311      	movs	r3, #17
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d105      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ade:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae2:	4b75      	ldr	r3, [pc, #468]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ae4:	4979      	ldr	r1, [pc, #484]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2201      	movs	r2, #1
 8003af0:	4013      	ands	r3, r2
 8003af2:	d009      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003af4:	4b70      	ldr	r3, [pc, #448]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af8:	2203      	movs	r2, #3
 8003afa:	4393      	bics	r3, r2
 8003afc:	0019      	movs	r1, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	4b6d      	ldr	r3, [pc, #436]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d009      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b12:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	220c      	movs	r2, #12
 8003b18:	4393      	bics	r3, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	4b65      	ldr	r3, [pc, #404]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b22:	430a      	orrs	r2, r1
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2210      	movs	r2, #16
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b30:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b34:	4a66      	ldr	r2, [pc, #408]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	0019      	movs	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	4b5e      	ldr	r3, [pc, #376]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b40:	430a      	orrs	r2, r1
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	2380      	movs	r3, #128	; 0x80
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b50:	4b59      	ldr	r3, [pc, #356]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b54:	4a5f      	ldr	r2, [pc, #380]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	4b56      	ldr	r3, [pc, #344]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b60:	430a      	orrs	r2, r1
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d009      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b70:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	4b4e      	ldr	r3, [pc, #312]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b80:	430a      	orrs	r2, r1
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b8e:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b92:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	0019      	movs	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	01db      	lsls	r3, r3, #7
 8003baa:	4013      	ands	r3, r2
 8003bac:	d015      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bae:	4b42      	ldr	r3, [pc, #264]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	0899      	lsrs	r1, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1a      	ldr	r2, [r3, #32]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	05db      	lsls	r3, r3, #23
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d106      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003bcc:	4b3a      	ldr	r3, [pc, #232]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	4b39      	ldr	r3, [pc, #228]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	0249      	lsls	r1, r1, #9
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	031b      	lsls	r3, r3, #12
 8003be2:	4013      	ands	r3, r2
 8003be4:	d009      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	2240      	movs	r2, #64	; 0x40
 8003bec:	4393      	bics	r3, r2
 8003bee:	0019      	movs	r1, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf4:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	039b      	lsls	r3, r3, #14
 8003c02:	4013      	ands	r3, r2
 8003c04:	d016      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c06:	4b2c      	ldr	r3, [pc, #176]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0a:	4a35      	ldr	r2, [pc, #212]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	0019      	movs	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c14:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c16:	430a      	orrs	r2, r1
 8003c18:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	03db      	lsls	r3, r3, #15
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d106      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c2c:	2180      	movs	r1, #128	; 0x80
 8003c2e:	0449      	lsls	r1, r1, #17
 8003c30:	430a      	orrs	r2, r1
 8003c32:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	2380      	movs	r3, #128	; 0x80
 8003c3a:	03db      	lsls	r3, r3, #15
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d016      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c44:	4a27      	ldr	r2, [pc, #156]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	0019      	movs	r1, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4e:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c50:	430a      	orrs	r2, r1
 8003c52:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	045b      	lsls	r3, r3, #17
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d106      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c60:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c66:	2180      	movs	r1, #128	; 0x80
 8003c68:	0449      	lsls	r1, r1, #17
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	4013      	ands	r3, r2
 8003c78:	d016      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c7a:	4b0f      	ldr	r3, [pc, #60]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	0019      	movs	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	01db      	lsls	r3, r3, #7
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d106      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c9a:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	0249      	lsls	r1, r1, #9
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ca8:	2312      	movs	r3, #18
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	781b      	ldrb	r3, [r3, #0]
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b006      	add	sp, #24
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40007000 	.word	0x40007000
 8003cc0:	fffffcff 	.word	0xfffffcff
 8003cc4:	fffeffff 	.word	0xfffeffff
 8003cc8:	00001388 	.word	0x00001388
 8003ccc:	efffffff 	.word	0xefffffff
 8003cd0:	fffff3ff 	.word	0xfffff3ff
 8003cd4:	fff3ffff 	.word	0xfff3ffff
 8003cd8:	ffcfffff 	.word	0xffcfffff
 8003cdc:	ffffcfff 	.word	0xffffcfff
 8003ce0:	ffbfffff 	.word	0xffbfffff
 8003ce4:	feffffff 	.word	0xfeffffff
 8003ce8:	ffff3fff 	.word	0xffff3fff

08003cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e04a      	b.n	8003d94 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	223d      	movs	r2, #61	; 0x3d
 8003d02:	5c9b      	ldrb	r3, [r3, r2]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	223c      	movs	r2, #60	; 0x3c
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fd f91d 	bl	8000f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	223d      	movs	r2, #61	; 0x3d
 8003d1e:	2102      	movs	r1, #2
 8003d20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	0010      	movs	r0, r2
 8003d2e:	f000 fb43 	bl	80043b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2248      	movs	r2, #72	; 0x48
 8003d36:	2101      	movs	r1, #1
 8003d38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	223e      	movs	r2, #62	; 0x3e
 8003d3e:	2101      	movs	r1, #1
 8003d40:	5499      	strb	r1, [r3, r2]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	223f      	movs	r2, #63	; 0x3f
 8003d46:	2101      	movs	r1, #1
 8003d48:	5499      	strb	r1, [r3, r2]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2240      	movs	r2, #64	; 0x40
 8003d4e:	2101      	movs	r1, #1
 8003d50:	5499      	strb	r1, [r3, r2]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2241      	movs	r2, #65	; 0x41
 8003d56:	2101      	movs	r1, #1
 8003d58:	5499      	strb	r1, [r3, r2]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2242      	movs	r2, #66	; 0x42
 8003d5e:	2101      	movs	r1, #1
 8003d60:	5499      	strb	r1, [r3, r2]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2243      	movs	r2, #67	; 0x43
 8003d66:	2101      	movs	r1, #1
 8003d68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2244      	movs	r2, #68	; 0x44
 8003d6e:	2101      	movs	r1, #1
 8003d70:	5499      	strb	r1, [r3, r2]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2245      	movs	r2, #69	; 0x45
 8003d76:	2101      	movs	r1, #1
 8003d78:	5499      	strb	r1, [r3, r2]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2246      	movs	r2, #70	; 0x46
 8003d7e:	2101      	movs	r1, #1
 8003d80:	5499      	strb	r1, [r3, r2]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2247      	movs	r2, #71	; 0x47
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	223d      	movs	r2, #61	; 0x3d
 8003d8e:	2101      	movs	r1, #1
 8003d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	223d      	movs	r2, #61	; 0x3d
 8003da8:	5c9b      	ldrb	r3, [r3, r2]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d001      	beq.n	8003db4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e03a      	b.n	8003e2a <HAL_TIM_Base_Start+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	223d      	movs	r2, #61	; 0x3d
 8003db8:	2102      	movs	r1, #2
 8003dba:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_TIM_Base_Start+0x98>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00f      	beq.n	8003de6 <HAL_TIM_Base_Start+0x4a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d009      	beq.n	8003de6 <HAL_TIM_Base_Start+0x4a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <HAL_TIM_Base_Start+0x9c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_TIM_Base_Start+0x4a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a16      	ldr	r2, [pc, #88]	; (8003e3c <HAL_TIM_Base_Start+0xa0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d116      	bne.n	8003e14 <HAL_TIM_Base_Start+0x78>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <HAL_TIM_Base_Start+0xa4>)
 8003dee:	4013      	ands	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b06      	cmp	r3, #6
 8003df6:	d016      	beq.n	8003e26 <HAL_TIM_Base_Start+0x8a>
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	025b      	lsls	r3, r3, #9
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d011      	beq.n	8003e26 <HAL_TIM_Base_Start+0x8a>
    {
      __HAL_TIM_ENABLE(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e12:	e008      	b.n	8003e26 <HAL_TIM_Base_Start+0x8a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2101      	movs	r1, #1
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e000      	b.n	8003e28 <HAL_TIM_Base_Start+0x8c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e26:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b004      	add	sp, #16
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40014000 	.word	0x40014000
 8003e40:	00010007 	.word	0x00010007

08003e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	223d      	movs	r2, #61	; 0x3d
 8003e50:	5c9b      	ldrb	r3, [r3, r2]
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d001      	beq.n	8003e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e042      	b.n	8003ee2 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	223d      	movs	r2, #61	; 0x3d
 8003e60:	2102      	movs	r1, #2
 8003e62:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2101      	movs	r1, #1
 8003e70:	430a      	orrs	r2, r1
 8003e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1c      	ldr	r2, [pc, #112]	; (8003eec <HAL_TIM_Base_Start_IT+0xa8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00f      	beq.n	8003e9e <HAL_TIM_Base_Start_IT+0x5a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	05db      	lsls	r3, r3, #23
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d009      	beq.n	8003e9e <HAL_TIM_Base_Start_IT+0x5a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xac>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIM_Base_Start_IT+0x5a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d116      	bne.n	8003ecc <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b06      	cmp	r3, #6
 8003eae:	d016      	beq.n	8003ede <HAL_TIM_Base_Start_IT+0x9a>
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	025b      	lsls	r3, r3, #9
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d011      	beq.n	8003ede <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eca:	e008      	b.n	8003ede <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	e000      	b.n	8003ee0 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ede:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	40012c00 	.word	0x40012c00
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	00010007 	.word	0x00010007

08003efc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2101      	movs	r1, #1
 8003f10:	438a      	bics	r2, r1
 8003f12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	4a0d      	ldr	r2, [pc, #52]	; (8003f50 <HAL_TIM_Base_Stop_IT+0x54>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d10d      	bne.n	8003f3c <HAL_TIM_Base_Stop_IT+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <HAL_TIM_Base_Stop_IT+0x58>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d107      	bne.n	8003f3c <HAL_TIM_Base_Stop_IT+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2101      	movs	r1, #1
 8003f38:	438a      	bics	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	223d      	movs	r2, #61	; 0x3d
 8003f40:	2101      	movs	r1, #1
 8003f42:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	0018      	movs	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	b002      	add	sp, #8
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	00001111 	.word	0x00001111
 8003f54:	00000444 	.word	0x00000444

08003f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2202      	movs	r2, #2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d124      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2202      	movs	r2, #2
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d11d      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2203      	movs	r2, #3
 8003f82:	4252      	negs	r2, r2
 8003f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	2203      	movs	r2, #3
 8003f94:	4013      	ands	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f000 f9f4 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 8003fa0:	e007      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f000 f9e7 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	0018      	movs	r0, r3
 8003fae:	f000 f9f3 	bl	8004398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d125      	bne.n	8004012 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11e      	bne.n	8004012 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2205      	movs	r2, #5
 8003fda:	4252      	negs	r2, r2
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	23c0      	movs	r3, #192	; 0xc0
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f000 f9c7 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 8003ffa:	e007      	b.n	800400c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	0018      	movs	r0, r3
 8004000:	f000 f9ba 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	0018      	movs	r0, r3
 8004008:	f000 f9c6 	bl	8004398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2208      	movs	r2, #8
 800401a:	4013      	ands	r3, r2
 800401c:	2b08      	cmp	r3, #8
 800401e:	d124      	bne.n	800406a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2208      	movs	r2, #8
 8004028:	4013      	ands	r3, r2
 800402a:	2b08      	cmp	r3, #8
 800402c:	d11d      	bne.n	800406a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2209      	movs	r2, #9
 8004034:	4252      	negs	r2, r2
 8004036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2204      	movs	r2, #4
 800403c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	2203      	movs	r2, #3
 8004046:	4013      	ands	r3, r2
 8004048:	d004      	beq.n	8004054 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 f99b 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 8004052:	e007      	b.n	8004064 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	0018      	movs	r0, r3
 8004058:	f000 f98e 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f99a 	bl	8004398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2210      	movs	r2, #16
 8004072:	4013      	ands	r3, r2
 8004074:	2b10      	cmp	r3, #16
 8004076:	d125      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2210      	movs	r2, #16
 8004080:	4013      	ands	r3, r2
 8004082:	2b10      	cmp	r3, #16
 8004084:	d11e      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2211      	movs	r2, #17
 800408c:	4252      	negs	r2, r2
 800408e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2208      	movs	r2, #8
 8004094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	23c0      	movs	r3, #192	; 0xc0
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4013      	ands	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f96e 	bl	8004388 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e007      	b.n	80040be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 f961 	bl	8004378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	0018      	movs	r0, r3
 80040ba:	f000 f96d 	bl	8004398 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2201      	movs	r2, #1
 80040cc:	4013      	ands	r3, r2
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d10f      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	4013      	ands	r3, r2
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d108      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2202      	movs	r2, #2
 80040e6:	4252      	negs	r2, r2
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0018      	movs	r0, r3
 80040ee:	f000 f93b 	bl	8004368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b80      	cmp	r3, #128	; 0x80
 80040fe:	d10f      	bne.n	8004120 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2280      	movs	r2, #128	; 0x80
 8004108:	4013      	ands	r3, r2
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d108      	bne.n	8004120 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2281      	movs	r2, #129	; 0x81
 8004114:	4252      	negs	r2, r2
 8004116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	0018      	movs	r0, r3
 800411c:	f000 fade 	bl	80046dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	401a      	ands	r2, r3
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	429a      	cmp	r2, r3
 8004132:	d10e      	bne.n	8004152 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	2280      	movs	r2, #128	; 0x80
 800413c:	4013      	ands	r3, r2
 800413e:	2b80      	cmp	r3, #128	; 0x80
 8004140:	d107      	bne.n	8004152 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <HAL_TIM_IRQHandler+0x260>)
 8004148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 facd 	bl	80046ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2240      	movs	r2, #64	; 0x40
 800415a:	4013      	ands	r3, r2
 800415c:	2b40      	cmp	r3, #64	; 0x40
 800415e:	d10f      	bne.n	8004180 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2240      	movs	r2, #64	; 0x40
 8004168:	4013      	ands	r3, r2
 800416a:	2b40      	cmp	r3, #64	; 0x40
 800416c:	d108      	bne.n	8004180 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2241      	movs	r2, #65	; 0x41
 8004174:	4252      	negs	r2, r2
 8004176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	0018      	movs	r0, r3
 800417c:	f000 f914 	bl	80043a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2220      	movs	r2, #32
 8004188:	4013      	ands	r3, r2
 800418a:	2b20      	cmp	r3, #32
 800418c:	d10f      	bne.n	80041ae <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	4013      	ands	r3, r2
 8004198:	2b20      	cmp	r3, #32
 800419a:	d108      	bne.n	80041ae <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2221      	movs	r2, #33	; 0x21
 80041a2:	4252      	negs	r2, r2
 80041a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	0018      	movs	r0, r3
 80041aa:	f000 fa8f 	bl	80046cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b002      	add	sp, #8
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	fffffeff 	.word	0xfffffeff

080041bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	230f      	movs	r3, #15
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	223c      	movs	r2, #60	; 0x3c
 80041d2:	5c9b      	ldrb	r3, [r3, r2]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_TIM_ConfigClockSource+0x20>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0bc      	b.n	8004356 <HAL_TIM_ConfigClockSource+0x19a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	223c      	movs	r2, #60	; 0x3c
 80041e0:	2101      	movs	r1, #1
 80041e2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	223d      	movs	r2, #61	; 0x3d
 80041e8:	2102      	movs	r1, #2
 80041ea:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4a5a      	ldr	r2, [pc, #360]	; (8004360 <HAL_TIM_ConfigClockSource+0x1a4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4a59      	ldr	r2, [pc, #356]	; (8004364 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004200:	4013      	ands	r3, r2
 8004202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2280      	movs	r2, #128	; 0x80
 8004212:	0192      	lsls	r2, r2, #6
 8004214:	4293      	cmp	r3, r2
 8004216:	d040      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xde>
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	0192      	lsls	r2, r2, #6
 800421c:	4293      	cmp	r3, r2
 800421e:	d900      	bls.n	8004222 <HAL_TIM_ConfigClockSource+0x66>
 8004220:	e088      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	0152      	lsls	r2, r2, #5
 8004226:	4293      	cmp	r3, r2
 8004228:	d100      	bne.n	800422c <HAL_TIM_ConfigClockSource+0x70>
 800422a:	e088      	b.n	800433e <HAL_TIM_ConfigClockSource+0x182>
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	0152      	lsls	r2, r2, #5
 8004230:	4293      	cmp	r3, r2
 8004232:	d900      	bls.n	8004236 <HAL_TIM_ConfigClockSource+0x7a>
 8004234:	e07e      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
 8004236:	2b70      	cmp	r3, #112	; 0x70
 8004238:	d018      	beq.n	800426c <HAL_TIM_ConfigClockSource+0xb0>
 800423a:	d900      	bls.n	800423e <HAL_TIM_ConfigClockSource+0x82>
 800423c:	e07a      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
 800423e:	2b60      	cmp	r3, #96	; 0x60
 8004240:	d04f      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0x126>
 8004242:	d900      	bls.n	8004246 <HAL_TIM_ConfigClockSource+0x8a>
 8004244:	e076      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
 8004246:	2b50      	cmp	r3, #80	; 0x50
 8004248:	d03b      	beq.n	80042c2 <HAL_TIM_ConfigClockSource+0x106>
 800424a:	d900      	bls.n	800424e <HAL_TIM_ConfigClockSource+0x92>
 800424c:	e072      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d057      	beq.n	8004302 <HAL_TIM_ConfigClockSource+0x146>
 8004252:	d900      	bls.n	8004256 <HAL_TIM_ConfigClockSource+0x9a>
 8004254:	e06e      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
 8004256:	2b30      	cmp	r3, #48	; 0x30
 8004258:	d063      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x166>
 800425a:	d86b      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
 800425c:	2b20      	cmp	r3, #32
 800425e:	d060      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x166>
 8004260:	d868      	bhi.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
 8004262:	2b00      	cmp	r3, #0
 8004264:	d05d      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x166>
 8004266:	2b10      	cmp	r3, #16
 8004268:	d05b      	beq.n	8004322 <HAL_TIM_ConfigClockSource+0x166>
 800426a:	e063      	b.n	8004334 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	6899      	ldr	r1, [r3, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f000 f998 	bl	80045b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2277      	movs	r2, #119	; 0x77
 800428c:	4313      	orrs	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]
      break;
 8004298:	e052      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f000 f981 	bl	80045b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	01c9      	lsls	r1, r1, #7
 80042bc:	430a      	orrs	r2, r1
 80042be:	609a      	str	r2, [r3, #8]
      break;
 80042c0:	e03e      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6818      	ldr	r0, [r3, #0]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	6859      	ldr	r1, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	001a      	movs	r2, r3
 80042d0:	f000 f8f2 	bl	80044b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2150      	movs	r1, #80	; 0x50
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 f94c 	bl	8004578 <TIM_ITRx_SetConfig>
      break;
 80042e0:	e02e      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	6859      	ldr	r1, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	001a      	movs	r2, r3
 80042f0:	f000 f910 	bl	8004514 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2160      	movs	r1, #96	; 0x60
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 f93c 	bl	8004578 <TIM_ITRx_SetConfig>
      break;
 8004300:	e01e      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	001a      	movs	r2, r3
 8004310:	f000 f8d2 	bl	80044b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2140      	movs	r1, #64	; 0x40
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f92c 	bl	8004578 <TIM_ITRx_SetConfig>
      break;
 8004320:	e00e      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	0019      	movs	r1, r3
 800432c:	0010      	movs	r0, r2
 800432e:	f000 f923 	bl	8004578 <TIM_ITRx_SetConfig>
      break;
 8004332:	e005      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004334:	230f      	movs	r3, #15
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	2201      	movs	r2, #1
 800433a:	701a      	strb	r2, [r3, #0]
      break;
 800433c:	e000      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800433e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	223d      	movs	r2, #61	; 0x3d
 8004344:	2101      	movs	r1, #1
 8004346:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	223c      	movs	r2, #60	; 0x3c
 800434c:	2100      	movs	r1, #0
 800434e:	5499      	strb	r1, [r3, r2]

  return status;
 8004350:	230f      	movs	r3, #15
 8004352:	18fb      	adds	r3, r7, r3
 8004354:	781b      	ldrb	r3, [r3, #0]
}
 8004356:	0018      	movs	r0, r3
 8004358:	46bd      	mov	sp, r7
 800435a:	b004      	add	sp, #16
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	ffceff88 	.word	0xffceff88
 8004364:	ffff00ff 	.word	0xffff00ff

08004368 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004370:	46c0      	nop			; (mov r8, r8)
 8004372:	46bd      	mov	sp, r7
 8004374:	b002      	add	sp, #8
 8004376:	bd80      	pop	{r7, pc}

08004378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	b002      	add	sp, #8
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004390:	46c0      	nop			; (mov r8, r8)
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043a0:	46c0      	nop			; (mov r8, r8)
 80043a2:	46bd      	mov	sp, r7
 80043a4:	b002      	add	sp, #8
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043b0:	46c0      	nop			; (mov r8, r8)
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b002      	add	sp, #8
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a34      	ldr	r2, [pc, #208]	; (800449c <TIM_Base_SetConfig+0xe4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d008      	beq.n	80043e2 <TIM_Base_SetConfig+0x2a>
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	2380      	movs	r3, #128	; 0x80
 80043d4:	05db      	lsls	r3, r3, #23
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d003      	beq.n	80043e2 <TIM_Base_SetConfig+0x2a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a30      	ldr	r2, [pc, #192]	; (80044a0 <TIM_Base_SetConfig+0xe8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d108      	bne.n	80043f4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2270      	movs	r2, #112	; 0x70
 80043e6:	4393      	bics	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a29      	ldr	r2, [pc, #164]	; (800449c <TIM_Base_SetConfig+0xe4>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <TIM_Base_SetConfig+0x76>
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	2380      	movs	r3, #128	; 0x80
 8004400:	05db      	lsls	r3, r3, #23
 8004402:	429a      	cmp	r2, r3
 8004404:	d013      	beq.n	800442e <TIM_Base_SetConfig+0x76>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a25      	ldr	r2, [pc, #148]	; (80044a0 <TIM_Base_SetConfig+0xe8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00f      	beq.n	800442e <TIM_Base_SetConfig+0x76>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a24      	ldr	r2, [pc, #144]	; (80044a4 <TIM_Base_SetConfig+0xec>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00b      	beq.n	800442e <TIM_Base_SetConfig+0x76>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <TIM_Base_SetConfig+0xf0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <TIM_Base_SetConfig+0x76>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a22      	ldr	r2, [pc, #136]	; (80044ac <TIM_Base_SetConfig+0xf4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_Base_SetConfig+0x76>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a21      	ldr	r2, [pc, #132]	; (80044b0 <TIM_Base_SetConfig+0xf8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d108      	bne.n	8004440 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <TIM_Base_SetConfig+0xfc>)
 8004432:	4013      	ands	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2280      	movs	r2, #128	; 0x80
 8004444:	4393      	bics	r3, r2
 8004446:	001a      	movs	r2, r3
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a0c      	ldr	r2, [pc, #48]	; (800449c <TIM_Base_SetConfig+0xe4>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d00b      	beq.n	8004486 <TIM_Base_SetConfig+0xce>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <TIM_Base_SetConfig+0xf0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d007      	beq.n	8004486 <TIM_Base_SetConfig+0xce>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <TIM_Base_SetConfig+0xf4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d003      	beq.n	8004486 <TIM_Base_SetConfig+0xce>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <TIM_Base_SetConfig+0xf8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d103      	bne.n	800448e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	615a      	str	r2, [r3, #20]
}
 8004494:	46c0      	nop			; (mov r8, r8)
 8004496:	46bd      	mov	sp, r7
 8004498:	b004      	add	sp, #16
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40002000 	.word	0x40002000
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800
 80044b4:	fffffcff 	.word	0xfffffcff

080044b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	2201      	movs	r2, #1
 80044d0:	4393      	bics	r3, r2
 80044d2:	001a      	movs	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	22f0      	movs	r2, #240	; 0xf0
 80044e2:	4393      	bics	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	220a      	movs	r2, #10
 80044f4:	4393      	bics	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	621a      	str	r2, [r3, #32]
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	b006      	add	sp, #24
 8004512:	bd80      	pop	{r7, pc}

08004514 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	2210      	movs	r2, #16
 8004526:	4393      	bics	r3, r2
 8004528:	001a      	movs	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <TIM_TI2_ConfigInputStage+0x60>)
 800453e:	4013      	ands	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	031b      	lsls	r3, r3, #12
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	22a0      	movs	r2, #160	; 0xa0
 8004550:	4393      	bics	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	46bd      	mov	sp, r7
 800456e:	b006      	add	sp, #24
 8004570:	bd80      	pop	{r7, pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	ffff0fff 	.word	0xffff0fff

08004578 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <TIM_ITRx_SetConfig+0x34>)
 800458c:	4013      	ands	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4313      	orrs	r3, r2
 8004596:	2207      	movs	r2, #7
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	609a      	str	r2, [r3, #8]
}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b004      	add	sp, #16
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	ffcfff8f 	.word	0xffcfff8f

080045b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4a09      	ldr	r2, [pc, #36]	; (80045ec <TIM_ETR_SetConfig+0x3c>)
 80045c8:	4013      	ands	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	021a      	lsls	r2, r3, #8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	609a      	str	r2, [r3, #8]
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b006      	add	sp, #24
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	ffff00ff 	.word	0xffff00ff

080045f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	223c      	movs	r2, #60	; 0x3c
 80045fe:	5c9b      	ldrb	r3, [r3, r2]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e055      	b.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	223c      	movs	r2, #60	; 0x3c
 800460c:	2101      	movs	r1, #1
 800460e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	223d      	movs	r2, #61	; 0x3d
 8004614:	2102      	movs	r1, #2
 8004616:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a23      	ldr	r2, [pc, #140]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d108      	bne.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004636:	4013      	ands	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4313      	orrs	r3, r2
 8004642:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2270      	movs	r2, #112	; 0x70
 8004648:	4393      	bics	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00f      	beq.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	05db      	lsls	r3, r3, #23
 8004670:	429a      	cmp	r2, r3
 8004672:	d009      	beq.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d004      	beq.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d10c      	bne.n	80046a2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	2280      	movs	r2, #128	; 0x80
 800468c:	4393      	bics	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	4313      	orrs	r3, r2
 8004698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	223d      	movs	r2, #61	; 0x3d
 80046a6:	2101      	movs	r1, #1
 80046a8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	223c      	movs	r2, #60	; 0x3c
 80046ae:	2100      	movs	r1, #0
 80046b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b004      	add	sp, #16
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40012c00 	.word	0x40012c00
 80046c0:	ff0fffff 	.word	0xff0fffff
 80046c4:	40000400 	.word	0x40000400
 80046c8:	40014000 	.word	0x40014000

080046cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b002      	add	sp, #8
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b002      	add	sp, #8
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e046      	b.n	800479c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2288      	movs	r2, #136	; 0x88
 8004712:	589b      	ldr	r3, [r3, r2]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d107      	bne.n	8004728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2284      	movs	r2, #132	; 0x84
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	0018      	movs	r0, r3
 8004724:	f7fc fc70 	bl	8001008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2288      	movs	r2, #136	; 0x88
 800472c:	2124      	movs	r1, #36	; 0x24
 800472e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	438a      	bics	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 fbd8 	bl	8004ef8 <UART_SetConfig>
 8004748:	0003      	movs	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d101      	bne.n	8004752 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e024      	b.n	800479c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 fe89 	bl	8005474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	490d      	ldr	r1, [pc, #52]	; (80047a4 <HAL_UART_Init+0xa8>)
 800476e:	400a      	ands	r2, r1
 8004770:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689a      	ldr	r2, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	212a      	movs	r1, #42	; 0x2a
 800477e:	438a      	bics	r2, r1
 8004780:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2101      	movs	r1, #1
 800478e:	430a      	orrs	r2, r1
 8004790:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f000 ff21 	bl	80055dc <UART_CheckIdleState>
 800479a:	0003      	movs	r3, r0
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b002      	add	sp, #8
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	ffffb7ff 	.word	0xffffb7ff

080047a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	1dbb      	adds	r3, r7, #6
 80047b4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	228c      	movs	r2, #140	; 0x8c
 80047ba:	589b      	ldr	r3, [r3, r2]
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d14a      	bne.n	8004856 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_UART_Receive_DMA+0x26>
 80047c6:	1dbb      	adds	r3, r7, #6
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e042      	b.n	8004858 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	015b      	lsls	r3, r3, #5
 80047da:	429a      	cmp	r2, r3
 80047dc:	d109      	bne.n	80047f2 <HAL_UART_Receive_DMA+0x4a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d105      	bne.n	80047f2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2201      	movs	r2, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	d001      	beq.n	80047f2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e032      	b.n	8004858 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a18      	ldr	r2, [pc, #96]	; (8004860 <HAL_UART_Receive_DMA+0xb8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d020      	beq.n	8004844 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	4013      	ands	r3, r2
 800480e:	d019      	beq.n	8004844 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004810:	f3ef 8310 	mrs	r3, PRIMASK
 8004814:	613b      	str	r3, [r7, #16]
  return(result);
 8004816:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	2301      	movs	r3, #1
 800481c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f383 8810 	msr	PRIMASK, r3
}
 8004824:	46c0      	nop			; (mov r8, r8)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	04c9      	lsls	r1, r1, #19
 8004834:	430a      	orrs	r2, r1
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	f383 8810 	msr	PRIMASK, r3
}
 8004842:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004844:	1dbb      	adds	r3, r7, #6
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	68b9      	ldr	r1, [r7, #8]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	0018      	movs	r0, r3
 800484e:	f000 ffdb 	bl	8005808 <UART_Start_Receive_DMA>
 8004852:	0003      	movs	r3, r0
 8004854:	e000      	b.n	8004858 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b008      	add	sp, #32
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40008000 	.word	0x40008000

08004864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	b0aa      	sub	sp, #168	; 0xa8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	22a4      	movs	r2, #164	; 0xa4
 8004874:	18b9      	adds	r1, r7, r2
 8004876:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	20a0      	movs	r0, #160	; 0xa0
 8004880:	1839      	adds	r1, r7, r0
 8004882:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	249c      	movs	r4, #156	; 0x9c
 800488c:	1939      	adds	r1, r7, r4
 800488e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004890:	0011      	movs	r1, r2
 8004892:	18bb      	adds	r3, r7, r2
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4aa2      	ldr	r2, [pc, #648]	; (8004b20 <HAL_UART_IRQHandler+0x2bc>)
 8004898:	4013      	ands	r3, r2
 800489a:	2298      	movs	r2, #152	; 0x98
 800489c:	18bd      	adds	r5, r7, r2
 800489e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80048a0:	18bb      	adds	r3, r7, r2
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11a      	bne.n	80048de <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048a8:	187b      	adds	r3, r7, r1
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2220      	movs	r2, #32
 80048ae:	4013      	ands	r3, r2
 80048b0:	d015      	beq.n	80048de <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048b2:	183b      	adds	r3, r7, r0
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2220      	movs	r2, #32
 80048b8:	4013      	ands	r3, r2
 80048ba:	d105      	bne.n	80048c8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048bc:	193b      	adds	r3, r7, r4
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	; 0x80
 80048c2:	055b      	lsls	r3, r3, #21
 80048c4:	4013      	ands	r3, r2
 80048c6:	d00a      	beq.n	80048de <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d100      	bne.n	80048d2 <HAL_UART_IRQHandler+0x6e>
 80048d0:	e2dc      	b.n	8004e8c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	0010      	movs	r0, r2
 80048da:	4798      	blx	r3
      }
      return;
 80048dc:	e2d6      	b.n	8004e8c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048de:	2398      	movs	r3, #152	; 0x98
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d100      	bne.n	80048ea <HAL_UART_IRQHandler+0x86>
 80048e8:	e122      	b.n	8004b30 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048ea:	239c      	movs	r3, #156	; 0x9c
 80048ec:	18fb      	adds	r3, r7, r3
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a8c      	ldr	r2, [pc, #560]	; (8004b24 <HAL_UART_IRQHandler+0x2c0>)
 80048f2:	4013      	ands	r3, r2
 80048f4:	d106      	bne.n	8004904 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048f6:	23a0      	movs	r3, #160	; 0xa0
 80048f8:	18fb      	adds	r3, r7, r3
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a8a      	ldr	r2, [pc, #552]	; (8004b28 <HAL_UART_IRQHandler+0x2c4>)
 80048fe:	4013      	ands	r3, r2
 8004900:	d100      	bne.n	8004904 <HAL_UART_IRQHandler+0xa0>
 8004902:	e115      	b.n	8004b30 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004904:	23a4      	movs	r3, #164	; 0xa4
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2201      	movs	r2, #1
 800490c:	4013      	ands	r3, r2
 800490e:	d012      	beq.n	8004936 <HAL_UART_IRQHandler+0xd2>
 8004910:	23a0      	movs	r3, #160	; 0xa0
 8004912:	18fb      	adds	r3, r7, r3
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	2380      	movs	r3, #128	; 0x80
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4013      	ands	r3, r2
 800491c:	d00b      	beq.n	8004936 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2290      	movs	r2, #144	; 0x90
 800492a:	589b      	ldr	r3, [r3, r2]
 800492c:	2201      	movs	r2, #1
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2190      	movs	r1, #144	; 0x90
 8004934:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004936:	23a4      	movs	r3, #164	; 0xa4
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2202      	movs	r2, #2
 800493e:	4013      	ands	r3, r2
 8004940:	d011      	beq.n	8004966 <HAL_UART_IRQHandler+0x102>
 8004942:	239c      	movs	r3, #156	; 0x9c
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2201      	movs	r2, #1
 800494a:	4013      	ands	r3, r2
 800494c:	d00b      	beq.n	8004966 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2202      	movs	r2, #2
 8004954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2290      	movs	r2, #144	; 0x90
 800495a:	589b      	ldr	r3, [r3, r2]
 800495c:	2204      	movs	r2, #4
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2190      	movs	r1, #144	; 0x90
 8004964:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004966:	23a4      	movs	r3, #164	; 0xa4
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2204      	movs	r2, #4
 800496e:	4013      	ands	r3, r2
 8004970:	d011      	beq.n	8004996 <HAL_UART_IRQHandler+0x132>
 8004972:	239c      	movs	r3, #156	; 0x9c
 8004974:	18fb      	adds	r3, r7, r3
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2201      	movs	r2, #1
 800497a:	4013      	ands	r3, r2
 800497c:	d00b      	beq.n	8004996 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2204      	movs	r2, #4
 8004984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2290      	movs	r2, #144	; 0x90
 800498a:	589b      	ldr	r3, [r3, r2]
 800498c:	2202      	movs	r2, #2
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2190      	movs	r1, #144	; 0x90
 8004994:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004996:	23a4      	movs	r3, #164	; 0xa4
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2208      	movs	r2, #8
 800499e:	4013      	ands	r3, r2
 80049a0:	d017      	beq.n	80049d2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049a2:	23a0      	movs	r3, #160	; 0xa0
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2220      	movs	r2, #32
 80049aa:	4013      	ands	r3, r2
 80049ac:	d105      	bne.n	80049ba <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80049ae:	239c      	movs	r3, #156	; 0x9c
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a5b      	ldr	r2, [pc, #364]	; (8004b24 <HAL_UART_IRQHandler+0x2c0>)
 80049b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80049b8:	d00b      	beq.n	80049d2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2208      	movs	r2, #8
 80049c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2290      	movs	r2, #144	; 0x90
 80049c6:	589b      	ldr	r3, [r3, r2]
 80049c8:	2208      	movs	r2, #8
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2190      	movs	r1, #144	; 0x90
 80049d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80049d2:	23a4      	movs	r3, #164	; 0xa4
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	4013      	ands	r3, r2
 80049de:	d013      	beq.n	8004a08 <HAL_UART_IRQHandler+0x1a4>
 80049e0:	23a0      	movs	r3, #160	; 0xa0
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	04db      	lsls	r3, r3, #19
 80049ea:	4013      	ands	r3, r2
 80049ec:	d00c      	beq.n	8004a08 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2280      	movs	r2, #128	; 0x80
 80049f4:	0112      	lsls	r2, r2, #4
 80049f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2290      	movs	r2, #144	; 0x90
 80049fc:	589b      	ldr	r3, [r3, r2]
 80049fe:	2220      	movs	r2, #32
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2190      	movs	r1, #144	; 0x90
 8004a06:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2290      	movs	r2, #144	; 0x90
 8004a0c:	589b      	ldr	r3, [r3, r2]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d100      	bne.n	8004a14 <HAL_UART_IRQHandler+0x1b0>
 8004a12:	e23d      	b.n	8004e90 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a14:	23a4      	movs	r3, #164	; 0xa4
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d015      	beq.n	8004a4c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a20:	23a0      	movs	r3, #160	; 0xa0
 8004a22:	18fb      	adds	r3, r7, r3
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2220      	movs	r2, #32
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d106      	bne.n	8004a3a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a2c:	239c      	movs	r3, #156	; 0x9c
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2380      	movs	r3, #128	; 0x80
 8004a34:	055b      	lsls	r3, r3, #21
 8004a36:	4013      	ands	r3, r2
 8004a38:	d008      	beq.n	8004a4c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d004      	beq.n	8004a4c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	0010      	movs	r0, r2
 8004a4a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2290      	movs	r2, #144	; 0x90
 8004a50:	589b      	ldr	r3, [r3, r2]
 8004a52:	2194      	movs	r1, #148	; 0x94
 8004a54:	187a      	adds	r2, r7, r1
 8004a56:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2240      	movs	r2, #64	; 0x40
 8004a60:	4013      	ands	r3, r2
 8004a62:	2b40      	cmp	r3, #64	; 0x40
 8004a64:	d004      	beq.n	8004a70 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a66:	187b      	adds	r3, r7, r1
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2228      	movs	r2, #40	; 0x28
 8004a6c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a6e:	d04c      	beq.n	8004b0a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	0018      	movs	r0, r3
 8004a74:	f000 ffae 	bl	80059d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2240      	movs	r2, #64	; 0x40
 8004a80:	4013      	ands	r3, r2
 8004a82:	2b40      	cmp	r3, #64	; 0x40
 8004a84:	d13c      	bne.n	8004b00 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a86:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a8e:	2090      	movs	r0, #144	; 0x90
 8004a90:	183a      	adds	r2, r7, r0
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	2301      	movs	r3, #1
 8004a96:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a9a:	f383 8810 	msr	PRIMASK, r3
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2140      	movs	r1, #64	; 0x40
 8004aac:	438a      	bics	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]
 8004ab0:	183b      	adds	r3, r7, r0
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ab8:	f383 8810 	msr	PRIMASK, r3
}
 8004abc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2280      	movs	r2, #128	; 0x80
 8004ac2:	589b      	ldr	r3, [r3, r2]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d016      	beq.n	8004af6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	589b      	ldr	r3, [r3, r2]
 8004ace:	4a17      	ldr	r2, [pc, #92]	; (8004b2c <HAL_UART_IRQHandler+0x2c8>)
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	589b      	ldr	r3, [r3, r2]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f7fd fea1 	bl	8002820 <HAL_DMA_Abort_IT>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d01c      	beq.n	8004b1c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2280      	movs	r2, #128	; 0x80
 8004ae6:	589b      	ldr	r3, [r3, r2]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	2180      	movs	r1, #128	; 0x80
 8004aee:	5852      	ldr	r2, [r2, r1]
 8004af0:	0010      	movs	r0, r2
 8004af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	e012      	b.n	8004b1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f000 f9e9 	bl	8004ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afe:	e00d      	b.n	8004b1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	0018      	movs	r0, r3
 8004b04:	f000 f9e4 	bl	8004ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	e008      	b.n	8004b1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 f9df 	bl	8004ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2290      	movs	r2, #144	; 0x90
 8004b16:	2100      	movs	r1, #0
 8004b18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004b1a:	e1b9      	b.n	8004e90 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b1c:	46c0      	nop			; (mov r8, r8)
    return;
 8004b1e:	e1b7      	b.n	8004e90 <HAL_UART_IRQHandler+0x62c>
 8004b20:	0000080f 	.word	0x0000080f
 8004b24:	10000001 	.word	0x10000001
 8004b28:	04000120 	.word	0x04000120
 8004b2c:	08005c99 	.word	0x08005c99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d000      	beq.n	8004b3a <HAL_UART_IRQHandler+0x2d6>
 8004b38:	e13e      	b.n	8004db8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b3a:	23a4      	movs	r3, #164	; 0xa4
 8004b3c:	18fb      	adds	r3, r7, r3
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2210      	movs	r2, #16
 8004b42:	4013      	ands	r3, r2
 8004b44:	d100      	bne.n	8004b48 <HAL_UART_IRQHandler+0x2e4>
 8004b46:	e137      	b.n	8004db8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b48:	23a0      	movs	r3, #160	; 0xa0
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2210      	movs	r2, #16
 8004b50:	4013      	ands	r3, r2
 8004b52:	d100      	bne.n	8004b56 <HAL_UART_IRQHandler+0x2f2>
 8004b54:	e130      	b.n	8004db8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2240      	movs	r2, #64	; 0x40
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d000      	beq.n	8004b6e <HAL_UART_IRQHandler+0x30a>
 8004b6c:	e0a4      	b.n	8004cb8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2280      	movs	r2, #128	; 0x80
 8004b72:	589b      	ldr	r3, [r3, r2]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685a      	ldr	r2, [r3, #4]
 8004b78:	217e      	movs	r1, #126	; 0x7e
 8004b7a:	187b      	adds	r3, r7, r1
 8004b7c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b7e:	187b      	adds	r3, r7, r1
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d100      	bne.n	8004b88 <HAL_UART_IRQHandler+0x324>
 8004b86:	e185      	b.n	8004e94 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	225c      	movs	r2, #92	; 0x5c
 8004b8c:	5a9b      	ldrh	r3, [r3, r2]
 8004b8e:	187a      	adds	r2, r7, r1
 8004b90:	8812      	ldrh	r2, [r2, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d300      	bcc.n	8004b98 <HAL_UART_IRQHandler+0x334>
 8004b96:	e17d      	b.n	8004e94 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	187a      	adds	r2, r7, r1
 8004b9c:	215e      	movs	r1, #94	; 0x5e
 8004b9e:	8812      	ldrh	r2, [r2, #0]
 8004ba0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2280      	movs	r2, #128	; 0x80
 8004ba6:	589b      	ldr	r3, [r3, r2]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2220      	movs	r2, #32
 8004bae:	4013      	ands	r3, r2
 8004bb0:	d170      	bne.n	8004c94 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bba:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	49b4      	ldr	r1, [pc, #720]	; (8004ea4 <HAL_UART_IRQHandler+0x640>)
 8004bd4:	400a      	ands	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be4:	f3ef 8310 	mrs	r3, PRIMASK
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bec:	677b      	str	r3, [r7, #116]	; 0x74
 8004bee:	2301      	movs	r3, #1
 8004bf0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bf4:	f383 8810 	msr	PRIMASK, r3
}
 8004bf8:	46c0      	nop			; (mov r8, r8)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2101      	movs	r1, #1
 8004c06:	438a      	bics	r2, r1
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	f383 8810 	msr	PRIMASK, r3
}
 8004c14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c16:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8004c20:	2301      	movs	r3, #1
 8004c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c26:	f383 8810 	msr	PRIMASK, r3
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2140      	movs	r1, #64	; 0x40
 8004c38:	438a      	bics	r2, r1
 8004c3a:	609a      	str	r2, [r3, #8]
 8004c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c3e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c42:	f383 8810 	msr	PRIMASK, r3
}
 8004c46:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	228c      	movs	r2, #140	; 0x8c
 8004c4c:	2120      	movs	r1, #32
 8004c4e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c56:	f3ef 8310 	mrs	r3, PRIMASK
 8004c5a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c60:	2301      	movs	r3, #1
 8004c62:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c66:	f383 8810 	msr	PRIMASK, r3
}
 8004c6a:	46c0      	nop			; (mov r8, r8)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2110      	movs	r1, #16
 8004c78:	438a      	bics	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c82:	f383 8810 	msr	PRIMASK, r3
}
 8004c86:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2280      	movs	r2, #128	; 0x80
 8004c8c:	589b      	ldr	r3, [r3, r2]
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f7fd fd64 	bl	800275c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	225c      	movs	r2, #92	; 0x5c
 8004c9e:	5a9a      	ldrh	r2, [r3, r2]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	215e      	movs	r1, #94	; 0x5e
 8004ca4:	5a5b      	ldrh	r3, [r3, r1]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	0011      	movs	r1, r2
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f000 f915 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cb6:	e0ed      	b.n	8004e94 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	225c      	movs	r2, #92	; 0x5c
 8004cbc:	5a99      	ldrh	r1, [r3, r2]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	225e      	movs	r2, #94	; 0x5e
 8004cc2:	5a9b      	ldrh	r3, [r3, r2]
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	208e      	movs	r0, #142	; 0x8e
 8004cc8:	183b      	adds	r3, r7, r0
 8004cca:	1a8a      	subs	r2, r1, r2
 8004ccc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	225e      	movs	r2, #94	; 0x5e
 8004cd2:	5a9b      	ldrh	r3, [r3, r2]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d100      	bne.n	8004cdc <HAL_UART_IRQHandler+0x478>
 8004cda:	e0dd      	b.n	8004e98 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004cdc:	183b      	adds	r3, r7, r0
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d100      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x482>
 8004ce4:	e0d8      	b.n	8004e98 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cea:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cec:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cee:	2488      	movs	r4, #136	; 0x88
 8004cf0:	193a      	adds	r2, r7, r4
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f383 8810 	msr	PRIMASK, r3
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4967      	ldr	r1, [pc, #412]	; (8004ea8 <HAL_UART_IRQHandler+0x644>)
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	193b      	adds	r3, r7, r4
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f383 8810 	msr	PRIMASK, r3
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d22:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d24:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d26:	2484      	movs	r4, #132	; 0x84
 8004d28:	193a      	adds	r2, r7, r4
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	f383 8810 	msr	PRIMASK, r3
}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	495a      	ldr	r1, [pc, #360]	; (8004eac <HAL_UART_IRQHandler+0x648>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	193b      	adds	r3, r7, r4
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	f383 8810 	msr	PRIMASK, r3
}
 8004d54:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	228c      	movs	r2, #140	; 0x8c
 8004d5a:	2120      	movs	r1, #32
 8004d5c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d72:	2480      	movs	r4, #128	; 0x80
 8004d74:	193a      	adds	r2, r7, r4
 8004d76:	6013      	str	r3, [r2, #0]
 8004d78:	2301      	movs	r3, #1
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	f383 8810 	msr	PRIMASK, r3
}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2110      	movs	r1, #16
 8004d90:	438a      	bics	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	193b      	adds	r3, r7, r4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	f383 8810 	msr	PRIMASK, r3
}
 8004da0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004da8:	183b      	adds	r3, r7, r0
 8004daa:	881a      	ldrh	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	0011      	movs	r1, r2
 8004db0:	0018      	movs	r0, r3
 8004db2:	f000 f895 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004db6:	e06f      	b.n	8004e98 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004db8:	23a4      	movs	r3, #164	; 0xa4
 8004dba:	18fb      	adds	r3, r7, r3
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	2380      	movs	r3, #128	; 0x80
 8004dc0:	035b      	lsls	r3, r3, #13
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	d010      	beq.n	8004de8 <HAL_UART_IRQHandler+0x584>
 8004dc6:	239c      	movs	r3, #156	; 0x9c
 8004dc8:	18fb      	adds	r3, r7, r3
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	2380      	movs	r3, #128	; 0x80
 8004dce:	03db      	lsls	r3, r3, #15
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2280      	movs	r2, #128	; 0x80
 8004dda:	0352      	lsls	r2, r2, #13
 8004ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f000 ff9c 	bl	8005d1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004de6:	e05a      	b.n	8004e9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004de8:	23a4      	movs	r3, #164	; 0xa4
 8004dea:	18fb      	adds	r3, r7, r3
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2280      	movs	r2, #128	; 0x80
 8004df0:	4013      	ands	r3, r2
 8004df2:	d016      	beq.n	8004e22 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004df4:	23a0      	movs	r3, #160	; 0xa0
 8004df6:	18fb      	adds	r3, r7, r3
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2280      	movs	r2, #128	; 0x80
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d106      	bne.n	8004e0e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e00:	239c      	movs	r3, #156	; 0x9c
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	2380      	movs	r3, #128	; 0x80
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d009      	beq.n	8004e22 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d042      	beq.n	8004e9c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	0010      	movs	r0, r2
 8004e1e:	4798      	blx	r3
    }
    return;
 8004e20:	e03c      	b.n	8004e9c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e22:	23a4      	movs	r3, #164	; 0xa4
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2240      	movs	r2, #64	; 0x40
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d00a      	beq.n	8004e44 <HAL_UART_IRQHandler+0x5e0>
 8004e2e:	23a0      	movs	r3, #160	; 0xa0
 8004e30:	18fb      	adds	r3, r7, r3
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2240      	movs	r2, #64	; 0x40
 8004e36:	4013      	ands	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	f000 ff42 	bl	8005cc6 <UART_EndTransmit_IT>
    return;
 8004e42:	e02c      	b.n	8004e9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e44:	23a4      	movs	r3, #164	; 0xa4
 8004e46:	18fb      	adds	r3, r7, r3
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <HAL_UART_IRQHandler+0x606>
 8004e52:	23a0      	movs	r3, #160	; 0xa0
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	05db      	lsls	r3, r3, #23
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	0018      	movs	r0, r3
 8004e64:	f000 ff6b 	bl	8005d3e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e68:	e019      	b.n	8004e9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e6a:	23a4      	movs	r3, #164	; 0xa4
 8004e6c:	18fb      	adds	r3, r7, r3
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	045b      	lsls	r3, r3, #17
 8004e74:	4013      	ands	r3, r2
 8004e76:	d012      	beq.n	8004e9e <HAL_UART_IRQHandler+0x63a>
 8004e78:	23a0      	movs	r3, #160	; 0xa0
 8004e7a:	18fb      	adds	r3, r7, r3
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da0d      	bge.n	8004e9e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 ff52 	bl	8005d2e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e8a:	e008      	b.n	8004e9e <HAL_UART_IRQHandler+0x63a>
      return;
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	e006      	b.n	8004e9e <HAL_UART_IRQHandler+0x63a>
    return;
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	e004      	b.n	8004e9e <HAL_UART_IRQHandler+0x63a>
      return;
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	e002      	b.n	8004e9e <HAL_UART_IRQHandler+0x63a>
      return;
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	e000      	b.n	8004e9e <HAL_UART_IRQHandler+0x63a>
    return;
 8004e9c:	46c0      	nop			; (mov r8, r8)
  }
}
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b02a      	add	sp, #168	; 0xa8
 8004ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8004ea4:	fffffeff 	.word	0xfffffeff
 8004ea8:	fffffedf 	.word	0xfffffedf
 8004eac:	effffffe 	.word	0xeffffffe

08004eb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ec8:	46c0      	nop			; (mov r8, r8)
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	b002      	add	sp, #8
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ed8:	46c0      	nop			; (mov r8, r8)
 8004eda:	46bd      	mov	sp, r7
 8004edc:	b002      	add	sp, #8
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	000a      	movs	r2, r1
 8004eea:	1cbb      	adds	r3, r7, #2
 8004eec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b002      	add	sp, #8
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef8:	b5b0      	push	{r4, r5, r7, lr}
 8004efa:	b090      	sub	sp, #64	; 0x40
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f00:	231a      	movs	r3, #26
 8004f02:	2220      	movs	r2, #32
 8004f04:	189b      	adds	r3, r3, r2
 8004f06:	19db      	adds	r3, r3, r7
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4aaf      	ldr	r2, [pc, #700]	; (80051e8 <UART_SetConfig+0x2f0>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	0019      	movs	r1, r3
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	430b      	orrs	r3, r1
 8004f38:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4aaa      	ldr	r2, [pc, #680]	; (80051ec <UART_SetConfig+0x2f4>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	0018      	movs	r0, r3
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	68d9      	ldr	r1, [r3, #12]
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	0003      	movs	r3, r0
 8004f50:	430b      	orrs	r3, r1
 8004f52:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4aa4      	ldr	r2, [pc, #656]	; (80051f0 <UART_SetConfig+0x2f8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a9f      	ldr	r2, [pc, #636]	; (80051f4 <UART_SetConfig+0x2fc>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	0019      	movs	r1, r3
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	4393      	bics	r3, r2
 8004f8e:	0018      	movs	r0, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	0003      	movs	r3, r0
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a95      	ldr	r2, [pc, #596]	; (80051f8 <UART_SetConfig+0x300>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d131      	bne.n	800500c <UART_SetConfig+0x114>
 8004fa8:	4b94      	ldr	r3, [pc, #592]	; (80051fc <UART_SetConfig+0x304>)
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	2203      	movs	r2, #3
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d01d      	beq.n	8004ff0 <UART_SetConfig+0xf8>
 8004fb4:	d823      	bhi.n	8004ffe <UART_SetConfig+0x106>
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d00c      	beq.n	8004fd4 <UART_SetConfig+0xdc>
 8004fba:	d820      	bhi.n	8004ffe <UART_SetConfig+0x106>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <UART_SetConfig+0xce>
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d00e      	beq.n	8004fe2 <UART_SetConfig+0xea>
 8004fc4:	e01b      	b.n	8004ffe <UART_SetConfig+0x106>
 8004fc6:	231b      	movs	r3, #27
 8004fc8:	2220      	movs	r2, #32
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	19db      	adds	r3, r3, r7
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e0b4      	b.n	800513e <UART_SetConfig+0x246>
 8004fd4:	231b      	movs	r3, #27
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	189b      	adds	r3, r3, r2
 8004fda:	19db      	adds	r3, r3, r7
 8004fdc:	2202      	movs	r2, #2
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e0ad      	b.n	800513e <UART_SetConfig+0x246>
 8004fe2:	231b      	movs	r3, #27
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	19db      	adds	r3, r3, r7
 8004fea:	2204      	movs	r2, #4
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e0a6      	b.n	800513e <UART_SetConfig+0x246>
 8004ff0:	231b      	movs	r3, #27
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	189b      	adds	r3, r3, r2
 8004ff6:	19db      	adds	r3, r3, r7
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e09f      	b.n	800513e <UART_SetConfig+0x246>
 8004ffe:	231b      	movs	r3, #27
 8005000:	2220      	movs	r2, #32
 8005002:	189b      	adds	r3, r3, r2
 8005004:	19db      	adds	r3, r3, r7
 8005006:	2210      	movs	r2, #16
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e098      	b.n	800513e <UART_SetConfig+0x246>
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a7b      	ldr	r2, [pc, #492]	; (8005200 <UART_SetConfig+0x308>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d131      	bne.n	800507a <UART_SetConfig+0x182>
 8005016:	4b79      	ldr	r3, [pc, #484]	; (80051fc <UART_SetConfig+0x304>)
 8005018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501a:	220c      	movs	r2, #12
 800501c:	4013      	ands	r3, r2
 800501e:	2b0c      	cmp	r3, #12
 8005020:	d01d      	beq.n	800505e <UART_SetConfig+0x166>
 8005022:	d823      	bhi.n	800506c <UART_SetConfig+0x174>
 8005024:	2b08      	cmp	r3, #8
 8005026:	d00c      	beq.n	8005042 <UART_SetConfig+0x14a>
 8005028:	d820      	bhi.n	800506c <UART_SetConfig+0x174>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <UART_SetConfig+0x13c>
 800502e:	2b04      	cmp	r3, #4
 8005030:	d00e      	beq.n	8005050 <UART_SetConfig+0x158>
 8005032:	e01b      	b.n	800506c <UART_SetConfig+0x174>
 8005034:	231b      	movs	r3, #27
 8005036:	2220      	movs	r2, #32
 8005038:	189b      	adds	r3, r3, r2
 800503a:	19db      	adds	r3, r3, r7
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
 8005040:	e07d      	b.n	800513e <UART_SetConfig+0x246>
 8005042:	231b      	movs	r3, #27
 8005044:	2220      	movs	r2, #32
 8005046:	189b      	adds	r3, r3, r2
 8005048:	19db      	adds	r3, r3, r7
 800504a:	2202      	movs	r2, #2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e076      	b.n	800513e <UART_SetConfig+0x246>
 8005050:	231b      	movs	r3, #27
 8005052:	2220      	movs	r2, #32
 8005054:	189b      	adds	r3, r3, r2
 8005056:	19db      	adds	r3, r3, r7
 8005058:	2204      	movs	r2, #4
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e06f      	b.n	800513e <UART_SetConfig+0x246>
 800505e:	231b      	movs	r3, #27
 8005060:	2220      	movs	r2, #32
 8005062:	189b      	adds	r3, r3, r2
 8005064:	19db      	adds	r3, r3, r7
 8005066:	2208      	movs	r2, #8
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	e068      	b.n	800513e <UART_SetConfig+0x246>
 800506c:	231b      	movs	r3, #27
 800506e:	2220      	movs	r2, #32
 8005070:	189b      	adds	r3, r3, r2
 8005072:	19db      	adds	r3, r3, r7
 8005074:	2210      	movs	r2, #16
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	e061      	b.n	800513e <UART_SetConfig+0x246>
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a61      	ldr	r2, [pc, #388]	; (8005204 <UART_SetConfig+0x30c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d106      	bne.n	8005092 <UART_SetConfig+0x19a>
 8005084:	231b      	movs	r3, #27
 8005086:	2220      	movs	r2, #32
 8005088:	189b      	adds	r3, r3, r2
 800508a:	19db      	adds	r3, r3, r7
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e055      	b.n	800513e <UART_SetConfig+0x246>
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5c      	ldr	r2, [pc, #368]	; (8005208 <UART_SetConfig+0x310>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d106      	bne.n	80050aa <UART_SetConfig+0x1b2>
 800509c:	231b      	movs	r3, #27
 800509e:	2220      	movs	r2, #32
 80050a0:	189b      	adds	r3, r3, r2
 80050a2:	19db      	adds	r3, r3, r7
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e049      	b.n	800513e <UART_SetConfig+0x246>
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a50      	ldr	r2, [pc, #320]	; (80051f0 <UART_SetConfig+0x2f8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d13e      	bne.n	8005132 <UART_SetConfig+0x23a>
 80050b4:	4b51      	ldr	r3, [pc, #324]	; (80051fc <UART_SetConfig+0x304>)
 80050b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050b8:	23c0      	movs	r3, #192	; 0xc0
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	4013      	ands	r3, r2
 80050be:	22c0      	movs	r2, #192	; 0xc0
 80050c0:	0112      	lsls	r2, r2, #4
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d027      	beq.n	8005116 <UART_SetConfig+0x21e>
 80050c6:	22c0      	movs	r2, #192	; 0xc0
 80050c8:	0112      	lsls	r2, r2, #4
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d82a      	bhi.n	8005124 <UART_SetConfig+0x22c>
 80050ce:	2280      	movs	r2, #128	; 0x80
 80050d0:	0112      	lsls	r2, r2, #4
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d011      	beq.n	80050fa <UART_SetConfig+0x202>
 80050d6:	2280      	movs	r2, #128	; 0x80
 80050d8:	0112      	lsls	r2, r2, #4
 80050da:	4293      	cmp	r3, r2
 80050dc:	d822      	bhi.n	8005124 <UART_SetConfig+0x22c>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <UART_SetConfig+0x1f4>
 80050e2:	2280      	movs	r2, #128	; 0x80
 80050e4:	00d2      	lsls	r2, r2, #3
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00e      	beq.n	8005108 <UART_SetConfig+0x210>
 80050ea:	e01b      	b.n	8005124 <UART_SetConfig+0x22c>
 80050ec:	231b      	movs	r3, #27
 80050ee:	2220      	movs	r2, #32
 80050f0:	189b      	adds	r3, r3, r2
 80050f2:	19db      	adds	r3, r3, r7
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e021      	b.n	800513e <UART_SetConfig+0x246>
 80050fa:	231b      	movs	r3, #27
 80050fc:	2220      	movs	r2, #32
 80050fe:	189b      	adds	r3, r3, r2
 8005100:	19db      	adds	r3, r3, r7
 8005102:	2202      	movs	r2, #2
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e01a      	b.n	800513e <UART_SetConfig+0x246>
 8005108:	231b      	movs	r3, #27
 800510a:	2220      	movs	r2, #32
 800510c:	189b      	adds	r3, r3, r2
 800510e:	19db      	adds	r3, r3, r7
 8005110:	2204      	movs	r2, #4
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e013      	b.n	800513e <UART_SetConfig+0x246>
 8005116:	231b      	movs	r3, #27
 8005118:	2220      	movs	r2, #32
 800511a:	189b      	adds	r3, r3, r2
 800511c:	19db      	adds	r3, r3, r7
 800511e:	2208      	movs	r2, #8
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	e00c      	b.n	800513e <UART_SetConfig+0x246>
 8005124:	231b      	movs	r3, #27
 8005126:	2220      	movs	r2, #32
 8005128:	189b      	adds	r3, r3, r2
 800512a:	19db      	adds	r3, r3, r7
 800512c:	2210      	movs	r2, #16
 800512e:	701a      	strb	r2, [r3, #0]
 8005130:	e005      	b.n	800513e <UART_SetConfig+0x246>
 8005132:	231b      	movs	r3, #27
 8005134:	2220      	movs	r2, #32
 8005136:	189b      	adds	r3, r3, r2
 8005138:	19db      	adds	r3, r3, r7
 800513a:	2210      	movs	r2, #16
 800513c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2b      	ldr	r2, [pc, #172]	; (80051f0 <UART_SetConfig+0x2f8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d000      	beq.n	800514a <UART_SetConfig+0x252>
 8005148:	e0a9      	b.n	800529e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800514a:	231b      	movs	r3, #27
 800514c:	2220      	movs	r2, #32
 800514e:	189b      	adds	r3, r3, r2
 8005150:	19db      	adds	r3, r3, r7
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d015      	beq.n	8005184 <UART_SetConfig+0x28c>
 8005158:	dc18      	bgt.n	800518c <UART_SetConfig+0x294>
 800515a:	2b04      	cmp	r3, #4
 800515c:	d00d      	beq.n	800517a <UART_SetConfig+0x282>
 800515e:	dc15      	bgt.n	800518c <UART_SetConfig+0x294>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <UART_SetConfig+0x272>
 8005164:	2b02      	cmp	r3, #2
 8005166:	d005      	beq.n	8005174 <UART_SetConfig+0x27c>
 8005168:	e010      	b.n	800518c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800516a:	f7fe fbf1 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 800516e:	0003      	movs	r3, r0
 8005170:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005172:	e014      	b.n	800519e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005174:	4b25      	ldr	r3, [pc, #148]	; (800520c <UART_SetConfig+0x314>)
 8005176:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005178:	e011      	b.n	800519e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800517a:	f7fe fb5d 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 800517e:	0003      	movs	r3, r0
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005182:	e00c      	b.n	800519e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005184:	2380      	movs	r3, #128	; 0x80
 8005186:	021b      	lsls	r3, r3, #8
 8005188:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800518a:	e008      	b.n	800519e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005190:	231a      	movs	r3, #26
 8005192:	2220      	movs	r2, #32
 8005194:	189b      	adds	r3, r3, r2
 8005196:	19db      	adds	r3, r3, r7
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
        break;
 800519c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800519e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d100      	bne.n	80051a6 <UART_SetConfig+0x2ae>
 80051a4:	e14b      	b.n	800543e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051aa:	4b19      	ldr	r3, [pc, #100]	; (8005210 <UART_SetConfig+0x318>)
 80051ac:	0052      	lsls	r2, r2, #1
 80051ae:	5ad3      	ldrh	r3, [r2, r3]
 80051b0:	0019      	movs	r1, r3
 80051b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80051b4:	f7fa ffa6 	bl	8000104 <__udivsi3>
 80051b8:	0003      	movs	r3, r0
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	0013      	movs	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	189b      	adds	r3, r3, r2
 80051c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d305      	bcc.n	80051d8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d91d      	bls.n	8005214 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80051d8:	231a      	movs	r3, #26
 80051da:	2220      	movs	r2, #32
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	19db      	adds	r3, r3, r7
 80051e0:	2201      	movs	r2, #1
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e12b      	b.n	800543e <UART_SetConfig+0x546>
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	cfff69f3 	.word	0xcfff69f3
 80051ec:	ffffcfff 	.word	0xffffcfff
 80051f0:	40008000 	.word	0x40008000
 80051f4:	11fff4ff 	.word	0x11fff4ff
 80051f8:	40013800 	.word	0x40013800
 80051fc:	40021000 	.word	0x40021000
 8005200:	40004400 	.word	0x40004400
 8005204:	40004800 	.word	0x40004800
 8005208:	40004c00 	.word	0x40004c00
 800520c:	00f42400 	.word	0x00f42400
 8005210:	08006054 	.word	0x08006054
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	61bb      	str	r3, [r7, #24]
 8005218:	2300      	movs	r3, #0
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005220:	4b92      	ldr	r3, [pc, #584]	; (800546c <UART_SetConfig+0x574>)
 8005222:	0052      	lsls	r2, r2, #1
 8005224:	5ad3      	ldrh	r3, [r2, r3]
 8005226:	613b      	str	r3, [r7, #16]
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	69b8      	ldr	r0, [r7, #24]
 8005232:	69f9      	ldr	r1, [r7, #28]
 8005234:	f7fb f8dc 	bl	80003f0 <__aeabi_uldivmod>
 8005238:	0002      	movs	r2, r0
 800523a:	000b      	movs	r3, r1
 800523c:	0e11      	lsrs	r1, r2, #24
 800523e:	021d      	lsls	r5, r3, #8
 8005240:	430d      	orrs	r5, r1
 8005242:	0214      	lsls	r4, r2, #8
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	60bb      	str	r3, [r7, #8]
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	68b8      	ldr	r0, [r7, #8]
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	1900      	adds	r0, r0, r4
 8005256:	4169      	adcs	r1, r5
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	2300      	movs	r3, #0
 8005260:	607b      	str	r3, [r7, #4]
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f7fb f8c3 	bl	80003f0 <__aeabi_uldivmod>
 800526a:	0002      	movs	r2, r0
 800526c:	000b      	movs	r3, r1
 800526e:	0013      	movs	r3, r2
 8005270:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005274:	23c0      	movs	r3, #192	; 0xc0
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	429a      	cmp	r2, r3
 800527a:	d309      	bcc.n	8005290 <UART_SetConfig+0x398>
 800527c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527e:	2380      	movs	r3, #128	; 0x80
 8005280:	035b      	lsls	r3, r3, #13
 8005282:	429a      	cmp	r2, r3
 8005284:	d204      	bcs.n	8005290 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	e0d6      	b.n	800543e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005290:	231a      	movs	r3, #26
 8005292:	2220      	movs	r2, #32
 8005294:	189b      	adds	r3, r3, r2
 8005296:	19db      	adds	r3, r3, r7
 8005298:	2201      	movs	r2, #1
 800529a:	701a      	strb	r2, [r3, #0]
 800529c:	e0cf      	b.n	800543e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d000      	beq.n	80052ac <UART_SetConfig+0x3b4>
 80052aa:	e070      	b.n	800538e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80052ac:	231b      	movs	r3, #27
 80052ae:	2220      	movs	r2, #32
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	19db      	adds	r3, r3, r7
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d015      	beq.n	80052e6 <UART_SetConfig+0x3ee>
 80052ba:	dc18      	bgt.n	80052ee <UART_SetConfig+0x3f6>
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d00d      	beq.n	80052dc <UART_SetConfig+0x3e4>
 80052c0:	dc15      	bgt.n	80052ee <UART_SetConfig+0x3f6>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <UART_SetConfig+0x3d4>
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d005      	beq.n	80052d6 <UART_SetConfig+0x3de>
 80052ca:	e010      	b.n	80052ee <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fe fb40 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 80052d0:	0003      	movs	r3, r0
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052d4:	e014      	b.n	8005300 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d6:	4b66      	ldr	r3, [pc, #408]	; (8005470 <UART_SetConfig+0x578>)
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052da:	e011      	b.n	8005300 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052dc:	f7fe faac 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80052e0:	0003      	movs	r3, r0
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052e4:	e00c      	b.n	8005300 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e6:	2380      	movs	r3, #128	; 0x80
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ec:	e008      	b.n	8005300 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80052f2:	231a      	movs	r3, #26
 80052f4:	2220      	movs	r2, #32
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	19db      	adds	r3, r3, r7
 80052fa:	2201      	movs	r2, #1
 80052fc:	701a      	strb	r2, [r3, #0]
        break;
 80052fe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	2b00      	cmp	r3, #0
 8005304:	d100      	bne.n	8005308 <UART_SetConfig+0x410>
 8005306:	e09a      	b.n	800543e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800530c:	4b57      	ldr	r3, [pc, #348]	; (800546c <UART_SetConfig+0x574>)
 800530e:	0052      	lsls	r2, r2, #1
 8005310:	5ad3      	ldrh	r3, [r2, r3]
 8005312:	0019      	movs	r1, r3
 8005314:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005316:	f7fa fef5 	bl	8000104 <__udivsi3>
 800531a:	0003      	movs	r3, r0
 800531c:	005a      	lsls	r2, r3, #1
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	18d2      	adds	r2, r2, r3
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	0019      	movs	r1, r3
 800532c:	0010      	movs	r0, r2
 800532e:	f7fa fee9 	bl	8000104 <__udivsi3>
 8005332:	0003      	movs	r3, r0
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	2b0f      	cmp	r3, #15
 800533a:	d921      	bls.n	8005380 <UART_SetConfig+0x488>
 800533c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	025b      	lsls	r3, r3, #9
 8005342:	429a      	cmp	r2, r3
 8005344:	d21c      	bcs.n	8005380 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	b29a      	uxth	r2, r3
 800534a:	200e      	movs	r0, #14
 800534c:	2420      	movs	r4, #32
 800534e:	1903      	adds	r3, r0, r4
 8005350:	19db      	adds	r3, r3, r7
 8005352:	210f      	movs	r1, #15
 8005354:	438a      	bics	r2, r1
 8005356:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	b29b      	uxth	r3, r3
 800535e:	2207      	movs	r2, #7
 8005360:	4013      	ands	r3, r2
 8005362:	b299      	uxth	r1, r3
 8005364:	1903      	adds	r3, r0, r4
 8005366:	19db      	adds	r3, r3, r7
 8005368:	1902      	adds	r2, r0, r4
 800536a:	19d2      	adds	r2, r2, r7
 800536c:	8812      	ldrh	r2, [r2, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	1902      	adds	r2, r0, r4
 8005378:	19d2      	adds	r2, r2, r7
 800537a:	8812      	ldrh	r2, [r2, #0]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	e05e      	b.n	800543e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005380:	231a      	movs	r3, #26
 8005382:	2220      	movs	r2, #32
 8005384:	189b      	adds	r3, r3, r2
 8005386:	19db      	adds	r3, r3, r7
 8005388:	2201      	movs	r2, #1
 800538a:	701a      	strb	r2, [r3, #0]
 800538c:	e057      	b.n	800543e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800538e:	231b      	movs	r3, #27
 8005390:	2220      	movs	r2, #32
 8005392:	189b      	adds	r3, r3, r2
 8005394:	19db      	adds	r3, r3, r7
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d015      	beq.n	80053c8 <UART_SetConfig+0x4d0>
 800539c:	dc18      	bgt.n	80053d0 <UART_SetConfig+0x4d8>
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d00d      	beq.n	80053be <UART_SetConfig+0x4c6>
 80053a2:	dc15      	bgt.n	80053d0 <UART_SetConfig+0x4d8>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <UART_SetConfig+0x4b6>
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d005      	beq.n	80053b8 <UART_SetConfig+0x4c0>
 80053ac:	e010      	b.n	80053d0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ae:	f7fe facf 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 80053b2:	0003      	movs	r3, r0
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053b6:	e014      	b.n	80053e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053b8:	4b2d      	ldr	r3, [pc, #180]	; (8005470 <UART_SetConfig+0x578>)
 80053ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053bc:	e011      	b.n	80053e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053be:	f7fe fa3b 	bl	8003838 <HAL_RCC_GetSysClockFreq>
 80053c2:	0003      	movs	r3, r0
 80053c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053c6:	e00c      	b.n	80053e2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053c8:	2380      	movs	r3, #128	; 0x80
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80053ce:	e008      	b.n	80053e2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80053d4:	231a      	movs	r3, #26
 80053d6:	2220      	movs	r2, #32
 80053d8:	189b      	adds	r3, r3, r2
 80053da:	19db      	adds	r3, r3, r7
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
        break;
 80053e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80053e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d02a      	beq.n	800543e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ec:	4b1f      	ldr	r3, [pc, #124]	; (800546c <UART_SetConfig+0x574>)
 80053ee:	0052      	lsls	r2, r2, #1
 80053f0:	5ad3      	ldrh	r3, [r2, r3]
 80053f2:	0019      	movs	r1, r3
 80053f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80053f6:	f7fa fe85 	bl	8000104 <__udivsi3>
 80053fa:	0003      	movs	r3, r0
 80053fc:	001a      	movs	r2, r3
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	085b      	lsrs	r3, r3, #1
 8005404:	18d2      	adds	r2, r2, r3
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	0019      	movs	r1, r3
 800540c:	0010      	movs	r0, r2
 800540e:	f7fa fe79 	bl	8000104 <__udivsi3>
 8005412:	0003      	movs	r3, r0
 8005414:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	2b0f      	cmp	r3, #15
 800541a:	d90a      	bls.n	8005432 <UART_SetConfig+0x53a>
 800541c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541e:	2380      	movs	r3, #128	; 0x80
 8005420:	025b      	lsls	r3, r3, #9
 8005422:	429a      	cmp	r2, r3
 8005424:	d205      	bcs.n	8005432 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	b29a      	uxth	r2, r3
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60da      	str	r2, [r3, #12]
 8005430:	e005      	b.n	800543e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005432:	231a      	movs	r3, #26
 8005434:	2220      	movs	r2, #32
 8005436:	189b      	adds	r3, r3, r2
 8005438:	19db      	adds	r3, r3, r7
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	226a      	movs	r2, #106	; 0x6a
 8005442:	2101      	movs	r1, #1
 8005444:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	2268      	movs	r2, #104	; 0x68
 800544a:	2101      	movs	r1, #1
 800544c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	2200      	movs	r2, #0
 8005452:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	2200      	movs	r2, #0
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800545a:	231a      	movs	r3, #26
 800545c:	2220      	movs	r2, #32
 800545e:	189b      	adds	r3, r3, r2
 8005460:	19db      	adds	r3, r3, r7
 8005462:	781b      	ldrb	r3, [r3, #0]
}
 8005464:	0018      	movs	r0, r3
 8005466:	46bd      	mov	sp, r7
 8005468:	b010      	add	sp, #64	; 0x40
 800546a:	bdb0      	pop	{r4, r5, r7, pc}
 800546c:	08006054 	.word	0x08006054
 8005470:	00f42400 	.word	0x00f42400

08005474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	2201      	movs	r2, #1
 8005482:	4013      	ands	r3, r2
 8005484:	d00b      	beq.n	800549e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	4a4a      	ldr	r2, [pc, #296]	; (80055b8 <UART_AdvFeatureConfig+0x144>)
 800548e:	4013      	ands	r3, r2
 8005490:	0019      	movs	r1, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	2202      	movs	r2, #2
 80054a4:	4013      	ands	r3, r2
 80054a6:	d00b      	beq.n	80054c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	4a43      	ldr	r2, [pc, #268]	; (80055bc <UART_AdvFeatureConfig+0x148>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	0019      	movs	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c4:	2204      	movs	r2, #4
 80054c6:	4013      	ands	r3, r2
 80054c8:	d00b      	beq.n	80054e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4a3b      	ldr	r2, [pc, #236]	; (80055c0 <UART_AdvFeatureConfig+0x14c>)
 80054d2:	4013      	ands	r3, r2
 80054d4:	0019      	movs	r1, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	2208      	movs	r2, #8
 80054e8:	4013      	ands	r3, r2
 80054ea:	d00b      	beq.n	8005504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4a34      	ldr	r2, [pc, #208]	; (80055c4 <UART_AdvFeatureConfig+0x150>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	0019      	movs	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	2210      	movs	r2, #16
 800550a:	4013      	ands	r3, r2
 800550c:	d00b      	beq.n	8005526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	4a2c      	ldr	r2, [pc, #176]	; (80055c8 <UART_AdvFeatureConfig+0x154>)
 8005516:	4013      	ands	r3, r2
 8005518:	0019      	movs	r1, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	2220      	movs	r2, #32
 800552c:	4013      	ands	r3, r2
 800552e:	d00b      	beq.n	8005548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	4a25      	ldr	r2, [pc, #148]	; (80055cc <UART_AdvFeatureConfig+0x158>)
 8005538:	4013      	ands	r3, r2
 800553a:	0019      	movs	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554c:	2240      	movs	r2, #64	; 0x40
 800554e:	4013      	ands	r3, r2
 8005550:	d01d      	beq.n	800558e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	4a1d      	ldr	r2, [pc, #116]	; (80055d0 <UART_AdvFeatureConfig+0x15c>)
 800555a:	4013      	ands	r3, r2
 800555c:	0019      	movs	r1, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	035b      	lsls	r3, r3, #13
 8005572:	429a      	cmp	r2, r3
 8005574:	d10b      	bne.n	800558e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4a15      	ldr	r2, [pc, #84]	; (80055d4 <UART_AdvFeatureConfig+0x160>)
 800557e:	4013      	ands	r3, r2
 8005580:	0019      	movs	r1, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	2280      	movs	r2, #128	; 0x80
 8005594:	4013      	ands	r3, r2
 8005596:	d00b      	beq.n	80055b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4a0e      	ldr	r2, [pc, #56]	; (80055d8 <UART_AdvFeatureConfig+0x164>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	0019      	movs	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	605a      	str	r2, [r3, #4]
  }
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	fffdffff 	.word	0xfffdffff
 80055bc:	fffeffff 	.word	0xfffeffff
 80055c0:	fffbffff 	.word	0xfffbffff
 80055c4:	ffff7fff 	.word	0xffff7fff
 80055c8:	ffffefff 	.word	0xffffefff
 80055cc:	ffffdfff 	.word	0xffffdfff
 80055d0:	ffefffff 	.word	0xffefffff
 80055d4:	ff9fffff 	.word	0xff9fffff
 80055d8:	fff7ffff 	.word	0xfff7ffff

080055dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2290      	movs	r2, #144	; 0x90
 80055e8:	2100      	movs	r1, #0
 80055ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055ec:	f7fb fef8 	bl	80013e0 <HAL_GetTick>
 80055f0:	0003      	movs	r3, r0
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2208      	movs	r2, #8
 80055fc:	4013      	ands	r3, r2
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d10c      	bne.n	800561c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2280      	movs	r2, #128	; 0x80
 8005606:	0391      	lsls	r1, r2, #14
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	4a1a      	ldr	r2, [pc, #104]	; (8005674 <UART_CheckIdleState+0x98>)
 800560c:	9200      	str	r2, [sp, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	f000 f832 	bl	8005678 <UART_WaitOnFlagUntilTimeout>
 8005614:	1e03      	subs	r3, r0, #0
 8005616:	d001      	beq.n	800561c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e026      	b.n	800566a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2204      	movs	r2, #4
 8005624:	4013      	ands	r3, r2
 8005626:	2b04      	cmp	r3, #4
 8005628:	d10c      	bne.n	8005644 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	03d1      	lsls	r1, r2, #15
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4a10      	ldr	r2, [pc, #64]	; (8005674 <UART_CheckIdleState+0x98>)
 8005634:	9200      	str	r2, [sp, #0]
 8005636:	2200      	movs	r2, #0
 8005638:	f000 f81e 	bl	8005678 <UART_WaitOnFlagUntilTimeout>
 800563c:	1e03      	subs	r3, r0, #0
 800563e:	d001      	beq.n	8005644 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e012      	b.n	800566a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2288      	movs	r2, #136	; 0x88
 8005648:	2120      	movs	r1, #32
 800564a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	228c      	movs	r2, #140	; 0x8c
 8005650:	2120      	movs	r1, #32
 8005652:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2284      	movs	r2, #132	; 0x84
 8005664:	2100      	movs	r1, #0
 8005666:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	0018      	movs	r0, r3
 800566c:	46bd      	mov	sp, r7
 800566e:	b004      	add	sp, #16
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	01ffffff 	.word	0x01ffffff

08005678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b094      	sub	sp, #80	; 0x50
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	1dfb      	adds	r3, r7, #7
 8005686:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005688:	e0a7      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800568a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800568c:	3301      	adds	r3, #1
 800568e:	d100      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005690:	e0a3      	b.n	80057da <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fb fea5 	bl	80013e0 <HAL_GetTick>
 8005696:	0002      	movs	r2, r0
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80056a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d13f      	bne.n	8005728 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a8:	f3ef 8310 	mrs	r3, PRIMASK
 80056ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
 80056b2:	2301      	movs	r3, #1
 80056b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b8:	f383 8810 	msr	PRIMASK, r3
}
 80056bc:	46c0      	nop			; (mov r8, r8)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	494e      	ldr	r1, [pc, #312]	; (8005804 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80056ca:	400a      	ands	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	f383 8810 	msr	PRIMASK, r3
}
 80056d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056da:	f3ef 8310 	mrs	r3, PRIMASK
 80056de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80056e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40
 80056e4:	2301      	movs	r3, #1
 80056e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	f383 8810 	msr	PRIMASK, r3
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2101      	movs	r1, #1
 80056fc:	438a      	bics	r2, r1
 80056fe:	609a      	str	r2, [r3, #8]
 8005700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005706:	f383 8810 	msr	PRIMASK, r3
}
 800570a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2288      	movs	r2, #136	; 0x88
 8005710:	2120      	movs	r1, #32
 8005712:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	228c      	movs	r2, #140	; 0x8c
 8005718:	2120      	movs	r1, #32
 800571a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2284      	movs	r2, #132	; 0x84
 8005720:	2100      	movs	r1, #0
 8005722:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e069      	b.n	80057fc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2204      	movs	r2, #4
 8005730:	4013      	ands	r3, r2
 8005732:	d052      	beq.n	80057da <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	011b      	lsls	r3, r3, #4
 800573e:	401a      	ands	r2, r3
 8005740:	2380      	movs	r3, #128	; 0x80
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	429a      	cmp	r2, r3
 8005746:	d148      	bne.n	80057da <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	0112      	lsls	r2, r2, #4
 8005750:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005752:	f3ef 8310 	mrs	r3, PRIMASK
 8005756:	613b      	str	r3, [r7, #16]
  return(result);
 8005758:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800575a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f383 8810 	msr	PRIMASK, r3
}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4924      	ldr	r1, [pc, #144]	; (8005804 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005774:	400a      	ands	r2, r1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800577a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f383 8810 	msr	PRIMASK, r3
}
 8005782:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005784:	f3ef 8310 	mrs	r3, PRIMASK
 8005788:	61fb      	str	r3, [r7, #28]
  return(result);
 800578a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578c:	64bb      	str	r3, [r7, #72]	; 0x48
 800578e:	2301      	movs	r3, #1
 8005790:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			; (mov r8, r8)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2101      	movs	r1, #1
 80057a6:	438a      	bics	r2, r1
 80057a8:	609a      	str	r2, [r3, #8]
 80057aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	f383 8810 	msr	PRIMASK, r3
}
 80057b4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2288      	movs	r2, #136	; 0x88
 80057ba:	2120      	movs	r1, #32
 80057bc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	228c      	movs	r2, #140	; 0x8c
 80057c2:	2120      	movs	r1, #32
 80057c4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2290      	movs	r2, #144	; 0x90
 80057ca:	2120      	movs	r1, #32
 80057cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2284      	movs	r2, #132	; 0x84
 80057d2:	2100      	movs	r1, #0
 80057d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e010      	b.n	80057fc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69db      	ldr	r3, [r3, #28]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	425a      	negs	r2, r3
 80057ea:	4153      	adcs	r3, r2
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	001a      	movs	r2, r3
 80057f0:	1dfb      	adds	r3, r7, #7
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d100      	bne.n	80057fa <UART_WaitOnFlagUntilTimeout+0x182>
 80057f8:	e747      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	b014      	add	sp, #80	; 0x50
 8005802:	bd80      	pop	{r7, pc}
 8005804:	fffffe5f 	.word	0xfffffe5f

08005808 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b090      	sub	sp, #64	; 0x40
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	1dbb      	adds	r3, r7, #6
 8005814:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	1dba      	adds	r2, r7, #6
 8005820:	215c      	movs	r1, #92	; 0x5c
 8005822:	8812      	ldrh	r2, [r2, #0]
 8005824:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2290      	movs	r2, #144	; 0x90
 800582a:	2100      	movs	r1, #0
 800582c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	228c      	movs	r2, #140	; 0x8c
 8005832:	2122      	movs	r1, #34	; 0x22
 8005834:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2280      	movs	r2, #128	; 0x80
 800583a:	589b      	ldr	r3, [r3, r2]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02d      	beq.n	800589c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2280      	movs	r2, #128	; 0x80
 8005844:	589b      	ldr	r3, [r3, r2]
 8005846:	4a40      	ldr	r2, [pc, #256]	; (8005948 <UART_Start_Receive_DMA+0x140>)
 8005848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2280      	movs	r2, #128	; 0x80
 800584e:	589b      	ldr	r3, [r3, r2]
 8005850:	4a3e      	ldr	r2, [pc, #248]	; (800594c <UART_Start_Receive_DMA+0x144>)
 8005852:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	589b      	ldr	r3, [r3, r2]
 800585a:	4a3d      	ldr	r2, [pc, #244]	; (8005950 <UART_Start_Receive_DMA+0x148>)
 800585c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2280      	movs	r2, #128	; 0x80
 8005862:	589b      	ldr	r3, [r3, r2]
 8005864:	2200      	movs	r2, #0
 8005866:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2280      	movs	r2, #128	; 0x80
 800586c:	5898      	ldr	r0, [r3, r2]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3324      	adds	r3, #36	; 0x24
 8005874:	0019      	movs	r1, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	001a      	movs	r2, r3
 800587c:	1dbb      	adds	r3, r7, #6
 800587e:	881b      	ldrh	r3, [r3, #0]
 8005880:	f7fc fee6 	bl	8002650 <HAL_DMA_Start_IT>
 8005884:	1e03      	subs	r3, r0, #0
 8005886:	d009      	beq.n	800589c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2290      	movs	r2, #144	; 0x90
 800588c:	2110      	movs	r1, #16
 800588e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	228c      	movs	r2, #140	; 0x8c
 8005894:	2120      	movs	r1, #32
 8005896:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e050      	b.n	800593e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d019      	beq.n	80058d8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a4:	f3ef 8310 	mrs	r3, PRIMASK
 80058a8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ae:	2301      	movs	r3, #1
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	f383 8810 	msr	PRIMASK, r3
}
 80058b8:	46c0      	nop			; (mov r8, r8)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2180      	movs	r1, #128	; 0x80
 80058c6:	0049      	lsls	r1, r1, #1
 80058c8:	430a      	orrs	r2, r1
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	f383 8810 	msr	PRIMASK, r3
}
 80058d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d8:	f3ef 8310 	mrs	r3, PRIMASK
 80058dc:	613b      	str	r3, [r7, #16]
  return(result);
 80058de:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80058e2:	2301      	movs	r3, #1
 80058e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f383 8810 	msr	PRIMASK, r3
}
 80058ec:	46c0      	nop			; (mov r8, r8)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2101      	movs	r1, #1
 80058fa:	430a      	orrs	r2, r1
 80058fc:	609a      	str	r2, [r3, #8]
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f383 8810 	msr	PRIMASK, r3
}
 8005908:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590a:	f3ef 8310 	mrs	r3, PRIMASK
 800590e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005910:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
 8005914:	2301      	movs	r3, #1
 8005916:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005918:	6a3b      	ldr	r3, [r7, #32]
 800591a:	f383 8810 	msr	PRIMASK, r3
}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2140      	movs	r1, #64	; 0x40
 800592c:	430a      	orrs	r2, r1
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	f383 8810 	msr	PRIMASK, r3
}
 800593a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b010      	add	sp, #64	; 0x40
 8005944:	bd80      	pop	{r7, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	08005aa1 	.word	0x08005aa1
 800594c:	08005bd1 	.word	0x08005bd1
 8005950:	08005c13 	.word	0x08005c13

08005954 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	; 0x28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595c:	f3ef 8310 	mrs	r3, PRIMASK
 8005960:	60bb      	str	r3, [r7, #8]
  return(result);
 8005962:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
 8005966:	2301      	movs	r3, #1
 8005968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f383 8810 	msr	PRIMASK, r3
}
 8005970:	46c0      	nop			; (mov r8, r8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	21c0      	movs	r1, #192	; 0xc0
 800597e:	438a      	bics	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598e:	f3ef 8310 	mrs	r3, PRIMASK
 8005992:	617b      	str	r3, [r7, #20]
  return(result);
 8005994:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005996:	623b      	str	r3, [r7, #32]
 8005998:	2301      	movs	r3, #1
 800599a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f383 8810 	msr	PRIMASK, r3
}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4908      	ldr	r1, [pc, #32]	; (80059d0 <UART_EndTxTransfer+0x7c>)
 80059b0:	400a      	ands	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2288      	movs	r2, #136	; 0x88
 80059c4:	2120      	movs	r1, #32
 80059c6:	5099      	str	r1, [r3, r2]
}
 80059c8:	46c0      	nop			; (mov r8, r8)
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b00a      	add	sp, #40	; 0x28
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	ff7fffff 	.word	0xff7fffff

080059d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08e      	sub	sp, #56	; 0x38
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059dc:	f3ef 8310 	mrs	r3, PRIMASK
 80059e0:	617b      	str	r3, [r7, #20]
  return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059e4:	637b      	str	r3, [r7, #52]	; 0x34
 80059e6:	2301      	movs	r3, #1
 80059e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	f383 8810 	msr	PRIMASK, r3
}
 80059f0:	46c0      	nop			; (mov r8, r8)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4926      	ldr	r1, [pc, #152]	; (8005a98 <UART_EndRxTransfer+0xc4>)
 80059fe:	400a      	ands	r2, r1
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	f383 8810 	msr	PRIMASK, r3
}
 8005a0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a12:	623b      	str	r3, [r7, #32]
  return(result);
 8005a14:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a16:	633b      	str	r3, [r7, #48]	; 0x30
 8005a18:	2301      	movs	r3, #1
 8005a1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	f383 8810 	msr	PRIMASK, r3
}
 8005a22:	46c0      	nop			; (mov r8, r8)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689a      	ldr	r2, [r3, #8]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	491b      	ldr	r1, [pc, #108]	; (8005a9c <UART_EndRxTransfer+0xc8>)
 8005a30:	400a      	ands	r2, r1
 8005a32:	609a      	str	r2, [r3, #8]
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3a:	f383 8810 	msr	PRIMASK, r3
}
 8005a3e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d118      	bne.n	8005a7a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a48:	f3ef 8310 	mrs	r3, PRIMASK
 8005a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a52:	2301      	movs	r3, #1
 8005a54:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f383 8810 	msr	PRIMASK, r3
}
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2110      	movs	r1, #16
 8005a6a:	438a      	bics	r2, r1
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f383 8810 	msr	PRIMASK, r3
}
 8005a78:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	228c      	movs	r2, #140	; 0x8c
 8005a7e:	2120      	movs	r1, #32
 8005a80:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005a8e:	46c0      	nop			; (mov r8, r8)
 8005a90:	46bd      	mov	sp, r7
 8005a92:	b00e      	add	sp, #56	; 0x38
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	46c0      	nop			; (mov r8, r8)
 8005a98:	fffffedf 	.word	0xfffffedf
 8005a9c:	effffffe 	.word	0xeffffffe

08005aa0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b094      	sub	sp, #80	; 0x50
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	d16f      	bne.n	8005b9a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8005aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abc:	225e      	movs	r2, #94	; 0x5e
 8005abe:	2100      	movs	r1, #0
 8005ac0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ac6:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ac8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005acc:	2301      	movs	r3, #1
 8005ace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f383 8810 	msr	PRIMASK, r3
}
 8005ad6:	46c0      	nop			; (mov r8, r8)
 8005ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	493a      	ldr	r1, [pc, #232]	; (8005bcc <UART_DMAReceiveCplt+0x12c>)
 8005ae4:	400a      	ands	r2, r1
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	f383 8810 	msr	PRIMASK, r3
}
 8005af2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af4:	f3ef 8310 	mrs	r3, PRIMASK
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afc:	647b      	str	r3, [r7, #68]	; 0x44
 8005afe:	2301      	movs	r3, #1
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	f383 8810 	msr	PRIMASK, r3
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689a      	ldr	r2, [r3, #8]
 8005b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2101      	movs	r1, #1
 8005b16:	438a      	bics	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]
 8005b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	f383 8810 	msr	PRIMASK, r3
}
 8005b24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b26:	f3ef 8310 	mrs	r3, PRIMASK
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b2e:	643b      	str	r3, [r7, #64]	; 0x40
 8005b30:	2301      	movs	r3, #1
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b36:	f383 8810 	msr	PRIMASK, r3
}
 8005b3a:	46c0      	nop			; (mov r8, r8)
 8005b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	689a      	ldr	r2, [r3, #8]
 8005b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2140      	movs	r1, #64	; 0x40
 8005b48:	438a      	bics	r2, r1
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	f383 8810 	msr	PRIMASK, r3
}
 8005b56:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	228c      	movs	r2, #140	; 0x8c
 8005b5c:	2120      	movs	r1, #32
 8005b5e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d118      	bne.n	8005b9a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b68:	f3ef 8310 	mrs	r3, PRIMASK
 8005b6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b72:	2301      	movs	r3, #1
 8005b74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f383 8810 	msr	PRIMASK, r3
}
 8005b7c:	46c0      	nop			; (mov r8, r8)
 8005b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	2110      	movs	r1, #16
 8005b8a:	438a      	bics	r2, r1
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f383 8810 	msr	PRIMASK, r3
}
 8005b98:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d108      	bne.n	8005bba <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005baa:	225c      	movs	r2, #92	; 0x5c
 8005bac:	5a9a      	ldrh	r2, [r3, r2]
 8005bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb0:	0011      	movs	r1, r2
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f7ff f994 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bb8:	e003      	b.n	8005bc2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8005bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f7fa fd2d 	bl	800061c <HAL_UART_RxCpltCallback>
}
 8005bc2:	46c0      	nop			; (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b014      	add	sp, #80	; 0x50
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	fffffeff 	.word	0xfffffeff

08005bd0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d10a      	bne.n	8005c02 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	225c      	movs	r2, #92	; 0x5c
 8005bf0:	5a9b      	ldrh	r3, [r3, r2]
 8005bf2:	085b      	lsrs	r3, r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	0011      	movs	r1, r2
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f7ff f970 	bl	8004ee0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c00:	e003      	b.n	8005c0a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7ff f95b 	bl	8004ec0 <HAL_UART_RxHalfCpltCallback>
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b004      	add	sp, #16
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2288      	movs	r2, #136	; 0x88
 8005c24:	589b      	ldr	r3, [r3, r2]
 8005c26:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	228c      	movs	r2, #140	; 0x8c
 8005c2c:	589b      	ldr	r3, [r3, r2]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2280      	movs	r2, #128	; 0x80
 8005c38:	4013      	ands	r3, r2
 8005c3a:	2b80      	cmp	r3, #128	; 0x80
 8005c3c:	d10a      	bne.n	8005c54 <UART_DMAError+0x42>
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b21      	cmp	r3, #33	; 0x21
 8005c42:	d107      	bne.n	8005c54 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	2256      	movs	r2, #86	; 0x56
 8005c48:	2100      	movs	r1, #0
 8005c4a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7ff fe80 	bl	8005954 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2240      	movs	r2, #64	; 0x40
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d10a      	bne.n	8005c78 <UART_DMAError+0x66>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2b22      	cmp	r3, #34	; 0x22
 8005c66:	d107      	bne.n	8005c78 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	225e      	movs	r2, #94	; 0x5e
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f7ff feae 	bl	80059d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2290      	movs	r2, #144	; 0x90
 8005c7c:	589b      	ldr	r3, [r3, r2]
 8005c7e:	2210      	movs	r2, #16
 8005c80:	431a      	orrs	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	2190      	movs	r1, #144	; 0x90
 8005c86:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	f7ff f920 	bl	8004ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b006      	add	sp, #24
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	225e      	movs	r2, #94	; 0x5e
 8005caa:	2100      	movs	r1, #0
 8005cac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2256      	movs	r2, #86	; 0x56
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f7ff f909 	bl	8004ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cbe:	46c0      	nop			; (mov r8, r8)
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	b004      	add	sp, #16
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b086      	sub	sp, #24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cce:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd2:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	2301      	movs	r3, #1
 8005cda:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			; (mov r8, r8)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2140      	movs	r1, #64	; 0x40
 8005cf0:	438a      	bics	r2, r1
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	f383 8810 	msr	PRIMASK, r3
}
 8005cfe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2288      	movs	r2, #136	; 0x88
 8005d04:	2120      	movs	r1, #32
 8005d06:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	0018      	movs	r0, r3
 8005d12:	f7ff f8cd 	bl	8004eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d16:	46c0      	nop			; (mov r8, r8)
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b006      	add	sp, #24
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d26:	46c0      	nop			; (mov r8, r8)
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	b002      	add	sp, #8
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b082      	sub	sp, #8
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d36:	46c0      	nop			; (mov r8, r8)
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	b002      	add	sp, #8
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d46:	46c0      	nop			; (mov r8, r8)
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	b002      	add	sp, #8
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2284      	movs	r2, #132	; 0x84
 8005d5c:	5c9b      	ldrb	r3, [r3, r2]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e027      	b.n	8005db6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2284      	movs	r2, #132	; 0x84
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2288      	movs	r2, #136	; 0x88
 8005d72:	2124      	movs	r1, #36	; 0x24
 8005d74:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2101      	movs	r1, #1
 8005d8a:	438a      	bics	r2, r1
 8005d8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a0b      	ldr	r2, [pc, #44]	; (8005dc0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2288      	movs	r2, #136	; 0x88
 8005da8:	2120      	movs	r1, #32
 8005daa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2284      	movs	r2, #132	; 0x84
 8005db0:	2100      	movs	r1, #0
 8005db2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	0018      	movs	r0, r3
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b004      	add	sp, #16
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	dfffffff 	.word	0xdfffffff

08005dc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2284      	movs	r2, #132	; 0x84
 8005dd2:	5c9b      	ldrb	r3, [r3, r2]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e02e      	b.n	8005e3a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2284      	movs	r2, #132	; 0x84
 8005de0:	2101      	movs	r1, #1
 8005de2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2288      	movs	r2, #136	; 0x88
 8005de8:	2124      	movs	r1, #36	; 0x24
 8005dea:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2101      	movs	r1, #1
 8005e00:	438a      	bics	r2, r1
 8005e02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	08d9      	lsrs	r1, r3, #3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	0018      	movs	r0, r3
 8005e1c:	f000 f854 	bl	8005ec8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2288      	movs	r2, #136	; 0x88
 8005e2c:	2120      	movs	r1, #32
 8005e2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2284      	movs	r2, #132	; 0x84
 8005e34:	2100      	movs	r1, #0
 8005e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	b004      	add	sp, #16
 8005e40:	bd80      	pop	{r7, pc}
	...

08005e44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2284      	movs	r2, #132	; 0x84
 8005e52:	5c9b      	ldrb	r3, [r3, r2]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e02f      	b.n	8005ebc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2284      	movs	r2, #132	; 0x84
 8005e60:	2101      	movs	r1, #1
 8005e62:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2288      	movs	r2, #136	; 0x88
 8005e68:	2124      	movs	r1, #36	; 0x24
 8005e6a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2101      	movs	r1, #1
 8005e80:	438a      	bics	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	4a0e      	ldr	r2, [pc, #56]	; (8005ec4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	0019      	movs	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 f813 	bl	8005ec8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2288      	movs	r2, #136	; 0x88
 8005eae:	2120      	movs	r1, #32
 8005eb0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2284      	movs	r2, #132	; 0x84
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	b004      	add	sp, #16
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	f1ffffff 	.word	0xf1ffffff

08005ec8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d108      	bne.n	8005eea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	226a      	movs	r2, #106	; 0x6a
 8005edc:	2101      	movs	r1, #1
 8005ede:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2268      	movs	r2, #104	; 0x68
 8005ee4:	2101      	movs	r1, #1
 8005ee6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ee8:	e043      	b.n	8005f72 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005eea:	260f      	movs	r6, #15
 8005eec:	19bb      	adds	r3, r7, r6
 8005eee:	2208      	movs	r2, #8
 8005ef0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ef2:	200e      	movs	r0, #14
 8005ef4:	183b      	adds	r3, r7, r0
 8005ef6:	2208      	movs	r2, #8
 8005ef8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	0e5b      	lsrs	r3, r3, #25
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	240d      	movs	r4, #13
 8005f06:	193b      	adds	r3, r7, r4
 8005f08:	2107      	movs	r1, #7
 8005f0a:	400a      	ands	r2, r1
 8005f0c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	0f5b      	lsrs	r3, r3, #29
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	250c      	movs	r5, #12
 8005f1a:	197b      	adds	r3, r7, r5
 8005f1c:	2107      	movs	r1, #7
 8005f1e:	400a      	ands	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f22:	183b      	adds	r3, r7, r0
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	197a      	adds	r2, r7, r5
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	4914      	ldr	r1, [pc, #80]	; (8005f7c <UARTEx_SetNbDataToProcess+0xb4>)
 8005f2c:	5c8a      	ldrb	r2, [r1, r2]
 8005f2e:	435a      	muls	r2, r3
 8005f30:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f32:	197b      	adds	r3, r7, r5
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	4a12      	ldr	r2, [pc, #72]	; (8005f80 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f38:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	f7fa f96c 	bl	8000218 <__divsi3>
 8005f40:	0003      	movs	r3, r0
 8005f42:	b299      	uxth	r1, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	226a      	movs	r2, #106	; 0x6a
 8005f48:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f4a:	19bb      	adds	r3, r7, r6
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	193a      	adds	r2, r7, r4
 8005f50:	7812      	ldrb	r2, [r2, #0]
 8005f52:	490a      	ldr	r1, [pc, #40]	; (8005f7c <UARTEx_SetNbDataToProcess+0xb4>)
 8005f54:	5c8a      	ldrb	r2, [r1, r2]
 8005f56:	435a      	muls	r2, r3
 8005f58:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f5a:	193b      	adds	r3, r7, r4
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	4a08      	ldr	r2, [pc, #32]	; (8005f80 <UARTEx_SetNbDataToProcess+0xb8>)
 8005f60:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f62:	0019      	movs	r1, r3
 8005f64:	f7fa f958 	bl	8000218 <__divsi3>
 8005f68:	0003      	movs	r3, r0
 8005f6a:	b299      	uxth	r1, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2268      	movs	r2, #104	; 0x68
 8005f70:	5299      	strh	r1, [r3, r2]
}
 8005f72:	46c0      	nop			; (mov r8, r8)
 8005f74:	46bd      	mov	sp, r7
 8005f76:	b005      	add	sp, #20
 8005f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	0800606c 	.word	0x0800606c
 8005f80:	08006074 	.word	0x08006074

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	2600      	movs	r6, #0
 8005f88:	4d0c      	ldr	r5, [pc, #48]	; (8005fbc <__libc_init_array+0x38>)
 8005f8a:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8c:	1b64      	subs	r4, r4, r5
 8005f8e:	10a4      	asrs	r4, r4, #2
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	2600      	movs	r6, #0
 8005f96:	f000 f821 	bl	8005fdc <_init>
 8005f9a:	4d0a      	ldr	r5, [pc, #40]	; (8005fc4 <__libc_init_array+0x40>)
 8005f9c:	4c0a      	ldr	r4, [pc, #40]	; (8005fc8 <__libc_init_array+0x44>)
 8005f9e:	1b64      	subs	r4, r4, r5
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	00b3      	lsls	r3, r6, #2
 8005faa:	58eb      	ldr	r3, [r5, r3]
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	00b3      	lsls	r3, r6, #2
 8005fb4:	58eb      	ldr	r3, [r5, r3]
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	08006084 	.word	0x08006084
 8005fc0:	08006084 	.word	0x08006084
 8005fc4:	08006084 	.word	0x08006084
 8005fc8:	08006088 	.word	0x08006088

08005fcc <memset>:
 8005fcc:	0003      	movs	r3, r0
 8005fce:	1882      	adds	r2, r0, r2
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <memset+0xa>
 8005fd4:	4770      	bx	lr
 8005fd6:	7019      	strb	r1, [r3, #0]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	e7f9      	b.n	8005fd0 <memset+0x4>

08005fdc <_init>:
 8005fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fde:	46c0      	nop			; (mov r8, r8)
 8005fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fe2:	bc08      	pop	{r3}
 8005fe4:	469e      	mov	lr, r3
 8005fe6:	4770      	bx	lr

08005fe8 <_fini>:
 8005fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fea:	46c0      	nop			; (mov r8, r8)
 8005fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fee:	bc08      	pop	{r3}
 8005ff0:	469e      	mov	lr, r3
 8005ff2:	4770      	bx	lr

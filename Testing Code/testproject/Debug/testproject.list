
testproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800d098  0800d098  0001d098  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d56c  0800d56c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800d56c  0800d56c  0001d56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d574  0800d574  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d574  0800d574  0001d574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d578  0800d578  0001d578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800d57c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020200  2**0
                  CONTENTS
 10 .bss          00000808  20000200  20000200  00020200  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a08  20000a08  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   000161a5  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003954  00000000  00000000  000363d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00039d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001048  00000000  00000000  0003aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c96  00000000  00000000  0003bf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c9b  00000000  00000000  00060bd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc794  00000000  00000000  00078871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00145005  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f8c  00000000  00000000  00145058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d07c 	.word	0x0800d07c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800d07c 	.word	0x0800d07c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001000:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001004:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001010:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001014:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001018:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00b      	beq.n	8001038 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001020:	e000      	b.n	8001024 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001022:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f9      	beq.n	8001022 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800102e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001038:	687b      	ldr	r3, [r7, #4]
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b086      	sub	sp, #24
 800104a:	af00      	add	r7, sp, #0
 800104c:	60f8      	str	r0, [r7, #12]
 800104e:	60b9      	str	r1, [r7, #8]
 8001050:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	e009      	b.n	800106c <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ffc9 	bl	8000ff8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf1      	blt.n	8001058 <_write+0x12>
  }
  return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001084:	f000 fc6c 	bl	8001960 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001088:	f000 f816 	bl	80010b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800108c:	f000 f912 	bl	80012b4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001090:	f000 f87c 	bl	800118c <MX_I2C1_Init>
	MX_I2S3_Init();
 8001094:	f000 f8a8 	bl	80011e8 <MX_I2S3_Init>
	MX_SPI1_Init();
 8001098:	f000 f8d6 	bl	8001248 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 800109c:	f006 ffcc 	bl	8008038 <MX_USB_HOST_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 80010a0:	f006 fff0 	bl	8008084 <MX_USB_HOST_Process>
		printf("heyy \n");
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <main+0x34>)
 80010a6:	f008 fad9 	bl	800965c <puts>
		HAL_Delay(1000);
 80010aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010ae:	f000 fcc9 	bl	8001a44 <HAL_Delay>
		MX_USB_HOST_Process();
 80010b2:	e7f5      	b.n	80010a0 <main+0x20>
 80010b4:	0800d098 	.word	0x0800d098

080010b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	; 0x50
 80010bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	; 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f007 faf8 	bl	80086bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	2300      	movs	r3, #0
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	4b28      	ldr	r3, [pc, #160]	; (8001184 <SystemClock_Config+0xcc>)
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	4a27      	ldr	r2, [pc, #156]	; (8001184 <SystemClock_Config+0xcc>)
 80010e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ea:	6413      	str	r3, [r2, #64]	; 0x40
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <SystemClock_Config+0xcc>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <SystemClock_Config+0xd0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a21      	ldr	r2, [pc, #132]	; (8001188 <SystemClock_Config+0xd0>)
 8001102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <SystemClock_Config+0xd0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001114:	2301      	movs	r3, #1
 8001116:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001126:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001128:	2308      	movs	r3, #8
 800112a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 800112c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001130:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001132:	2302      	movs	r3, #2
 8001134:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001136:	2307      	movs	r3, #7
 8001138:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	4618      	mov	r0, r3
 8001140:	f003 f95a 	bl	80043f8 <HAL_RCC_OscConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x96>
		Error_Handler();
 800114a:	f000 f9b1 	bl	80014b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800114e:	230f      	movs	r3, #15
 8001150:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	2302      	movs	r3, #2
 8001154:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800115a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800115e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2105      	movs	r1, #5
 800116c:	4618      	mov	r0, r3
 800116e:	f003 fbbb 	bl	80048e8 <HAL_RCC_ClockConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xc4>
		Error_Handler();
 8001178:	f000 f99a 	bl	80014b0 <Error_Handler>
	}
}
 800117c:	bf00      	nop
 800117e:	3750      	adds	r7, #80	; 0x50
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	40007000 	.word	0x40007000

0800118c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_I2C1_Init+0x50>)
 8001192:	4a13      	ldr	r2, [pc, #76]	; (80011e0 <MX_I2C1_Init+0x54>)
 8001194:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_I2C1_Init+0x50>)
 8001198:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <MX_I2C1_Init+0x58>)
 800119a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_I2C1_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_I2C1_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_I2C1_Init+0x50>)
 80011aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ae:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b0:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80011b6:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_I2C1_Init+0x50>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c2:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <MX_I2C1_Init+0x50>)
 80011ca:	f002 fb31 	bl	8003830 <HAL_I2C_Init>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011d4:	f000 f96c 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2000021c 	.word	0x2000021c
 80011e0:	40005400 	.word	0x40005400
 80011e4:	000186a0 	.word	0x000186a0

080011e8 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_I2S3_Init+0x54>)
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <MX_I2S3_Init+0x58>)
 80011f0:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011f2:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_I2S3_Init+0x54>)
 80011f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f8:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_I2S3_Init+0x54>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_I2S3_Init+0x54>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_I2S3_Init+0x54>)
 8001208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800120c:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_I2S3_Init+0x54>)
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <MX_I2S3_Init+0x5c>)
 8001212:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_I2S3_Init+0x54>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_I2S3_Init+0x54>)
 800121c:	2200      	movs	r2, #0
 800121e:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_I2S3_Init+0x54>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_I2S3_Init+0x54>)
 8001228:	f002 fc46 	bl	8003ab8 <HAL_I2S_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_I2S3_Init+0x4e>
		Error_Handler();
 8001232:	f000 f93d 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000270 	.word	0x20000270
 8001240:	40003c00 	.word	0x40003c00
 8001244:	00017700 	.word	0x00017700

08001248 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_SPI1_Init+0x64>)
 800124e:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <MX_SPI1_Init+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_SPI1_Init+0x64>)
 8001254:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001258:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_SPI1_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_SPI1_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_SPI1_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_SPI1_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_SPI1_Init+0x64>)
 8001274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001278:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_SPI1_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_SPI1_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_SPI1_Init+0x64>)
 8001294:	220a      	movs	r2, #10
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_SPI1_Init+0x64>)
 800129a:	f003 fe71 	bl	8004f80 <HAL_SPI_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80012a4:	f000 f904 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200002b8 	.word	0x200002b8
 80012b0:	40013000 	.word	0x40013000

080012b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <MX_GPIO_Init+0x1e4>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a71      	ldr	r2, [pc, #452]	; (8001498 <MX_GPIO_Init+0x1e4>)
 80012d4:	f043 0310 	orr.w	r3, r3, #16
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b6f      	ldr	r3, [pc, #444]	; (8001498 <MX_GPIO_Init+0x1e4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <MX_GPIO_Init+0x1e4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a6a      	ldr	r2, [pc, #424]	; (8001498 <MX_GPIO_Init+0x1e4>)
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <MX_GPIO_Init+0x1e4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b64      	ldr	r3, [pc, #400]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a63      	ldr	r2, [pc, #396]	; (8001498 <MX_GPIO_Init+0x1e4>)
 800130c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b61      	ldr	r3, [pc, #388]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b5d      	ldr	r3, [pc, #372]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a5c      	ldr	r2, [pc, #368]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a55      	ldr	r2, [pc, #340]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b53      	ldr	r3, [pc, #332]	; (8001498 <MX_GPIO_Init+0x1e4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b4f      	ldr	r3, [pc, #316]	; (8001498 <MX_GPIO_Init+0x1e4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a4e      	ldr	r2, [pc, #312]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <MX_GPIO_Init+0x1e4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2108      	movs	r1, #8
 8001376:	4849      	ldr	r0, [pc, #292]	; (800149c <MX_GPIO_Init+0x1e8>)
 8001378:	f000 fe36 	bl	8001fe8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800137c:	2201      	movs	r2, #1
 800137e:	2101      	movs	r1, #1
 8001380:	4847      	ldr	r0, [pc, #284]	; (80014a0 <MX_GPIO_Init+0x1ec>)
 8001382:	f000 fe31 	bl	8001fe8 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001386:	2200      	movs	r2, #0
 8001388:	f24f 0110 	movw	r1, #61456	; 0xf010
 800138c:	4845      	ldr	r0, [pc, #276]	; (80014a4 <MX_GPIO_Init+0x1f0>)
 800138e:	f000 fe2b 	bl	8001fe8 <HAL_GPIO_WritePin>
			LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001392:	2308      	movs	r3, #8
 8001394:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	483c      	ldr	r0, [pc, #240]	; (800149c <MX_GPIO_Init+0x1e8>)
 80013aa:	f000 fc81 	bl	8001cb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80013ae:	2301      	movs	r3, #1
 80013b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4836      	ldr	r0, [pc, #216]	; (80014a0 <MX_GPIO_Init+0x1ec>)
 80013c6:	f000 fc73 	bl	8001cb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013ca:	2308      	movs	r3, #8
 80013cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013da:	2305      	movs	r3, #5
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	482e      	ldr	r0, [pc, #184]	; (80014a0 <MX_GPIO_Init+0x1ec>)
 80013e6:	f000 fc63 	bl	8001cb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ee:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80013f2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	482a      	ldr	r0, [pc, #168]	; (80014a8 <MX_GPIO_Init+0x1f4>)
 8001400:	f000 fc56 	bl	8001cb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8001404:	2304      	movs	r3, #4
 8001406:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4825      	ldr	r0, [pc, #148]	; (80014ac <MX_GPIO_Init+0x1f8>)
 8001418:	f000 fc4a 	bl	8001cb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 800141c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001420:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800142e:	2305      	movs	r3, #5
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 031c 	add.w	r3, r7, #28
 8001436:	4619      	mov	r1, r3
 8001438:	481c      	ldr	r0, [pc, #112]	; (80014ac <MX_GPIO_Init+0x1f8>)
 800143a:	f000 fc39 	bl	8001cb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800143e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001442:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001450:	f107 031c 	add.w	r3, r7, #28
 8001454:	4619      	mov	r1, r3
 8001456:	4813      	ldr	r0, [pc, #76]	; (80014a4 <MX_GPIO_Init+0x1f0>)
 8001458:	f000 fc2a 	bl	8001cb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800145c:	2320      	movs	r3, #32
 800145e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	; (80014a4 <MX_GPIO_Init+0x1f0>)
 8001470:	f000 fc1e 	bl	8001cb0 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001474:	2302      	movs	r3, #2
 8001476:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001478:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800147c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 031c 	add.w	r3, r7, #28
 8001486:	4619      	mov	r1, r3
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_GPIO_Init+0x1e8>)
 800148a:	f000 fc11 	bl	8001cb0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800148e:	bf00      	nop
 8001490:	3730      	adds	r7, #48	; 0x30
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40021000 	.word	0x40021000
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	40020000 	.word	0x40020000
 80014ac:	40020400 	.word	0x40020400

080014b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_MspInit+0x4c>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_MspInit+0x4c>)
 80014cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_MspInit+0x4c>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_MspInit+0x4c>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a08      	ldr	r2, [pc, #32]	; (8001508 <HAL_MspInit+0x4c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014fa:	2007      	movs	r0, #7
 80014fc:	f000 fb96 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800

0800150c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a19      	ldr	r2, [pc, #100]	; (8001590 <HAL_I2C_MspInit+0x84>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d12c      	bne.n	8001588 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a17      	ldr	r2, [pc, #92]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800154a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001550:	2312      	movs	r3, #18
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001554:	2301      	movs	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155c:	2304      	movs	r3, #4
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <HAL_I2C_MspInit+0x8c>)
 8001568:	f000 fba2 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a07      	ldr	r2, [pc, #28]	; (8001594 <HAL_I2C_MspInit+0x88>)
 8001576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <HAL_I2C_MspInit+0x88>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001588:	bf00      	nop
 800158a:	3728      	adds	r7, #40	; 0x28
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40005400 	.word	0x40005400
 8001594:	40023800 	.word	0x40023800
 8001598:	40020400 	.word	0x40020400

0800159c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	; 0x38
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <HAL_I2S_MspInit+0xf0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d15a      	bne.n	8001682 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015cc:	2301      	movs	r3, #1
 80015ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80015d0:	23c0      	movs	r3, #192	; 0xc0
 80015d2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fb8f 	bl	8004d00 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80015e8:	f7ff ff62 	bl	80014b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a26      	ldr	r2, [pc, #152]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 80015f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 800160e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001610:	4a1f      	ldr	r2, [pc, #124]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6313      	str	r3, [r2, #48]	; 0x30
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 800161a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a18      	ldr	r2, [pc, #96]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <HAL_I2S_MspInit+0xf4>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001640:	2310      	movs	r3, #16
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001650:	2306      	movs	r3, #6
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	480e      	ldr	r0, [pc, #56]	; (8001694 <HAL_I2S_MspInit+0xf8>)
 800165c:	f000 fb28 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001660:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001672:	2306      	movs	r3, #6
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <HAL_I2S_MspInit+0xfc>)
 800167e:	f000 fb17 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3738      	adds	r7, #56	; 0x38
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40003c00 	.word	0x40003c00
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020800 	.word	0x40020800

0800169c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_SPI_MspInit+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12b      	bne.n	8001716 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_SPI_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80016f6:	23e0      	movs	r3, #224	; 0xe0
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	; (8001728 <HAL_SPI_MspInit+0x8c>)
 8001712:	f000 facd 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40013000 	.word	0x40013000
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f944 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <OTG_FS_IRQHandler+0x10>)
 8001786:	f000 feb3 	bl	80024f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200006f4 	.word	0x200006f4

08001794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_kill>:

int _kill(int pid, int sig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ae:	f006 ff4b 	bl	8008648 <__errno>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2216      	movs	r2, #22
 80017b6:	601a      	str	r2, [r3, #0]
  return -1;
 80017b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_exit>:

void _exit (int status)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017cc:	f04f 31ff 	mov.w	r1, #4294967295
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff ffe7 	bl	80017a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017d6:	e7fe      	b.n	80017d6 <_exit+0x12>

080017d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e00a      	b.n	8001800 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ea:	f3af 8000 	nop.w
 80017ee:	4601      	mov	r1, r0
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	b2ca      	uxtb	r2, r1
 80017f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	697a      	ldr	r2, [r7, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	dbf0      	blt.n	80017ea <_read+0x12>
  }

  return len;
 8001808:	687b      	ldr	r3, [r7, #4]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3718      	adds	r7, #24
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800183a:	605a      	str	r2, [r3, #4]
  return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <_isatty>:

int _isatty(int file)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <_sbrk+0x5c>)
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <_sbrk+0x60>)
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001890:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <_sbrk+0x64>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <_sbrk+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <_sbrk+0x64>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4413      	add	r3, r2
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d207      	bcs.n	80018bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ac:	f006 fecc 	bl	8008648 <__errno>
 80018b0:	4603      	mov	r3, r0
 80018b2:	220c      	movs	r2, #12
 80018b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e009      	b.n	80018d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <_sbrk+0x64>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c2:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a05      	ldr	r2, [pc, #20]	; (80018e0 <_sbrk+0x64>)
 80018cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20020000 	.word	0x20020000
 80018dc:	00000400 	.word	0x00000400
 80018e0:	20000310 	.word	0x20000310
 80018e4:	20000a08 	.word	0x20000a08

080018e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <SystemInit+0x20>)
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f2:	4a05      	ldr	r2, [pc, #20]	; (8001908 <SystemInit+0x20>)
 80018f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001910:	480d      	ldr	r0, [pc, #52]	; (8001948 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001912:	490e      	ldr	r1, [pc, #56]	; (800194c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001914:	4a0e      	ldr	r2, [pc, #56]	; (8001950 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001918:	e002      	b.n	8001920 <LoopCopyDataInit>

0800191a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800191c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191e:	3304      	adds	r3, #4

08001920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001924:	d3f9      	bcc.n	800191a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001928:	4c0b      	ldr	r4, [pc, #44]	; (8001958 <LoopFillZerobss+0x26>)
  movs r3, #0
 800192a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800192c:	e001      	b.n	8001932 <LoopFillZerobss>

0800192e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001930:	3204      	adds	r2, #4

08001932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001934:	d3fb      	bcc.n	800192e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001936:	f7ff ffd7 	bl	80018e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f006 fe8b 	bl	8008654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7ff fb9f 	bl	8001080 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001950:	0800d57c 	.word	0x0800d57c
  ldr r2, =_sbss
 8001954:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001958:	20000a08 	.word	0x20000a08

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f94f 	bl	8001c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fd92 	bl	80014bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f967 	bl	8001c96 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f92f 	bl	8001c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000314 	.word	0x20000314

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000314 	.word	0x20000314

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_Delay+0x44>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000008 	.word	0x20000008

08001a8c <__NVIC_SetPriorityGrouping>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001abe:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60d3      	str	r3, [r2, #12]
}
 8001ac4:	bf00      	nop
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_GetPriorityGrouping>:
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <__NVIC_GetPriorityGrouping+0x18>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	0a1b      	lsrs	r3, r3, #8
 8001ade:	f003 0307 	and.w	r3, r3, #7
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_EnableIRQ>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	db0b      	blt.n	8001b1a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	f003 021f 	and.w	r2, r3, #31
 8001b08:	4907      	ldr	r1, [pc, #28]	; (8001b28 <__NVIC_EnableIRQ+0x38>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	095b      	lsrs	r3, r3, #5
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000e100 	.word	0xe000e100

08001b2c <__NVIC_SetPriority>:
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	6039      	str	r1, [r7, #0]
 8001b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	db0a      	blt.n	8001b56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <__NVIC_SetPriority+0x4c>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	0112      	lsls	r2, r2, #4
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	440b      	add	r3, r1
 8001b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b54:	e00a      	b.n	8001b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4908      	ldr	r1, [pc, #32]	; (8001b7c <__NVIC_SetPriority+0x50>)
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	3b04      	subs	r3, #4
 8001b64:	0112      	lsls	r2, r2, #4
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	440b      	add	r3, r1
 8001b6a:	761a      	strb	r2, [r3, #24]
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000e100 	.word	0xe000e100
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <NVIC_EncodePriority>:
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f1c3 0307 	rsb	r3, r3, #7
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	bf28      	it	cs
 8001b9e:	2304      	movcs	r3, #4
 8001ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	2b06      	cmp	r3, #6
 8001ba8:	d902      	bls.n	8001bb0 <NVIC_EncodePriority+0x30>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3b03      	subs	r3, #3
 8001bae:	e000      	b.n	8001bb2 <NVIC_EncodePriority+0x32>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43da      	mvns	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43d9      	mvns	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd8:	4313      	orrs	r3, r2
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3724      	adds	r7, #36	; 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <SysTick_Config>:
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf8:	d301      	bcc.n	8001bfe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00f      	b.n	8001c1e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <SysTick_Config+0x40>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c06:	210f      	movs	r1, #15
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f7ff ff8e 	bl	8001b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <SysTick_Config+0x40>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <SysTick_Config+0x40>)
 8001c18:	2207      	movs	r2, #7
 8001c1a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	e000e010 	.word	0xe000e010

08001c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff29 	bl	8001a8c <__NVIC_SetPriorityGrouping>
}
 8001c3a:	bf00      	nop
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b086      	sub	sp, #24
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	607a      	str	r2, [r7, #4]
 8001c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c54:	f7ff ff3e 	bl	8001ad4 <__NVIC_GetPriorityGrouping>
 8001c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff ff8e 	bl	8001b80 <NVIC_EncodePriority>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff5d 	bl	8001b2c <__NVIC_SetPriority>
}
 8001c72:	bf00      	nop
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff31 	bl	8001af0 <__NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff ffa2 	bl	8001be8 <SysTick_Config>
 8001ca4:	4603      	mov	r3, r0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e16b      	b.n	8001fa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f040 815a 	bne.w	8001f9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d005      	beq.n	8001d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d130      	bne.n	8001d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 0201 	and.w	r2, r3, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d017      	beq.n	8001da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d123      	bne.n	8001df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	220f      	movs	r2, #15
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691a      	ldr	r2, [r3, #16]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	08da      	lsrs	r2, r3, #3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3208      	adds	r2, #8
 8001dee:	69b9      	ldr	r1, [r7, #24]
 8001df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0203 	and.w	r2, r3, #3
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80b4 	beq.w	8001f9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <HAL_GPIO_Init+0x30c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a5f      	ldr	r2, [pc, #380]	; (8001fbc <HAL_GPIO_Init+0x30c>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_GPIO_Init+0x30c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e52:	4a5b      	ldr	r2, [pc, #364]	; (8001fc0 <HAL_GPIO_Init+0x310>)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a52      	ldr	r2, [pc, #328]	; (8001fc4 <HAL_GPIO_Init+0x314>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d02b      	beq.n	8001ed6 <HAL_GPIO_Init+0x226>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_GPIO_Init+0x318>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d025      	beq.n	8001ed2 <HAL_GPIO_Init+0x222>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a50      	ldr	r2, [pc, #320]	; (8001fcc <HAL_GPIO_Init+0x31c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <HAL_GPIO_Init+0x21e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4f      	ldr	r2, [pc, #316]	; (8001fd0 <HAL_GPIO_Init+0x320>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x21a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4e      	ldr	r2, [pc, #312]	; (8001fd4 <HAL_GPIO_Init+0x324>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x216>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4d      	ldr	r2, [pc, #308]	; (8001fd8 <HAL_GPIO_Init+0x328>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x212>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_GPIO_Init+0x32c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x20e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4b      	ldr	r2, [pc, #300]	; (8001fe0 <HAL_GPIO_Init+0x330>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x20a>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e00e      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001eba:	2308      	movs	r3, #8
 8001ebc:	e00c      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ebe:	2306      	movs	r3, #6
 8001ec0:	e00a      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e008      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e004      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e002      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_GPIO_Init+0x228>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	69fa      	ldr	r2, [r7, #28]
 8001eda:	f002 0203 	and.w	r2, r2, #3
 8001ede:	0092      	lsls	r2, r2, #2
 8001ee0:	4093      	lsls	r3, r2
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee8:	4935      	ldr	r1, [pc, #212]	; (8001fc0 <HAL_GPIO_Init+0x310>)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	089b      	lsrs	r3, r3, #2
 8001eee:	3302      	adds	r3, #2
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f1a:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f44:	4a27      	ldr	r2, [pc, #156]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f98:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <HAL_GPIO_Init+0x334>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b0f      	cmp	r3, #15
 8001fa8:	f67f ae90 	bls.w	8001ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3724      	adds	r7, #36	; 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40021400 	.word	0x40021400
 8001fdc:	40021800 	.word	0x40021800
 8001fe0:	40021c00 	.word	0x40021c00
 8001fe4:	40013c00 	.word	0x40013c00

08001fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	807b      	strh	r3, [r7, #2]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	787b      	ldrb	r3, [r7, #1]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002004:	e003      	b.n	800200e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002006:	887b      	ldrh	r3, [r7, #2]
 8002008:	041a      	lsls	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	619a      	str	r2, [r3, #24]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800201a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201c:	b08f      	sub	sp, #60	; 0x3c
 800201e:	af0a      	add	r7, sp, #40	; 0x28
 8002020:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e054      	b.n	80020d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f006 f854 	bl	80080f4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2203      	movs	r2, #3
 8002050:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d102      	bne.n	8002066 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f003 f883 	bl	8005176 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	603b      	str	r3, [r7, #0]
 8002076:	687e      	ldr	r6, [r7, #4]
 8002078:	466d      	mov	r5, sp
 800207a:	f106 0410 	add.w	r4, r6, #16
 800207e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800208a:	e885 0003 	stmia.w	r5, {r0, r1}
 800208e:	1d33      	adds	r3, r6, #4
 8002090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002092:	6838      	ldr	r0, [r7, #0]
 8002094:	f002 fffd 	bl	8005092 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2101      	movs	r1, #1
 800209e:	4618      	mov	r0, r3
 80020a0:	f003 f87a 	bl	8005198 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	603b      	str	r3, [r7, #0]
 80020aa:	687e      	ldr	r6, [r7, #4]
 80020ac:	466d      	mov	r5, sp
 80020ae:	f106 0410 	add.w	r4, r6, #16
 80020b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020be:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c2:	1d33      	adds	r3, r6, #4
 80020c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c6:	6838      	ldr	r0, [r7, #0]
 80020c8:	f003 fa02 	bl	80054d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b089      	sub	sp, #36	; 0x24
 80020e2:	af04      	add	r7, sp, #16
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	4608      	mov	r0, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
 80020ec:	4603      	mov	r3, r0
 80020ee:	70fb      	strb	r3, [r7, #3]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70bb      	strb	r3, [r7, #2]
 80020f4:	4613      	mov	r3, r2
 80020f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_HCD_HC_Init+0x28>
 8002102:	2302      	movs	r3, #2
 8002104:	e076      	b.n	80021f4 <HAL_HCD_HC_Init+0x116>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	212c      	movs	r1, #44	; 0x2c
 8002114:	fb01 f303 	mul.w	r3, r1, r3
 8002118:	4413      	add	r3, r2
 800211a:	333d      	adds	r3, #61	; 0x3d
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3338      	adds	r3, #56	; 0x38
 800212e:	787a      	ldrb	r2, [r7, #1]
 8002130:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	212c      	movs	r1, #44	; 0x2c
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	4413      	add	r3, r2
 800213e:	3340      	adds	r3, #64	; 0x40
 8002140:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002142:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3339      	adds	r3, #57	; 0x39
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	333f      	adds	r3, #63	; 0x3f
 8002164:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002168:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800216a:	78fb      	ldrb	r3, [r7, #3]
 800216c:	78ba      	ldrb	r2, [r7, #2]
 800216e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002172:	b2d0      	uxtb	r0, r2
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	212c      	movs	r1, #44	; 0x2c
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	4413      	add	r3, r2
 800217e:	333a      	adds	r3, #58	; 0x3a
 8002180:	4602      	mov	r2, r0
 8002182:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002184:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002188:	2b00      	cmp	r3, #0
 800218a:	da09      	bge.n	80021a0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	333b      	adds	r3, #59	; 0x3b
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e008      	b.n	80021b2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	212c      	movs	r1, #44	; 0x2c
 80021a6:	fb01 f303 	mul.w	r3, r1, r3
 80021aa:	4413      	add	r3, r2
 80021ac:	333b      	adds	r3, #59	; 0x3b
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	212c      	movs	r1, #44	; 0x2c
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	333c      	adds	r3, #60	; 0x3c
 80021c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80021c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	787c      	ldrb	r4, [r7, #1]
 80021cc:	78ba      	ldrb	r2, [r7, #2]
 80021ce:	78f9      	ldrb	r1, [r7, #3]
 80021d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80021d2:	9302      	str	r3, [sp, #8]
 80021d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4623      	mov	r3, r4
 80021e2:	f003 fafb 	bl	80057dc <USB_HC_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd90      	pop	{r4, r7, pc}

080021fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	460b      	mov	r3, r1
 8002206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_HCD_HC_Halt+0x1e>
 8002216:	2302      	movs	r3, #2
 8002218:	e00f      	b.n	800223a <HAL_HCD_HC_Halt+0x3e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f003 fd4b 	bl	8005cc6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	70fb      	strb	r3, [r7, #3]
 8002256:	460b      	mov	r3, r1
 8002258:	70bb      	strb	r3, [r7, #2]
 800225a:	4613      	mov	r3, r2
 800225c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800225e:	78fb      	ldrb	r3, [r7, #3]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	212c      	movs	r1, #44	; 0x2c
 8002264:	fb01 f303 	mul.w	r3, r1, r3
 8002268:	4413      	add	r3, r2
 800226a:	333b      	adds	r3, #59	; 0x3b
 800226c:	78ba      	ldrb	r2, [r7, #2]
 800226e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	333f      	adds	r3, #63	; 0x3f
 800227e:	787a      	ldrb	r2, [r7, #1]
 8002280:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002282:	7c3b      	ldrb	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d112      	bne.n	80022ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	212c      	movs	r1, #44	; 0x2c
 800228e:	fb01 f303 	mul.w	r3, r1, r3
 8002292:	4413      	add	r3, r2
 8002294:	3342      	adds	r3, #66	; 0x42
 8002296:	2203      	movs	r2, #3
 8002298:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	212c      	movs	r1, #44	; 0x2c
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	333d      	adds	r3, #61	; 0x3d
 80022a8:	7f3a      	ldrb	r2, [r7, #28]
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e008      	b.n	80022c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	212c      	movs	r1, #44	; 0x2c
 80022b4:	fb01 f303 	mul.w	r3, r1, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	3342      	adds	r3, #66	; 0x42
 80022bc:	2202      	movs	r2, #2
 80022be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80022c0:	787b      	ldrb	r3, [r7, #1]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	f200 80c6 	bhi.w	8002454 <HAL_HCD_HC_SubmitRequest+0x210>
 80022c8:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80022ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ce:	bf00      	nop
 80022d0:	080022e1 	.word	0x080022e1
 80022d4:	08002441 	.word	0x08002441
 80022d8:	08002345 	.word	0x08002345
 80022dc:	080023c3 	.word	0x080023c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80022e0:	7c3b      	ldrb	r3, [r7, #16]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	f040 80b8 	bne.w	8002458 <HAL_HCD_HC_SubmitRequest+0x214>
 80022e8:	78bb      	ldrb	r3, [r7, #2]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 80b4 	bne.w	8002458 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80022f0:	8b3b      	ldrh	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3355      	adds	r3, #85	; 0x55
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3355      	adds	r3, #85	; 0x55
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	212c      	movs	r1, #44	; 0x2c
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3342      	adds	r3, #66	; 0x42
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800232e:	e093      	b.n	8002458 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3342      	adds	r3, #66	; 0x42
 800233e:	2202      	movs	r2, #2
 8002340:	701a      	strb	r2, [r3, #0]
      break;
 8002342:	e089      	b.n	8002458 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002344:	78bb      	ldrb	r3, [r7, #2]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11d      	bne.n	8002386 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3355      	adds	r3, #85	; 0x55
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d109      	bne.n	8002372 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3342      	adds	r3, #66	; 0x42
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002370:	e073      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002372:	78fb      	ldrb	r3, [r7, #3]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3342      	adds	r3, #66	; 0x42
 8002380:	2202      	movs	r2, #2
 8002382:	701a      	strb	r2, [r3, #0]
      break;
 8002384:	e069      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002386:	78fb      	ldrb	r3, [r7, #3]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3354      	adds	r3, #84	; 0x54
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3342      	adds	r3, #66	; 0x42
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
      break;
 80023ac:	e055      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	212c      	movs	r1, #44	; 0x2c
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	3342      	adds	r3, #66	; 0x42
 80023bc:	2202      	movs	r2, #2
 80023be:	701a      	strb	r2, [r3, #0]
      break;
 80023c0:	e04b      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023c2:	78bb      	ldrb	r3, [r7, #2]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11d      	bne.n	8002404 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3355      	adds	r3, #85	; 0x55
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3342      	adds	r3, #66	; 0x42
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023ee:	e034      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3342      	adds	r3, #66	; 0x42
 80023fe:	2202      	movs	r2, #2
 8002400:	701a      	strb	r2, [r3, #0]
      break;
 8002402:	e02a      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3354      	adds	r3, #84	; 0x54
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002418:	78fb      	ldrb	r3, [r7, #3]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3342      	adds	r3, #66	; 0x42
 8002426:	2200      	movs	r2, #0
 8002428:	701a      	strb	r2, [r3, #0]
      break;
 800242a:	e016      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3342      	adds	r3, #66	; 0x42
 800243a:	2202      	movs	r2, #2
 800243c:	701a      	strb	r2, [r3, #0]
      break;
 800243e:	e00c      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	212c      	movs	r1, #44	; 0x2c
 8002446:	fb01 f303 	mul.w	r3, r1, r3
 800244a:	4413      	add	r3, r2
 800244c:	3342      	adds	r3, #66	; 0x42
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
      break;
 8002452:	e002      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002454:	bf00      	nop
 8002456:	e000      	b.n	800245a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002458:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	3344      	adds	r3, #68	; 0x44
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	8b3a      	ldrh	r2, [r7, #24]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	202c      	movs	r0, #44	; 0x2c
 8002474:	fb00 f303 	mul.w	r3, r0, r3
 8002478:	440b      	add	r3, r1
 800247a:	334c      	adds	r3, #76	; 0x4c
 800247c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3360      	adds	r3, #96	; 0x60
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	3350      	adds	r3, #80	; 0x50
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	212c      	movs	r1, #44	; 0x2c
 80024a8:	fb01 f303 	mul.w	r3, r1, r3
 80024ac:	4413      	add	r3, r2
 80024ae:	3339      	adds	r3, #57	; 0x39
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024b4:	78fb      	ldrb	r3, [r7, #3]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	212c      	movs	r1, #44	; 0x2c
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4413      	add	r3, r2
 80024c0:	3361      	adds	r3, #97	; 0x61
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	222c      	movs	r2, #44	; 0x2c
 80024ce:	fb02 f303 	mul.w	r3, r2, r3
 80024d2:	3338      	adds	r3, #56	; 0x38
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	18d1      	adds	r1, r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	f003 fa9e 	bl	8005a20 <USB_HC_StartXfer>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop

080024f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 ff9f 	bl	800544a <USB_GetMode>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	f040 80f6 	bne.w	8002700 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f002 ff83 	bl	8005424 <USB_ReadInterrupts>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80ec 	beq.w	80026fe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f002 ff7a 	bl	8005424 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800253a:	d104      	bne.n	8002546 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002544:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f002 ff6a 	bl	8005424 <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800255a:	d104      	bne.n	8002566 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002564:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f002 ff5a 	bl	8005424 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800257a:	d104      	bne.n	8002586 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002584:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f002 ff4a 	bl	8005424 <USB_ReadInterrupts>
 8002590:	4603      	mov	r3, r0
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d103      	bne.n	80025a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2202      	movs	r2, #2
 80025a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 ff3c 	bl	8005424 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b6:	d11c      	bne.n	80025f2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80025c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025d2:	2110      	movs	r1, #16
 80025d4:	6938      	ldr	r0, [r7, #16]
 80025d6:	f002 fe2b 	bl	8005230 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025da:	6938      	ldr	r0, [r7, #16]
 80025dc:	f002 fe5c 	bl	8005298 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 f832 	bl	8005650 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f005 fdff 	bl	80081f0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 ff14 	bl	8005424 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002606:	d102      	bne.n	800260e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f001 f89e 	bl	800374a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f002 ff06 	bl	8005424 <USB_ReadInterrupts>
 8002618:	4603      	mov	r3, r0
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b08      	cmp	r3, #8
 8002620:	d106      	bne.n	8002630 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f005 fdc8 	bl	80081b8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2208      	movs	r2, #8
 800262e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f002 fef5 	bl	8005424 <USB_ReadInterrupts>
 800263a:	4603      	mov	r3, r0
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b10      	cmp	r3, #16
 8002642:	d101      	bne.n	8002648 <HAL_HCD_IRQHandler+0x158>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_HCD_IRQHandler+0x15a>
 8002648:	2300      	movs	r3, #0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d012      	beq.n	8002674 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0210 	bic.w	r2, r2, #16
 800265c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 ffa1 	bl	80035a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0210 	orr.w	r2, r2, #16
 8002672:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f002 fed3 	bl	8005424 <USB_ReadInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002688:	d13a      	bne.n	8002700 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f003 fb08 	bl	8005ca4 <USB_HC_ReadInterrupt>
 8002694:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002696:	2300      	movs	r3, #0
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	e025      	b.n	80026e8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d018      	beq.n	80026e2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026c6:	d106      	bne.n	80026d6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8ab 	bl	800282a <HCD_HC_IN_IRQHandler>
 80026d4:	e005      	b.n	80026e2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4619      	mov	r1, r3
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 fbf9 	bl	8002ed4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3d4      	bcc.n	800269c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fa:	615a      	str	r2, [r3, #20]
 80026fc:	e000      	b.n	8002700 <HAL_HCD_IRQHandler+0x210>
      return;
 80026fe:	bf00      	nop
    }
  }
}
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_HCD_Start+0x16>
 8002718:	2302      	movs	r3, #2
 800271a:	e013      	b.n	8002744 <HAL_HCD_Start+0x3e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2101      	movs	r1, #1
 800272a:	4618      	mov	r0, r3
 800272c:	f002 fff4 	bl	8005718 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f002 fd0d 	bl	8005154 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_HCD_Stop+0x16>
 800275e:	2302      	movs	r3, #2
 8002760:	e00d      	b.n	800277e <HAL_HCD_Stop+0x32>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fbe2 	bl	8005f38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f002 ff96 	bl	80056c4 <USB_ResetPort>
 8002798:	4603      	mov	r3, r0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b083      	sub	sp, #12
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	460b      	mov	r3, r1
 80027ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	212c      	movs	r1, #44	; 0x2c
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	3360      	adds	r3, #96	; 0x60
 80027bc:	781b      	ldrb	r3, [r3, #0]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	3350      	adds	r3, #80	; 0x50
 80027e4:	681b      	ldr	r3, [r3, #0]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 ffda 	bl	80057b8 <USB_GetCurrentFrame>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f002 ffb5 	bl	800578a <USB_GetHostSpeed>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	460b      	mov	r3, r1
 8002834:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4413      	add	r3, r2
 800284c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b04      	cmp	r3, #4
 8002858:	d11a      	bne.n	8002890 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4413      	add	r3, r2
 8002862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002866:	461a      	mov	r2, r3
 8002868:	2304      	movs	r3, #4
 800286a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3361      	adds	r3, #97	; 0x61
 800287a:	2206      	movs	r2, #6
 800287c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f003 fa1c 	bl	8005cc6 <USB_HC_Halt>
 800288e:	e0af      	b.n	80029f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4413      	add	r3, r2
 8002898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028a6:	d11b      	bne.n	80028e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	2207      	movs	r2, #7
 80028cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 f9f4 	bl	8005cc6 <USB_HC_Halt>
 80028de:	e087      	b.n	80029f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d109      	bne.n	800290a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	2320      	movs	r3, #32
 8002906:	6093      	str	r3, [r2, #8]
 8002908:	e072      	b.n	80029f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b08      	cmp	r3, #8
 800291e:	d11a      	bne.n	8002956 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	2308      	movs	r3, #8
 8002930:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	212c      	movs	r1, #44	; 0x2c
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	3361      	adds	r3, #97	; 0x61
 8002940:	2205      	movs	r2, #5
 8002942:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	4611      	mov	r1, r2
 800294e:	4618      	mov	r0, r3
 8002950:	f003 f9b9 	bl	8005cc6 <USB_HC_Halt>
 8002954:	e04c      	b.n	80029f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	015a      	lsls	r2, r3, #5
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	4413      	add	r3, r2
 800295e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800296c:	d11b      	bne.n	80029a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002980:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3361      	adds	r3, #97	; 0x61
 8002990:	2208      	movs	r2, #8
 8002992:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 f991 	bl	8005cc6 <USB_HC_Halt>
 80029a4:	e024      	b.n	80029f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d119      	bne.n	80029f0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	461a      	mov	r2, r3
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3361      	adds	r3, #97	; 0x61
 80029dc:	2206      	movs	r2, #6
 80029de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f003 f96b 	bl	8005cc6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a06:	d112      	bne.n	8002a2e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	b2d2      	uxtb	r2, r2
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 f957 	bl	8005cc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002a2c:	e24e      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	f040 80df 	bne.w	8002c04 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d019      	beq.n	8002a82 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3348      	adds	r3, #72	; 0x48
 8002a5c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	0159      	lsls	r1, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	440b      	add	r3, r1
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002a70:	1ad2      	subs	r2, r2, r3
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	202c      	movs	r0, #44	; 0x2c
 8002a78:	fb00 f303 	mul.w	r3, r0, r3
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3350      	adds	r3, #80	; 0x50
 8002a80:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3361      	adds	r3, #97	; 0x61
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	335c      	adds	r3, #92	; 0x5c
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	333f      	adds	r3, #63	; 0x3f
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d009      	beq.n	8002ae0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	333f      	adds	r3, #63	; 0x3f
 8002ada:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d111      	bne.n	8002b04 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f003 f8eb 	bl	8005cc6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afc:	461a      	mov	r2, r3
 8002afe:	2310      	movs	r3, #16
 8002b00:	6093      	str	r3, [r2, #8]
 8002b02:	e03a      	b.n	8002b7a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	333f      	adds	r3, #63	; 0x3f
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d009      	beq.n	8002b2c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	333f      	adds	r3, #63	; 0x3f
 8002b26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d126      	bne.n	8002b7a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	0151      	lsls	r1, r2, #5
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	440a      	add	r2, r1
 8002b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b4a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	212c      	movs	r1, #44	; 0x2c
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	3360      	adds	r3, #96	; 0x60
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	b2d9      	uxtb	r1, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	202c      	movs	r0, #44	; 0x2c
 8002b68:	fb00 f303 	mul.w	r3, r0, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3360      	adds	r3, #96	; 0x60
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f005 fb49 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d12b      	bne.n	8002bda <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	212c      	movs	r1, #44	; 0x2c
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3348      	adds	r3, #72	; 0x48
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	202c      	movs	r0, #44	; 0x2c
 8002b98:	fb00 f202 	mul.w	r2, r0, r2
 8002b9c:	440a      	add	r2, r1
 8002b9e:	3240      	adds	r2, #64	; 0x40
 8002ba0:	8812      	ldrh	r2, [r2, #0]
 8002ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 818e 	beq.w	8002ecc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	3354      	adds	r3, #84	; 0x54
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f083 0301 	eor.w	r3, r3, #1
 8002bc4:	b2d8      	uxtb	r0, r3
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3354      	adds	r3, #84	; 0x54
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	701a      	strb	r2, [r3, #0]
}
 8002bd8:	e178      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	212c      	movs	r1, #44	; 0x2c
 8002be0:	fb01 f303 	mul.w	r3, r1, r3
 8002be4:	4413      	add	r3, r2
 8002be6:	3354      	adds	r3, #84	; 0x54
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	f083 0301 	eor.w	r3, r3, #1
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3354      	adds	r3, #84	; 0x54
 8002bfe:	4602      	mov	r2, r0
 8002c00:	701a      	strb	r2, [r3, #0]
}
 8002c02:	e163      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	f040 80f6 	bne.w	8002e08 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	3361      	adds	r3, #97	; 0x61
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d109      	bne.n	8002c44 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	212c      	movs	r1, #44	; 0x2c
 8002c36:	fb01 f303 	mul.w	r3, r1, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3360      	adds	r3, #96	; 0x60
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e0c9      	b.n	8002dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	212c      	movs	r1, #44	; 0x2c
 8002c4a:	fb01 f303 	mul.w	r3, r1, r3
 8002c4e:	4413      	add	r3, r2
 8002c50:	3361      	adds	r3, #97	; 0x61
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	d109      	bne.n	8002c6c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3360      	adds	r3, #96	; 0x60
 8002c66:	2205      	movs	r2, #5
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e0b5      	b.n	8002dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3361      	adds	r3, #97	; 0x61
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b06      	cmp	r3, #6
 8002c7e:	d009      	beq.n	8002c94 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3361      	adds	r3, #97	; 0x61
 8002c8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d150      	bne.n	8002d36 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	212c      	movs	r1, #44	; 0x2c
 8002c9a:	fb01 f303 	mul.w	r3, r1, r3
 8002c9e:	4413      	add	r3, r2
 8002ca0:	335c      	adds	r3, #92	; 0x5c
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	202c      	movs	r0, #44	; 0x2c
 8002cac:	fb00 f303 	mul.w	r3, r0, r3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	335c      	adds	r3, #92	; 0x5c
 8002cb4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	335c      	adds	r3, #92	; 0x5c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d912      	bls.n	8002cf0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	212c      	movs	r1, #44	; 0x2c
 8002cd0:	fb01 f303 	mul.w	r3, r1, r3
 8002cd4:	4413      	add	r3, r2
 8002cd6:	335c      	adds	r3, #92	; 0x5c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	212c      	movs	r1, #44	; 0x2c
 8002ce2:	fb01 f303 	mul.w	r3, r1, r3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	3360      	adds	r3, #96	; 0x60
 8002cea:	2204      	movs	r2, #4
 8002cec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cee:	e073      	b.n	8002dd8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3360      	adds	r3, #96	; 0x60
 8002cfe:	2202      	movs	r2, #2
 8002d00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	015a      	lsls	r2, r3, #5
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4413      	add	r3, r2
 8002d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d18:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d20:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d34:	e050      	b.n	8002dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3361      	adds	r3, #97	; 0x61
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d122      	bne.n	8002d90 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3360      	adds	r3, #96	; 0x60
 8002d58:	2202      	movs	r2, #2
 8002d5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	e023      	b.n	8002dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3361      	adds	r3, #97	; 0x61
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b07      	cmp	r3, #7
 8002da2:	d119      	bne.n	8002dd8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	212c      	movs	r1, #44	; 0x2c
 8002daa:	fb01 f303 	mul.w	r3, r1, r3
 8002dae:	4413      	add	r3, r2
 8002db0:	335c      	adds	r3, #92	; 0x5c
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	202c      	movs	r0, #44	; 0x2c
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	335c      	adds	r3, #92	; 0x5c
 8002dc4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3360      	adds	r3, #96	; 0x60
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	2302      	movs	r3, #2
 8002de8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	b2d9      	uxtb	r1, r3
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	202c      	movs	r0, #44	; 0x2c
 8002df4:	fb00 f303 	mul.w	r3, r0, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	3360      	adds	r3, #96	; 0x60
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f005 fa03 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e06:	e061      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d156      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	333f      	adds	r3, #63	; 0x3f
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b03      	cmp	r3, #3
 8002e30:	d111      	bne.n	8002e56 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	335c      	adds	r3, #92	; 0x5c
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f002 ff39 	bl	8005cc6 <USB_HC_Halt>
 8002e54:	e031      	b.n	8002eba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	333f      	adds	r3, #63	; 0x3f
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	212c      	movs	r1, #44	; 0x2c
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	4413      	add	r3, r2
 8002e76:	333f      	adds	r3, #63	; 0x3f
 8002e78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d11d      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	335c      	adds	r3, #92	; 0x5c
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d110      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3361      	adds	r3, #97	; 0x61
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 ff06 	bl	8005cc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	2310      	movs	r3, #16
 8002eca:	6093      	str	r3, [r2, #8]
}
 8002ecc:	bf00      	nop
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11a      	bne.n	8002f3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	2304      	movs	r3, #4
 8002f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3361      	adds	r3, #97	; 0x61
 8002f24:	2206      	movs	r2, #6
 8002f26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f002 fec7 	bl	8005cc6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002f38:	e331      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	015a      	lsls	r2, r3, #5
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4413      	add	r3, r2
 8002f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f003 0320 	and.w	r3, r3, #32
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d12e      	bne.n	8002fae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2320      	movs	r3, #32
 8002f60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	333d      	adds	r3, #61	; 0x3d
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f040 8313 	bne.w	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	333d      	adds	r3, #61	; 0x3d
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	3360      	adds	r3, #96	; 0x60
 8002f98:	2202      	movs	r2, #2
 8002f9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f002 fe8d 	bl	8005cc6 <USB_HC_Halt>
}
 8002fac:	e2f7      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	015a      	lsls	r2, r3, #5
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc4:	d112      	bne.n	8002fec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 fe6e 	bl	8005cc6 <USB_HC_Halt>
}
 8002fea:	e2d8      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d140      	bne.n	8003084 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	335c      	adds	r3, #92	; 0x5c
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b40      	cmp	r3, #64	; 0x40
 8003028:	d111      	bne.n	800304e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	212c      	movs	r1, #44	; 0x2c
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	333d      	adds	r3, #61	; 0x3d
 8003038:	2201      	movs	r2, #1
 800303a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	2340      	movs	r3, #64	; 0x40
 800304c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	461a      	mov	r2, r3
 800305c:	2301      	movs	r3, #1
 800305e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3361      	adds	r3, #97	; 0x61
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	4611      	mov	r1, r2
 800307c:	4618      	mov	r0, r3
 800307e:	f002 fe22 	bl	8005cc6 <USB_HC_Halt>
}
 8003082:	e28c      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d12c      	bne.n	80030f4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	212c      	movs	r1, #44	; 0x2c
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	3361      	adds	r3, #97	; 0x61
 80030a8:	2204      	movs	r2, #4
 80030aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	333d      	adds	r3, #61	; 0x3d
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	4611      	mov	r1, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	f002 fdf3 	bl	8005cc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	2340      	movs	r3, #64	; 0x40
 80030f0:	6093      	str	r3, [r2, #8]
}
 80030f2:	e254      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	015a      	lsls	r2, r3, #5
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4413      	add	r3, r2
 80030fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b08      	cmp	r3, #8
 8003108:	d11a      	bne.n	8003140 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	461a      	mov	r2, r3
 8003118:	2308      	movs	r3, #8
 800311a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3361      	adds	r3, #97	; 0x61
 800312a:	2205      	movs	r2, #5
 800312c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	4611      	mov	r1, r2
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fdc4 	bl	8005cc6 <USB_HC_Halt>
}
 800313e:	e22e      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b10      	cmp	r3, #16
 8003154:	d140      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	335c      	adds	r3, #92	; 0x5c
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3361      	adds	r3, #97	; 0x61
 8003176:	2203      	movs	r2, #3
 8003178:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	212c      	movs	r1, #44	; 0x2c
 8003180:	fb01 f303 	mul.w	r3, r1, r3
 8003184:	4413      	add	r3, r2
 8003186:	333d      	adds	r3, #61	; 0x3d
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d112      	bne.n	80031b4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	333c      	adds	r3, #60	; 0x3c
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d108      	bne.n	80031b4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	212c      	movs	r1, #44	; 0x2c
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	333d      	adds	r3, #61	; 0x3d
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	4611      	mov	r1, r2
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 fd81 	bl	8005cc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2310      	movs	r3, #16
 80031d4:	6093      	str	r3, [r2, #8]
}
 80031d6:	e1e2      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d164      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d111      	bne.n	800321a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	212c      	movs	r1, #44	; 0x2c
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4413      	add	r3, r2
 8003202:	3361      	adds	r3, #97	; 0x61
 8003204:	2206      	movs	r2, #6
 8003206:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4618      	mov	r0, r3
 8003214:	f002 fd57 	bl	8005cc6 <USB_HC_Halt>
 8003218:	e044      	b.n	80032a4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	335c      	adds	r3, #92	; 0x5c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	202c      	movs	r0, #44	; 0x2c
 8003232:	fb00 f303 	mul.w	r3, r0, r3
 8003236:	440b      	add	r3, r1
 8003238:	335c      	adds	r3, #92	; 0x5c
 800323a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	335c      	adds	r3, #92	; 0x5c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d920      	bls.n	8003292 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	212c      	movs	r1, #44	; 0x2c
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	4413      	add	r3, r2
 800325c:	335c      	adds	r3, #92	; 0x5c
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3360      	adds	r3, #96	; 0x60
 8003270:	2204      	movs	r2, #4
 8003272:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	b2d9      	uxtb	r1, r3
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	202c      	movs	r0, #44	; 0x2c
 800327e:	fb00 f303 	mul.w	r3, r0, r3
 8003282:	4413      	add	r3, r2
 8003284:	3360      	adds	r3, #96	; 0x60
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	461a      	mov	r2, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f004 ffbe 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003290:	e008      	b.n	80032a4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	212c      	movs	r1, #44	; 0x2c
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	4413      	add	r3, r2
 800329e:	3360      	adds	r3, #96	; 0x60
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	461a      	mov	r2, r3
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	6093      	str	r3, [r2, #8]
}
 80032b6:	e172      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ce:	d11b      	bne.n	8003308 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	212c      	movs	r1, #44	; 0x2c
 80032d6:	fb01 f303 	mul.w	r3, r1, r3
 80032da:	4413      	add	r3, r2
 80032dc:	3361      	adds	r3, #97	; 0x61
 80032de:	2208      	movs	r2, #8
 80032e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f002 fcea 	bl	8005cc6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	461a      	mov	r2, r3
 8003300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003304:	6093      	str	r3, [r2, #8]
}
 8003306:	e14a      	b.n	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	f040 813f 	bne.w	800359e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3361      	adds	r3, #97	; 0x61
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d17d      	bne.n	8003430 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	212c      	movs	r1, #44	; 0x2c
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3360      	adds	r3, #96	; 0x60
 8003342:	2201      	movs	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	212c      	movs	r1, #44	; 0x2c
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	333f      	adds	r3, #63	; 0x3f
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d00a      	beq.n	8003370 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	212c      	movs	r1, #44	; 0x2c
 8003360:	fb01 f303 	mul.w	r3, r1, r3
 8003364:	4413      	add	r3, r2
 8003366:	333f      	adds	r3, #63	; 0x3f
 8003368:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800336a:	2b03      	cmp	r3, #3
 800336c:	f040 8100 	bne.w	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d113      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	3355      	adds	r3, #85	; 0x55
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	f083 0301 	eor.w	r3, r3, #1
 800338c:	b2d8      	uxtb	r0, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	3355      	adds	r3, #85	; 0x55
 800339c:	4602      	mov	r2, r0
 800339e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	f040 80e3 	bne.w	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	334c      	adds	r3, #76	; 0x4c
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 80d8 	beq.w	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	334c      	adds	r3, #76	; 0x4c
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	202c      	movs	r0, #44	; 0x2c
 80033d6:	fb00 f202 	mul.w	r2, r0, r2
 80033da:	440a      	add	r2, r1
 80033dc:	3240      	adds	r2, #64	; 0x40
 80033de:	8812      	ldrh	r2, [r2, #0]
 80033e0:	4413      	add	r3, r2
 80033e2:	3b01      	subs	r3, #1
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	202c      	movs	r0, #44	; 0x2c
 80033ea:	fb00 f202 	mul.w	r2, r0, r2
 80033ee:	440a      	add	r2, r1
 80033f0:	3240      	adds	r2, #64	; 0x40
 80033f2:	8812      	ldrh	r2, [r2, #0]
 80033f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80b5 	beq.w	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	3355      	adds	r3, #85	; 0x55
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	f083 0301 	eor.w	r3, r3, #1
 800341a:	b2d8      	uxtb	r0, r3
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	212c      	movs	r1, #44	; 0x2c
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	4413      	add	r3, r2
 8003428:	3355      	adds	r3, #85	; 0x55
 800342a:	4602      	mov	r2, r0
 800342c:	701a      	strb	r2, [r3, #0]
 800342e:	e09f      	b.n	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	3361      	adds	r3, #97	; 0x61
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d109      	bne.n	8003458 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	3360      	adds	r3, #96	; 0x60
 8003452:	2202      	movs	r2, #2
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e08b      	b.n	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	212c      	movs	r1, #44	; 0x2c
 800345e:	fb01 f303 	mul.w	r3, r1, r3
 8003462:	4413      	add	r3, r2
 8003464:	3361      	adds	r3, #97	; 0x61
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b04      	cmp	r3, #4
 800346a:	d109      	bne.n	8003480 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	212c      	movs	r1, #44	; 0x2c
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	4413      	add	r3, r2
 8003478:	3360      	adds	r3, #96	; 0x60
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e077      	b.n	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	3361      	adds	r3, #97	; 0x61
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b05      	cmp	r3, #5
 8003492:	d109      	bne.n	80034a8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	212c      	movs	r1, #44	; 0x2c
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	4413      	add	r3, r2
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	2205      	movs	r2, #5
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e063      	b.n	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	212c      	movs	r1, #44	; 0x2c
 80034ae:	fb01 f303 	mul.w	r3, r1, r3
 80034b2:	4413      	add	r3, r2
 80034b4:	3361      	adds	r3, #97	; 0x61
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b06      	cmp	r3, #6
 80034ba:	d009      	beq.n	80034d0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3361      	adds	r3, #97	; 0x61
 80034ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d14f      	bne.n	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	212c      	movs	r1, #44	; 0x2c
 80034d6:	fb01 f303 	mul.w	r3, r1, r3
 80034da:	4413      	add	r3, r2
 80034dc:	335c      	adds	r3, #92	; 0x5c
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	202c      	movs	r0, #44	; 0x2c
 80034e8:	fb00 f303 	mul.w	r3, r0, r3
 80034ec:	440b      	add	r3, r1
 80034ee:	335c      	adds	r3, #92	; 0x5c
 80034f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	335c      	adds	r3, #92	; 0x5c
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d912      	bls.n	800352c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	335c      	adds	r3, #92	; 0x5c
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3360      	adds	r3, #96	; 0x60
 8003526:	2204      	movs	r2, #4
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e021      	b.n	8003570 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3360      	adds	r3, #96	; 0x60
 800353a:	2202      	movs	r2, #2
 800353c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003554:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800355c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	461a      	mov	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2302      	movs	r3, #2
 8003580:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	b2d9      	uxtb	r1, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	202c      	movs	r0, #44	; 0x2c
 800358c:	fb00 f303 	mul.w	r3, r0, r3
 8003590:	4413      	add	r3, r2
 8003592:	3360      	adds	r3, #96	; 0x60
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f004 fe37 	bl	800820c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800359e:	bf00      	nop
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b08a      	sub	sp, #40	; 0x28
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	0c5b      	lsrs	r3, r3, #17
 80035cc:	f003 030f 	and.w	r3, r3, #15
 80035d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	091b      	lsrs	r3, r3, #4
 80035d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d004      	beq.n	80035ec <HCD_RXQLVL_IRQHandler+0x46>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2b05      	cmp	r3, #5
 80035e6:	f000 80a9 	beq.w	800373c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035ea:	e0aa      	b.n	8003742 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80a6 	beq.w	8003740 <HCD_RXQLVL_IRQHandler+0x19a>
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3344      	adds	r3, #68	; 0x44
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 809b 	beq.w	8003740 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	212c      	movs	r1, #44	; 0x2c
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	4413      	add	r3, r2
 8003616:	3350      	adds	r3, #80	; 0x50
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	441a      	add	r2, r3
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	202c      	movs	r0, #44	; 0x2c
 8003624:	fb00 f303 	mul.w	r3, r0, r3
 8003628:	440b      	add	r3, r1
 800362a:	334c      	adds	r3, #76	; 0x4c
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d87a      	bhi.n	8003728 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	3344      	adds	r3, #68	; 0x44
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	b292      	uxth	r2, r2
 800364a:	4619      	mov	r1, r3
 800364c:	f001 fe92 	bl	8005374 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3344      	adds	r3, #68	; 0x44
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	441a      	add	r2, r3
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	202c      	movs	r0, #44	; 0x2c
 800366a:	fb00 f303 	mul.w	r3, r0, r3
 800366e:	440b      	add	r3, r1
 8003670:	3344      	adds	r3, #68	; 0x44
 8003672:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	212c      	movs	r1, #44	; 0x2c
 800367a:	fb01 f303 	mul.w	r3, r1, r3
 800367e:	4413      	add	r3, r2
 8003680:	3350      	adds	r3, #80	; 0x50
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	441a      	add	r2, r3
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	202c      	movs	r0, #44	; 0x2c
 800368e:	fb00 f303 	mul.w	r3, r0, r3
 8003692:	440b      	add	r3, r1
 8003694:	3350      	adds	r3, #80	; 0x50
 8003696:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	0cdb      	lsrs	r3, r3, #19
 80036a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	3340      	adds	r3, #64	; 0x40
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d13c      	bne.n	8003740 <HCD_RXQLVL_IRQHandler+0x19a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d039      	beq.n	8003740 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80036e2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80036ea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	461a      	mov	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	3354      	adds	r3, #84	; 0x54
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	f083 0301 	eor.w	r3, r3, #1
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3354      	adds	r3, #84	; 0x54
 8003722:	4602      	mov	r2, r0
 8003724:	701a      	strb	r2, [r3, #0]
      break;
 8003726:	e00b      	b.n	8003740 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	212c      	movs	r1, #44	; 0x2c
 800372e:	fb01 f303 	mul.w	r3, r1, r3
 8003732:	4413      	add	r3, r2
 8003734:	3360      	adds	r3, #96	; 0x60
 8003736:	2204      	movs	r2, #4
 8003738:	701a      	strb	r2, [r3, #0]
      break;
 800373a:	e001      	b.n	8003740 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800373c:	bf00      	nop
 800373e:	e000      	b.n	8003742 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003740:	bf00      	nop
  }
}
 8003742:	bf00      	nop
 8003744:	3728      	adds	r7, #40	; 0x28
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003776:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d10b      	bne.n	800379a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b01      	cmp	r3, #1
 800378a:	d102      	bne.n	8003792 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f004 fd21 	bl	80081d4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d132      	bne.n	800380a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f043 0308 	orr.w	r3, r3, #8
 80037aa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d126      	bne.n	8003804 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d113      	bne.n	80037e6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80037c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c8:	d106      	bne.n	80037d8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2102      	movs	r1, #2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 ff3d 	bl	8005650 <USB_InitFSLSPClkSel>
 80037d6:	e011      	b.n	80037fc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	4618      	mov	r0, r3
 80037e0:	f001 ff36 	bl	8005650 <USB_InitFSLSPClkSel>
 80037e4:	e00a      	b.n	80037fc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d106      	bne.n	80037fc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037f4:	461a      	mov	r2, r3
 80037f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80037fa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f004 fd13 	bl	8008228 <HAL_HCD_PortEnabled_Callback>
 8003802:	e002      	b.n	800380a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f004 fd1d 	bl	8008244 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b20      	cmp	r3, #32
 8003812:	d103      	bne.n	800381c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f043 0320 	orr.w	r3, r3, #32
 800381a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003822:	461a      	mov	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6013      	str	r3, [r2, #0]
}
 8003828:	bf00      	nop
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e12b      	b.n	8003a9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd fe58 	bl	800150c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003882:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003892:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003894:	f001 fa20 	bl	8004cd8 <HAL_RCC_GetPCLK1Freq>
 8003898:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	4a81      	ldr	r2, [pc, #516]	; (8003aa4 <HAL_I2C_Init+0x274>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d807      	bhi.n	80038b4 <HAL_I2C_Init+0x84>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a80      	ldr	r2, [pc, #512]	; (8003aa8 <HAL_I2C_Init+0x278>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	bf94      	ite	ls
 80038ac:	2301      	movls	r3, #1
 80038ae:	2300      	movhi	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e006      	b.n	80038c2 <HAL_I2C_Init+0x92>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4a7d      	ldr	r2, [pc, #500]	; (8003aac <HAL_I2C_Init+0x27c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	bf94      	ite	ls
 80038bc:	2301      	movls	r3, #1
 80038be:	2300      	movhi	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0e7      	b.n	8003a9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a78      	ldr	r2, [pc, #480]	; (8003ab0 <HAL_I2C_Init+0x280>)
 80038ce:	fba2 2303 	umull	r2, r3, r2, r3
 80038d2:	0c9b      	lsrs	r3, r3, #18
 80038d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a6a      	ldr	r2, [pc, #424]	; (8003aa4 <HAL_I2C_Init+0x274>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d802      	bhi.n	8003904 <HAL_I2C_Init+0xd4>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	3301      	adds	r3, #1
 8003902:	e009      	b.n	8003918 <HAL_I2C_Init+0xe8>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	4a69      	ldr	r2, [pc, #420]	; (8003ab4 <HAL_I2C_Init+0x284>)
 8003910:	fba2 2303 	umull	r2, r3, r2, r3
 8003914:	099b      	lsrs	r3, r3, #6
 8003916:	3301      	adds	r3, #1
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	430b      	orrs	r3, r1
 800391e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800392a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	495c      	ldr	r1, [pc, #368]	; (8003aa4 <HAL_I2C_Init+0x274>)
 8003934:	428b      	cmp	r3, r1
 8003936:	d819      	bhi.n	800396c <HAL_I2C_Init+0x13c>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1e59      	subs	r1, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	fbb1 f3f3 	udiv	r3, r1, r3
 8003946:	1c59      	adds	r1, r3, #1
 8003948:	f640 73fc 	movw	r3, #4092	; 0xffc
 800394c:	400b      	ands	r3, r1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_I2C_Init+0x138>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1e59      	subs	r1, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003966:	e051      	b.n	8003a0c <HAL_I2C_Init+0x1dc>
 8003968:	2304      	movs	r3, #4
 800396a:	e04f      	b.n	8003a0c <HAL_I2C_Init+0x1dc>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d111      	bne.n	8003998 <HAL_I2C_Init+0x168>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1e58      	subs	r0, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	440b      	add	r3, r1
 8003982:	fbb0 f3f3 	udiv	r3, r0, r3
 8003986:	3301      	adds	r3, #1
 8003988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e012      	b.n	80039be <HAL_I2C_Init+0x18e>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e58      	subs	r0, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	0099      	lsls	r1, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_I2C_Init+0x196>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e022      	b.n	8003a0c <HAL_I2C_Init+0x1dc>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10e      	bne.n	80039ec <HAL_I2C_Init+0x1bc>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e58      	subs	r0, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	440b      	add	r3, r1
 80039dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e0:	3301      	adds	r3, #1
 80039e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ea:	e00f      	b.n	8003a0c <HAL_I2C_Init+0x1dc>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e58      	subs	r0, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6859      	ldr	r1, [r3, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	0099      	lsls	r1, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	6809      	ldr	r1, [r1, #0]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6911      	ldr	r1, [r2, #16]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68d2      	ldr	r2, [r2, #12]
 8003a46:	4311      	orrs	r1, r2
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	000186a0 	.word	0x000186a0
 8003aa8:	001e847f 	.word	0x001e847f
 8003aac:	003d08ff 	.word	0x003d08ff
 8003ab0:	431bde83 	.word	0x431bde83
 8003ab4:	10624dd3 	.word	0x10624dd3

08003ab8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e128      	b.n	8003d1c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d109      	bne.n	8003aea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a90      	ldr	r2, [pc, #576]	; (8003d24 <HAL_I2S_Init+0x26c>)
 8003ae2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7fd fd59 	bl	800159c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2202      	movs	r2, #2
 8003aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b00:	f023 030f 	bic.w	r3, r3, #15
 8003b04:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d060      	beq.n	8003bd8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d102      	bne.n	8003b24 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b1e:	2310      	movs	r3, #16
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b24:	2320      	movs	r3, #32
 8003b26:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d802      	bhi.n	8003b36 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b36:	2001      	movs	r0, #1
 8003b38:	f001 f9c4 	bl	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b3c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b46:	d125      	bne.n	8003b94 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	461a      	mov	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	3305      	adds	r3, #5
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	e01f      	b.n	8003bb2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	461a      	mov	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	3305      	adds	r3, #5
 8003b90:	613b      	str	r3, [r7, #16]
 8003b92:	e00e      	b.n	8003bb2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	3305      	adds	r3, #5
 8003bb0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4a5c      	ldr	r2, [pc, #368]	; (8003d28 <HAL_I2S_Init+0x270>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	08db      	lsrs	r3, r3, #3
 8003bbc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e003      	b.n	8003be0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d902      	bls.n	8003bec <HAL_I2S_Init+0x134>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	2bff      	cmp	r3, #255	; 0xff
 8003bea:	d907      	bls.n	8003bfc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf0:	f043 0210 	orr.w	r2, r3, #16
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e08f      	b.n	8003d1c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69fa      	ldr	r2, [r7, #28]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c1a:	f023 030f 	bic.w	r3, r3, #15
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6851      	ldr	r1, [r2, #4]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6892      	ldr	r2, [r2, #8]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68d2      	ldr	r2, [r2, #12]
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6992      	ldr	r2, [r2, #24]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c3e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d161      	bne.n	8003d0c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <HAL_I2S_Init+0x274>)
 8003c4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a37      	ldr	r2, [pc, #220]	; (8003d30 <HAL_I2S_Init+0x278>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d101      	bne.n	8003c5c <HAL_I2S_Init+0x1a4>
 8003c58:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <HAL_I2S_Init+0x27c>)
 8003c5a:	e001      	b.n	8003c60 <HAL_I2S_Init+0x1a8>
 8003c5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	4932      	ldr	r1, [pc, #200]	; (8003d30 <HAL_I2S_Init+0x278>)
 8003c68:	428a      	cmp	r2, r1
 8003c6a:	d101      	bne.n	8003c70 <HAL_I2S_Init+0x1b8>
 8003c6c:	4a31      	ldr	r2, [pc, #196]	; (8003d34 <HAL_I2S_Init+0x27c>)
 8003c6e:	e001      	b.n	8003c74 <HAL_I2S_Init+0x1bc>
 8003c70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c78:	f023 030f 	bic.w	r3, r3, #15
 8003c7c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HAL_I2S_Init+0x278>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d101      	bne.n	8003c8c <HAL_I2S_Init+0x1d4>
 8003c88:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <HAL_I2S_Init+0x27c>)
 8003c8a:	e001      	b.n	8003c90 <HAL_I2S_Init+0x1d8>
 8003c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c90:	2202      	movs	r2, #2
 8003c92:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <HAL_I2S_Init+0x278>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2S_Init+0x1ea>
 8003c9e:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_I2S_Init+0x27c>)
 8003ca0:	e001      	b.n	8003ca6 <HAL_I2S_Init+0x1ee>
 8003ca2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca6:	69db      	ldr	r3, [r3, #28]
 8003ca8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb2:	d003      	beq.n	8003cbc <HAL_I2S_Init+0x204>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d103      	bne.n	8003cc4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	e001      	b.n	8003cc8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cf4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a0d      	ldr	r2, [pc, #52]	; (8003d30 <HAL_I2S_Init+0x278>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_I2S_Init+0x24c>
 8003d00:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <HAL_I2S_Init+0x27c>)
 8003d02:	e001      	b.n	8003d08 <HAL_I2S_Init+0x250>
 8003d04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d08:	897a      	ldrh	r2, [r7, #10]
 8003d0a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	08003e2f 	.word	0x08003e2f
 8003d28:	cccccccd 	.word	0xcccccccd
 8003d2c:	08003f45 	.word	0x08003f45
 8003d30:	40003800 	.word	0x40003800
 8003d34:	40003400 	.word	0x40003400

08003d38 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	881a      	ldrh	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10e      	bne.n	8003dc8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003db8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff ffb8 	bl	8003d38 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	b292      	uxth	r2, r2
 8003de4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	1c9a      	adds	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b29a      	uxth	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10e      	bne.n	8003e26 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e16:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ff93 	bl	8003d4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b086      	sub	sp, #24
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d13a      	bne.n	8003ec0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d109      	bne.n	8003e68 <I2S_IRQHandler+0x3a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d102      	bne.n	8003e68 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ffb4 	bl	8003dd0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d126      	bne.n	8003ec0 <I2S_IRQHandler+0x92>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d11f      	bne.n	8003ec0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	613b      	str	r3, [r7, #16]
 8003ea4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff ff50 	bl	8003d60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d136      	bne.n	8003f3a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d109      	bne.n	8003eea <I2S_IRQHandler+0xbc>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee0:	2b80      	cmp	r3, #128	; 0x80
 8003ee2:	d102      	bne.n	8003eea <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7ff ff45 	bl	8003d74 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d122      	bne.n	8003f3a <I2S_IRQHandler+0x10c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b20      	cmp	r3, #32
 8003f00:	d11b      	bne.n	8003f3a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f10:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f12:	2300      	movs	r3, #0
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	f043 0204 	orr.w	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f7ff ff13 	bl	8003d60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a92      	ldr	r2, [pc, #584]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f5e:	4b92      	ldr	r3, [pc, #584]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a8b      	ldr	r2, [pc, #556]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f7c:	4b8a      	ldr	r3, [pc, #552]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f7e:	e001      	b.n	8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f90:	d004      	beq.n	8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 8099 	bne.w	80040ce <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d107      	bne.n	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f925 	bl	8004200 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d107      	bne.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d002      	beq.n	8003fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f9c8 	bl	8004360 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd6:	2b40      	cmp	r3, #64	; 0x40
 8003fd8:	d13a      	bne.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d035      	beq.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6e      	ldr	r2, [pc, #440]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003fee:	4b6e      	ldr	r3, [pc, #440]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ff0:	e001      	b.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ff2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4969      	ldr	r1, [pc, #420]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ffe:	428b      	cmp	r3, r1
 8004000:	d101      	bne.n	8004006 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004002:	4b69      	ldr	r3, [pc, #420]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004004:	e001      	b.n	800400a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800400a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800400e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800401e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	f043 0202 	orr.w	r2, r3, #2
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fe88 	bl	8003d60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b08      	cmp	r3, #8
 8004058:	f040 80c3 	bne.w	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 80bd 	beq.w	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004076:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a49      	ldr	r2, [pc, #292]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004082:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004084:	e001      	b.n	800408a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004086:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4944      	ldr	r1, [pc, #272]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004092:	428b      	cmp	r3, r1
 8004094:	d101      	bne.n	800409a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004096:	4b44      	ldr	r3, [pc, #272]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004098:	e001      	b.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800409a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800409e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040a2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040a4:	2300      	movs	r3, #0
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]
 80040b0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	f043 0204 	orr.w	r2, r3, #4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff fe4a 	bl	8003d60 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040cc:	e089      	b.n	80041e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d107      	bne.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8be 	bl	8004264 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d107      	bne.n	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f8fd 	bl	80042fc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b40      	cmp	r3, #64	; 0x40
 800410a:	d12f      	bne.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02a      	beq.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004124:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d101      	bne.n	8004134 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004132:	e001      	b.n	8004138 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4919      	ldr	r1, [pc, #100]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004140:	428b      	cmp	r3, r1
 8004142:	d101      	bne.n	8004148 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004146:	e001      	b.n	800414c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004148:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800414c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004150:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f043 0202 	orr.w	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7ff fdfa 	bl	8003d60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b08      	cmp	r3, #8
 8004174:	d136      	bne.n	80041e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d031      	beq.n	80041e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a07      	ldr	r2, [pc, #28]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d101      	bne.n	800418e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800418c:	e001      	b.n	8004192 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800418e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4902      	ldr	r1, [pc, #8]	; (80041a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800419a:	428b      	cmp	r3, r1
 800419c:	d106      	bne.n	80041ac <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800419e:	4b02      	ldr	r3, [pc, #8]	; (80041a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041a0:	e006      	b.n	80041b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80041a2:	bf00      	nop
 80041a4:	40003800 	.word	0x40003800
 80041a8:	40003400 	.word	0x40003400
 80041ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041b4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041c4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d2:	f043 0204 	orr.w	r2, r3, #4
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fdc0 	bl	8003d60 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e0:	e000      	b.n	80041e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041e2:	bf00      	nop
}
 80041e4:	bf00      	nop
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	1c99      	adds	r1, r3, #2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6251      	str	r1, [r2, #36]	; 0x24
 8004212:	881a      	ldrh	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d113      	bne.n	800425a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004240:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d106      	bne.n	800425a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ffc9 	bl	80041ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	1c99      	adds	r1, r3, #2
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	6251      	str	r1, [r2, #36]	; 0x24
 8004276:	8819      	ldrh	r1, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <I2SEx_TxISR_I2SExt+0x90>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <I2SEx_TxISR_I2SExt+0x22>
 8004282:	4b1d      	ldr	r3, [pc, #116]	; (80042f8 <I2SEx_TxISR_I2SExt+0x94>)
 8004284:	e001      	b.n	800428a <I2SEx_TxISR_I2SExt+0x26>
 8004286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800428a:	460a      	mov	r2, r1
 800428c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d121      	bne.n	80042ea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a12      	ldr	r2, [pc, #72]	; (80042f4 <I2SEx_TxISR_I2SExt+0x90>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d101      	bne.n	80042b4 <I2SEx_TxISR_I2SExt+0x50>
 80042b0:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <I2SEx_TxISR_I2SExt+0x94>)
 80042b2:	e001      	b.n	80042b8 <I2SEx_TxISR_I2SExt+0x54>
 80042b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	490d      	ldr	r1, [pc, #52]	; (80042f4 <I2SEx_TxISR_I2SExt+0x90>)
 80042c0:	428b      	cmp	r3, r1
 80042c2:	d101      	bne.n	80042c8 <I2SEx_TxISR_I2SExt+0x64>
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <I2SEx_TxISR_I2SExt+0x94>)
 80042c6:	e001      	b.n	80042cc <I2SEx_TxISR_I2SExt+0x68>
 80042c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d106      	bne.n	80042ea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff81 	bl	80041ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40003800 	.word	0x40003800
 80042f8:	40003400 	.word	0x40003400

080042fc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68d8      	ldr	r0, [r3, #12]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430e:	1c99      	adds	r1, r3, #2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004314:	b282      	uxth	r2, r0
 8004316:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d113      	bne.n	8004358 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800433e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7ff ff4a 	bl	80041ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <I2SEx_RxISR_I2SExt+0x90>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <I2SEx_RxISR_I2SExt+0x16>
 8004372:	4b20      	ldr	r3, [pc, #128]	; (80043f4 <I2SEx_RxISR_I2SExt+0x94>)
 8004374:	e001      	b.n	800437a <I2SEx_RxISR_I2SExt+0x1a>
 8004376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800437a:	68d8      	ldr	r0, [r3, #12]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	1c99      	adds	r1, r3, #2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004386:	b282      	uxth	r2, r0
 8004388:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800438e:	b29b      	uxth	r3, r3
 8004390:	3b01      	subs	r3, #1
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d121      	bne.n	80043e6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <I2SEx_RxISR_I2SExt+0x90>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d101      	bne.n	80043b0 <I2SEx_RxISR_I2SExt+0x50>
 80043ac:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <I2SEx_RxISR_I2SExt+0x94>)
 80043ae:	e001      	b.n	80043b4 <I2SEx_RxISR_I2SExt+0x54>
 80043b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	490d      	ldr	r1, [pc, #52]	; (80043f0 <I2SEx_RxISR_I2SExt+0x90>)
 80043bc:	428b      	cmp	r3, r1
 80043be:	d101      	bne.n	80043c4 <I2SEx_RxISR_I2SExt+0x64>
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <I2SEx_RxISR_I2SExt+0x94>)
 80043c2:	e001      	b.n	80043c8 <I2SEx_RxISR_I2SExt+0x68>
 80043c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043cc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d106      	bne.n	80043e6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ff03 	bl	80041ec <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40003800 	.word	0x40003800
 80043f4:	40003400 	.word	0x40003400

080043f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e267      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0301 	and.w	r3, r3, #1
 8004412:	2b00      	cmp	r3, #0
 8004414:	d075      	beq.n	8004502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004416:	4b88      	ldr	r3, [pc, #544]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f003 030c 	and.w	r3, r3, #12
 800441e:	2b04      	cmp	r3, #4
 8004420:	d00c      	beq.n	800443c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004422:	4b85      	ldr	r3, [pc, #532]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800442a:	2b08      	cmp	r3, #8
 800442c:	d112      	bne.n	8004454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800442e:	4b82      	ldr	r3, [pc, #520]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800443a:	d10b      	bne.n	8004454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	4b7e      	ldr	r3, [pc, #504]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d05b      	beq.n	8004500 <HAL_RCC_OscConfig+0x108>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d157      	bne.n	8004500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e242      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445c:	d106      	bne.n	800446c <HAL_RCC_OscConfig+0x74>
 800445e:	4b76      	ldr	r3, [pc, #472]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a75      	ldr	r2, [pc, #468]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e01d      	b.n	80044a8 <HAL_RCC_OscConfig+0xb0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x98>
 8004476:	4b70      	ldr	r3, [pc, #448]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6f      	ldr	r2, [pc, #444]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 800447c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	4b6d      	ldr	r3, [pc, #436]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a6c      	ldr	r2, [pc, #432]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0xb0>
 8004490:	4b69      	ldr	r3, [pc, #420]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a68      	ldr	r2, [pc, #416]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b66      	ldr	r3, [pc, #408]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 80044a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b0:	f7fd fabc 	bl	8001a2c <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	e008      	b.n	80044ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b8:	f7fd fab8 	bl	8001a2c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b64      	cmp	r3, #100	; 0x64
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e207      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	4b5b      	ldr	r3, [pc, #364]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0xc0>
 80044d6:	e014      	b.n	8004502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d8:	f7fd faa8 	bl	8001a2c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e0:	f7fd faa4 	bl	8001a2c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b64      	cmp	r3, #100	; 0x64
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e1f3      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044f2:	4b51      	ldr	r3, [pc, #324]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0xe8>
 80044fe:	e000      	b.n	8004502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d063      	beq.n	80045d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800450e:	4b4a      	ldr	r3, [pc, #296]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800451a:	4b47      	ldr	r3, [pc, #284]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004522:	2b08      	cmp	r3, #8
 8004524:	d11c      	bne.n	8004560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004526:	4b44      	ldr	r3, [pc, #272]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d116      	bne.n	8004560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	4b41      	ldr	r3, [pc, #260]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_RCC_OscConfig+0x152>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d001      	beq.n	800454a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e1c7      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454a:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4937      	ldr	r1, [pc, #220]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455e:	e03a      	b.n	80045d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d020      	beq.n	80045aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004568:	4b34      	ldr	r3, [pc, #208]	; (800463c <HAL_RCC_OscConfig+0x244>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456e:	f7fd fa5d 	bl	8001a2c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004576:	f7fd fa59 	bl	8001a2c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e1a8      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004594:	4b28      	ldr	r3, [pc, #160]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	4925      	ldr	r1, [pc, #148]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	600b      	str	r3, [r1, #0]
 80045a8:	e015      	b.n	80045d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_RCC_OscConfig+0x244>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b0:	f7fd fa3c 	bl	8001a2c <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b8:	f7fd fa38 	bl	8001a2c <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e187      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1f0      	bne.n	80045b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d036      	beq.n	8004650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d016      	beq.n	8004618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ea:	4b15      	ldr	r3, [pc, #84]	; (8004640 <HAL_RCC_OscConfig+0x248>)
 80045ec:	2201      	movs	r2, #1
 80045ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fd fa1c 	bl	8001a2c <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f8:	f7fd fa18 	bl	8001a2c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e167      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800460a:	4b0b      	ldr	r3, [pc, #44]	; (8004638 <HAL_RCC_OscConfig+0x240>)
 800460c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0x200>
 8004616:	e01b      	b.n	8004650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <HAL_RCC_OscConfig+0x248>)
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461e:	f7fd fa05 	bl	8001a2c <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004624:	e00e      	b.n	8004644 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004626:	f7fd fa01 	bl	8001a2c <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d907      	bls.n	8004644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e150      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
 8004638:	40023800 	.word	0x40023800
 800463c:	42470000 	.word	0x42470000
 8004640:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	4b88      	ldr	r3, [pc, #544]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ea      	bne.n	8004626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8097 	beq.w	800478c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004662:	4b81      	ldr	r3, [pc, #516]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10f      	bne.n	800468e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60bb      	str	r3, [r7, #8]
 8004672:	4b7d      	ldr	r3, [pc, #500]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a7c      	ldr	r2, [pc, #496]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	4b77      	ldr	r3, [pc, #476]	; (800486c <HAL_RCC_OscConfig+0x474>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d118      	bne.n	80046cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800469a:	4b74      	ldr	r3, [pc, #464]	; (800486c <HAL_RCC_OscConfig+0x474>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a73      	ldr	r2, [pc, #460]	; (800486c <HAL_RCC_OscConfig+0x474>)
 80046a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a6:	f7fd f9c1 	bl	8001a2c <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ae:	f7fd f9bd 	bl	8001a2c <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e10c      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	4b6a      	ldr	r3, [pc, #424]	; (800486c <HAL_RCC_OscConfig+0x474>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d106      	bne.n	80046e2 <HAL_RCC_OscConfig+0x2ea>
 80046d4:	4b64      	ldr	r3, [pc, #400]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	4a63      	ldr	r2, [pc, #396]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 80046da:	f043 0301 	orr.w	r3, r3, #1
 80046de:	6713      	str	r3, [r2, #112]	; 0x70
 80046e0:	e01c      	b.n	800471c <HAL_RCC_OscConfig+0x324>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x30c>
 80046ea:	4b5f      	ldr	r3, [pc, #380]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a5e      	ldr	r2, [pc, #376]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
 80046f6:	4b5c      	ldr	r3, [pc, #368]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	4a5b      	ldr	r2, [pc, #364]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	6713      	str	r3, [r2, #112]	; 0x70
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0x324>
 8004704:	4b58      	ldr	r3, [pc, #352]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004708:	4a57      	ldr	r2, [pc, #348]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 800470a:	f023 0301 	bic.w	r3, r3, #1
 800470e:	6713      	str	r3, [r2, #112]	; 0x70
 8004710:	4b55      	ldr	r3, [pc, #340]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	4a54      	ldr	r2, [pc, #336]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004716:	f023 0304 	bic.w	r3, r3, #4
 800471a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d015      	beq.n	8004750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004724:	f7fd f982 	bl	8001a2c <HAL_GetTick>
 8004728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472a:	e00a      	b.n	8004742 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd f97e 	bl	8001a2c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	; 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e0cb      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	4b49      	ldr	r3, [pc, #292]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0ee      	beq.n	800472c <HAL_RCC_OscConfig+0x334>
 800474e:	e014      	b.n	800477a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004750:	f7fd f96c 	bl	8001a2c <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	e00a      	b.n	800476e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004758:	f7fd f968 	bl	8001a2c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0b5      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476e:	4b3e      	ldr	r3, [pc, #248]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ee      	bne.n	8004758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800477a:	7dfb      	ldrb	r3, [r7, #23]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4b39      	ldr	r3, [pc, #228]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	4a38      	ldr	r2, [pc, #224]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004786:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800478a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 80a1 	beq.w	80048d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004796:	4b34      	ldr	r3, [pc, #208]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f003 030c 	and.w	r3, r3, #12
 800479e:	2b08      	cmp	r3, #8
 80047a0:	d05c      	beq.n	800485c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d141      	bne.n	800482e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <HAL_RCC_OscConfig+0x478>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b0:	f7fd f93c 	bl	8001a2c <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b8:	f7fd f938 	bl	8001a2c <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e087      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ca:	4b27      	ldr	r3, [pc, #156]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e4:	019b      	lsls	r3, r3, #6
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	3b01      	subs	r3, #1
 80047f0:	041b      	lsls	r3, r3, #16
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	061b      	lsls	r3, r3, #24
 80047fa:	491b      	ldr	r1, [pc, #108]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <HAL_RCC_OscConfig+0x478>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004806:	f7fd f911 	bl	8001a2c <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480e:	f7fd f90d 	bl	8001a2c <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e05c      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0f0      	beq.n	800480e <HAL_RCC_OscConfig+0x416>
 800482c:	e054      	b.n	80048d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800482e:	4b10      	ldr	r3, [pc, #64]	; (8004870 <HAL_RCC_OscConfig+0x478>)
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004834:	f7fd f8fa 	bl	8001a2c <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800483c:	f7fd f8f6 	bl	8001a2c <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e045      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_OscConfig+0x470>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x444>
 800485a:	e03d      	b.n	80048d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d107      	bne.n	8004874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e038      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
 8004868:	40023800 	.word	0x40023800
 800486c:	40007000 	.word	0x40007000
 8004870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_RCC_OscConfig+0x4ec>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d028      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d121      	bne.n	80048d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489a:	429a      	cmp	r2, r3
 800489c:	d11a      	bne.n	80048d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048a4:	4013      	ands	r3, r2
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d111      	bne.n	80048d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	085b      	lsrs	r3, r3, #1
 80048bc:	3b01      	subs	r3, #1
 80048be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d107      	bne.n	80048d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3718      	adds	r7, #24
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40023800 	.word	0x40023800

080048e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0cc      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048fc:	4b68      	ldr	r3, [pc, #416]	; (8004aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d90c      	bls.n	8004924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	b2d2      	uxtb	r2, r2
 8004910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004912:	4b63      	ldr	r3, [pc, #396]	; (8004aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0307 	and.w	r3, r3, #7
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d001      	beq.n	8004924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e0b8      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0302 	and.w	r3, r3, #2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d020      	beq.n	8004972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800493c:	4b59      	ldr	r3, [pc, #356]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4a58      	ldr	r2, [pc, #352]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004954:	4b53      	ldr	r3, [pc, #332]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	4a52      	ldr	r2, [pc, #328]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800495e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004960:	4b50      	ldr	r3, [pc, #320]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	494d      	ldr	r1, [pc, #308]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d044      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d107      	bne.n	8004996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d119      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e07f      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a6:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e06f      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b6:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e067      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049c6:	4b37      	ldr	r3, [pc, #220]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f023 0203 	bic.w	r2, r3, #3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4934      	ldr	r1, [pc, #208]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049d8:	f7fd f828 	bl	8001a2c <HAL_GetTick>
 80049dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049e0:	f7fd f824 	bl	8001a2c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e04f      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f6:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 020c 	and.w	r2, r3, #12
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d1eb      	bne.n	80049e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a08:	4b25      	ldr	r3, [pc, #148]	; (8004aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d20c      	bcs.n	8004a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e032      	b.n	8004a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d008      	beq.n	8004a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a3c:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4916      	ldr	r1, [pc, #88]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	490e      	ldr	r1, [pc, #56]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a6e:	f000 f821 	bl	8004ab4 <HAL_RCC_GetSysClockFreq>
 8004a72:	4602      	mov	r2, r0
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 030f 	and.w	r3, r3, #15
 8004a7e:	490a      	ldr	r1, [pc, #40]	; (8004aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	5ccb      	ldrb	r3, [r1, r3]
 8004a82:	fa22 f303 	lsr.w	r3, r2, r3
 8004a86:	4a09      	ldr	r2, [pc, #36]	; (8004aac <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a8a:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7fc ff88 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40023c00 	.word	0x40023c00
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	0800d0a4 	.word	0x0800d0a4
 8004aac:	20000000 	.word	0x20000000
 8004ab0:	20000004 	.word	0x20000004

08004ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab8:	b094      	sub	sp, #80	; 0x50
 8004aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	647b      	str	r3, [r7, #68]	; 0x44
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004acc:	4b79      	ldr	r3, [pc, #484]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d00d      	beq.n	8004af4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	f200 80e1 	bhi.w	8004ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d003      	beq.n	8004aee <HAL_RCC_GetSysClockFreq+0x3a>
 8004ae6:	e0db      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae8:	4b73      	ldr	r3, [pc, #460]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004aec:	e0db      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aee:	4b73      	ldr	r3, [pc, #460]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8004af0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004af2:	e0d8      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af4:	4b6f      	ldr	r3, [pc, #444]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004afc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004afe:	4b6d      	ldr	r3, [pc, #436]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d063      	beq.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0a:	4b6a      	ldr	r3, [pc, #424]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	099b      	lsrs	r3, r3, #6
 8004b10:	2200      	movs	r2, #0
 8004b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b1e:	2300      	movs	r3, #0
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
 8004b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b26:	4622      	mov	r2, r4
 8004b28:	462b      	mov	r3, r5
 8004b2a:	f04f 0000 	mov.w	r0, #0
 8004b2e:	f04f 0100 	mov.w	r1, #0
 8004b32:	0159      	lsls	r1, r3, #5
 8004b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b38:	0150      	lsls	r0, r2, #5
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4621      	mov	r1, r4
 8004b40:	1a51      	subs	r1, r2, r1
 8004b42:	6139      	str	r1, [r7, #16]
 8004b44:	4629      	mov	r1, r5
 8004b46:	eb63 0301 	sbc.w	r3, r3, r1
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b58:	4659      	mov	r1, fp
 8004b5a:	018b      	lsls	r3, r1, #6
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b62:	4651      	mov	r1, sl
 8004b64:	018a      	lsls	r2, r1, #6
 8004b66:	4651      	mov	r1, sl
 8004b68:	ebb2 0801 	subs.w	r8, r2, r1
 8004b6c:	4659      	mov	r1, fp
 8004b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b86:	4690      	mov	r8, r2
 8004b88:	4699      	mov	r9, r3
 8004b8a:	4623      	mov	r3, r4
 8004b8c:	eb18 0303 	adds.w	r3, r8, r3
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	462b      	mov	r3, r5
 8004b94:	eb49 0303 	adc.w	r3, r9, r3
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	024b      	lsls	r3, r1, #9
 8004baa:	4621      	mov	r1, r4
 8004bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	024a      	lsls	r2, r1, #9
 8004bb4:	4610      	mov	r0, r2
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bba:	2200      	movs	r2, #0
 8004bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bc4:	f7fc f860 	bl	8000c88 <__aeabi_uldivmod>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4613      	mov	r3, r2
 8004bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd0:	e058      	b.n	8004c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bd2:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	099b      	lsrs	r3, r3, #6
 8004bd8:	2200      	movs	r2, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	4611      	mov	r1, r2
 8004bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004be2:	623b      	str	r3, [r7, #32]
 8004be4:	2300      	movs	r3, #0
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
 8004be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bec:	4642      	mov	r2, r8
 8004bee:	464b      	mov	r3, r9
 8004bf0:	f04f 0000 	mov.w	r0, #0
 8004bf4:	f04f 0100 	mov.w	r1, #0
 8004bf8:	0159      	lsls	r1, r3, #5
 8004bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bfe:	0150      	lsls	r0, r2, #5
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4641      	mov	r1, r8
 8004c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c0a:	4649      	mov	r1, r9
 8004c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	f04f 0300 	mov.w	r3, #0
 8004c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c24:	ebb2 040a 	subs.w	r4, r2, sl
 8004c28:	eb63 050b 	sbc.w	r5, r3, fp
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	00eb      	lsls	r3, r5, #3
 8004c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c3a:	00e2      	lsls	r2, r4, #3
 8004c3c:	4614      	mov	r4, r2
 8004c3e:	461d      	mov	r5, r3
 8004c40:	4643      	mov	r3, r8
 8004c42:	18e3      	adds	r3, r4, r3
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	464b      	mov	r3, r9
 8004c48:	eb45 0303 	adc.w	r3, r5, r3
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	028b      	lsls	r3, r1, #10
 8004c5e:	4621      	mov	r1, r4
 8004c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c64:	4621      	mov	r1, r4
 8004c66:	028a      	lsls	r2, r1, #10
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6e:	2200      	movs	r2, #0
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	61fa      	str	r2, [r7, #28]
 8004c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c78:	f7fc f806 	bl	8000c88 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4613      	mov	r3, r2
 8004c82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c84:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	3301      	adds	r3, #1
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ca2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3750      	adds	r7, #80	; 0x50
 8004cac:	46bd      	mov	sp, r7
 8004cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	00f42400 	.word	0x00f42400
 8004cbc:	007a1200 	.word	0x007a1200

08004cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc4:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	20000000 	.word	0x20000000

08004cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cdc:	f7ff fff0 	bl	8004cc0 <HAL_RCC_GetHCLKFreq>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	0a9b      	lsrs	r3, r3, #10
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	4903      	ldr	r1, [pc, #12]	; (8004cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cee:	5ccb      	ldrb	r3, [r1, r3]
 8004cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	0800d0b4 	.word	0x0800d0b4

08004d00 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d035      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d28:	4b62      	ldr	r3, [pc, #392]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2e:	f7fc fe7d 	bl	8001a2c <HAL_GetTick>
 8004d32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d34:	e008      	b.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d36:	f7fc fe79 	bl	8001a2c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e0b0      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d48:	4b5b      	ldr	r3, [pc, #364]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	019a      	lsls	r2, r3, #6
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	071b      	lsls	r3, r3, #28
 8004d60:	4955      	ldr	r1, [pc, #340]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d68:	4b52      	ldr	r3, [pc, #328]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d6e:	f7fc fe5d 	bl	8001a2c <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d76:	f7fc fe59 	bl	8001a2c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e090      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d88:	4b4b      	ldr	r3, [pc, #300]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8083 	beq.w	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	4b44      	ldr	r3, [pc, #272]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	4a43      	ldr	r2, [pc, #268]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6413      	str	r3, [r2, #64]	; 0x40
 8004db2:	4b41      	ldr	r3, [pc, #260]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a3e      	ldr	r2, [pc, #248]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dca:	f7fc fe2f 	bl	8001a2c <HAL_GetTick>
 8004dce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dd2:	f7fc fe2b 	bl	8001a2c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e062      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004de4:	4b35      	ldr	r3, [pc, #212]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004df0:	4b31      	ldr	r3, [pc, #196]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02f      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d028      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e0e:	4b2a      	ldr	r3, [pc, #168]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e18:	4b29      	ldr	r3, [pc, #164]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1e:	4b28      	ldr	r3, [pc, #160]	; (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e24:	4a24      	ldr	r2, [pc, #144]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e2a:	4b23      	ldr	r3, [pc, #140]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d114      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e36:	f7fc fdf9 	bl	8001a2c <HAL_GetTick>
 8004e3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	e00a      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3e:	f7fc fdf5 	bl	8001a2c <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e02a      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e54:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d0ee      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e6c:	d10d      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e82:	490d      	ldr	r1, [pc, #52]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	608b      	str	r3, [r1, #8]
 8004e88:	e005      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e8a:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e94:	6093      	str	r3, [r2, #8]
 8004e96:	4b08      	ldr	r3, [pc, #32]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea2:	4905      	ldr	r1, [pc, #20]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	42470068 	.word	0x42470068
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40007000 	.word	0x40007000
 8004ec0:	42470e40 	.word	0x42470e40

08004ec4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d13e      	bne.n	8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ee2:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d12f      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ef8:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004efa:	617b      	str	r3, [r7, #20]
          break;
 8004efc:	e02f      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004efe:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f0a:	d108      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f0c:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f14:	4a18      	ldr	r2, [pc, #96]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f1a:	613b      	str	r3, [r7, #16]
 8004f1c:	e007      	b.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f1e:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f26:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f34:	099b      	lsrs	r3, r3, #6
 8004f36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	fb02 f303 	mul.w	r3, r2, r3
 8004f40:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f42:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f48:	0f1b      	lsrs	r3, r3, #28
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	617b      	str	r3, [r7, #20]
          break;
 8004f56:	e002      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]
          break;
 8004f5c:	bf00      	nop
        }
      }
      break;
 8004f5e:	bf00      	nop
    }
  }
  return frequency;
 8004f60:	697b      	ldr	r3, [r7, #20]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40023800 	.word	0x40023800
 8004f74:	00bb8000 	.word	0x00bb8000
 8004f78:	007a1200 	.word	0x007a1200
 8004f7c:	00f42400 	.word	0x00f42400

08004f80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e07b      	b.n	800508a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d108      	bne.n	8004fac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa2:	d009      	beq.n	8004fb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	61da      	str	r2, [r3, #28]
 8004faa:	e005      	b.n	8004fb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fb62 	bl	800169c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503c:	ea42 0103 	orr.w	r1, r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	0c1b      	lsrs	r3, r3, #16
 8005056:	f003 0104 	and.w	r1, r3, #4
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f003 0210 	and.w	r2, r3, #16
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69da      	ldr	r2, [r3, #28]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005078:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005092:	b084      	sub	sp, #16
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	f107 001c 	add.w	r0, r7, #28
 80050a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d122      	bne.n	80050f0 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80050be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d105      	bne.n	80050e4 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f9bf 	bl	8005468 <USB_CoreReset>
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]
 80050ee:	e01a      	b.n	8005126 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f9b3 	bl	8005468 <USB_CoreReset>
 8005102:	4603      	mov	r3, r0
 8005104:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d106      	bne.n	800511a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	639a      	str	r2, [r3, #56]	; 0x38
 8005118:	e005      	b.n	8005126 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	2b01      	cmp	r3, #1
 800512a:	d10b      	bne.n	8005144 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f043 0206 	orr.w	r2, r3, #6
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f043 0220 	orr.w	r2, r3, #32
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005150:	b004      	add	sp, #16
 8005152:	4770      	bx	lr

08005154 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f023 0201 	bic.w	r2, r3, #1
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d115      	bne.n	80051e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051c6:	2001      	movs	r0, #1
 80051c8:	f7fc fc3c 	bl	8001a44 <HAL_Delay>
      ms++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f939 	bl	800544a <USB_GetMode>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d01e      	beq.n	800521c <USB_SetCurrentMode+0x84>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b31      	cmp	r3, #49	; 0x31
 80051e2:	d9f0      	bls.n	80051c6 <USB_SetCurrentMode+0x2e>
 80051e4:	e01a      	b.n	800521c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051e6:	78fb      	ldrb	r3, [r7, #3]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d115      	bne.n	8005218 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f7fc fc23 	bl	8001a44 <HAL_Delay>
      ms++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f920 	bl	800544a <USB_GetMode>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d005      	beq.n	800521c <USB_SetCurrentMode+0x84>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b31      	cmp	r3, #49	; 0x31
 8005214:	d9f0      	bls.n	80051f8 <USB_SetCurrentMode+0x60>
 8005216:	e001      	b.n	800521c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e005      	b.n	8005228 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b32      	cmp	r3, #50	; 0x32
 8005220:	d101      	bne.n	8005226 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3301      	adds	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a13      	ldr	r2, [pc, #76]	; (8005294 <USB_FlushTxFifo+0x64>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e01b      	b.n	8005288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	daf2      	bge.n	800523e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	019b      	lsls	r3, r3, #6
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4a08      	ldr	r2, [pc, #32]	; (8005294 <USB_FlushTxFifo+0x64>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e006      	b.n	8005288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b20      	cmp	r3, #32
 8005284:	d0f0      	beq.n	8005268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3714      	adds	r7, #20
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	00030d40 	.word	0x00030d40

08005298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a11      	ldr	r2, [pc, #68]	; (80052f4 <USB_FlushRxFifo+0x5c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d901      	bls.n	80052b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e018      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	daf2      	bge.n	80052a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2210      	movs	r2, #16
 80052c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	3301      	adds	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <USB_FlushRxFifo+0x5c>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d901      	bls.n	80052da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e006      	b.n	80052e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d0f0      	beq.n	80052c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	00030d40 	.word	0x00030d40

080052f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b089      	sub	sp, #36	; 0x24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	460b      	mov	r3, r1
 8005308:	71fb      	strb	r3, [r7, #7]
 800530a:	4613      	mov	r3, r2
 800530c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005316:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d123      	bne.n	8005366 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800531e:	88bb      	ldrh	r3, [r7, #4]
 8005320:	3303      	adds	r3, #3
 8005322:	089b      	lsrs	r3, r3, #2
 8005324:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005326:	2300      	movs	r3, #0
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	e018      	b.n	800535e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	031a      	lsls	r2, r3, #12
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005338:	461a      	mov	r2, r3
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	3301      	adds	r3, #1
 8005344:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	3301      	adds	r3, #1
 800534a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	3301      	adds	r3, #1
 8005350:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	3301      	adds	r3, #1
 8005356:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	3301      	adds	r3, #1
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d3e2      	bcc.n	800532c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3724      	adds	r7, #36	; 0x24
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005374:	b480      	push	{r7}
 8005376:	b08b      	sub	sp, #44	; 0x2c
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	4613      	mov	r3, r2
 8005380:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800538a:	88fb      	ldrh	r3, [r7, #6]
 800538c:	089b      	lsrs	r3, r3, #2
 800538e:	b29b      	uxth	r3, r3
 8005390:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800539a:	2300      	movs	r3, #0
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	e014      	b.n	80053ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80053ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ae:	3301      	adds	r3, #1
 80053b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	3301      	adds	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	3301      	adds	r3, #1
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	3301      	adds	r3, #1
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	3301      	adds	r3, #1
 80053c8:	623b      	str	r3, [r7, #32]
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d3e6      	bcc.n	80053a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053d2:	8bfb      	ldrh	r3, [r7, #30]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01e      	beq.n	8005416 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e2:	461a      	mov	r2, r3
 80053e4:	f107 0310 	add.w	r3, r7, #16
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	701a      	strb	r2, [r3, #0]
      i++;
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	3301      	adds	r3, #1
 8005402:	623b      	str	r3, [r7, #32]
      pDest++;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	3301      	adds	r3, #1
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800540a:	8bfb      	ldrh	r3, [r7, #30]
 800540c:	3b01      	subs	r3, #1
 800540e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005410:	8bfb      	ldrh	r3, [r7, #30]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1ea      	bne.n	80053ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005418:	4618      	mov	r0, r3
 800541a:	372c      	adds	r7, #44	; 0x2c
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4013      	ands	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800543c:	68fb      	ldr	r3, [r7, #12]
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b083      	sub	sp, #12
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0301 	and.w	r3, r3, #1
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a13      	ldr	r2, [pc, #76]	; (80054cc <USB_CoreReset+0x64>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e01b      	b.n	80054be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	daf2      	bge.n	8005474 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f043 0201 	orr.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4a09      	ldr	r2, [pc, #36]	; (80054cc <USB_CoreReset+0x64>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d901      	bls.n	80054b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e006      	b.n	80054be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d0f0      	beq.n	800549e <USB_CoreReset+0x36>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	00030d40 	.word	0x00030d40

080054d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d0:	b084      	sub	sp, #16
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b086      	sub	sp, #24
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054f0:	461a      	mov	r2, r3
 80054f2:	2300      	movs	r3, #0
 80054f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d018      	beq.n	8005558 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d10a      	bne.n	8005542 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800553a:	f043 0304 	orr.w	r3, r3, #4
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	e014      	b.n	800556c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005550:	f023 0304 	bic.w	r3, r3, #4
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e009      	b.n	800556c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005566:	f023 0304 	bic.w	r3, r3, #4
 800556a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800556c:	2110      	movs	r1, #16
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f7ff fe5e 	bl	8005230 <USB_FlushTxFifo>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff fe8a 	bl	8005298 <USB_FlushRxFifo>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	e015      	b.n	80055c0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a0:	461a      	mov	r2, r3
 80055a2:	f04f 33ff 	mov.w	r3, #4294967295
 80055a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b4:	461a      	mov	r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	3301      	adds	r3, #1
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d3e5      	bcc.n	8005594 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f04f 32ff 	mov.w	r2, #4294967295
 80055d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a13      	ldr	r2, [pc, #76]	; (800563c <USB_HostInit+0x16c>)
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a13      	ldr	r2, [pc, #76]	; (8005640 <USB_HostInit+0x170>)
 80055f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80055f8:	e009      	b.n	800560e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2280      	movs	r2, #128	; 0x80
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a10      	ldr	r2, [pc, #64]	; (8005644 <USB_HostInit+0x174>)
 8005604:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a0f      	ldr	r2, [pc, #60]	; (8005648 <USB_HostInit+0x178>)
 800560a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	f043 0210 	orr.w	r2, r3, #16
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699a      	ldr	r2, [r3, #24]
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <USB_HostInit+0x17c>)
 8005626:	4313      	orrs	r3, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800562c:	7dfb      	ldrb	r3, [r7, #23]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005638:	b004      	add	sp, #16
 800563a:	4770      	bx	lr
 800563c:	01000200 	.word	0x01000200
 8005640:	00e00300 	.word	0x00e00300
 8005644:	00600080 	.word	0x00600080
 8005648:	004000e0 	.word	0x004000e0
 800564c:	a3200008 	.word	0xa3200008

08005650 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	f003 0303 	and.w	r3, r3, #3
 8005682:	68f9      	ldr	r1, [r7, #12]
 8005684:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005688:	4313      	orrs	r3, r2
 800568a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d107      	bne.n	80056a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005698:	461a      	mov	r2, r3
 800569a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800569e:	6053      	str	r3, [r2, #4]
 80056a0:	e009      	b.n	80056b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80056a2:	78fb      	ldrb	r3, [r7, #3]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d106      	bne.n	80056b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056ae:	461a      	mov	r2, r3
 80056b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80056b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80056f4:	2064      	movs	r0, #100	; 0x64
 80056f6:	f7fc f9a5 	bl	8001a44 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005702:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005706:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005708:	200a      	movs	r0, #10
 800570a:	f7fc f99b 	bl	8001a44 <HAL_Delay>

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800573c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d109      	bne.n	800575c <USB_DriveVbus+0x44>
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d106      	bne.n	800575c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005756:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800575a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005766:	d109      	bne.n	800577c <USB_DriveVbus+0x64>
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800577a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	0c5b      	lsrs	r3, r3, #17
 80057a8:	f003 0303 	and.w	r3, r3, #3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	b29b      	uxth	r3, r3
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4603      	mov	r3, r0
 80057ec:	70fb      	strb	r3, [r7, #3]
 80057ee:	460b      	mov	r3, r1
 80057f0:	70bb      	strb	r3, [r7, #2]
 80057f2:	4613      	mov	r3, r2
 80057f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	461a      	mov	r2, r3
 800580c:	f04f 33ff 	mov.w	r3, #4294967295
 8005810:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005812:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005816:	2b03      	cmp	r3, #3
 8005818:	d87e      	bhi.n	8005918 <USB_HC_Init+0x13c>
 800581a:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <USB_HC_Init+0x44>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005831 	.word	0x08005831
 8005824:	080058db 	.word	0x080058db
 8005828:	08005831 	.word	0x08005831
 800582c:	0800589d 	.word	0x0800589d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4413      	add	r3, r2
 8005838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583c:	461a      	mov	r2, r3
 800583e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005842:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005844:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005848:	2b00      	cmp	r3, #0
 800584a:	da10      	bge.n	800586e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	78fa      	ldrb	r2, [r7, #3]
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	440a      	add	r2, r1
 8005862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800586a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800586c:	e057      	b.n	800591e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005876:	2b00      	cmp	r3, #0
 8005878:	d051      	beq.n	800591e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800587a:	78fb      	ldrb	r3, [r7, #3]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	78fa      	ldrb	r2, [r7, #3]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	440a      	add	r2, r1
 8005890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005894:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005898:	60d3      	str	r3, [r2, #12]
      break;
 800589a:	e040      	b.n	800591e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800589c:	78fb      	ldrb	r3, [r7, #3]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058a8:	461a      	mov	r2, r3
 80058aa:	f240 639d 	movw	r3, #1693	; 0x69d
 80058ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	da34      	bge.n	8005922 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80058b8:	78fb      	ldrb	r3, [r7, #3]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	78fa      	ldrb	r2, [r7, #3]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80058d8:	e023      	b.n	8005922 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e6:	461a      	mov	r2, r3
 80058e8:	f240 2325 	movw	r3, #549	; 0x225
 80058ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	da17      	bge.n	8005926 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	440a      	add	r2, r1
 800590c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005910:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005914:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005916:	e006      	b.n	8005926 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	77fb      	strb	r3, [r7, #31]
      break;
 800591c:	e004      	b.n	8005928 <USB_HC_Init+0x14c>
      break;
 800591e:	bf00      	nop
 8005920:	e002      	b.n	8005928 <USB_HC_Init+0x14c>
      break;
 8005922:	bf00      	nop
 8005924:	e000      	b.n	8005928 <USB_HC_Init+0x14c>
      break;
 8005926:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	4413      	add	r3, r2
 8005930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	440a      	add	r2, r1
 800593e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005942:	f043 0302 	orr.w	r3, r3, #2
 8005946:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	f003 030f 	and.w	r3, r3, #15
 8005956:	2101      	movs	r1, #1
 8005958:	fa01 f303 	lsl.w	r3, r1, r3
 800595c:	6939      	ldr	r1, [r7, #16]
 800595e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005962:	4313      	orrs	r3, r2
 8005964:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005972:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005976:	2b00      	cmp	r3, #0
 8005978:	da03      	bge.n	8005982 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800597a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	e001      	b.n	8005986 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7ff feff 	bl	800578a <USB_GetHostSpeed>
 800598c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800598e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005992:	2b02      	cmp	r3, #2
 8005994:	d106      	bne.n	80059a4 <USB_HC_Init+0x1c8>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d003      	beq.n	80059a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800599c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e001      	b.n	80059a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059a8:	787b      	ldrb	r3, [r7, #1]
 80059aa:	059b      	lsls	r3, r3, #22
 80059ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059b0:	78bb      	ldrb	r3, [r7, #2]
 80059b2:	02db      	lsls	r3, r3, #11
 80059b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059be:	049b      	lsls	r3, r3, #18
 80059c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80059c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059d2:	78fb      	ldrb	r3, [r7, #3]
 80059d4:	0159      	lsls	r1, r3, #5
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	440b      	add	r3, r1
 80059da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059de:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059e4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80059e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d003      	beq.n	80059f6 <USB_HC_Init+0x21a>
 80059ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d10f      	bne.n	8005a16 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a14:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005a16:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3720      	adds	r7, #32
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08c      	sub	sp, #48	; 0x30
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a3c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d02d      	beq.n	8005aa6 <USB_HC_StartXfer+0x86>
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d129      	bne.n	8005aa6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005a52:	79fb      	ldrb	r3, [r7, #7]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d117      	bne.n	8005a88 <USB_HC_StartXfer+0x68>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	79db      	ldrb	r3, [r3, #7]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <USB_HC_StartXfer+0x48>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	79db      	ldrb	r3, [r3, #7]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d10f      	bne.n	8005a88 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	6a3a      	ldr	r2, [r7, #32]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a86:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10b      	bne.n	8005aa6 <USB_HC_StartXfer+0x86>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	795b      	ldrb	r3, [r3, #5]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d107      	bne.n	8005aa6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	785b      	ldrb	r3, [r3, #1]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fa0f 	bl	8005ec0 <USB_DoPing>
      return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e0f8      	b.n	8005c98 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d018      	beq.n	8005ae0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	8912      	ldrh	r2, [r2, #8]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	8912      	ldrh	r2, [r2, #8]
 8005abe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005ac4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005ac6:	8b7b      	ldrh	r3, [r7, #26]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d90b      	bls.n	8005ae4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005acc:	8b7b      	ldrh	r3, [r7, #26]
 8005ace:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ad0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	8912      	ldrh	r2, [r2, #8]
 8005ad6:	fb03 f202 	mul.w	r2, r3, r2
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	611a      	str	r2, [r3, #16]
 8005ade:	e001      	b.n	8005ae4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	78db      	ldrb	r3, [r3, #3]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005aec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aee:	68ba      	ldr	r2, [r7, #8]
 8005af0:	8912      	ldrh	r2, [r2, #8]
 8005af2:	fb03 f202 	mul.w	r2, r3, r2
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	e003      	b.n	8005b04 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b0e:	04d9      	lsls	r1, r3, #19
 8005b10:	4b63      	ldr	r3, [pc, #396]	; (8005ca0 <USB_HC_StartXfer+0x280>)
 8005b12:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b14:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	7a9b      	ldrb	r3, [r3, #10]
 8005b1a:	075b      	lsls	r3, r3, #29
 8005b1c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b20:	69f9      	ldr	r1, [r7, #28]
 8005b22:	0148      	lsls	r0, r1, #5
 8005b24:	6a39      	ldr	r1, [r7, #32]
 8005b26:	4401      	add	r1, r0
 8005b28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b2c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b2e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	68d9      	ldr	r1, [r3, #12]
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b46:	460a      	mov	r2, r1
 8005b48:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf0c      	ite	eq
 8005b5a:	2301      	moveq	r3, #1
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	6a3a      	ldr	r2, [r7, #32]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b7c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b80:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	7e7b      	ldrb	r3, [r7, #25]
 8005b92:	075b      	lsls	r3, r3, #29
 8005b94:	69f9      	ldr	r1, [r7, #28]
 8005b96:	0148      	lsls	r0, r1, #5
 8005b98:	6a39      	ldr	r1, [r7, #32]
 8005b9a:	4401      	add	r1, r0
 8005b9c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	78db      	ldrb	r3, [r3, #3]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d004      	beq.n	8005bce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bca:	613b      	str	r3, [r7, #16]
 8005bcc:	e003      	b.n	8005bd6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bd4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bdc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	6a3b      	ldr	r3, [r7, #32]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bea:	461a      	mov	r2, r3
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	e04e      	b.n	8005c98 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	78db      	ldrb	r3, [r3, #3]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d149      	bne.n	8005c96 <USB_HC_StartXfer+0x276>
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d045      	beq.n	8005c96 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	79db      	ldrb	r3, [r3, #7]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d830      	bhi.n	8005c74 <USB_HC_StartXfer+0x254>
 8005c12:	a201      	add	r2, pc, #4	; (adr r2, 8005c18 <USB_HC_StartXfer+0x1f8>)
 8005c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c4d 	.word	0x08005c4d
 8005c20:	08005c29 	.word	0x08005c29
 8005c24:	08005c4d 	.word	0x08005c4d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c32:	8afa      	ldrh	r2, [r7, #22]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d91c      	bls.n	8005c78 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	f043 0220 	orr.w	r2, r3, #32
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c4a:	e015      	b.n	8005c78 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	3303      	adds	r3, #3
 8005c52:	089b      	lsrs	r3, r3, #2
 8005c54:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c56:	8afa      	ldrh	r2, [r7, #22]
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d90a      	bls.n	8005c7c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c72:	e003      	b.n	8005c7c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005c74:	bf00      	nop
 8005c76:	e002      	b.n	8005c7e <USB_HC_StartXfer+0x25e>
        break;
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <USB_HC_StartXfer+0x25e>
        break;
 8005c7c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	68d9      	ldr	r1, [r3, #12]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	785a      	ldrb	r2, [r3, #1]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	9000      	str	r0, [sp, #0]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7ff fb31 	bl	80052f8 <USB_WritePacket>
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3728      	adds	r7, #40	; 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	1ff80000 	.word	0x1ff80000

08005ca4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	b29b      	uxth	r3, r3
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b089      	sub	sp, #36	; 0x24
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	0c9b      	lsrs	r3, r3, #18
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	0fdb      	lsrs	r3, r3, #31
 8005d04:	f003 0301 	and.w	r3, r3, #1
 8005d08:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d104      	bne.n	8005d20 <USB_HC_Halt+0x5a>
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	e0c8      	b.n	8005eb2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <USB_HC_Halt+0x66>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d163      	bne.n	8005df4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	69fa      	ldr	r2, [r7, #28]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d4a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f040 80ab 	bne.w	8005eb0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d133      	bne.n	8005dce <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	69fa      	ldr	r2, [r7, #28]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d84:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d86:	69bb      	ldr	r3, [r7, #24]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	69fa      	ldr	r2, [r7, #28]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005da4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3301      	adds	r3, #1
 8005daa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005db2:	d81d      	bhi.n	8005df0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dca:	d0ec      	beq.n	8005da6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dcc:	e070      	b.n	8005eb0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dee:	e05f      	b.n	8005eb0 <USB_HC_Halt+0x1ea>
            break;
 8005df0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005df2:	e05d      	b.n	8005eb0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	0151      	lsls	r1, r2, #5
 8005e06:	69fa      	ldr	r2, [r7, #28]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e12:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d133      	bne.n	8005e8c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e44:	69bb      	ldr	r3, [r7, #24]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e62:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	3301      	adds	r3, #1
 8005e68:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e70:	d81d      	bhi.n	8005eae <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e88:	d0ec      	beq.n	8005e64 <USB_HC_Halt+0x19e>
 8005e8a:	e011      	b.n	8005eb0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	e000      	b.n	8005eb0 <USB_HC_Halt+0x1ea>
          break;
 8005eae:	bf00      	nop
    }
  }

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3724      	adds	r7, #36	; 0x24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
	...

08005ec0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	04da      	lsls	r2, r3, #19
 8005edc:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <USB_DoPing+0x74>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ef0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f1e:	461a      	mov	r2, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	1ff80000 	.word	0x1ff80000

08005f38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff f912 	bl	8005176 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f52:	2110      	movs	r1, #16
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f7ff f96b 	bl	8005230 <USB_FlushTxFifo>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f7ff f997 	bl	8005298 <USB_FlushRxFifo>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f74:	2300      	movs	r3, #0
 8005f76:	61bb      	str	r3, [r7, #24]
 8005f78:	e01f      	b.n	8005fba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	015a      	lsls	r2, r3, #5
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	4413      	add	r3, r2
 8005f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fa0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fae:	461a      	mov	r2, r3
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	61bb      	str	r3, [r7, #24]
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b0f      	cmp	r3, #15
 8005fbe:	d9dc      	bls.n	8005f7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	e034      	b.n	8006030 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fdc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fe4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	3301      	adds	r3, #1
 8006004:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800600c:	d80c      	bhi.n	8006028 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	015a      	lsls	r2, r3, #5
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4413      	add	r3, r2
 8006016:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006024:	d0ec      	beq.n	8006000 <USB_StopHost+0xc8>
 8006026:	e000      	b.n	800602a <USB_StopHost+0xf2>
        break;
 8006028:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	3301      	adds	r3, #1
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b0f      	cmp	r3, #15
 8006034:	d9c7      	bls.n	8005fc6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603c:	461a      	mov	r2, r3
 800603e:	f04f 33ff 	mov.w	r3, #4294967295
 8006042:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f04f 32ff 	mov.w	r2, #4294967295
 800604a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7ff f881 	bl	8005154 <USB_EnableGlobalInt>

  return ret;
 8006052:	7ffb      	ldrb	r3, [r7, #31]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800605c:	b590      	push	{r4, r7, lr}
 800605e:	b089      	sub	sp, #36	; 0x24
 8006060:	af04      	add	r7, sp, #16
 8006062:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006064:	2301      	movs	r3, #1
 8006066:	2202      	movs	r2, #2
 8006068:	2102      	movs	r1, #2
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fc66 	bl	800693c <USBH_FindInterface>
 8006070:	4603      	mov	r3, r0
 8006072:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006074:	7bfb      	ldrb	r3, [r7, #15]
 8006076:	2bff      	cmp	r3, #255	; 0xff
 8006078:	d002      	beq.n	8006080 <USBH_CDC_InterfaceInit+0x24>
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d901      	bls.n	8006084 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006080:	2302      	movs	r3, #2
 8006082:	e13d      	b.n	8006300 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fc3b 	bl	8006904 <USBH_SelectInterface>
 800608e:	4603      	mov	r3, r0
 8006090:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006092:	7bbb      	ldrb	r3, [r7, #14]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006098:	2302      	movs	r3, #2
 800609a:	e131      	b.n	8006300 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80060a2:	2050      	movs	r0, #80	; 0x50
 80060a4:	f002 fafa 	bl	800869c <malloc>
 80060a8:	4603      	mov	r3, r0
 80060aa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80060bc:	2302      	movs	r3, #2
 80060be:	e11f      	b.n	8006300 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80060c0:	2250      	movs	r2, #80	; 0x50
 80060c2:	2100      	movs	r1, #0
 80060c4:	68b8      	ldr	r0, [r7, #8]
 80060c6:	f002 faf9 	bl	80086bc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	211a      	movs	r1, #26
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	4413      	add	r3, r2
 80060d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	b25b      	sxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	da15      	bge.n	800610e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	211a      	movs	r1, #26
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	4413      	add	r3, r2
 80060ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	211a      	movs	r1, #26
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	4413      	add	r3, r2
 8006104:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006108:	881a      	ldrh	r2, [r3, #0]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	785b      	ldrb	r3, [r3, #1]
 8006112:	4619      	mov	r1, r3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 ff2c 	bl	8007f72 <USBH_AllocPipe>
 800611a:	4603      	mov	r3, r0
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	7819      	ldrb	r1, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	7858      	ldrb	r0, [r3, #1]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	8952      	ldrh	r2, [r2, #10]
 800613a:	9202      	str	r2, [sp, #8]
 800613c:	2203      	movs	r2, #3
 800613e:	9201      	str	r2, [sp, #4]
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	4623      	mov	r3, r4
 8006144:	4602      	mov	r2, r0
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 fee4 	bl	8007f14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	2200      	movs	r2, #0
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f002 f9f3 	bl	8008540 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800615a:	2300      	movs	r3, #0
 800615c:	2200      	movs	r2, #0
 800615e:	210a      	movs	r1, #10
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 fbeb 	bl	800693c <USBH_FindInterface>
 8006166:	4603      	mov	r3, r0
 8006168:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800616a:	7bfb      	ldrb	r3, [r7, #15]
 800616c:	2bff      	cmp	r3, #255	; 0xff
 800616e:	d002      	beq.n	8006176 <USBH_CDC_InterfaceInit+0x11a>
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d901      	bls.n	800617a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006176:	2302      	movs	r3, #2
 8006178:	e0c2      	b.n	8006300 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	211a      	movs	r1, #26
 8006180:	fb01 f303 	mul.w	r3, r1, r3
 8006184:	4413      	add	r3, r2
 8006186:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b25b      	sxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	da16      	bge.n	80061c0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	211a      	movs	r1, #26
 8006198:	fb01 f303 	mul.w	r3, r1, r3
 800619c:	4413      	add	r3, r2
 800619e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	211a      	movs	r1, #26
 80061ae:	fb01 f303 	mul.w	r3, r1, r3
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061b8:	881a      	ldrh	r2, [r3, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	835a      	strh	r2, [r3, #26]
 80061be:	e015      	b.n	80061ec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	211a      	movs	r1, #26
 80061c6:	fb01 f303 	mul.w	r3, r1, r3
 80061ca:	4413      	add	r3, r2
 80061cc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061d0:	781a      	ldrb	r2, [r3, #0]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	211a      	movs	r1, #26
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061e6:	881a      	ldrh	r2, [r3, #0]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	211a      	movs	r1, #26
 80061f2:	fb01 f303 	mul.w	r3, r1, r3
 80061f6:	4413      	add	r3, r2
 80061f8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b25b      	sxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	da16      	bge.n	8006232 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	211a      	movs	r1, #26
 800620a:	fb01 f303 	mul.w	r3, r1, r3
 800620e:	4413      	add	r3, r2
 8006210:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	211a      	movs	r1, #26
 8006220:	fb01 f303 	mul.w	r3, r1, r3
 8006224:	4413      	add	r3, r2
 8006226:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	835a      	strh	r2, [r3, #26]
 8006230:	e015      	b.n	800625e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006232:	7bfb      	ldrb	r3, [r7, #15]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	211a      	movs	r1, #26
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	4413      	add	r3, r2
 800623e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006242:	781a      	ldrb	r2, [r3, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	211a      	movs	r1, #26
 800624e:	fb01 f303 	mul.w	r3, r1, r3
 8006252:	4413      	add	r3, r2
 8006254:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006258:	881a      	ldrh	r2, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	7b9b      	ldrb	r3, [r3, #14]
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fe84 	bl	8007f72 <USBH_AllocPipe>
 800626a:	4603      	mov	r3, r0
 800626c:	461a      	mov	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	7bdb      	ldrb	r3, [r3, #15]
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fe7a 	bl	8007f72 <USBH_AllocPipe>
 800627e:	4603      	mov	r3, r0
 8006280:	461a      	mov	r2, r3
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	7b59      	ldrb	r1, [r3, #13]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	7b98      	ldrb	r0, [r3, #14]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800629a:	68ba      	ldr	r2, [r7, #8]
 800629c:	8b12      	ldrh	r2, [r2, #24]
 800629e:	9202      	str	r2, [sp, #8]
 80062a0:	2202      	movs	r2, #2
 80062a2:	9201      	str	r2, [sp, #4]
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	4623      	mov	r3, r4
 80062a8:	4602      	mov	r2, r0
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fe32 	bl	8007f14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	7b19      	ldrb	r1, [r3, #12]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	7bd8      	ldrb	r0, [r3, #15]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	8b52      	ldrh	r2, [r2, #26]
 80062c8:	9202      	str	r2, [sp, #8]
 80062ca:	2202      	movs	r2, #2
 80062cc:	9201      	str	r2, [sp, #4]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	4623      	mov	r3, r4
 80062d2:	4602      	mov	r2, r0
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fe1d 	bl	8007f14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	7b5b      	ldrb	r3, [r3, #13]
 80062e6:	2200      	movs	r2, #0
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f002 f928 	bl	8008540 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	7b1b      	ldrb	r3, [r3, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	4619      	mov	r1, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f002 f921 	bl	8008540 <USBH_LL_SetToggle>

  return USBH_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	bd90      	pop	{r4, r7, pc}

08006308 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00e      	beq.n	8006340 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fe12 	bl	8007f52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f001 fe3d 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	7b1b      	ldrb	r3, [r3, #12]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00e      	beq.n	8006366 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	7b1b      	ldrb	r3, [r3, #12]
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fdff 	bl	8007f52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	7b1b      	ldrb	r3, [r3, #12]
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fe2a 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	7b5b      	ldrb	r3, [r3, #13]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	7b5b      	ldrb	r3, [r3, #13]
 8006372:	4619      	mov	r1, r3
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 fdec 	bl	8007f52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	7b5b      	ldrb	r3, [r3, #13]
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 fe17 	bl	8007fb4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00b      	beq.n	80063b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f002 f983 	bl	80086ac <free>
    phost->pActiveClass->pData = 0U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063ac:	2200      	movs	r2, #0
 80063ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3340      	adds	r3, #64	; 0x40
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f8b1 	bl	800653a <GetLineCoding>
 80063d8:	4603      	mov	r3, r0
 80063da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80063dc:	7afb      	ldrb	r3, [r7, #11]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063e8:	2102      	movs	r1, #2
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80063ee:	7afb      	ldrb	r3, [r7, #11]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006400:	2301      	movs	r3, #1
 8006402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006418:	2b04      	cmp	r3, #4
 800641a:	d877      	bhi.n	800650c <USBH_CDC_Process+0x114>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <USBH_CDC_Process+0x2c>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006439 	.word	0x08006439
 8006428:	0800643f 	.word	0x0800643f
 800642c:	0800646f 	.word	0x0800646f
 8006430:	080064e3 	.word	0x080064e3
 8006434:	080064f1 	.word	0x080064f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e06d      	b.n	800651a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f897 	bl	8006578 <SetLineCoding>
 800644a:	4603      	mov	r3, r0
 800644c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800645c:	e058      	b.n	8006510 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800645e:	7bbb      	ldrb	r3, [r7, #14]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d055      	beq.n	8006510 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2204      	movs	r2, #4
 8006468:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800646c:	e050      	b.n	8006510 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	3340      	adds	r3, #64	; 0x40
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f860 	bl	800653a <GetLineCoding>
 800647a:	4603      	mov	r3, r0
 800647c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800647e:	7bbb      	ldrb	r3, [r7, #14]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d126      	bne.n	80064d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006496:	791b      	ldrb	r3, [r3, #4]
 8006498:	429a      	cmp	r2, r3
 800649a:	d13b      	bne.n	8006514 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d133      	bne.n	8006514 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d12b      	bne.n	8006514 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d124      	bne.n	8006514 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f958 	bl	8006780 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064d0:	e020      	b.n	8006514 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d01d      	beq.n	8006514 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2204      	movs	r2, #4
 80064dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064e0:	e018      	b.n	8006514 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f867 	bl	80065b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f8da 	bl	80066a2 <CDC_ProcessReception>
      break;
 80064ee:	e014      	b.n	800651a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80064f0:	2100      	movs	r1, #0
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 ffef 	bl	80074d6 <USBH_ClrFeature>
 80064f8:	4603      	mov	r3, r0
 80064fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800650a:	e005      	b.n	8006518 <USBH_CDC_Process+0x120>

    default:
      break;
 800650c:	bf00      	nop
 800650e:	e004      	b.n	800651a <USBH_CDC_Process+0x122>
      break;
 8006510:	bf00      	nop
 8006512:	e002      	b.n	800651a <USBH_CDC_Process+0x122>
      break;
 8006514:	bf00      	nop
 8006516:	e000      	b.n	800651a <USBH_CDC_Process+0x122>
      break;
 8006518:	bf00      	nop

  }

  return status;
 800651a:	7bfb      	ldrb	r3, [r7, #15]
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	370c      	adds	r7, #12
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	22a1      	movs	r2, #161	; 0xa1
 8006548:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2221      	movs	r2, #33	; 0x21
 800654e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2207      	movs	r2, #7
 8006560:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2207      	movs	r2, #7
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fa81 	bl	8007a70 <USBH_CtlReq>
 800656e:	4603      	mov	r3, r0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2221      	movs	r2, #33	; 0x21
 8006586:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2220      	movs	r2, #32
 800658c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2207      	movs	r2, #7
 800659e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2207      	movs	r2, #7
 80065a4:	4619      	mov	r1, r3
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 fa62 	bl	8007a70 <USBH_CtlReq>
 80065ac:	4603      	mov	r3, r0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b086      	sub	sp, #24
 80065ba:	af02      	add	r7, sp, #8
 80065bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065c8:	2300      	movs	r3, #0
 80065ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d002      	beq.n	80065dc <CDC_ProcessTransmission+0x26>
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d023      	beq.n	8006622 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80065da:	e05e      	b.n	800669a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	8b12      	ldrh	r2, [r2, #24]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d90b      	bls.n	8006600 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	69d9      	ldr	r1, [r3, #28]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8b1a      	ldrh	r2, [r3, #24]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	7b5b      	ldrb	r3, [r3, #13]
 80065f4:	2001      	movs	r0, #1
 80065f6:	9000      	str	r0, [sp, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 fc48 	bl	8007e8e <USBH_BulkSendData>
 80065fe:	e00b      	b.n	8006618 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006608:	b29a      	uxth	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	7b5b      	ldrb	r3, [r3, #13]
 800660e:	2001      	movs	r0, #1
 8006610:	9000      	str	r0, [sp, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 fc3b 	bl	8007e8e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006620:	e03b      	b.n	800669a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	7b5b      	ldrb	r3, [r3, #13]
 8006626:	4619      	mov	r1, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 ff5f 	bl	80084ec <USBH_LL_GetURBState>
 800662e:	4603      	mov	r3, r0
 8006630:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d128      	bne.n	800668a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	8b12      	ldrh	r2, [r2, #24]
 8006640:	4293      	cmp	r3, r2
 8006642:	d90e      	bls.n	8006662 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	8b12      	ldrh	r2, [r2, #24]
 800664c:	1a9a      	subs	r2, r3, r2
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	8b12      	ldrh	r2, [r2, #24]
 800665a:	441a      	add	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	61da      	str	r2, [r3, #28]
 8006660:	e002      	b.n	8006668 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d004      	beq.n	800667a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006678:	e00e      	b.n	8006698 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f868 	bl	8006758 <USBH_CDC_TransmitCallback>
      break;
 8006688:	e006      	b.n	8006698 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800668a:	7afb      	ldrb	r3, [r7, #11]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d103      	bne.n	8006698 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006698:	bf00      	nop
  }
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066b4:	2300      	movs	r3, #0
 80066b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d002      	beq.n	80066c8 <CDC_ProcessReception+0x26>
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d00e      	beq.n	80066e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80066c6:	e043      	b.n	8006750 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	6a19      	ldr	r1, [r3, #32]
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	8b5a      	ldrh	r2, [r3, #26]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	7b1b      	ldrb	r3, [r3, #12]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fbff 	bl	8007ed8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2204      	movs	r2, #4
 80066de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80066e2:	e035      	b.n	8006750 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	7b1b      	ldrb	r3, [r3, #12]
 80066e8:	4619      	mov	r1, r3
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f001 fefe 	bl	80084ec <USBH_LL_GetURBState>
 80066f0:	4603      	mov	r3, r0
 80066f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80066f4:	7cfb      	ldrb	r3, [r7, #19]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d129      	bne.n	800674e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	7b1b      	ldrb	r3, [r3, #12]
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fe61 	bl	80083c8 <USBH_LL_GetLastXferSize>
 8006706:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	429a      	cmp	r2, r3
 8006710:	d016      	beq.n	8006740 <CDC_ProcessReception+0x9e>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	8b5b      	ldrh	r3, [r3, #26]
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	4293      	cmp	r3, r2
 800671c:	d910      	bls.n	8006740 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1ad2      	subs	r2, r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6a1a      	ldr	r2, [r3, #32]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	441a      	add	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2203      	movs	r2, #3
 800673a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800673e:	e006      	b.n	800674e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 f80f 	bl	800676c <USBH_CDC_ReceiveCallback>
      break;
 800674e:	bf00      	nop
  }
}
 8006750:	bf00      	nop
 8006752:	3718      	adds	r7, #24
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e029      	b.n	8006800 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	79fa      	ldrb	r2, [r7, #7]
 80067b0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f81f 	bl	8006808 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2200      	movs	r2, #0
 80067ce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f001 fd31 	bl	8008260 <USBH_LL_Init>

  return USBH_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e009      	b.n	800682e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	33e0      	adds	r3, #224	; 0xe0
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	2200      	movs	r2, #0
 8006826:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b0f      	cmp	r3, #15
 8006832:	d9f2      	bls.n	800681a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	e009      	b.n	800684e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006844:	2200      	movs	r2, #0
 8006846:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3301      	adds	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006854:	d3f1      	bcc.n	800683a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2240      	movs	r2, #64	; 0x40
 800687a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2200      	movs	r2, #0
 8006886:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d016      	beq.n	80068f2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10e      	bne.n	80068ec <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068d4:	1c59      	adds	r1, r3, #1
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	33de      	adds	r3, #222	; 0xde
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
 80068ea:	e004      	b.n	80068f6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80068ec:	2302      	movs	r3, #2
 80068ee:	73fb      	strb	r3, [r7, #15]
 80068f0:	e001      	b.n	80068f6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80068f2:	2302      	movs	r3, #2
 80068f4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	429a      	cmp	r2, r3
 800691e:	d204      	bcs.n	800692a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	78fa      	ldrb	r2, [r7, #3]
 8006924:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006928:	e001      	b.n	800692e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800692a:	2302      	movs	r3, #2
 800692c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4603      	mov	r3, r0
 800694c:	70fb      	strb	r3, [r7, #3]
 800694e:	460b      	mov	r3, r1
 8006950:	70bb      	strb	r3, [r7, #2]
 8006952:	4613      	mov	r3, r2
 8006954:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006964:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006966:	e025      	b.n	80069b4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006968:	7dfb      	ldrb	r3, [r7, #23]
 800696a:	221a      	movs	r2, #26
 800696c:	fb02 f303 	mul.w	r3, r2, r3
 8006970:	3308      	adds	r3, #8
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	3302      	adds	r3, #2
 8006978:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	795b      	ldrb	r3, [r3, #5]
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	429a      	cmp	r2, r3
 8006982:	d002      	beq.n	800698a <USBH_FindInterface+0x4e>
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	2bff      	cmp	r3, #255	; 0xff
 8006988:	d111      	bne.n	80069ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800698e:	78ba      	ldrb	r2, [r7, #2]
 8006990:	429a      	cmp	r2, r3
 8006992:	d002      	beq.n	800699a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006994:	78bb      	ldrb	r3, [r7, #2]
 8006996:	2bff      	cmp	r3, #255	; 0xff
 8006998:	d109      	bne.n	80069ae <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800699e:	787a      	ldrb	r2, [r7, #1]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d002      	beq.n	80069aa <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80069a4:	787b      	ldrb	r3, [r7, #1]
 80069a6:	2bff      	cmp	r3, #255	; 0xff
 80069a8:	d101      	bne.n	80069ae <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
 80069ac:	e006      	b.n	80069bc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	3301      	adds	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d9d6      	bls.n	8006968 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80069ba:	23ff      	movs	r3, #255	; 0xff
}
 80069bc:	4618      	mov	r0, r3
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f001 fc81 	bl	80082d8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80069d6:	2101      	movs	r1, #1
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f001 fd9a 	bl	8008512 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af04      	add	r7, sp, #16
 80069ee:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069f0:	2302      	movs	r3, #2
 80069f2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d102      	bne.n	8006a0a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2203      	movs	r2, #3
 8006a08:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b0b      	cmp	r3, #11
 8006a12:	f200 81be 	bhi.w	8006d92 <USBH_Process+0x3aa>
 8006a16:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <USBH_Process+0x34>)
 8006a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1c:	08006a4d 	.word	0x08006a4d
 8006a20:	08006a7f 	.word	0x08006a7f
 8006a24:	08006ae7 	.word	0x08006ae7
 8006a28:	08006d2d 	.word	0x08006d2d
 8006a2c:	08006d93 	.word	0x08006d93
 8006a30:	08006b8b 	.word	0x08006b8b
 8006a34:	08006cd3 	.word	0x08006cd3
 8006a38:	08006bc1 	.word	0x08006bc1
 8006a3c:	08006be1 	.word	0x08006be1
 8006a40:	08006c01 	.word	0x08006c01
 8006a44:	08006c45 	.word	0x08006c45
 8006a48:	08006d15 	.word	0x08006d15
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 819e 	beq.w	8006d96 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a60:	20c8      	movs	r0, #200	; 0xc8
 8006a62:	f001 fd9d 	bl	80085a0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fc93 	bl	8008392 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a7c:	e18b      	b.n	8006d96 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d107      	bne.n	8006a98 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a96:	e18d      	b.n	8006db4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa2:	d914      	bls.n	8006ace <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006aaa:	3301      	adds	r3, #1
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006aba:	2b03      	cmp	r3, #3
 8006abc:	d903      	bls.n	8006ac6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	220d      	movs	r2, #13
 8006ac2:	701a      	strb	r2, [r3, #0]
      break;
 8006ac4:	e176      	b.n	8006db4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]
      break;
 8006acc:	e172      	b.n	8006db4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ad4:	f103 020a 	add.w	r2, r3, #10
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ade:	200a      	movs	r0, #10
 8006ae0:	f001 fd5e 	bl	80085a0 <USBH_Delay>
      break;
 8006ae4:	e166      	b.n	8006db4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006af6:	2104      	movs	r1, #4
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006afc:	2064      	movs	r0, #100	; 0x64
 8006afe:	f001 fd4f 	bl	80085a0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fc1e 	bl	8008344 <USBH_LL_GetSpeed>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2205      	movs	r2, #5
 8006b16:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f001 fa29 	bl	8007f72 <USBH_AllocPipe>
 8006b20:	4603      	mov	r3, r0
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006b28:	2180      	movs	r1, #128	; 0x80
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 fa21 	bl	8007f72 <USBH_AllocPipe>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	7919      	ldrb	r1, [r3, #4]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b4c:	b292      	uxth	r2, r2
 8006b4e:	9202      	str	r2, [sp, #8]
 8006b50:	2200      	movs	r2, #0
 8006b52:	9201      	str	r2, [sp, #4]
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	4603      	mov	r3, r0
 8006b58:	2280      	movs	r2, #128	; 0x80
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 f9da 	bl	8007f14 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	7959      	ldrb	r1, [r3, #5]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b74:	b292      	uxth	r2, r2
 8006b76:	9202      	str	r2, [sp, #8]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	9201      	str	r2, [sp, #4]
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2200      	movs	r2, #0
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 f9c6 	bl	8007f14 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b88:	e114      	b.n	8006db4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f918 	bl	8006dc0 <USBH_HandleEnum>
 8006b90:	4603      	mov	r3, r0
 8006b92:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 80fe 	bne.w	8006d9a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d103      	bne.n	8006bb8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2208      	movs	r2, #8
 8006bb4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006bb6:	e0f0      	b.n	8006d9a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2207      	movs	r2, #7
 8006bbc:	701a      	strb	r2, [r3, #0]
      break;
 8006bbe:	e0ec      	b.n	8006d9a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 80e9 	beq.w	8006d9e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2208      	movs	r2, #8
 8006bdc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006bde:	e0de      	b.n	8006d9e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fc2c 	bl	8007448 <USBH_SetCfg>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f040 80d5 	bne.w	8006da2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2209      	movs	r2, #9
 8006bfc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bfe:	e0d0      	b.n	8006da2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006c0e:	2101      	movs	r1, #1
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc3c 	bl	800748e <USBH_SetFeature>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d103      	bne.n	8006c2a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	220a      	movs	r2, #10
 8006c26:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c28:	e0bd      	b.n	8006da6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	f040 80b9 	bne.w	8006da6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	220a      	movs	r2, #10
 8006c38:	701a      	strb	r2, [r3, #0]
      break;
 8006c3a:	e0b4      	b.n	8006da6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	220a      	movs	r2, #10
 8006c40:	701a      	strb	r2, [r3, #0]
      break;
 8006c42:	e0b0      	b.n	8006da6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 80ad 	beq.w	8006daa <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	e016      	b.n	8006c8c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c5e:	7bfa      	ldrb	r2, [r7, #15]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	32de      	adds	r2, #222	; 0xde
 8006c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c68:	791a      	ldrb	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d108      	bne.n	8006c86 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006c74:	7bfa      	ldrb	r2, [r7, #15]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	32de      	adds	r2, #222	; 0xde
 8006c7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006c84:	e005      	b.n	8006c92 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	73fb      	strb	r3, [r7, #15]
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0e5      	beq.n	8006c5e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d016      	beq.n	8006cca <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	4798      	blx	r3
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2206      	movs	r2, #6
 8006cb2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cba:	2103      	movs	r1, #3
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cc0:	e073      	b.n	8006daa <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	220d      	movs	r2, #13
 8006cc6:	701a      	strb	r2, [r3, #0]
      break;
 8006cc8:	e06f      	b.n	8006daa <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	220d      	movs	r2, #13
 8006cce:	701a      	strb	r2, [r3, #0]
      break;
 8006cd0:	e06b      	b.n	8006daa <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d017      	beq.n	8006d0c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d103      	bne.n	8006cfc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	220b      	movs	r2, #11
 8006cf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cfa:	e058      	b.n	8006dae <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d154      	bne.n	8006dae <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	220d      	movs	r2, #13
 8006d08:	701a      	strb	r2, [r3, #0]
      break;
 8006d0a:	e050      	b.n	8006dae <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	220d      	movs	r2, #13
 8006d10:	701a      	strb	r2, [r3, #0]
      break;
 8006d12:	e04c      	b.n	8006dae <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d049      	beq.n	8006db2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	4798      	blx	r3
      }
      break;
 8006d2a:	e042      	b.n	8006db2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fd67 	bl	8006808 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d009      	beq.n	8006d58 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d68:	2105      	movs	r1, #5
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d107      	bne.n	8006d8a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7ff fe20 	bl	80069c8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d88:	e014      	b.n	8006db4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 faa4 	bl	80082d8 <USBH_LL_Start>
      break;
 8006d90:	e010      	b.n	8006db4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d92:	bf00      	nop
 8006d94:	e00e      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006d96:	bf00      	nop
 8006d98:	e00c      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e00a      	b.n	8006db4 <USBH_Process+0x3cc>
    break;
 8006d9e:	bf00      	nop
 8006da0:	e008      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006da2:	bf00      	nop
 8006da4:	e006      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006da6:	bf00      	nop
 8006da8:	e004      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <USBH_Process+0x3cc>
      break;
 8006db2:	bf00      	nop
  }
  return USBH_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af04      	add	r7, sp, #16
 8006dc6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b07      	cmp	r3, #7
 8006dd6:	f200 81c1 	bhi.w	800715c <USBH_HandleEnum+0x39c>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <USBH_HandleEnum+0x20>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e01 	.word	0x08006e01
 8006de4:	08006ebf 	.word	0x08006ebf
 8006de8:	08006f29 	.word	0x08006f29
 8006dec:	08006fb7 	.word	0x08006fb7
 8006df0:	08007021 	.word	0x08007021
 8006df4:	08007091 	.word	0x08007091
 8006df8:	080070d7 	.word	0x080070d7
 8006dfc:	0800711d 	.word	0x0800711d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006e00:	2108      	movs	r1, #8
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa50 	bl	80072a8 <USBH_Get_DevDesc>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e0c:	7bbb      	ldrb	r3, [r7, #14]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d130      	bne.n	8006e74 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7919      	ldrb	r1, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e36:	b292      	uxth	r2, r2
 8006e38:	9202      	str	r2, [sp, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	9201      	str	r2, [sp, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4603      	mov	r3, r0
 8006e42:	2280      	movs	r2, #128	; 0x80
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f865 	bl	8007f14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	7959      	ldrb	r1, [r3, #5]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	9202      	str	r2, [sp, #8]
 8006e62:	2200      	movs	r2, #0
 8006e64:	9201      	str	r2, [sp, #4]
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f851 	bl	8007f14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e72:	e175      	b.n	8007160 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	f040 8172 	bne.w	8007160 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e82:	3301      	adds	r3, #1
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d903      	bls.n	8006e9e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	220d      	movs	r2, #13
 8006e9a:	701a      	strb	r2, [r3, #0]
      break;
 8006e9c:	e160      	b.n	8007160 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	795b      	ldrb	r3, [r3, #5]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f885 	bl	8007fb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 f87f 	bl	8007fb4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
      break;
 8006ebc:	e150      	b.n	8007160 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006ebe:	2112      	movs	r1, #18
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f9f1 	bl	80072a8 <USBH_Get_DevDesc>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d103      	bne.n	8006ed8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006ed6:	e145      	b.n	8007164 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	f040 8142 	bne.w	8007164 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d903      	bls.n	8006f02 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	220d      	movs	r2, #13
 8006efe:	701a      	strb	r2, [r3, #0]
      break;
 8006f00:	e130      	b.n	8007164 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	795b      	ldrb	r3, [r3, #5]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 f853 	bl	8007fb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	791b      	ldrb	r3, [r3, #4]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 f84d 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	701a      	strb	r2, [r3, #0]
      break;
 8006f26:	e11d      	b.n	8007164 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006f28:	2101      	movs	r1, #1
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fa68 	bl	8007400 <USBH_SetAddress>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d132      	bne.n	8006fa0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006f3a:	2002      	movs	r0, #2
 8006f3c:	f001 fb30 	bl	80085a0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2203      	movs	r2, #3
 8006f4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7919      	ldrb	r1, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f62:	b292      	uxth	r2, r2
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	9201      	str	r2, [sp, #4]
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2280      	movs	r2, #128	; 0x80
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 ffcf 	bl	8007f14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	7959      	ldrb	r1, [r3, #5]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f8a:	b292      	uxth	r2, r2
 8006f8c:	9202      	str	r2, [sp, #8]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	9201      	str	r2, [sp, #4]
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	4603      	mov	r3, r0
 8006f96:	2200      	movs	r2, #0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 ffbb 	bl	8007f14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f9e:	e0e3      	b.n	8007168 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	f040 80e0 	bne.w	8007168 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	220d      	movs	r2, #13
 8006fac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	705a      	strb	r2, [r3, #1]
      break;
 8006fb4:	e0d8      	b.n	8007168 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006fb6:	2109      	movs	r1, #9
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f99d 	bl	80072f8 <USBH_Get_CfgDesc>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d103      	bne.n	8006fd0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fce:	e0cd      	b.n	800716c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	f040 80ca 	bne.w	800716c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fde:	3301      	adds	r3, #1
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d903      	bls.n	8006ffa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	220d      	movs	r2, #13
 8006ff6:	701a      	strb	r2, [r3, #0]
      break;
 8006ff8:	e0b8      	b.n	800716c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	795b      	ldrb	r3, [r3, #5]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 ffd7 	bl	8007fb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	791b      	ldrb	r3, [r3, #4]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 ffd1 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
      break;
 800701e:	e0a5      	b.n	800716c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007026:	4619      	mov	r1, r3
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f965 	bl	80072f8 <USBH_Get_CfgDesc>
 800702e:	4603      	mov	r3, r0
 8007030:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007032:	7bbb      	ldrb	r3, [r7, #14]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d103      	bne.n	8007040 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2205      	movs	r2, #5
 800703c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800703e:	e097      	b.n	8007170 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	2b03      	cmp	r3, #3
 8007044:	f040 8094 	bne.w	8007170 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800704e:	3301      	adds	r3, #1
 8007050:	b2da      	uxtb	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800705e:	2b03      	cmp	r3, #3
 8007060:	d903      	bls.n	800706a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	220d      	movs	r2, #13
 8007066:	701a      	strb	r2, [r3, #0]
      break;
 8007068:	e082      	b.n	8007170 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	795b      	ldrb	r3, [r3, #5]
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 ff9f 	bl	8007fb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	4619      	mov	r1, r3
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 ff99 	bl	8007fb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	701a      	strb	r2, [r3, #0]
      break;
 800708e:	e06f      	b.n	8007170 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007096:	2b00      	cmp	r3, #0
 8007098:	d019      	beq.n	80070ce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80070a6:	23ff      	movs	r3, #255	; 0xff
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f949 	bl	8007340 <USBH_Get_StringDesc>
 80070ae:	4603      	mov	r3, r0
 80070b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d103      	bne.n	80070c0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2206      	movs	r2, #6
 80070bc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070be:	e059      	b.n	8007174 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d156      	bne.n	8007174 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2206      	movs	r2, #6
 80070ca:	705a      	strb	r2, [r3, #1]
      break;
 80070cc:	e052      	b.n	8007174 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2206      	movs	r2, #6
 80070d2:	705a      	strb	r2, [r3, #1]
      break;
 80070d4:	e04e      	b.n	8007174 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d019      	beq.n	8007114 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070ec:	23ff      	movs	r3, #255	; 0xff
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f926 	bl	8007340 <USBH_Get_StringDesc>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d103      	bne.n	8007106 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2207      	movs	r2, #7
 8007102:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007104:	e038      	b.n	8007178 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d135      	bne.n	8007178 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2207      	movs	r2, #7
 8007110:	705a      	strb	r2, [r3, #1]
      break;
 8007112:	e031      	b.n	8007178 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2207      	movs	r2, #7
 8007118:	705a      	strb	r2, [r3, #1]
      break;
 800711a:	e02d      	b.n	8007178 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007122:	2b00      	cmp	r3, #0
 8007124:	d017      	beq.n	8007156 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007132:	23ff      	movs	r3, #255	; 0xff
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f903 	bl	8007340 <USBH_Get_StringDesc>
 800713a:	4603      	mov	r3, r0
 800713c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007148:	e018      	b.n	800717c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	2b03      	cmp	r3, #3
 800714e:	d115      	bne.n	800717c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	73fb      	strb	r3, [r7, #15]
      break;
 8007154:	e012      	b.n	800717c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007156:	2300      	movs	r3, #0
 8007158:	73fb      	strb	r3, [r7, #15]
      break;
 800715a:	e00f      	b.n	800717c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800715c:	bf00      	nop
 800715e:	e00e      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007160:	bf00      	nop
 8007162:	e00c      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007164:	bf00      	nop
 8007166:	e00a      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007168:	bf00      	nop
 800716a:	e008      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 800716c:	bf00      	nop
 800716e:	e006      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007170:	bf00      	nop
 8007172:	e004      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007174:	bf00      	nop
 8007176:	e002      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 8007178:	bf00      	nop
 800717a:	e000      	b.n	800717e <USBH_HandleEnum+0x3be>
      break;
 800717c:	bf00      	nop
  }
  return Status;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f804 	bl	80071ca <USBH_HandleSof>
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b0b      	cmp	r3, #11
 80071da:	d10a      	bne.n	80071f2 <USBH_HandleSof+0x28>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d005      	beq.n	80071f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	4798      	blx	r3
  }
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800720a:	bf00      	nop
}
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007226:	bf00      	nop
}
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 f844 	bl	800830e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	791b      	ldrb	r3, [r3, #4]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fe91 	bl	8007fb4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	795b      	ldrb	r3, [r3, #5]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fe8b 	bl	8007fb4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80072ba:	78fb      	ldrb	r3, [r7, #3]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	4613      	mov	r3, r2
 80072c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072c6:	2100      	movs	r1, #0
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f864 	bl	8007396 <USBH_GetDescriptor>
 80072ce:	4603      	mov	r3, r0
 80072d0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f203 3026 	addw	r0, r3, #806	; 0x326
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	b292      	uxth	r2, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	f000 f918 	bl	800751e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80072ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	331c      	adds	r3, #28
 8007308:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800730a:	887b      	ldrh	r3, [r7, #2]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007314:	2100      	movs	r1, #0
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f83d 	bl	8007396 <USBH_GetDescriptor>
 800731c:	4603      	mov	r3, r0
 800731e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d107      	bne.n	8007336 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007326:	887b      	ldrh	r3, [r7, #2]
 8007328:	461a      	mov	r2, r3
 800732a:	68b9      	ldr	r1, [r7, #8]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f987 	bl	8007640 <USBH_ParseCfgDesc>
 8007332:	4603      	mov	r3, r0
 8007334:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b088      	sub	sp, #32
 8007344:	af02      	add	r7, sp, #8
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	461a      	mov	r2, r3
 800734c:	460b      	mov	r3, r1
 800734e:	72fb      	strb	r3, [r7, #11]
 8007350:	4613      	mov	r3, r2
 8007352:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007354:	7afb      	ldrb	r3, [r7, #11]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800735c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007364:	893b      	ldrh	r3, [r7, #8]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	460b      	mov	r3, r1
 800736a:	2100      	movs	r1, #0
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f812 	bl	8007396 <USBH_GetDescriptor>
 8007372:	4603      	mov	r3, r0
 8007374:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d107      	bne.n	800738c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007382:	893a      	ldrh	r2, [r7, #8]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fb24 	bl	80079d4 <USBH_ParseStringDesc>
  }

  return status;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3718      	adds	r7, #24
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	60f8      	str	r0, [r7, #12]
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	72fb      	strb	r3, [r7, #11]
 80073a4:	4613      	mov	r3, r2
 80073a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	789b      	ldrb	r3, [r3, #2]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d11c      	bne.n	80073ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2206      	movs	r2, #6
 80073c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	893a      	ldrh	r2, [r7, #8]
 80073c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80073c8:	893b      	ldrh	r3, [r7, #8]
 80073ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073d2:	d104      	bne.n	80073de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f240 4209 	movw	r2, #1033	; 0x409
 80073da:	829a      	strh	r2, [r3, #20]
 80073dc:	e002      	b.n	80073e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8b3a      	ldrh	r2, [r7, #24]
 80073e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80073ea:	8b3b      	ldrh	r3, [r7, #24]
 80073ec:	461a      	mov	r2, r3
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 fb3d 	bl	8007a70 <USBH_CtlReq>
 80073f6:	4603      	mov	r3, r0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	789b      	ldrb	r3, [r3, #2]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10f      	bne.n	8007434 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2205      	movs	r2, #5
 800741e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007420:	78fb      	ldrb	r3, [r7, #3]
 8007422:	b29a      	uxth	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007434:	2200      	movs	r2, #0
 8007436:	2100      	movs	r1, #0
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fb19 	bl	8007a70 <USBH_CtlReq>
 800743e:	4603      	mov	r3, r0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	460b      	mov	r3, r1
 8007452:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	789b      	ldrb	r3, [r3, #2]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d10e      	bne.n	800747a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2209      	movs	r2, #9
 8007466:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	887a      	ldrh	r2, [r7, #2]
 800746c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800747a:	2200      	movs	r2, #0
 800747c:	2100      	movs	r1, #0
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 faf6 	bl	8007a70 <USBH_CtlReq>
 8007484:	4603      	mov	r3, r0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	789b      	ldrb	r3, [r3, #2]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10f      	bne.n	80074c2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2203      	movs	r2, #3
 80074ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80074c2:	2200      	movs	r2, #0
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fad2 	bl	8007a70 <USBH_CtlReq>
 80074cc:	4603      	mov	r3, r0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	789b      	ldrb	r3, [r3, #2]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d10f      	bne.n	800750a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2202      	movs	r2, #2
 80074ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074fc:	78fb      	ldrb	r3, [r7, #3]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800750a:	2200      	movs	r2, #0
 800750c:	2100      	movs	r1, #0
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 faae 	bl	8007a70 <USBH_CtlReq>
 8007514:	4603      	mov	r3, r0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	4613      	mov	r3, r2
 800752a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	785a      	ldrb	r2, [r3, #1]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	3302      	adds	r3, #2
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	b29a      	uxth	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	3303      	adds	r3, #3
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	b29b      	uxth	r3, r3
 8007550:	4313      	orrs	r3, r2
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	791a      	ldrb	r2, [r3, #4]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	795a      	ldrb	r2, [r3, #5]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	799a      	ldrb	r2, [r3, #6]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	79da      	ldrb	r2, [r3, #7]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	79db      	ldrb	r3, [r3, #7]
 800757c:	2b20      	cmp	r3, #32
 800757e:	dc11      	bgt.n	80075a4 <USBH_ParseDevDesc+0x86>
 8007580:	2b08      	cmp	r3, #8
 8007582:	db16      	blt.n	80075b2 <USBH_ParseDevDesc+0x94>
 8007584:	3b08      	subs	r3, #8
 8007586:	2201      	movs	r2, #1
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf14      	ite	ne
 8007598:	2301      	movne	r3, #1
 800759a:	2300      	moveq	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d102      	bne.n	80075a8 <USBH_ParseDevDesc+0x8a>
 80075a2:	e006      	b.n	80075b2 <USBH_ParseDevDesc+0x94>
 80075a4:	2b40      	cmp	r3, #64	; 0x40
 80075a6:	d104      	bne.n	80075b2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	79da      	ldrb	r2, [r3, #7]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	71da      	strb	r2, [r3, #7]
      break;
 80075b0:	e003      	b.n	80075ba <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2240      	movs	r2, #64	; 0x40
 80075b6:	71da      	strb	r2, [r3, #7]
      break;
 80075b8:	bf00      	nop
  }

  if (length > 8U)
 80075ba:	88fb      	ldrh	r3, [r7, #6]
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d939      	bls.n	8007634 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	3308      	adds	r3, #8
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	3309      	adds	r3, #9
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4313      	orrs	r3, r2
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	330a      	adds	r3, #10
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	330b      	adds	r3, #11
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	4313      	orrs	r3, r2
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	330c      	adds	r3, #12
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	330d      	adds	r3, #13
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	b29b      	uxth	r3, r3
 800760c:	4313      	orrs	r3, r2
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	7b9a      	ldrb	r2, [r3, #14]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	7bda      	ldrb	r2, [r3, #15]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	7c1a      	ldrb	r2, [r3, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	7c5a      	ldrb	r2, [r3, #17]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	745a      	strb	r2, [r3, #17]
  }
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08c      	sub	sp, #48	; 0x30
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	4613      	mov	r3, r2
 800764c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007654:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	781a      	ldrb	r2, [r3, #0]
 8007674:	6a3b      	ldr	r3, [r7, #32]
 8007676:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	785a      	ldrb	r2, [r3, #1]
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3302      	adds	r3, #2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	b29a      	uxth	r2, r3
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	3303      	adds	r3, #3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	b29b      	uxth	r3, r3
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	b29b      	uxth	r3, r3
 8007694:	4313      	orrs	r3, r2
 8007696:	b29b      	uxth	r3, r3
 8007698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800769c:	bf28      	it	cs
 800769e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	791a      	ldrb	r2, [r3, #4]
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	795a      	ldrb	r2, [r3, #5]
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	799a      	ldrb	r2, [r3, #6]
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	79da      	ldrb	r2, [r3, #7]
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	7a1a      	ldrb	r2, [r3, #8]
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	d002      	beq.n	80076de <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	2209      	movs	r2, #9
 80076dc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	2b09      	cmp	r3, #9
 80076e2:	f240 809d 	bls.w	8007820 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80076e6:	2309      	movs	r3, #9
 80076e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076ee:	e081      	b.n	80077f4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076f0:	f107 0316 	add.w	r3, r7, #22
 80076f4:	4619      	mov	r1, r3
 80076f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f8:	f000 f99f 	bl	8007a3a <USBH_GetNextDesc>
 80076fc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	785b      	ldrb	r3, [r3, #1]
 8007702:	2b04      	cmp	r3, #4
 8007704:	d176      	bne.n	80077f4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b09      	cmp	r3, #9
 800770c:	d002      	beq.n	8007714 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007710:	2209      	movs	r2, #9
 8007712:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007718:	221a      	movs	r2, #26
 800771a:	fb02 f303 	mul.w	r3, r2, r3
 800771e:	3308      	adds	r3, #8
 8007720:	6a3a      	ldr	r2, [r7, #32]
 8007722:	4413      	add	r3, r2
 8007724:	3302      	adds	r3, #2
 8007726:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800772a:	69f8      	ldr	r0, [r7, #28]
 800772c:	f000 f87e 	bl	800782c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007730:	2300      	movs	r3, #0
 8007732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800773a:	e043      	b.n	80077c4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800773c:	f107 0316 	add.w	r3, r7, #22
 8007740:	4619      	mov	r1, r3
 8007742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007744:	f000 f979 	bl	8007a3a <USBH_GetNextDesc>
 8007748:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b05      	cmp	r3, #5
 8007750:	d138      	bne.n	80077c4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	795b      	ldrb	r3, [r3, #5]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d10f      	bne.n	800777a <USBH_ParseCfgDesc+0x13a>
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	799b      	ldrb	r3, [r3, #6]
 800775e:	2b02      	cmp	r3, #2
 8007760:	d10b      	bne.n	800777a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	79db      	ldrb	r3, [r3, #7]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10f      	bne.n	800778a <USBH_ParseCfgDesc+0x14a>
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b09      	cmp	r3, #9
 8007770:	d00b      	beq.n	800778a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	2209      	movs	r2, #9
 8007776:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007778:	e007      	b.n	800778a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b07      	cmp	r3, #7
 8007780:	d004      	beq.n	800778c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	2207      	movs	r2, #7
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e000      	b.n	800778c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800778a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800778c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007790:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007794:	3201      	adds	r2, #1
 8007796:	00d2      	lsls	r2, r2, #3
 8007798:	211a      	movs	r1, #26
 800779a:	fb01 f303 	mul.w	r3, r1, r3
 800779e:	4413      	add	r3, r2
 80077a0:	3308      	adds	r3, #8
 80077a2:	6a3a      	ldr	r2, [r7, #32]
 80077a4:	4413      	add	r3, r2
 80077a6:	3304      	adds	r3, #4
 80077a8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80077aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ac:	69b9      	ldr	r1, [r7, #24]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f86b 	bl	800788a <USBH_ParseEPDesc>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80077ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80077be:	3301      	adds	r3, #1
 80077c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	791b      	ldrb	r3, [r3, #4]
 80077c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d204      	bcs.n	80077da <USBH_ParseCfgDesc+0x19a>
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	885a      	ldrh	r2, [r3, #2]
 80077d4:	8afb      	ldrh	r3, [r7, #22]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d8b0      	bhi.n	800773c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	791b      	ldrb	r3, [r3, #4]
 80077de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d201      	bcs.n	80077ea <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e01c      	b.n	8007824 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80077ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077ee:	3301      	adds	r3, #1
 80077f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d805      	bhi.n	8007808 <USBH_ParseCfgDesc+0x1c8>
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	885a      	ldrh	r2, [r3, #2]
 8007800:	8afb      	ldrh	r3, [r7, #22]
 8007802:	429a      	cmp	r2, r3
 8007804:	f63f af74 	bhi.w	80076f0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	791b      	ldrb	r3, [r3, #4]
 800780c:	2b02      	cmp	r3, #2
 800780e:	bf28      	it	cs
 8007810:	2302      	movcs	r3, #2
 8007812:	b2db      	uxtb	r3, r3
 8007814:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007818:	429a      	cmp	r2, r3
 800781a:	d201      	bcs.n	8007820 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800781c:	2303      	movs	r3, #3
 800781e:	e001      	b.n	8007824 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007824:	4618      	mov	r0, r3
 8007826:	3730      	adds	r7, #48	; 0x30
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	785a      	ldrb	r2, [r3, #1]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	789a      	ldrb	r2, [r3, #2]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	78da      	ldrb	r2, [r3, #3]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	791a      	ldrb	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	795a      	ldrb	r2, [r3, #5]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	799a      	ldrb	r2, [r3, #6]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	79da      	ldrb	r2, [r3, #7]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	7a1a      	ldrb	r2, [r3, #8]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	721a      	strb	r2, [r3, #8]
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr

0800788a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800788a:	b480      	push	{r7}
 800788c:	b087      	sub	sp, #28
 800788e:	af00      	add	r7, sp, #0
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007896:	2300      	movs	r3, #0
 8007898:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	785a      	ldrb	r2, [r3, #1]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	789a      	ldrb	r2, [r3, #2]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	78da      	ldrb	r2, [r3, #3]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3304      	adds	r3, #4
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	3305      	adds	r3, #5
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	b29b      	uxth	r3, r3
 80078ca:	021b      	lsls	r3, r3, #8
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4313      	orrs	r3, r2
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	799a      	ldrb	r2, [r3, #6]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	889b      	ldrh	r3, [r3, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80078e6:	2303      	movs	r3, #3
 80078e8:	75fb      	strb	r3, [r7, #23]
 80078ea:	e033      	b.n	8007954 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	889b      	ldrh	r3, [r3, #4]
 80078f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078f4:	f023 0307 	bic.w	r3, r3, #7
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	889b      	ldrh	r3, [r3, #4]
 8007902:	b21a      	sxth	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	3304      	adds	r3, #4
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	b299      	uxth	r1, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3305      	adds	r3, #5
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	b29b      	uxth	r3, r3
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	b29b      	uxth	r3, r3
 8007918:	430b      	orrs	r3, r1
 800791a:	b29b      	uxth	r3, r3
 800791c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007920:	2b00      	cmp	r3, #0
 8007922:	d110      	bne.n	8007946 <USBH_ParseEPDesc+0xbc>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	3304      	adds	r3, #4
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	b299      	uxth	r1, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3305      	adds	r3, #5
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	b29b      	uxth	r3, r3
 8007938:	430b      	orrs	r3, r1
 800793a:	b29b      	uxth	r3, r3
 800793c:	b21b      	sxth	r3, r3
 800793e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007942:	b21b      	sxth	r3, r3
 8007944:	e001      	b.n	800794a <USBH_ParseEPDesc+0xc0>
 8007946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800794a:	4313      	orrs	r3, r2
 800794c:	b21b      	sxth	r3, r3
 800794e:	b29a      	uxth	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800795a:	2b00      	cmp	r3, #0
 800795c:	d116      	bne.n	800798c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	78db      	ldrb	r3, [r3, #3]
 8007962:	f003 0303 	and.w	r3, r3, #3
 8007966:	2b01      	cmp	r3, #1
 8007968:	d005      	beq.n	8007976 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	78db      	ldrb	r3, [r3, #3]
 800796e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007972:	2b03      	cmp	r3, #3
 8007974:	d127      	bne.n	80079c6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	799b      	ldrb	r3, [r3, #6]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <USBH_ParseEPDesc+0xfc>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	799b      	ldrb	r3, [r3, #6]
 8007982:	2b10      	cmp	r3, #16
 8007984:	d91f      	bls.n	80079c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007986:	2303      	movs	r3, #3
 8007988:	75fb      	strb	r3, [r7, #23]
 800798a:	e01c      	b.n	80079c6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	78db      	ldrb	r3, [r3, #3]
 8007990:	f003 0303 	and.w	r3, r3, #3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d10a      	bne.n	80079ae <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	799b      	ldrb	r3, [r3, #6]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <USBH_ParseEPDesc+0x11e>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	799b      	ldrb	r3, [r3, #6]
 80079a4:	2b10      	cmp	r3, #16
 80079a6:	d90e      	bls.n	80079c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80079a8:	2303      	movs	r3, #3
 80079aa:	75fb      	strb	r3, [r7, #23]
 80079ac:	e00b      	b.n	80079c6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	78db      	ldrb	r3, [r3, #3]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d105      	bne.n	80079c6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	799b      	ldrb	r3, [r3, #6]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80079c2:	2303      	movs	r3, #3
 80079c4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	371c      	adds	r7, #28
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	d120      	bne.n	8007a2e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	1e9a      	subs	r2, r3, #2
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	bf28      	it	cs
 80079f8:	4613      	movcs	r3, r2
 80079fa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3302      	adds	r3, #2
 8007a00:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a02:	2300      	movs	r3, #0
 8007a04:	82fb      	strh	r3, [r7, #22]
 8007a06:	e00b      	b.n	8007a20 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a08:	8afb      	ldrh	r3, [r7, #22]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	3301      	adds	r3, #1
 8007a18:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a1a:	8afb      	ldrh	r3, [r7, #22]
 8007a1c:	3302      	adds	r3, #2
 8007a1e:	82fb      	strh	r3, [r7, #22]
 8007a20:	8afa      	ldrh	r2, [r7, #22]
 8007a22:	8abb      	ldrh	r3, [r7, #20]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d3ef      	bcc.n	8007a08 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
  }
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b085      	sub	sp, #20
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	881a      	ldrh	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4413      	add	r3, r2
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a62:	68fb      	ldr	r3, [r7, #12]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	789b      	ldrb	r3, [r3, #2]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d002      	beq.n	8007a90 <USBH_CtlReq+0x20>
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d00f      	beq.n	8007aae <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007a8e:	e027      	b.n	8007ae0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	68ba      	ldr	r2, [r7, #8]
 8007a94:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	88fa      	ldrh	r2, [r7, #6]
 8007a9a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8007aac:	e018      	b.n	8007ae0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 f81c 	bl	8007aec <USBH_HandleControl>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d002      	beq.n	8007ac4 <USBH_CtlReq+0x54>
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d106      	bne.n	8007ad2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	761a      	strb	r2, [r3, #24]
      break;
 8007ad0:	e005      	b.n	8007ade <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d102      	bne.n	8007ade <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2201      	movs	r2, #1
 8007adc:	709a      	strb	r2, [r3, #2]
      break;
 8007ade:	bf00      	nop
  }
  return status;
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3718      	adds	r7, #24
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7e1b      	ldrb	r3, [r3, #24]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	2b0a      	cmp	r3, #10
 8007b04:	f200 8156 	bhi.w	8007db4 <USBH_HandleControl+0x2c8>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBH_HandleControl+0x24>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b57 	.word	0x08007b57
 8007b18:	08007bc1 	.word	0x08007bc1
 8007b1c:	08007be7 	.word	0x08007be7
 8007b20:	08007c1f 	.word	0x08007c1f
 8007b24:	08007c49 	.word	0x08007c49
 8007b28:	08007c9b 	.word	0x08007c9b
 8007b2c:	08007cbd 	.word	0x08007cbd
 8007b30:	08007cf9 	.word	0x08007cf9
 8007b34:	08007d1f 	.word	0x08007d1f
 8007b38:	08007d5d 	.word	0x08007d5d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f103 0110 	add.w	r1, r3, #16
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	795b      	ldrb	r3, [r3, #5]
 8007b46:	461a      	mov	r2, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f943 	bl	8007dd4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2202      	movs	r2, #2
 8007b52:	761a      	strb	r2, [r3, #24]
      break;
 8007b54:	e139      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fcc5 	bl	80084ec <USBH_LL_GetURBState>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d11e      	bne.n	8007baa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7c1b      	ldrb	r3, [r3, #16]
 8007b70:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b74:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	8adb      	ldrh	r3, [r3, #22]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00a      	beq.n	8007b94 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007b7e:	7b7b      	ldrb	r3, [r7, #13]
 8007b80:	2b80      	cmp	r3, #128	; 0x80
 8007b82:	d103      	bne.n	8007b8c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2203      	movs	r2, #3
 8007b88:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b8a:	e115      	b.n	8007db8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2205      	movs	r2, #5
 8007b90:	761a      	strb	r2, [r3, #24]
      break;
 8007b92:	e111      	b.n	8007db8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007b94:	7b7b      	ldrb	r3, [r7, #13]
 8007b96:	2b80      	cmp	r3, #128	; 0x80
 8007b98:	d103      	bne.n	8007ba2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2209      	movs	r2, #9
 8007b9e:	761a      	strb	r2, [r3, #24]
      break;
 8007ba0:	e10a      	b.n	8007db8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2207      	movs	r2, #7
 8007ba6:	761a      	strb	r2, [r3, #24]
      break;
 8007ba8:	e106      	b.n	8007db8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d003      	beq.n	8007bb8 <USBH_HandleControl+0xcc>
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	f040 8100 	bne.w	8007db8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	220b      	movs	r2, #11
 8007bbc:	761a      	strb	r2, [r3, #24]
      break;
 8007bbe:	e0fb      	b.n	8007db8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6899      	ldr	r1, [r3, #8]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	899a      	ldrh	r2, [r3, #12]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	791b      	ldrb	r3, [r3, #4]
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f93a 	bl	8007e52 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2204      	movs	r2, #4
 8007be2:	761a      	strb	r2, [r3, #24]
      break;
 8007be4:	e0f1      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	791b      	ldrb	r3, [r3, #4]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fc7d 	bl	80084ec <USBH_LL_GetURBState>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d102      	bne.n	8007c02 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2209      	movs	r2, #9
 8007c00:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d102      	bne.n	8007c0e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c0c:	e0d6      	b.n	8007dbc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	f040 80d3 	bne.w	8007dbc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	220b      	movs	r2, #11
 8007c1a:	761a      	strb	r2, [r3, #24]
      break;
 8007c1c:	e0ce      	b.n	8007dbc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6899      	ldr	r1, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	899a      	ldrh	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	795b      	ldrb	r3, [r3, #5]
 8007c2a:	2001      	movs	r0, #1
 8007c2c:	9000      	str	r0, [sp, #0]
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8ea 	bl	8007e08 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2206      	movs	r2, #6
 8007c44:	761a      	strb	r2, [r3, #24]
      break;
 8007c46:	e0c0      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	795b      	ldrb	r3, [r3, #5]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fc4c 	bl	80084ec <USBH_LL_GetURBState>
 8007c54:	4603      	mov	r3, r0
 8007c56:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d103      	bne.n	8007c66 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2207      	movs	r2, #7
 8007c62:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c64:	e0ac      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007c66:	7bbb      	ldrb	r3, [r7, #14]
 8007c68:	2b05      	cmp	r3, #5
 8007c6a:	d105      	bne.n	8007c78 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	220c      	movs	r2, #12
 8007c70:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c72:	2303      	movs	r3, #3
 8007c74:	73fb      	strb	r3, [r7, #15]
      break;
 8007c76:	e0a3      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d103      	bne.n	8007c86 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2205      	movs	r2, #5
 8007c82:	761a      	strb	r2, [r3, #24]
      break;
 8007c84:	e09c      	b.n	8007dc0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	f040 8099 	bne.w	8007dc0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	220b      	movs	r2, #11
 8007c92:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c94:	2302      	movs	r3, #2
 8007c96:	73fb      	strb	r3, [r7, #15]
      break;
 8007c98:	e092      	b.n	8007dc0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	791b      	ldrb	r3, [r3, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8d5 	bl	8007e52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007cae:	b29a      	uxth	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	761a      	strb	r2, [r3, #24]

      break;
 8007cba:	e086      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	791b      	ldrb	r3, [r3, #4]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fc12 	bl	80084ec <USBH_LL_GetURBState>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ccc:	7bbb      	ldrb	r3, [r7, #14]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d105      	bne.n	8007cde <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	220d      	movs	r2, #13
 8007cd6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cdc:	e072      	b.n	8007dc4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d103      	bne.n	8007cec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	220b      	movs	r2, #11
 8007ce8:	761a      	strb	r2, [r3, #24]
      break;
 8007cea:	e06b      	b.n	8007dc4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
 8007cee:	2b05      	cmp	r3, #5
 8007cf0:	d168      	bne.n	8007dc4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf6:	e065      	b.n	8007dc4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	795b      	ldrb	r3, [r3, #5]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	9200      	str	r2, [sp, #0]
 8007d00:	2200      	movs	r2, #0
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f87f 	bl	8007e08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	220a      	movs	r2, #10
 8007d1a:	761a      	strb	r2, [r3, #24]
      break;
 8007d1c:	e055      	b.n	8007dca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	795b      	ldrb	r3, [r3, #5]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fbe1 	bl	80084ec <USBH_LL_GetURBState>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d105      	bne.n	8007d40 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	220d      	movs	r2, #13
 8007d3c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d3e:	e043      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d103      	bne.n	8007d4e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2209      	movs	r2, #9
 8007d4a:	761a      	strb	r2, [r3, #24]
      break;
 8007d4c:	e03c      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d139      	bne.n	8007dc8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	220b      	movs	r2, #11
 8007d58:	761a      	strb	r2, [r3, #24]
      break;
 8007d5a:	e035      	b.n	8007dc8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7e5b      	ldrb	r3, [r3, #25]
 8007d60:	3301      	adds	r3, #1
 8007d62:	b2da      	uxtb	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	765a      	strb	r2, [r3, #25]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7e5b      	ldrb	r3, [r3, #25]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d806      	bhi.n	8007d7e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007d7c:	e025      	b.n	8007dca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d84:	2106      	movs	r1, #6
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	795b      	ldrb	r3, [r3, #5]
 8007d94:	4619      	mov	r1, r3
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f90c 	bl	8007fb4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	791b      	ldrb	r3, [r3, #4]
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f906 	bl	8007fb4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007dae:	2302      	movs	r3, #2
 8007db0:	73fb      	strb	r3, [r7, #15]
      break;
 8007db2:	e00a      	b.n	8007dca <USBH_HandleControl+0x2de>

    default:
      break;
 8007db4:	bf00      	nop
 8007db6:	e008      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007db8:	bf00      	nop
 8007dba:	e006      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e004      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <USBH_HandleControl+0x2de>
      break;
 8007dc8:	bf00      	nop
  }

  return status;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af04      	add	r7, sp, #16
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	4613      	mov	r3, r2
 8007de0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007de2:	79f9      	ldrb	r1, [r7, #7]
 8007de4:	2300      	movs	r3, #0
 8007de6:	9303      	str	r3, [sp, #12]
 8007de8:	2308      	movs	r3, #8
 8007dea:	9302      	str	r3, [sp, #8]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	2300      	movs	r3, #0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	2200      	movs	r2, #0
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fb46 	bl	800848a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af04      	add	r7, sp, #16
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4611      	mov	r1, r2
 8007e14:	461a      	mov	r2, r3
 8007e16:	460b      	mov	r3, r1
 8007e18:	80fb      	strh	r3, [r7, #6]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e2c:	7979      	ldrb	r1, [r7, #5]
 8007e2e:	7e3b      	ldrb	r3, [r7, #24]
 8007e30:	9303      	str	r3, [sp, #12]
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	9302      	str	r3, [sp, #8]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2200      	movs	r2, #0
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 fb21 	bl	800848a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b088      	sub	sp, #32
 8007e56:	af04      	add	r7, sp, #16
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	461a      	mov	r2, r3
 8007e60:	460b      	mov	r3, r1
 8007e62:	80fb      	strh	r3, [r7, #6]
 8007e64:	4613      	mov	r3, r2
 8007e66:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e68:	7979      	ldrb	r1, [r7, #5]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	9302      	str	r3, [sp, #8]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	9301      	str	r3, [sp, #4]
 8007e76:	2301      	movs	r3, #1
 8007e78:	9300      	str	r3, [sp, #0]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fb03 	bl	800848a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e84:	2300      	movs	r3, #0

}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b088      	sub	sp, #32
 8007e92:	af04      	add	r7, sp, #16
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	4611      	mov	r1, r2
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	80fb      	strh	r3, [r7, #6]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007eb2:	7979      	ldrb	r1, [r7, #5]
 8007eb4:	7e3b      	ldrb	r3, [r7, #24]
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 fade 	bl	800848a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	80fb      	strh	r3, [r7, #6]
 8007eea:	4613      	mov	r3, r2
 8007eec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007eee:	7979      	ldrb	r1, [r7, #5]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	88fb      	ldrh	r3, [r7, #6]
 8007ef6:	9302      	str	r3, [sp, #8]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	2301      	movs	r3, #1
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	2302      	movs	r3, #2
 8007f02:	2201      	movs	r2, #1
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 fac0 	bl	800848a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af04      	add	r7, sp, #16
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	4608      	mov	r0, r1
 8007f1e:	4611      	mov	r1, r2
 8007f20:	461a      	mov	r2, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	70fb      	strb	r3, [r7, #3]
 8007f26:	460b      	mov	r3, r1
 8007f28:	70bb      	strb	r3, [r7, #2]
 8007f2a:	4613      	mov	r3, r2
 8007f2c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f2e:	7878      	ldrb	r0, [r7, #1]
 8007f30:	78ba      	ldrb	r2, [r7, #2]
 8007f32:	78f9      	ldrb	r1, [r7, #3]
 8007f34:	8b3b      	ldrh	r3, [r7, #24]
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	7d3b      	ldrb	r3, [r7, #20]
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	7c3b      	ldrb	r3, [r7, #16]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4603      	mov	r3, r0
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa53 	bl	80083ee <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	4619      	mov	r1, r3
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa72 	bl	800844c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f836 	bl	8007ff0 <USBH_GetFreePipe>
 8007f84:	4603      	mov	r3, r0
 8007f86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f88:	89fb      	ldrh	r3, [r7, #14]
 8007f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00a      	beq.n	8007fa8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	f003 030f 	and.w	r3, r3, #15
 8007f9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f9e:	6879      	ldr	r1, [r7, #4]
 8007fa0:	33e0      	adds	r3, #224	; 0xe0
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007fa8:	89fb      	ldrh	r3, [r7, #14]
 8007faa:	b2db      	uxtb	r3, r3
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3710      	adds	r7, #16
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	2b0f      	cmp	r3, #15
 8007fc4:	d80d      	bhi.n	8007fe2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007fc6:	78fb      	ldrb	r3, [r7, #3]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	33e0      	adds	r3, #224	; 0xe0
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4413      	add	r3, r2
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	78fb      	ldrb	r3, [r7, #3]
 8007fd4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	33e0      	adds	r3, #224	; 0xe0
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
 8008000:	e00f      	b.n	8008022 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	33e0      	adds	r3, #224	; 0xe0
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	b29b      	uxth	r3, r3
 800801a:	e007      	b.n	800802c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	3301      	adds	r3, #1
 8008020:	73fb      	strb	r3, [r7, #15]
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	2b0f      	cmp	r3, #15
 8008026:	d9ec      	bls.n	8008002 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008028:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800802c:	4618      	mov	r0, r3
 800802e:	3714      	adds	r7, #20
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800803c:	2201      	movs	r2, #1
 800803e:	490e      	ldr	r1, [pc, #56]	; (8008078 <MX_USB_HOST_Init+0x40>)
 8008040:	480e      	ldr	r0, [pc, #56]	; (800807c <MX_USB_HOST_Init+0x44>)
 8008042:	f7fe fba7 	bl	8006794 <USBH_Init>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800804c:	f7f9 fa30 	bl	80014b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008050:	490b      	ldr	r1, [pc, #44]	; (8008080 <MX_USB_HOST_Init+0x48>)
 8008052:	480a      	ldr	r0, [pc, #40]	; (800807c <MX_USB_HOST_Init+0x44>)
 8008054:	f7fe fc2c 	bl	80068b0 <USBH_RegisterClass>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d001      	beq.n	8008062 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800805e:	f7f9 fa27 	bl	80014b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008062:	4806      	ldr	r0, [pc, #24]	; (800807c <MX_USB_HOST_Init+0x44>)
 8008064:	f7fe fcb0 	bl	80069c8 <USBH_Start>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800806e:	f7f9 fa1f 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008072:	bf00      	nop
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	08008099 	.word	0x08008099
 800807c:	20000318 	.word	0x20000318
 8008080:	2000000c 	.word	0x2000000c

08008084 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008088:	4802      	ldr	r0, [pc, #8]	; (8008094 <MX_USB_HOST_Process+0x10>)
 800808a:	f7fe fcad 	bl	80069e8 <USBH_Process>
}
 800808e:	bf00      	nop
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20000318 	.word	0x20000318

08008098 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80080a4:	78fb      	ldrb	r3, [r7, #3]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	d819      	bhi.n	80080e0 <USBH_UserProcess+0x48>
 80080ac:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <USBH_UserProcess+0x1c>)
 80080ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b2:	bf00      	nop
 80080b4:	080080e1 	.word	0x080080e1
 80080b8:	080080d1 	.word	0x080080d1
 80080bc:	080080e1 	.word	0x080080e1
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080c9 	.word	0x080080c9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80080c8:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <USBH_UserProcess+0x58>)
 80080ca:	2203      	movs	r2, #3
 80080cc:	701a      	strb	r2, [r3, #0]
  break;
 80080ce:	e008      	b.n	80080e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80080d0:	4b07      	ldr	r3, [pc, #28]	; (80080f0 <USBH_UserProcess+0x58>)
 80080d2:	2202      	movs	r2, #2
 80080d4:	701a      	strb	r2, [r3, #0]
  break;
 80080d6:	e004      	b.n	80080e2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80080d8:	4b05      	ldr	r3, [pc, #20]	; (80080f0 <USBH_UserProcess+0x58>)
 80080da:	2201      	movs	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
  break;
 80080de:	e000      	b.n	80080e2 <USBH_UserProcess+0x4a>

  default:
  break;
 80080e0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	200006f0 	.word	0x200006f0

080080f4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b08a      	sub	sp, #40	; 0x28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	2200      	movs	r2, #0
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	605a      	str	r2, [r3, #4]
 8008106:	609a      	str	r2, [r3, #8]
 8008108:	60da      	str	r2, [r3, #12]
 800810a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008114:	d147      	bne.n	80081a6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008116:	2300      	movs	r3, #0
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	4a24      	ldr	r2, [pc, #144]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008120:	f043 0301 	orr.w	r3, r3, #1
 8008124:	6313      	str	r3, [r2, #48]	; 0x30
 8008126:	4b22      	ldr	r3, [pc, #136]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008132:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008138:	2300      	movs	r3, #0
 800813a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800813c:	2300      	movs	r3, #0
 800813e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	4619      	mov	r1, r3
 8008146:	481b      	ldr	r0, [pc, #108]	; (80081b4 <HAL_HCD_MspInit+0xc0>)
 8008148:	f7f9 fdb2 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800814c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008152:	2302      	movs	r3, #2
 8008154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008156:	2300      	movs	r3, #0
 8008158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800815a:	2300      	movs	r3, #0
 800815c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800815e:	230a      	movs	r3, #10
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008162:	f107 0314 	add.w	r3, r7, #20
 8008166:	4619      	mov	r1, r3
 8008168:	4812      	ldr	r0, [pc, #72]	; (80081b4 <HAL_HCD_MspInit+0xc0>)
 800816a:	f7f9 fda1 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800816e:	4b10      	ldr	r3, [pc, #64]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008172:	4a0f      	ldr	r2, [pc, #60]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008178:	6353      	str	r3, [r2, #52]	; 0x34
 800817a:	2300      	movs	r3, #0
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	4b0c      	ldr	r3, [pc, #48]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008182:	4a0b      	ldr	r2, [pc, #44]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 8008184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008188:	6453      	str	r3, [r2, #68]	; 0x44
 800818a:	4b09      	ldr	r3, [pc, #36]	; (80081b0 <HAL_HCD_MspInit+0xbc>)
 800818c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800818e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008196:	2200      	movs	r2, #0
 8008198:	2100      	movs	r1, #0
 800819a:	2043      	movs	r0, #67	; 0x43
 800819c:	f7f9 fd51 	bl	8001c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081a0:	2043      	movs	r0, #67	; 0x43
 80081a2:	f7f9 fd6a 	bl	8001c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081a6:	bf00      	nop
 80081a8:	3728      	adds	r7, #40	; 0x28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	40023800 	.word	0x40023800
 80081b4:	40020000 	.word	0x40020000

080081b8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe ffed 	bl	80071a6 <USBH_LL_IncTimer>
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7ff f825 	bl	8007232 <USBH_LL_Connect>
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff f82e 	bl	8007260 <USBH_LL_Disconnect>
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
 8008218:	4613      	mov	r3, r2
 800821a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe ffdf 	bl	80071fa <USBH_LL_PortEnabled>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe ffdf 	bl	8007216 <USBH_LL_PortDisabled>
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800826e:	2b01      	cmp	r3, #1
 8008270:	d12a      	bne.n	80082c8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008272:	4a18      	ldr	r2, [pc, #96]	; (80082d4 <USBH_LL_Init+0x74>)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <USBH_LL_Init+0x74>)
 800827e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008282:	4b14      	ldr	r3, [pc, #80]	; (80082d4 <USBH_LL_Init+0x74>)
 8008284:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008288:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800828a:	4b12      	ldr	r3, [pc, #72]	; (80082d4 <USBH_LL_Init+0x74>)
 800828c:	2208      	movs	r2, #8
 800828e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008290:	4b10      	ldr	r3, [pc, #64]	; (80082d4 <USBH_LL_Init+0x74>)
 8008292:	2201      	movs	r2, #1
 8008294:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008296:	4b0f      	ldr	r3, [pc, #60]	; (80082d4 <USBH_LL_Init+0x74>)
 8008298:	2200      	movs	r2, #0
 800829a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800829c:	4b0d      	ldr	r3, [pc, #52]	; (80082d4 <USBH_LL_Init+0x74>)
 800829e:	2202      	movs	r2, #2
 80082a0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082a2:	4b0c      	ldr	r3, [pc, #48]	; (80082d4 <USBH_LL_Init+0x74>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80082a8:	480a      	ldr	r0, [pc, #40]	; (80082d4 <USBH_LL_Init+0x74>)
 80082aa:	f7f9 feb6 	bl	800201a <HAL_HCD_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80082b4:	f7f9 f8fc 	bl	80014b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80082b8:	4806      	ldr	r0, [pc, #24]	; (80082d4 <USBH_LL_Init+0x74>)
 80082ba:	f7fa fa9a 	bl	80027f2 <HAL_HCD_GetCurrentFrame>
 80082be:	4603      	mov	r3, r0
 80082c0:	4619      	mov	r1, r3
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7fe ff60 	bl	8007188 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200006f4 	.word	0x200006f4

080082d8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fa fa09 	bl	8002706 <HAL_HCD_Start>
 80082f4:	4603      	mov	r3, r0
 80082f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f000 f95c 	bl	80085b8 <USBH_Get_USB_Status>
 8008300:	4603      	mov	r3, r0
 8008302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008304:	7bbb      	ldrb	r3, [r7, #14]
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008324:	4618      	mov	r0, r3
 8008326:	f7fa fa11 	bl	800274c <HAL_HCD_Stop>
 800832a:	4603      	mov	r3, r0
 800832c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	4618      	mov	r0, r3
 8008332:	f000 f941 	bl	80085b8 <USBH_Get_USB_Status>
 8008336:	4603      	mov	r3, r0
 8008338:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800833a:	7bbb      	ldrb	r3, [r7, #14]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800834c:	2301      	movs	r3, #1
 800834e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008356:	4618      	mov	r0, r3
 8008358:	f7fa fa59 	bl	800280e <HAL_HCD_GetCurrentSpeed>
 800835c:	4603      	mov	r3, r0
 800835e:	2b02      	cmp	r3, #2
 8008360:	d00c      	beq.n	800837c <USBH_LL_GetSpeed+0x38>
 8008362:	2b02      	cmp	r3, #2
 8008364:	d80d      	bhi.n	8008382 <USBH_LL_GetSpeed+0x3e>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <USBH_LL_GetSpeed+0x2c>
 800836a:	2b01      	cmp	r3, #1
 800836c:	d003      	beq.n	8008376 <USBH_LL_GetSpeed+0x32>
 800836e:	e008      	b.n	8008382 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008370:	2300      	movs	r3, #0
 8008372:	73fb      	strb	r3, [r7, #15]
    break;
 8008374:	e008      	b.n	8008388 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008376:	2301      	movs	r3, #1
 8008378:	73fb      	strb	r3, [r7, #15]
    break;
 800837a:	e005      	b.n	8008388 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800837c:	2302      	movs	r3, #2
 800837e:	73fb      	strb	r3, [r7, #15]
    break;
 8008380:	e002      	b.n	8008388 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008382:	2301      	movs	r3, #1
 8008384:	73fb      	strb	r3, [r7, #15]
    break;
 8008386:	bf00      	nop
  }
  return  speed;
 8008388:	7bfb      	ldrb	r3, [r7, #15]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800839e:	2300      	movs	r3, #0
 80083a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fa f9ec 	bl	8002786 <HAL_HCD_ResetPort>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	4618      	mov	r0, r3
 80083b6:	f000 f8ff 	bl	80085b8 <USBH_Get_USB_Status>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083be:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083da:	78fa      	ldrb	r2, [r7, #3]
 80083dc:	4611      	mov	r1, r2
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fa f9f3 	bl	80027ca <HAL_HCD_HC_GetXferCount>
 80083e4:	4603      	mov	r3, r0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083ee:	b590      	push	{r4, r7, lr}
 80083f0:	b089      	sub	sp, #36	; 0x24
 80083f2:	af04      	add	r7, sp, #16
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	4608      	mov	r0, r1
 80083f8:	4611      	mov	r1, r2
 80083fa:	461a      	mov	r2, r3
 80083fc:	4603      	mov	r3, r0
 80083fe:	70fb      	strb	r3, [r7, #3]
 8008400:	460b      	mov	r3, r1
 8008402:	70bb      	strb	r3, [r7, #2]
 8008404:	4613      	mov	r3, r2
 8008406:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008416:	787c      	ldrb	r4, [r7, #1]
 8008418:	78ba      	ldrb	r2, [r7, #2]
 800841a:	78f9      	ldrb	r1, [r7, #3]
 800841c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800841e:	9302      	str	r3, [sp, #8]
 8008420:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008424:	9301      	str	r3, [sp, #4]
 8008426:	f897 3020 	ldrb.w	r3, [r7, #32]
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	4623      	mov	r3, r4
 800842e:	f7f9 fe56 	bl	80020de <HAL_HCD_HC_Init>
 8008432:	4603      	mov	r3, r0
 8008434:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008436:	7bfb      	ldrb	r3, [r7, #15]
 8008438:	4618      	mov	r0, r3
 800843a:	f000 f8bd 	bl	80085b8 <USBH_Get_USB_Status>
 800843e:	4603      	mov	r3, r0
 8008440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008442:	7bbb      	ldrb	r3, [r7, #14]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	bd90      	pop	{r4, r7, pc}

0800844c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	460b      	mov	r3, r1
 8008456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008466:	78fa      	ldrb	r2, [r7, #3]
 8008468:	4611      	mov	r1, r2
 800846a:	4618      	mov	r0, r3
 800846c:	f7f9 fec6 	bl	80021fc <HAL_HCD_HC_Halt>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f89e 	bl	80085b8 <USBH_Get_USB_Status>
 800847c:	4603      	mov	r3, r0
 800847e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008480:	7bbb      	ldrb	r3, [r7, #14]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800848a:	b590      	push	{r4, r7, lr}
 800848c:	b089      	sub	sp, #36	; 0x24
 800848e:	af04      	add	r7, sp, #16
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	461a      	mov	r2, r3
 8008498:	4603      	mov	r3, r0
 800849a:	70fb      	strb	r3, [r7, #3]
 800849c:	460b      	mov	r3, r1
 800849e:	70bb      	strb	r3, [r7, #2]
 80084a0:	4613      	mov	r3, r2
 80084a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80084b2:	787c      	ldrb	r4, [r7, #1]
 80084b4:	78ba      	ldrb	r2, [r7, #2]
 80084b6:	78f9      	ldrb	r1, [r7, #3]
 80084b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084bc:	9303      	str	r3, [sp, #12]
 80084be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084c0:	9302      	str	r3, [sp, #8]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4623      	mov	r3, r4
 80084ce:	f7f9 feb9 	bl	8002244 <HAL_HCD_HC_SubmitRequest>
 80084d2:	4603      	mov	r3, r0
 80084d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 f86d 	bl	80085b8 <USBH_Get_USB_Status>
 80084de:	4603      	mov	r3, r0
 80084e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd90      	pop	{r4, r7, pc}

080084ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	460b      	mov	r3, r1
 80084f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f7fa f94d 	bl	80027a2 <HAL_HCD_HC_GetURBState>
 8008508:	4603      	mov	r3, r0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008524:	2b01      	cmp	r3, #1
 8008526:	d103      	bne.n	8008530 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008528:	78fb      	ldrb	r3, [r7, #3]
 800852a:	4618      	mov	r0, r3
 800852c:	f000 f870 	bl	8008610 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008530:	20c8      	movs	r0, #200	; 0xc8
 8008532:	f7f9 fa87 	bl	8001a44 <HAL_Delay>
  return USBH_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	460b      	mov	r3, r1
 800854a:	70fb      	strb	r3, [r7, #3]
 800854c:	4613      	mov	r3, r2
 800854e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008556:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008558:	78fb      	ldrb	r3, [r7, #3]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	212c      	movs	r1, #44	; 0x2c
 800855e:	fb01 f303 	mul.w	r3, r1, r3
 8008562:	4413      	add	r3, r2
 8008564:	333b      	adds	r3, #59	; 0x3b
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d009      	beq.n	8008580 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800856c:	78fb      	ldrb	r3, [r7, #3]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	212c      	movs	r1, #44	; 0x2c
 8008572:	fb01 f303 	mul.w	r3, r1, r3
 8008576:	4413      	add	r3, r2
 8008578:	3354      	adds	r3, #84	; 0x54
 800857a:	78ba      	ldrb	r2, [r7, #2]
 800857c:	701a      	strb	r2, [r3, #0]
 800857e:	e008      	b.n	8008592 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008580:	78fb      	ldrb	r3, [r7, #3]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	212c      	movs	r1, #44	; 0x2c
 8008586:	fb01 f303 	mul.w	r3, r1, r3
 800858a:	4413      	add	r3, r2
 800858c:	3355      	adds	r3, #85	; 0x55
 800858e:	78ba      	ldrb	r2, [r7, #2]
 8008590:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7f9 fa4b 	bl	8001a44 <HAL_Delay>
}
 80085ae:	bf00      	nop
 80085b0:	3708      	adds	r7, #8
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
	...

080085b8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d817      	bhi.n	80085fc <USBH_Get_USB_Status+0x44>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBH_Get_USB_Status+0x1c>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	080085e5 	.word	0x080085e5
 80085d8:	080085eb 	.word	0x080085eb
 80085dc:	080085f1 	.word	0x080085f1
 80085e0:	080085f7 	.word	0x080085f7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]
    break;
 80085e8:	e00b      	b.n	8008602 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80085ea:	2302      	movs	r3, #2
 80085ec:	73fb      	strb	r3, [r7, #15]
    break;
 80085ee:	e008      	b.n	8008602 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80085f0:	2301      	movs	r3, #1
 80085f2:	73fb      	strb	r3, [r7, #15]
    break;
 80085f4:	e005      	b.n	8008602 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80085f6:	2302      	movs	r3, #2
 80085f8:	73fb      	strb	r3, [r7, #15]
    break;
 80085fa:	e002      	b.n	8008602 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80085fc:	2302      	movs	r3, #2
 80085fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008600:	bf00      	nop
  }
  return usb_status;
 8008602:	7bfb      	ldrb	r3, [r7, #15]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3714      	adds	r7, #20
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800861e:	79fb      	ldrb	r3, [r7, #7]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d102      	bne.n	800862a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
 8008628:	e001      	b.n	800862e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800862a:	2301      	movs	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800862e:	7bfb      	ldrb	r3, [r7, #15]
 8008630:	461a      	mov	r2, r3
 8008632:	2101      	movs	r1, #1
 8008634:	4803      	ldr	r0, [pc, #12]	; (8008644 <MX_DriverVbusFS+0x34>)
 8008636:	f7f9 fcd7 	bl	8001fe8 <HAL_GPIO_WritePin>
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	40020800 	.word	0x40020800

08008648 <__errno>:
 8008648:	4b01      	ldr	r3, [pc, #4]	; (8008650 <__errno+0x8>)
 800864a:	6818      	ldr	r0, [r3, #0]
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	2000002c 	.word	0x2000002c

08008654 <__libc_init_array>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	4d0d      	ldr	r5, [pc, #52]	; (800868c <__libc_init_array+0x38>)
 8008658:	4c0d      	ldr	r4, [pc, #52]	; (8008690 <__libc_init_array+0x3c>)
 800865a:	1b64      	subs	r4, r4, r5
 800865c:	10a4      	asrs	r4, r4, #2
 800865e:	2600      	movs	r6, #0
 8008660:	42a6      	cmp	r6, r4
 8008662:	d109      	bne.n	8008678 <__libc_init_array+0x24>
 8008664:	4d0b      	ldr	r5, [pc, #44]	; (8008694 <__libc_init_array+0x40>)
 8008666:	4c0c      	ldr	r4, [pc, #48]	; (8008698 <__libc_init_array+0x44>)
 8008668:	f004 fd08 	bl	800d07c <_init>
 800866c:	1b64      	subs	r4, r4, r5
 800866e:	10a4      	asrs	r4, r4, #2
 8008670:	2600      	movs	r6, #0
 8008672:	42a6      	cmp	r6, r4
 8008674:	d105      	bne.n	8008682 <__libc_init_array+0x2e>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	f855 3b04 	ldr.w	r3, [r5], #4
 800867c:	4798      	blx	r3
 800867e:	3601      	adds	r6, #1
 8008680:	e7ee      	b.n	8008660 <__libc_init_array+0xc>
 8008682:	f855 3b04 	ldr.w	r3, [r5], #4
 8008686:	4798      	blx	r3
 8008688:	3601      	adds	r6, #1
 800868a:	e7f2      	b.n	8008672 <__libc_init_array+0x1e>
 800868c:	0800d574 	.word	0x0800d574
 8008690:	0800d574 	.word	0x0800d574
 8008694:	0800d574 	.word	0x0800d574
 8008698:	0800d578 	.word	0x0800d578

0800869c <malloc>:
 800869c:	4b02      	ldr	r3, [pc, #8]	; (80086a8 <malloc+0xc>)
 800869e:	4601      	mov	r1, r0
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	f000 b87f 	b.w	80087a4 <_malloc_r>
 80086a6:	bf00      	nop
 80086a8:	2000002c 	.word	0x2000002c

080086ac <free>:
 80086ac:	4b02      	ldr	r3, [pc, #8]	; (80086b8 <free+0xc>)
 80086ae:	4601      	mov	r1, r0
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	f000 b80b 	b.w	80086cc <_free_r>
 80086b6:	bf00      	nop
 80086b8:	2000002c 	.word	0x2000002c

080086bc <memset>:
 80086bc:	4402      	add	r2, r0
 80086be:	4603      	mov	r3, r0
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d100      	bne.n	80086c6 <memset+0xa>
 80086c4:	4770      	bx	lr
 80086c6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ca:	e7f9      	b.n	80086c0 <memset+0x4>

080086cc <_free_r>:
 80086cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ce:	2900      	cmp	r1, #0
 80086d0:	d044      	beq.n	800875c <_free_r+0x90>
 80086d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086d6:	9001      	str	r0, [sp, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f1a1 0404 	sub.w	r4, r1, #4
 80086de:	bfb8      	it	lt
 80086e0:	18e4      	addlt	r4, r4, r3
 80086e2:	f003 fb91 	bl	800be08 <__malloc_lock>
 80086e6:	4a1e      	ldr	r2, [pc, #120]	; (8008760 <_free_r+0x94>)
 80086e8:	9801      	ldr	r0, [sp, #4]
 80086ea:	6813      	ldr	r3, [r2, #0]
 80086ec:	b933      	cbnz	r3, 80086fc <_free_r+0x30>
 80086ee:	6063      	str	r3, [r4, #4]
 80086f0:	6014      	str	r4, [r2, #0]
 80086f2:	b003      	add	sp, #12
 80086f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086f8:	f003 bb8c 	b.w	800be14 <__malloc_unlock>
 80086fc:	42a3      	cmp	r3, r4
 80086fe:	d908      	bls.n	8008712 <_free_r+0x46>
 8008700:	6825      	ldr	r5, [r4, #0]
 8008702:	1961      	adds	r1, r4, r5
 8008704:	428b      	cmp	r3, r1
 8008706:	bf01      	itttt	eq
 8008708:	6819      	ldreq	r1, [r3, #0]
 800870a:	685b      	ldreq	r3, [r3, #4]
 800870c:	1949      	addeq	r1, r1, r5
 800870e:	6021      	streq	r1, [r4, #0]
 8008710:	e7ed      	b.n	80086ee <_free_r+0x22>
 8008712:	461a      	mov	r2, r3
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	b10b      	cbz	r3, 800871c <_free_r+0x50>
 8008718:	42a3      	cmp	r3, r4
 800871a:	d9fa      	bls.n	8008712 <_free_r+0x46>
 800871c:	6811      	ldr	r1, [r2, #0]
 800871e:	1855      	adds	r5, r2, r1
 8008720:	42a5      	cmp	r5, r4
 8008722:	d10b      	bne.n	800873c <_free_r+0x70>
 8008724:	6824      	ldr	r4, [r4, #0]
 8008726:	4421      	add	r1, r4
 8008728:	1854      	adds	r4, r2, r1
 800872a:	42a3      	cmp	r3, r4
 800872c:	6011      	str	r1, [r2, #0]
 800872e:	d1e0      	bne.n	80086f2 <_free_r+0x26>
 8008730:	681c      	ldr	r4, [r3, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	6053      	str	r3, [r2, #4]
 8008736:	4421      	add	r1, r4
 8008738:	6011      	str	r1, [r2, #0]
 800873a:	e7da      	b.n	80086f2 <_free_r+0x26>
 800873c:	d902      	bls.n	8008744 <_free_r+0x78>
 800873e:	230c      	movs	r3, #12
 8008740:	6003      	str	r3, [r0, #0]
 8008742:	e7d6      	b.n	80086f2 <_free_r+0x26>
 8008744:	6825      	ldr	r5, [r4, #0]
 8008746:	1961      	adds	r1, r4, r5
 8008748:	428b      	cmp	r3, r1
 800874a:	bf04      	itt	eq
 800874c:	6819      	ldreq	r1, [r3, #0]
 800874e:	685b      	ldreq	r3, [r3, #4]
 8008750:	6063      	str	r3, [r4, #4]
 8008752:	bf04      	itt	eq
 8008754:	1949      	addeq	r1, r1, r5
 8008756:	6021      	streq	r1, [r4, #0]
 8008758:	6054      	str	r4, [r2, #4]
 800875a:	e7ca      	b.n	80086f2 <_free_r+0x26>
 800875c:	b003      	add	sp, #12
 800875e:	bd30      	pop	{r4, r5, pc}
 8008760:	200009f8 	.word	0x200009f8

08008764 <sbrk_aligned>:
 8008764:	b570      	push	{r4, r5, r6, lr}
 8008766:	4e0e      	ldr	r6, [pc, #56]	; (80087a0 <sbrk_aligned+0x3c>)
 8008768:	460c      	mov	r4, r1
 800876a:	6831      	ldr	r1, [r6, #0]
 800876c:	4605      	mov	r5, r0
 800876e:	b911      	cbnz	r1, 8008776 <sbrk_aligned+0x12>
 8008770:	f000 ff7c 	bl	800966c <_sbrk_r>
 8008774:	6030      	str	r0, [r6, #0]
 8008776:	4621      	mov	r1, r4
 8008778:	4628      	mov	r0, r5
 800877a:	f000 ff77 	bl	800966c <_sbrk_r>
 800877e:	1c43      	adds	r3, r0, #1
 8008780:	d00a      	beq.n	8008798 <sbrk_aligned+0x34>
 8008782:	1cc4      	adds	r4, r0, #3
 8008784:	f024 0403 	bic.w	r4, r4, #3
 8008788:	42a0      	cmp	r0, r4
 800878a:	d007      	beq.n	800879c <sbrk_aligned+0x38>
 800878c:	1a21      	subs	r1, r4, r0
 800878e:	4628      	mov	r0, r5
 8008790:	f000 ff6c 	bl	800966c <_sbrk_r>
 8008794:	3001      	adds	r0, #1
 8008796:	d101      	bne.n	800879c <sbrk_aligned+0x38>
 8008798:	f04f 34ff 	mov.w	r4, #4294967295
 800879c:	4620      	mov	r0, r4
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	200009fc 	.word	0x200009fc

080087a4 <_malloc_r>:
 80087a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087a8:	1ccd      	adds	r5, r1, #3
 80087aa:	f025 0503 	bic.w	r5, r5, #3
 80087ae:	3508      	adds	r5, #8
 80087b0:	2d0c      	cmp	r5, #12
 80087b2:	bf38      	it	cc
 80087b4:	250c      	movcc	r5, #12
 80087b6:	2d00      	cmp	r5, #0
 80087b8:	4607      	mov	r7, r0
 80087ba:	db01      	blt.n	80087c0 <_malloc_r+0x1c>
 80087bc:	42a9      	cmp	r1, r5
 80087be:	d905      	bls.n	80087cc <_malloc_r+0x28>
 80087c0:	230c      	movs	r3, #12
 80087c2:	603b      	str	r3, [r7, #0]
 80087c4:	2600      	movs	r6, #0
 80087c6:	4630      	mov	r0, r6
 80087c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087cc:	4e2e      	ldr	r6, [pc, #184]	; (8008888 <_malloc_r+0xe4>)
 80087ce:	f003 fb1b 	bl	800be08 <__malloc_lock>
 80087d2:	6833      	ldr	r3, [r6, #0]
 80087d4:	461c      	mov	r4, r3
 80087d6:	bb34      	cbnz	r4, 8008826 <_malloc_r+0x82>
 80087d8:	4629      	mov	r1, r5
 80087da:	4638      	mov	r0, r7
 80087dc:	f7ff ffc2 	bl	8008764 <sbrk_aligned>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	4604      	mov	r4, r0
 80087e4:	d14d      	bne.n	8008882 <_malloc_r+0xde>
 80087e6:	6834      	ldr	r4, [r6, #0]
 80087e8:	4626      	mov	r6, r4
 80087ea:	2e00      	cmp	r6, #0
 80087ec:	d140      	bne.n	8008870 <_malloc_r+0xcc>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	4631      	mov	r1, r6
 80087f2:	4638      	mov	r0, r7
 80087f4:	eb04 0803 	add.w	r8, r4, r3
 80087f8:	f000 ff38 	bl	800966c <_sbrk_r>
 80087fc:	4580      	cmp	r8, r0
 80087fe:	d13a      	bne.n	8008876 <_malloc_r+0xd2>
 8008800:	6821      	ldr	r1, [r4, #0]
 8008802:	3503      	adds	r5, #3
 8008804:	1a6d      	subs	r5, r5, r1
 8008806:	f025 0503 	bic.w	r5, r5, #3
 800880a:	3508      	adds	r5, #8
 800880c:	2d0c      	cmp	r5, #12
 800880e:	bf38      	it	cc
 8008810:	250c      	movcc	r5, #12
 8008812:	4629      	mov	r1, r5
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff ffa5 	bl	8008764 <sbrk_aligned>
 800881a:	3001      	adds	r0, #1
 800881c:	d02b      	beq.n	8008876 <_malloc_r+0xd2>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	442b      	add	r3, r5
 8008822:	6023      	str	r3, [r4, #0]
 8008824:	e00e      	b.n	8008844 <_malloc_r+0xa0>
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	1b52      	subs	r2, r2, r5
 800882a:	d41e      	bmi.n	800886a <_malloc_r+0xc6>
 800882c:	2a0b      	cmp	r2, #11
 800882e:	d916      	bls.n	800885e <_malloc_r+0xba>
 8008830:	1961      	adds	r1, r4, r5
 8008832:	42a3      	cmp	r3, r4
 8008834:	6025      	str	r5, [r4, #0]
 8008836:	bf18      	it	ne
 8008838:	6059      	strne	r1, [r3, #4]
 800883a:	6863      	ldr	r3, [r4, #4]
 800883c:	bf08      	it	eq
 800883e:	6031      	streq	r1, [r6, #0]
 8008840:	5162      	str	r2, [r4, r5]
 8008842:	604b      	str	r3, [r1, #4]
 8008844:	4638      	mov	r0, r7
 8008846:	f104 060b 	add.w	r6, r4, #11
 800884a:	f003 fae3 	bl	800be14 <__malloc_unlock>
 800884e:	f026 0607 	bic.w	r6, r6, #7
 8008852:	1d23      	adds	r3, r4, #4
 8008854:	1af2      	subs	r2, r6, r3
 8008856:	d0b6      	beq.n	80087c6 <_malloc_r+0x22>
 8008858:	1b9b      	subs	r3, r3, r6
 800885a:	50a3      	str	r3, [r4, r2]
 800885c:	e7b3      	b.n	80087c6 <_malloc_r+0x22>
 800885e:	6862      	ldr	r2, [r4, #4]
 8008860:	42a3      	cmp	r3, r4
 8008862:	bf0c      	ite	eq
 8008864:	6032      	streq	r2, [r6, #0]
 8008866:	605a      	strne	r2, [r3, #4]
 8008868:	e7ec      	b.n	8008844 <_malloc_r+0xa0>
 800886a:	4623      	mov	r3, r4
 800886c:	6864      	ldr	r4, [r4, #4]
 800886e:	e7b2      	b.n	80087d6 <_malloc_r+0x32>
 8008870:	4634      	mov	r4, r6
 8008872:	6876      	ldr	r6, [r6, #4]
 8008874:	e7b9      	b.n	80087ea <_malloc_r+0x46>
 8008876:	230c      	movs	r3, #12
 8008878:	603b      	str	r3, [r7, #0]
 800887a:	4638      	mov	r0, r7
 800887c:	f003 faca 	bl	800be14 <__malloc_unlock>
 8008880:	e7a1      	b.n	80087c6 <_malloc_r+0x22>
 8008882:	6025      	str	r5, [r4, #0]
 8008884:	e7de      	b.n	8008844 <_malloc_r+0xa0>
 8008886:	bf00      	nop
 8008888:	200009f8 	.word	0x200009f8

0800888c <__cvt>:
 800888c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008890:	ec55 4b10 	vmov	r4, r5, d0
 8008894:	2d00      	cmp	r5, #0
 8008896:	460e      	mov	r6, r1
 8008898:	4619      	mov	r1, r3
 800889a:	462b      	mov	r3, r5
 800889c:	bfbb      	ittet	lt
 800889e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80088a2:	461d      	movlt	r5, r3
 80088a4:	2300      	movge	r3, #0
 80088a6:	232d      	movlt	r3, #45	; 0x2d
 80088a8:	700b      	strb	r3, [r1, #0]
 80088aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80088b0:	4691      	mov	r9, r2
 80088b2:	f023 0820 	bic.w	r8, r3, #32
 80088b6:	bfbc      	itt	lt
 80088b8:	4622      	movlt	r2, r4
 80088ba:	4614      	movlt	r4, r2
 80088bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088c0:	d005      	beq.n	80088ce <__cvt+0x42>
 80088c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80088c6:	d100      	bne.n	80088ca <__cvt+0x3e>
 80088c8:	3601      	adds	r6, #1
 80088ca:	2102      	movs	r1, #2
 80088cc:	e000      	b.n	80088d0 <__cvt+0x44>
 80088ce:	2103      	movs	r1, #3
 80088d0:	ab03      	add	r3, sp, #12
 80088d2:	9301      	str	r3, [sp, #4]
 80088d4:	ab02      	add	r3, sp, #8
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	ec45 4b10 	vmov	d0, r4, r5
 80088dc:	4653      	mov	r3, sl
 80088de:	4632      	mov	r2, r6
 80088e0:	f001 fef2 	bl	800a6c8 <_dtoa_r>
 80088e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80088e8:	4607      	mov	r7, r0
 80088ea:	d102      	bne.n	80088f2 <__cvt+0x66>
 80088ec:	f019 0f01 	tst.w	r9, #1
 80088f0:	d022      	beq.n	8008938 <__cvt+0xac>
 80088f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80088f6:	eb07 0906 	add.w	r9, r7, r6
 80088fa:	d110      	bne.n	800891e <__cvt+0x92>
 80088fc:	783b      	ldrb	r3, [r7, #0]
 80088fe:	2b30      	cmp	r3, #48	; 0x30
 8008900:	d10a      	bne.n	8008918 <__cvt+0x8c>
 8008902:	2200      	movs	r2, #0
 8008904:	2300      	movs	r3, #0
 8008906:	4620      	mov	r0, r4
 8008908:	4629      	mov	r1, r5
 800890a:	f7f8 f8dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800890e:	b918      	cbnz	r0, 8008918 <__cvt+0x8c>
 8008910:	f1c6 0601 	rsb	r6, r6, #1
 8008914:	f8ca 6000 	str.w	r6, [sl]
 8008918:	f8da 3000 	ldr.w	r3, [sl]
 800891c:	4499      	add	r9, r3
 800891e:	2200      	movs	r2, #0
 8008920:	2300      	movs	r3, #0
 8008922:	4620      	mov	r0, r4
 8008924:	4629      	mov	r1, r5
 8008926:	f7f8 f8cf 	bl	8000ac8 <__aeabi_dcmpeq>
 800892a:	b108      	cbz	r0, 8008930 <__cvt+0xa4>
 800892c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008930:	2230      	movs	r2, #48	; 0x30
 8008932:	9b03      	ldr	r3, [sp, #12]
 8008934:	454b      	cmp	r3, r9
 8008936:	d307      	bcc.n	8008948 <__cvt+0xbc>
 8008938:	9b03      	ldr	r3, [sp, #12]
 800893a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800893c:	1bdb      	subs	r3, r3, r7
 800893e:	4638      	mov	r0, r7
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	b004      	add	sp, #16
 8008944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008948:	1c59      	adds	r1, r3, #1
 800894a:	9103      	str	r1, [sp, #12]
 800894c:	701a      	strb	r2, [r3, #0]
 800894e:	e7f0      	b.n	8008932 <__cvt+0xa6>

08008950 <__exponent>:
 8008950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008952:	4603      	mov	r3, r0
 8008954:	2900      	cmp	r1, #0
 8008956:	bfb8      	it	lt
 8008958:	4249      	neglt	r1, r1
 800895a:	f803 2b02 	strb.w	r2, [r3], #2
 800895e:	bfb4      	ite	lt
 8008960:	222d      	movlt	r2, #45	; 0x2d
 8008962:	222b      	movge	r2, #43	; 0x2b
 8008964:	2909      	cmp	r1, #9
 8008966:	7042      	strb	r2, [r0, #1]
 8008968:	dd2a      	ble.n	80089c0 <__exponent+0x70>
 800896a:	f10d 0407 	add.w	r4, sp, #7
 800896e:	46a4      	mov	ip, r4
 8008970:	270a      	movs	r7, #10
 8008972:	46a6      	mov	lr, r4
 8008974:	460a      	mov	r2, r1
 8008976:	fb91 f6f7 	sdiv	r6, r1, r7
 800897a:	fb07 1516 	mls	r5, r7, r6, r1
 800897e:	3530      	adds	r5, #48	; 0x30
 8008980:	2a63      	cmp	r2, #99	; 0x63
 8008982:	f104 34ff 	add.w	r4, r4, #4294967295
 8008986:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800898a:	4631      	mov	r1, r6
 800898c:	dcf1      	bgt.n	8008972 <__exponent+0x22>
 800898e:	3130      	adds	r1, #48	; 0x30
 8008990:	f1ae 0502 	sub.w	r5, lr, #2
 8008994:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008998:	1c44      	adds	r4, r0, #1
 800899a:	4629      	mov	r1, r5
 800899c:	4561      	cmp	r1, ip
 800899e:	d30a      	bcc.n	80089b6 <__exponent+0x66>
 80089a0:	f10d 0209 	add.w	r2, sp, #9
 80089a4:	eba2 020e 	sub.w	r2, r2, lr
 80089a8:	4565      	cmp	r5, ip
 80089aa:	bf88      	it	hi
 80089ac:	2200      	movhi	r2, #0
 80089ae:	4413      	add	r3, r2
 80089b0:	1a18      	subs	r0, r3, r0
 80089b2:	b003      	add	sp, #12
 80089b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80089be:	e7ed      	b.n	800899c <__exponent+0x4c>
 80089c0:	2330      	movs	r3, #48	; 0x30
 80089c2:	3130      	adds	r1, #48	; 0x30
 80089c4:	7083      	strb	r3, [r0, #2]
 80089c6:	70c1      	strb	r1, [r0, #3]
 80089c8:	1d03      	adds	r3, r0, #4
 80089ca:	e7f1      	b.n	80089b0 <__exponent+0x60>

080089cc <_printf_float>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	ed2d 8b02 	vpush	{d8}
 80089d4:	b08d      	sub	sp, #52	; 0x34
 80089d6:	460c      	mov	r4, r1
 80089d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80089dc:	4616      	mov	r6, r2
 80089de:	461f      	mov	r7, r3
 80089e0:	4605      	mov	r5, r0
 80089e2:	f003 f985 	bl	800bcf0 <_localeconv_r>
 80089e6:	f8d0 a000 	ldr.w	sl, [r0]
 80089ea:	4650      	mov	r0, sl
 80089ec:	f7f7 fbf0 	bl	80001d0 <strlen>
 80089f0:	2300      	movs	r3, #0
 80089f2:	930a      	str	r3, [sp, #40]	; 0x28
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	9305      	str	r3, [sp, #20]
 80089f8:	f8d8 3000 	ldr.w	r3, [r8]
 80089fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008a00:	3307      	adds	r3, #7
 8008a02:	f023 0307 	bic.w	r3, r3, #7
 8008a06:	f103 0208 	add.w	r2, r3, #8
 8008a0a:	f8c8 2000 	str.w	r2, [r8]
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008a16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008a1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a1e:	9307      	str	r3, [sp, #28]
 8008a20:	f8cd 8018 	str.w	r8, [sp, #24]
 8008a24:	ee08 0a10 	vmov	s16, r0
 8008a28:	4b9f      	ldr	r3, [pc, #636]	; (8008ca8 <_printf_float+0x2dc>)
 8008a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a32:	f7f8 f87b 	bl	8000b2c <__aeabi_dcmpun>
 8008a36:	bb88      	cbnz	r0, 8008a9c <_printf_float+0xd0>
 8008a38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a3c:	4b9a      	ldr	r3, [pc, #616]	; (8008ca8 <_printf_float+0x2dc>)
 8008a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a42:	f7f8 f855 	bl	8000af0 <__aeabi_dcmple>
 8008a46:	bb48      	cbnz	r0, 8008a9c <_printf_float+0xd0>
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4649      	mov	r1, r9
 8008a50:	f7f8 f844 	bl	8000adc <__aeabi_dcmplt>
 8008a54:	b110      	cbz	r0, 8008a5c <_printf_float+0x90>
 8008a56:	232d      	movs	r3, #45	; 0x2d
 8008a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a5c:	4b93      	ldr	r3, [pc, #588]	; (8008cac <_printf_float+0x2e0>)
 8008a5e:	4894      	ldr	r0, [pc, #592]	; (8008cb0 <_printf_float+0x2e4>)
 8008a60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008a64:	bf94      	ite	ls
 8008a66:	4698      	movls	r8, r3
 8008a68:	4680      	movhi	r8, r0
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	6123      	str	r3, [r4, #16]
 8008a6e:	9b05      	ldr	r3, [sp, #20]
 8008a70:	f023 0204 	bic.w	r2, r3, #4
 8008a74:	6022      	str	r2, [r4, #0]
 8008a76:	f04f 0900 	mov.w	r9, #0
 8008a7a:	9700      	str	r7, [sp, #0]
 8008a7c:	4633      	mov	r3, r6
 8008a7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008a80:	4621      	mov	r1, r4
 8008a82:	4628      	mov	r0, r5
 8008a84:	f000 f9d8 	bl	8008e38 <_printf_common>
 8008a88:	3001      	adds	r0, #1
 8008a8a:	f040 8090 	bne.w	8008bae <_printf_float+0x1e2>
 8008a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a92:	b00d      	add	sp, #52	; 0x34
 8008a94:	ecbd 8b02 	vpop	{d8}
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	4642      	mov	r2, r8
 8008a9e:	464b      	mov	r3, r9
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	4649      	mov	r1, r9
 8008aa4:	f7f8 f842 	bl	8000b2c <__aeabi_dcmpun>
 8008aa8:	b140      	cbz	r0, 8008abc <_printf_float+0xf0>
 8008aaa:	464b      	mov	r3, r9
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	bfbc      	itt	lt
 8008ab0:	232d      	movlt	r3, #45	; 0x2d
 8008ab2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ab6:	487f      	ldr	r0, [pc, #508]	; (8008cb4 <_printf_float+0x2e8>)
 8008ab8:	4b7f      	ldr	r3, [pc, #508]	; (8008cb8 <_printf_float+0x2ec>)
 8008aba:	e7d1      	b.n	8008a60 <_printf_float+0x94>
 8008abc:	6863      	ldr	r3, [r4, #4]
 8008abe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008ac2:	9206      	str	r2, [sp, #24]
 8008ac4:	1c5a      	adds	r2, r3, #1
 8008ac6:	d13f      	bne.n	8008b48 <_printf_float+0x17c>
 8008ac8:	2306      	movs	r3, #6
 8008aca:	6063      	str	r3, [r4, #4]
 8008acc:	9b05      	ldr	r3, [sp, #20]
 8008ace:	6861      	ldr	r1, [r4, #4]
 8008ad0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	ab0a      	add	r3, sp, #40	; 0x28
 8008ada:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008ade:	ab09      	add	r3, sp, #36	; 0x24
 8008ae0:	ec49 8b10 	vmov	d0, r8, r9
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	6022      	str	r2, [r4, #0]
 8008ae8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008aec:	4628      	mov	r0, r5
 8008aee:	f7ff fecd 	bl	800888c <__cvt>
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008af6:	2b47      	cmp	r3, #71	; 0x47
 8008af8:	4680      	mov	r8, r0
 8008afa:	d108      	bne.n	8008b0e <_printf_float+0x142>
 8008afc:	1cc8      	adds	r0, r1, #3
 8008afe:	db02      	blt.n	8008b06 <_printf_float+0x13a>
 8008b00:	6863      	ldr	r3, [r4, #4]
 8008b02:	4299      	cmp	r1, r3
 8008b04:	dd41      	ble.n	8008b8a <_printf_float+0x1be>
 8008b06:	f1ab 0b02 	sub.w	fp, fp, #2
 8008b0a:	fa5f fb8b 	uxtb.w	fp, fp
 8008b0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008b12:	d820      	bhi.n	8008b56 <_printf_float+0x18a>
 8008b14:	3901      	subs	r1, #1
 8008b16:	465a      	mov	r2, fp
 8008b18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008b1c:	9109      	str	r1, [sp, #36]	; 0x24
 8008b1e:	f7ff ff17 	bl	8008950 <__exponent>
 8008b22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b24:	1813      	adds	r3, r2, r0
 8008b26:	2a01      	cmp	r2, #1
 8008b28:	4681      	mov	r9, r0
 8008b2a:	6123      	str	r3, [r4, #16]
 8008b2c:	dc02      	bgt.n	8008b34 <_printf_float+0x168>
 8008b2e:	6822      	ldr	r2, [r4, #0]
 8008b30:	07d2      	lsls	r2, r2, #31
 8008b32:	d501      	bpl.n	8008b38 <_printf_float+0x16c>
 8008b34:	3301      	adds	r3, #1
 8008b36:	6123      	str	r3, [r4, #16]
 8008b38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d09c      	beq.n	8008a7a <_printf_float+0xae>
 8008b40:	232d      	movs	r3, #45	; 0x2d
 8008b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b46:	e798      	b.n	8008a7a <_printf_float+0xae>
 8008b48:	9a06      	ldr	r2, [sp, #24]
 8008b4a:	2a47      	cmp	r2, #71	; 0x47
 8008b4c:	d1be      	bne.n	8008acc <_printf_float+0x100>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1bc      	bne.n	8008acc <_printf_float+0x100>
 8008b52:	2301      	movs	r3, #1
 8008b54:	e7b9      	b.n	8008aca <_printf_float+0xfe>
 8008b56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008b5a:	d118      	bne.n	8008b8e <_printf_float+0x1c2>
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	6863      	ldr	r3, [r4, #4]
 8008b60:	dd0b      	ble.n	8008b7a <_printf_float+0x1ae>
 8008b62:	6121      	str	r1, [r4, #16]
 8008b64:	b913      	cbnz	r3, 8008b6c <_printf_float+0x1a0>
 8008b66:	6822      	ldr	r2, [r4, #0]
 8008b68:	07d0      	lsls	r0, r2, #31
 8008b6a:	d502      	bpl.n	8008b72 <_printf_float+0x1a6>
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	440b      	add	r3, r1
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b74:	f04f 0900 	mov.w	r9, #0
 8008b78:	e7de      	b.n	8008b38 <_printf_float+0x16c>
 8008b7a:	b913      	cbnz	r3, 8008b82 <_printf_float+0x1b6>
 8008b7c:	6822      	ldr	r2, [r4, #0]
 8008b7e:	07d2      	lsls	r2, r2, #31
 8008b80:	d501      	bpl.n	8008b86 <_printf_float+0x1ba>
 8008b82:	3302      	adds	r3, #2
 8008b84:	e7f4      	b.n	8008b70 <_printf_float+0x1a4>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e7f2      	b.n	8008b70 <_printf_float+0x1a4>
 8008b8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b90:	4299      	cmp	r1, r3
 8008b92:	db05      	blt.n	8008ba0 <_printf_float+0x1d4>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	6121      	str	r1, [r4, #16]
 8008b98:	07d8      	lsls	r0, r3, #31
 8008b9a:	d5ea      	bpl.n	8008b72 <_printf_float+0x1a6>
 8008b9c:	1c4b      	adds	r3, r1, #1
 8008b9e:	e7e7      	b.n	8008b70 <_printf_float+0x1a4>
 8008ba0:	2900      	cmp	r1, #0
 8008ba2:	bfd4      	ite	le
 8008ba4:	f1c1 0202 	rsble	r2, r1, #2
 8008ba8:	2201      	movgt	r2, #1
 8008baa:	4413      	add	r3, r2
 8008bac:	e7e0      	b.n	8008b70 <_printf_float+0x1a4>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	055a      	lsls	r2, r3, #21
 8008bb2:	d407      	bmi.n	8008bc4 <_printf_float+0x1f8>
 8008bb4:	6923      	ldr	r3, [r4, #16]
 8008bb6:	4642      	mov	r2, r8
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b8      	blx	r7
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d12c      	bne.n	8008c1c <_printf_float+0x250>
 8008bc2:	e764      	b.n	8008a8e <_printf_float+0xc2>
 8008bc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008bc8:	f240 80e0 	bls.w	8008d8c <_printf_float+0x3c0>
 8008bcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f7f7 ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d034      	beq.n	8008c46 <_printf_float+0x27a>
 8008bdc:	4a37      	ldr	r2, [pc, #220]	; (8008cbc <_printf_float+0x2f0>)
 8008bde:	2301      	movs	r3, #1
 8008be0:	4631      	mov	r1, r6
 8008be2:	4628      	mov	r0, r5
 8008be4:	47b8      	blx	r7
 8008be6:	3001      	adds	r0, #1
 8008be8:	f43f af51 	beq.w	8008a8e <_printf_float+0xc2>
 8008bec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	db02      	blt.n	8008bfa <_printf_float+0x22e>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	07d8      	lsls	r0, r3, #31
 8008bf8:	d510      	bpl.n	8008c1c <_printf_float+0x250>
 8008bfa:	ee18 3a10 	vmov	r3, s16
 8008bfe:	4652      	mov	r2, sl
 8008c00:	4631      	mov	r1, r6
 8008c02:	4628      	mov	r0, r5
 8008c04:	47b8      	blx	r7
 8008c06:	3001      	adds	r0, #1
 8008c08:	f43f af41 	beq.w	8008a8e <_printf_float+0xc2>
 8008c0c:	f04f 0800 	mov.w	r8, #0
 8008c10:	f104 091a 	add.w	r9, r4, #26
 8008c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c16:	3b01      	subs	r3, #1
 8008c18:	4543      	cmp	r3, r8
 8008c1a:	dc09      	bgt.n	8008c30 <_printf_float+0x264>
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	079b      	lsls	r3, r3, #30
 8008c20:	f100 8105 	bmi.w	8008e2e <_printf_float+0x462>
 8008c24:	68e0      	ldr	r0, [r4, #12]
 8008c26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c28:	4298      	cmp	r0, r3
 8008c2a:	bfb8      	it	lt
 8008c2c:	4618      	movlt	r0, r3
 8008c2e:	e730      	b.n	8008a92 <_printf_float+0xc6>
 8008c30:	2301      	movs	r3, #1
 8008c32:	464a      	mov	r2, r9
 8008c34:	4631      	mov	r1, r6
 8008c36:	4628      	mov	r0, r5
 8008c38:	47b8      	blx	r7
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	f43f af27 	beq.w	8008a8e <_printf_float+0xc2>
 8008c40:	f108 0801 	add.w	r8, r8, #1
 8008c44:	e7e6      	b.n	8008c14 <_printf_float+0x248>
 8008c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dc39      	bgt.n	8008cc0 <_printf_float+0x2f4>
 8008c4c:	4a1b      	ldr	r2, [pc, #108]	; (8008cbc <_printf_float+0x2f0>)
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	47b8      	blx	r7
 8008c56:	3001      	adds	r0, #1
 8008c58:	f43f af19 	beq.w	8008a8e <_printf_float+0xc2>
 8008c5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c60:	4313      	orrs	r3, r2
 8008c62:	d102      	bne.n	8008c6a <_printf_float+0x29e>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	07d9      	lsls	r1, r3, #31
 8008c68:	d5d8      	bpl.n	8008c1c <_printf_float+0x250>
 8008c6a:	ee18 3a10 	vmov	r3, s16
 8008c6e:	4652      	mov	r2, sl
 8008c70:	4631      	mov	r1, r6
 8008c72:	4628      	mov	r0, r5
 8008c74:	47b8      	blx	r7
 8008c76:	3001      	adds	r0, #1
 8008c78:	f43f af09 	beq.w	8008a8e <_printf_float+0xc2>
 8008c7c:	f04f 0900 	mov.w	r9, #0
 8008c80:	f104 0a1a 	add.w	sl, r4, #26
 8008c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c86:	425b      	negs	r3, r3
 8008c88:	454b      	cmp	r3, r9
 8008c8a:	dc01      	bgt.n	8008c90 <_printf_float+0x2c4>
 8008c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c8e:	e792      	b.n	8008bb6 <_printf_float+0x1ea>
 8008c90:	2301      	movs	r3, #1
 8008c92:	4652      	mov	r2, sl
 8008c94:	4631      	mov	r1, r6
 8008c96:	4628      	mov	r0, r5
 8008c98:	47b8      	blx	r7
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	f43f aef7 	beq.w	8008a8e <_printf_float+0xc2>
 8008ca0:	f109 0901 	add.w	r9, r9, #1
 8008ca4:	e7ee      	b.n	8008c84 <_printf_float+0x2b8>
 8008ca6:	bf00      	nop
 8008ca8:	7fefffff 	.word	0x7fefffff
 8008cac:	0800d0c0 	.word	0x0800d0c0
 8008cb0:	0800d0c4 	.word	0x0800d0c4
 8008cb4:	0800d0cc 	.word	0x0800d0cc
 8008cb8:	0800d0c8 	.word	0x0800d0c8
 8008cbc:	0800d0d0 	.word	0x0800d0d0
 8008cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008cc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	bfa8      	it	ge
 8008cc8:	461a      	movge	r2, r3
 8008cca:	2a00      	cmp	r2, #0
 8008ccc:	4691      	mov	r9, r2
 8008cce:	dc37      	bgt.n	8008d40 <_printf_float+0x374>
 8008cd0:	f04f 0b00 	mov.w	fp, #0
 8008cd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd8:	f104 021a 	add.w	r2, r4, #26
 8008cdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008cde:	9305      	str	r3, [sp, #20]
 8008ce0:	eba3 0309 	sub.w	r3, r3, r9
 8008ce4:	455b      	cmp	r3, fp
 8008ce6:	dc33      	bgt.n	8008d50 <_printf_float+0x384>
 8008ce8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008cec:	429a      	cmp	r2, r3
 8008cee:	db3b      	blt.n	8008d68 <_printf_float+0x39c>
 8008cf0:	6823      	ldr	r3, [r4, #0]
 8008cf2:	07da      	lsls	r2, r3, #31
 8008cf4:	d438      	bmi.n	8008d68 <_printf_float+0x39c>
 8008cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf8:	9a05      	ldr	r2, [sp, #20]
 8008cfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008cfc:	1a9a      	subs	r2, r3, r2
 8008cfe:	eba3 0901 	sub.w	r9, r3, r1
 8008d02:	4591      	cmp	r9, r2
 8008d04:	bfa8      	it	ge
 8008d06:	4691      	movge	r9, r2
 8008d08:	f1b9 0f00 	cmp.w	r9, #0
 8008d0c:	dc35      	bgt.n	8008d7a <_printf_float+0x3ae>
 8008d0e:	f04f 0800 	mov.w	r8, #0
 8008d12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d16:	f104 0a1a 	add.w	sl, r4, #26
 8008d1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d1e:	1a9b      	subs	r3, r3, r2
 8008d20:	eba3 0309 	sub.w	r3, r3, r9
 8008d24:	4543      	cmp	r3, r8
 8008d26:	f77f af79 	ble.w	8008c1c <_printf_float+0x250>
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	4652      	mov	r2, sl
 8008d2e:	4631      	mov	r1, r6
 8008d30:	4628      	mov	r0, r5
 8008d32:	47b8      	blx	r7
 8008d34:	3001      	adds	r0, #1
 8008d36:	f43f aeaa 	beq.w	8008a8e <_printf_float+0xc2>
 8008d3a:	f108 0801 	add.w	r8, r8, #1
 8008d3e:	e7ec      	b.n	8008d1a <_printf_float+0x34e>
 8008d40:	4613      	mov	r3, r2
 8008d42:	4631      	mov	r1, r6
 8008d44:	4642      	mov	r2, r8
 8008d46:	4628      	mov	r0, r5
 8008d48:	47b8      	blx	r7
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	d1c0      	bne.n	8008cd0 <_printf_float+0x304>
 8008d4e:	e69e      	b.n	8008a8e <_printf_float+0xc2>
 8008d50:	2301      	movs	r3, #1
 8008d52:	4631      	mov	r1, r6
 8008d54:	4628      	mov	r0, r5
 8008d56:	9205      	str	r2, [sp, #20]
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f43f ae97 	beq.w	8008a8e <_printf_float+0xc2>
 8008d60:	9a05      	ldr	r2, [sp, #20]
 8008d62:	f10b 0b01 	add.w	fp, fp, #1
 8008d66:	e7b9      	b.n	8008cdc <_printf_float+0x310>
 8008d68:	ee18 3a10 	vmov	r3, s16
 8008d6c:	4652      	mov	r2, sl
 8008d6e:	4631      	mov	r1, r6
 8008d70:	4628      	mov	r0, r5
 8008d72:	47b8      	blx	r7
 8008d74:	3001      	adds	r0, #1
 8008d76:	d1be      	bne.n	8008cf6 <_printf_float+0x32a>
 8008d78:	e689      	b.n	8008a8e <_printf_float+0xc2>
 8008d7a:	9a05      	ldr	r2, [sp, #20]
 8008d7c:	464b      	mov	r3, r9
 8008d7e:	4442      	add	r2, r8
 8008d80:	4631      	mov	r1, r6
 8008d82:	4628      	mov	r0, r5
 8008d84:	47b8      	blx	r7
 8008d86:	3001      	adds	r0, #1
 8008d88:	d1c1      	bne.n	8008d0e <_printf_float+0x342>
 8008d8a:	e680      	b.n	8008a8e <_printf_float+0xc2>
 8008d8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d8e:	2a01      	cmp	r2, #1
 8008d90:	dc01      	bgt.n	8008d96 <_printf_float+0x3ca>
 8008d92:	07db      	lsls	r3, r3, #31
 8008d94:	d538      	bpl.n	8008e08 <_printf_float+0x43c>
 8008d96:	2301      	movs	r3, #1
 8008d98:	4642      	mov	r2, r8
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	f43f ae74 	beq.w	8008a8e <_printf_float+0xc2>
 8008da6:	ee18 3a10 	vmov	r3, s16
 8008daa:	4652      	mov	r2, sl
 8008dac:	4631      	mov	r1, r6
 8008dae:	4628      	mov	r0, r5
 8008db0:	47b8      	blx	r7
 8008db2:	3001      	adds	r0, #1
 8008db4:	f43f ae6b 	beq.w	8008a8e <_printf_float+0xc2>
 8008db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	f7f7 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 8008dc4:	b9d8      	cbnz	r0, 8008dfe <_printf_float+0x432>
 8008dc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc8:	f108 0201 	add.w	r2, r8, #1
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d10e      	bne.n	8008df6 <_printf_float+0x42a>
 8008dd8:	e659      	b.n	8008a8e <_printf_float+0xc2>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4652      	mov	r2, sl
 8008dde:	4631      	mov	r1, r6
 8008de0:	4628      	mov	r0, r5
 8008de2:	47b8      	blx	r7
 8008de4:	3001      	adds	r0, #1
 8008de6:	f43f ae52 	beq.w	8008a8e <_printf_float+0xc2>
 8008dea:	f108 0801 	add.w	r8, r8, #1
 8008dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008df0:	3b01      	subs	r3, #1
 8008df2:	4543      	cmp	r3, r8
 8008df4:	dcf1      	bgt.n	8008dda <_printf_float+0x40e>
 8008df6:	464b      	mov	r3, r9
 8008df8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008dfc:	e6dc      	b.n	8008bb8 <_printf_float+0x1ec>
 8008dfe:	f04f 0800 	mov.w	r8, #0
 8008e02:	f104 0a1a 	add.w	sl, r4, #26
 8008e06:	e7f2      	b.n	8008dee <_printf_float+0x422>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4642      	mov	r2, r8
 8008e0c:	e7df      	b.n	8008dce <_printf_float+0x402>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	464a      	mov	r2, r9
 8008e12:	4631      	mov	r1, r6
 8008e14:	4628      	mov	r0, r5
 8008e16:	47b8      	blx	r7
 8008e18:	3001      	adds	r0, #1
 8008e1a:	f43f ae38 	beq.w	8008a8e <_printf_float+0xc2>
 8008e1e:	f108 0801 	add.w	r8, r8, #1
 8008e22:	68e3      	ldr	r3, [r4, #12]
 8008e24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e26:	1a5b      	subs	r3, r3, r1
 8008e28:	4543      	cmp	r3, r8
 8008e2a:	dcf0      	bgt.n	8008e0e <_printf_float+0x442>
 8008e2c:	e6fa      	b.n	8008c24 <_printf_float+0x258>
 8008e2e:	f04f 0800 	mov.w	r8, #0
 8008e32:	f104 0919 	add.w	r9, r4, #25
 8008e36:	e7f4      	b.n	8008e22 <_printf_float+0x456>

08008e38 <_printf_common>:
 8008e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3c:	4616      	mov	r6, r2
 8008e3e:	4699      	mov	r9, r3
 8008e40:	688a      	ldr	r2, [r1, #8]
 8008e42:	690b      	ldr	r3, [r1, #16]
 8008e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	bfb8      	it	lt
 8008e4c:	4613      	movlt	r3, r2
 8008e4e:	6033      	str	r3, [r6, #0]
 8008e50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e54:	4607      	mov	r7, r0
 8008e56:	460c      	mov	r4, r1
 8008e58:	b10a      	cbz	r2, 8008e5e <_printf_common+0x26>
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	6823      	ldr	r3, [r4, #0]
 8008e60:	0699      	lsls	r1, r3, #26
 8008e62:	bf42      	ittt	mi
 8008e64:	6833      	ldrmi	r3, [r6, #0]
 8008e66:	3302      	addmi	r3, #2
 8008e68:	6033      	strmi	r3, [r6, #0]
 8008e6a:	6825      	ldr	r5, [r4, #0]
 8008e6c:	f015 0506 	ands.w	r5, r5, #6
 8008e70:	d106      	bne.n	8008e80 <_printf_common+0x48>
 8008e72:	f104 0a19 	add.w	sl, r4, #25
 8008e76:	68e3      	ldr	r3, [r4, #12]
 8008e78:	6832      	ldr	r2, [r6, #0]
 8008e7a:	1a9b      	subs	r3, r3, r2
 8008e7c:	42ab      	cmp	r3, r5
 8008e7e:	dc26      	bgt.n	8008ece <_printf_common+0x96>
 8008e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e84:	1e13      	subs	r3, r2, #0
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	bf18      	it	ne
 8008e8a:	2301      	movne	r3, #1
 8008e8c:	0692      	lsls	r2, r2, #26
 8008e8e:	d42b      	bmi.n	8008ee8 <_printf_common+0xb0>
 8008e90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e94:	4649      	mov	r1, r9
 8008e96:	4638      	mov	r0, r7
 8008e98:	47c0      	blx	r8
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d01e      	beq.n	8008edc <_printf_common+0xa4>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	68e5      	ldr	r5, [r4, #12]
 8008ea2:	6832      	ldr	r2, [r6, #0]
 8008ea4:	f003 0306 	and.w	r3, r3, #6
 8008ea8:	2b04      	cmp	r3, #4
 8008eaa:	bf08      	it	eq
 8008eac:	1aad      	subeq	r5, r5, r2
 8008eae:	68a3      	ldr	r3, [r4, #8]
 8008eb0:	6922      	ldr	r2, [r4, #16]
 8008eb2:	bf0c      	ite	eq
 8008eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eb8:	2500      	movne	r5, #0
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	bfc4      	itt	gt
 8008ebe:	1a9b      	subgt	r3, r3, r2
 8008ec0:	18ed      	addgt	r5, r5, r3
 8008ec2:	2600      	movs	r6, #0
 8008ec4:	341a      	adds	r4, #26
 8008ec6:	42b5      	cmp	r5, r6
 8008ec8:	d11a      	bne.n	8008f00 <_printf_common+0xc8>
 8008eca:	2000      	movs	r0, #0
 8008ecc:	e008      	b.n	8008ee0 <_printf_common+0xa8>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	4649      	mov	r1, r9
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	47c0      	blx	r8
 8008ed8:	3001      	adds	r0, #1
 8008eda:	d103      	bne.n	8008ee4 <_printf_common+0xac>
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee4:	3501      	adds	r5, #1
 8008ee6:	e7c6      	b.n	8008e76 <_printf_common+0x3e>
 8008ee8:	18e1      	adds	r1, r4, r3
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	2030      	movs	r0, #48	; 0x30
 8008eee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ef2:	4422      	add	r2, r4
 8008ef4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ef8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008efc:	3302      	adds	r3, #2
 8008efe:	e7c7      	b.n	8008e90 <_printf_common+0x58>
 8008f00:	2301      	movs	r3, #1
 8008f02:	4622      	mov	r2, r4
 8008f04:	4649      	mov	r1, r9
 8008f06:	4638      	mov	r0, r7
 8008f08:	47c0      	blx	r8
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d0e6      	beq.n	8008edc <_printf_common+0xa4>
 8008f0e:	3601      	adds	r6, #1
 8008f10:	e7d9      	b.n	8008ec6 <_printf_common+0x8e>
	...

08008f14 <_printf_i>:
 8008f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f18:	7e0f      	ldrb	r7, [r1, #24]
 8008f1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f1c:	2f78      	cmp	r7, #120	; 0x78
 8008f1e:	4691      	mov	r9, r2
 8008f20:	4680      	mov	r8, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	469a      	mov	sl, r3
 8008f26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f2a:	d807      	bhi.n	8008f3c <_printf_i+0x28>
 8008f2c:	2f62      	cmp	r7, #98	; 0x62
 8008f2e:	d80a      	bhi.n	8008f46 <_printf_i+0x32>
 8008f30:	2f00      	cmp	r7, #0
 8008f32:	f000 80d8 	beq.w	80090e6 <_printf_i+0x1d2>
 8008f36:	2f58      	cmp	r7, #88	; 0x58
 8008f38:	f000 80a3 	beq.w	8009082 <_printf_i+0x16e>
 8008f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f44:	e03a      	b.n	8008fbc <_printf_i+0xa8>
 8008f46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f4a:	2b15      	cmp	r3, #21
 8008f4c:	d8f6      	bhi.n	8008f3c <_printf_i+0x28>
 8008f4e:	a101      	add	r1, pc, #4	; (adr r1, 8008f54 <_printf_i+0x40>)
 8008f50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f54:	08008fad 	.word	0x08008fad
 8008f58:	08008fc1 	.word	0x08008fc1
 8008f5c:	08008f3d 	.word	0x08008f3d
 8008f60:	08008f3d 	.word	0x08008f3d
 8008f64:	08008f3d 	.word	0x08008f3d
 8008f68:	08008f3d 	.word	0x08008f3d
 8008f6c:	08008fc1 	.word	0x08008fc1
 8008f70:	08008f3d 	.word	0x08008f3d
 8008f74:	08008f3d 	.word	0x08008f3d
 8008f78:	08008f3d 	.word	0x08008f3d
 8008f7c:	08008f3d 	.word	0x08008f3d
 8008f80:	080090cd 	.word	0x080090cd
 8008f84:	08008ff1 	.word	0x08008ff1
 8008f88:	080090af 	.word	0x080090af
 8008f8c:	08008f3d 	.word	0x08008f3d
 8008f90:	08008f3d 	.word	0x08008f3d
 8008f94:	080090ef 	.word	0x080090ef
 8008f98:	08008f3d 	.word	0x08008f3d
 8008f9c:	08008ff1 	.word	0x08008ff1
 8008fa0:	08008f3d 	.word	0x08008f3d
 8008fa4:	08008f3d 	.word	0x08008f3d
 8008fa8:	080090b7 	.word	0x080090b7
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	1d1a      	adds	r2, r3, #4
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	602a      	str	r2, [r5, #0]
 8008fb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e0a3      	b.n	8009108 <_printf_i+0x1f4>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	6829      	ldr	r1, [r5, #0]
 8008fc4:	0606      	lsls	r6, r0, #24
 8008fc6:	f101 0304 	add.w	r3, r1, #4
 8008fca:	d50a      	bpl.n	8008fe2 <_printf_i+0xce>
 8008fcc:	680e      	ldr	r6, [r1, #0]
 8008fce:	602b      	str	r3, [r5, #0]
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	da03      	bge.n	8008fdc <_printf_i+0xc8>
 8008fd4:	232d      	movs	r3, #45	; 0x2d
 8008fd6:	4276      	negs	r6, r6
 8008fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fdc:	485e      	ldr	r0, [pc, #376]	; (8009158 <_printf_i+0x244>)
 8008fde:	230a      	movs	r3, #10
 8008fe0:	e019      	b.n	8009016 <_printf_i+0x102>
 8008fe2:	680e      	ldr	r6, [r1, #0]
 8008fe4:	602b      	str	r3, [r5, #0]
 8008fe6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008fea:	bf18      	it	ne
 8008fec:	b236      	sxthne	r6, r6
 8008fee:	e7ef      	b.n	8008fd0 <_printf_i+0xbc>
 8008ff0:	682b      	ldr	r3, [r5, #0]
 8008ff2:	6820      	ldr	r0, [r4, #0]
 8008ff4:	1d19      	adds	r1, r3, #4
 8008ff6:	6029      	str	r1, [r5, #0]
 8008ff8:	0601      	lsls	r1, r0, #24
 8008ffa:	d501      	bpl.n	8009000 <_printf_i+0xec>
 8008ffc:	681e      	ldr	r6, [r3, #0]
 8008ffe:	e002      	b.n	8009006 <_printf_i+0xf2>
 8009000:	0646      	lsls	r6, r0, #25
 8009002:	d5fb      	bpl.n	8008ffc <_printf_i+0xe8>
 8009004:	881e      	ldrh	r6, [r3, #0]
 8009006:	4854      	ldr	r0, [pc, #336]	; (8009158 <_printf_i+0x244>)
 8009008:	2f6f      	cmp	r7, #111	; 0x6f
 800900a:	bf0c      	ite	eq
 800900c:	2308      	moveq	r3, #8
 800900e:	230a      	movne	r3, #10
 8009010:	2100      	movs	r1, #0
 8009012:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009016:	6865      	ldr	r5, [r4, #4]
 8009018:	60a5      	str	r5, [r4, #8]
 800901a:	2d00      	cmp	r5, #0
 800901c:	bfa2      	ittt	ge
 800901e:	6821      	ldrge	r1, [r4, #0]
 8009020:	f021 0104 	bicge.w	r1, r1, #4
 8009024:	6021      	strge	r1, [r4, #0]
 8009026:	b90e      	cbnz	r6, 800902c <_printf_i+0x118>
 8009028:	2d00      	cmp	r5, #0
 800902a:	d04d      	beq.n	80090c8 <_printf_i+0x1b4>
 800902c:	4615      	mov	r5, r2
 800902e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009032:	fb03 6711 	mls	r7, r3, r1, r6
 8009036:	5dc7      	ldrb	r7, [r0, r7]
 8009038:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800903c:	4637      	mov	r7, r6
 800903e:	42bb      	cmp	r3, r7
 8009040:	460e      	mov	r6, r1
 8009042:	d9f4      	bls.n	800902e <_printf_i+0x11a>
 8009044:	2b08      	cmp	r3, #8
 8009046:	d10b      	bne.n	8009060 <_printf_i+0x14c>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	07de      	lsls	r6, r3, #31
 800904c:	d508      	bpl.n	8009060 <_printf_i+0x14c>
 800904e:	6923      	ldr	r3, [r4, #16]
 8009050:	6861      	ldr	r1, [r4, #4]
 8009052:	4299      	cmp	r1, r3
 8009054:	bfde      	ittt	le
 8009056:	2330      	movle	r3, #48	; 0x30
 8009058:	f805 3c01 	strble.w	r3, [r5, #-1]
 800905c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009060:	1b52      	subs	r2, r2, r5
 8009062:	6122      	str	r2, [r4, #16]
 8009064:	f8cd a000 	str.w	sl, [sp]
 8009068:	464b      	mov	r3, r9
 800906a:	aa03      	add	r2, sp, #12
 800906c:	4621      	mov	r1, r4
 800906e:	4640      	mov	r0, r8
 8009070:	f7ff fee2 	bl	8008e38 <_printf_common>
 8009074:	3001      	adds	r0, #1
 8009076:	d14c      	bne.n	8009112 <_printf_i+0x1fe>
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	b004      	add	sp, #16
 800907e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009082:	4835      	ldr	r0, [pc, #212]	; (8009158 <_printf_i+0x244>)
 8009084:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009088:	6829      	ldr	r1, [r5, #0]
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009090:	6029      	str	r1, [r5, #0]
 8009092:	061d      	lsls	r5, r3, #24
 8009094:	d514      	bpl.n	80090c0 <_printf_i+0x1ac>
 8009096:	07df      	lsls	r7, r3, #31
 8009098:	bf44      	itt	mi
 800909a:	f043 0320 	orrmi.w	r3, r3, #32
 800909e:	6023      	strmi	r3, [r4, #0]
 80090a0:	b91e      	cbnz	r6, 80090aa <_printf_i+0x196>
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	f023 0320 	bic.w	r3, r3, #32
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	2310      	movs	r3, #16
 80090ac:	e7b0      	b.n	8009010 <_printf_i+0xfc>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	f043 0320 	orr.w	r3, r3, #32
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	2378      	movs	r3, #120	; 0x78
 80090b8:	4828      	ldr	r0, [pc, #160]	; (800915c <_printf_i+0x248>)
 80090ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090be:	e7e3      	b.n	8009088 <_printf_i+0x174>
 80090c0:	0659      	lsls	r1, r3, #25
 80090c2:	bf48      	it	mi
 80090c4:	b2b6      	uxthmi	r6, r6
 80090c6:	e7e6      	b.n	8009096 <_printf_i+0x182>
 80090c8:	4615      	mov	r5, r2
 80090ca:	e7bb      	b.n	8009044 <_printf_i+0x130>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	6826      	ldr	r6, [r4, #0]
 80090d0:	6961      	ldr	r1, [r4, #20]
 80090d2:	1d18      	adds	r0, r3, #4
 80090d4:	6028      	str	r0, [r5, #0]
 80090d6:	0635      	lsls	r5, r6, #24
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	d501      	bpl.n	80090e0 <_printf_i+0x1cc>
 80090dc:	6019      	str	r1, [r3, #0]
 80090de:	e002      	b.n	80090e6 <_printf_i+0x1d2>
 80090e0:	0670      	lsls	r0, r6, #25
 80090e2:	d5fb      	bpl.n	80090dc <_printf_i+0x1c8>
 80090e4:	8019      	strh	r1, [r3, #0]
 80090e6:	2300      	movs	r3, #0
 80090e8:	6123      	str	r3, [r4, #16]
 80090ea:	4615      	mov	r5, r2
 80090ec:	e7ba      	b.n	8009064 <_printf_i+0x150>
 80090ee:	682b      	ldr	r3, [r5, #0]
 80090f0:	1d1a      	adds	r2, r3, #4
 80090f2:	602a      	str	r2, [r5, #0]
 80090f4:	681d      	ldr	r5, [r3, #0]
 80090f6:	6862      	ldr	r2, [r4, #4]
 80090f8:	2100      	movs	r1, #0
 80090fa:	4628      	mov	r0, r5
 80090fc:	f7f7 f870 	bl	80001e0 <memchr>
 8009100:	b108      	cbz	r0, 8009106 <_printf_i+0x1f2>
 8009102:	1b40      	subs	r0, r0, r5
 8009104:	6060      	str	r0, [r4, #4]
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	6123      	str	r3, [r4, #16]
 800910a:	2300      	movs	r3, #0
 800910c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009110:	e7a8      	b.n	8009064 <_printf_i+0x150>
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	462a      	mov	r2, r5
 8009116:	4649      	mov	r1, r9
 8009118:	4640      	mov	r0, r8
 800911a:	47d0      	blx	sl
 800911c:	3001      	adds	r0, #1
 800911e:	d0ab      	beq.n	8009078 <_printf_i+0x164>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	079b      	lsls	r3, r3, #30
 8009124:	d413      	bmi.n	800914e <_printf_i+0x23a>
 8009126:	68e0      	ldr	r0, [r4, #12]
 8009128:	9b03      	ldr	r3, [sp, #12]
 800912a:	4298      	cmp	r0, r3
 800912c:	bfb8      	it	lt
 800912e:	4618      	movlt	r0, r3
 8009130:	e7a4      	b.n	800907c <_printf_i+0x168>
 8009132:	2301      	movs	r3, #1
 8009134:	4632      	mov	r2, r6
 8009136:	4649      	mov	r1, r9
 8009138:	4640      	mov	r0, r8
 800913a:	47d0      	blx	sl
 800913c:	3001      	adds	r0, #1
 800913e:	d09b      	beq.n	8009078 <_printf_i+0x164>
 8009140:	3501      	adds	r5, #1
 8009142:	68e3      	ldr	r3, [r4, #12]
 8009144:	9903      	ldr	r1, [sp, #12]
 8009146:	1a5b      	subs	r3, r3, r1
 8009148:	42ab      	cmp	r3, r5
 800914a:	dcf2      	bgt.n	8009132 <_printf_i+0x21e>
 800914c:	e7eb      	b.n	8009126 <_printf_i+0x212>
 800914e:	2500      	movs	r5, #0
 8009150:	f104 0619 	add.w	r6, r4, #25
 8009154:	e7f5      	b.n	8009142 <_printf_i+0x22e>
 8009156:	bf00      	nop
 8009158:	0800d0d2 	.word	0x0800d0d2
 800915c:	0800d0e3 	.word	0x0800d0e3

08009160 <_scanf_float>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	b087      	sub	sp, #28
 8009166:	4617      	mov	r7, r2
 8009168:	9303      	str	r3, [sp, #12]
 800916a:	688b      	ldr	r3, [r1, #8]
 800916c:	1e5a      	subs	r2, r3, #1
 800916e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009172:	bf83      	ittte	hi
 8009174:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009178:	195b      	addhi	r3, r3, r5
 800917a:	9302      	strhi	r3, [sp, #8]
 800917c:	2300      	movls	r3, #0
 800917e:	bf86      	itte	hi
 8009180:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009184:	608b      	strhi	r3, [r1, #8]
 8009186:	9302      	strls	r3, [sp, #8]
 8009188:	680b      	ldr	r3, [r1, #0]
 800918a:	468b      	mov	fp, r1
 800918c:	2500      	movs	r5, #0
 800918e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009192:	f84b 3b1c 	str.w	r3, [fp], #28
 8009196:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800919a:	4680      	mov	r8, r0
 800919c:	460c      	mov	r4, r1
 800919e:	465e      	mov	r6, fp
 80091a0:	46aa      	mov	sl, r5
 80091a2:	46a9      	mov	r9, r5
 80091a4:	9501      	str	r5, [sp, #4]
 80091a6:	68a2      	ldr	r2, [r4, #8]
 80091a8:	b152      	cbz	r2, 80091c0 <_scanf_float+0x60>
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2b4e      	cmp	r3, #78	; 0x4e
 80091b0:	d864      	bhi.n	800927c <_scanf_float+0x11c>
 80091b2:	2b40      	cmp	r3, #64	; 0x40
 80091b4:	d83c      	bhi.n	8009230 <_scanf_float+0xd0>
 80091b6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80091ba:	b2c8      	uxtb	r0, r1
 80091bc:	280e      	cmp	r0, #14
 80091be:	d93a      	bls.n	8009236 <_scanf_float+0xd6>
 80091c0:	f1b9 0f00 	cmp.w	r9, #0
 80091c4:	d003      	beq.n	80091ce <_scanf_float+0x6e>
 80091c6:	6823      	ldr	r3, [r4, #0]
 80091c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091d2:	f1ba 0f01 	cmp.w	sl, #1
 80091d6:	f200 8113 	bhi.w	8009400 <_scanf_float+0x2a0>
 80091da:	455e      	cmp	r6, fp
 80091dc:	f200 8105 	bhi.w	80093ea <_scanf_float+0x28a>
 80091e0:	2501      	movs	r5, #1
 80091e2:	4628      	mov	r0, r5
 80091e4:	b007      	add	sp, #28
 80091e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80091ee:	2a0d      	cmp	r2, #13
 80091f0:	d8e6      	bhi.n	80091c0 <_scanf_float+0x60>
 80091f2:	a101      	add	r1, pc, #4	; (adr r1, 80091f8 <_scanf_float+0x98>)
 80091f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80091f8:	08009337 	.word	0x08009337
 80091fc:	080091c1 	.word	0x080091c1
 8009200:	080091c1 	.word	0x080091c1
 8009204:	080091c1 	.word	0x080091c1
 8009208:	08009397 	.word	0x08009397
 800920c:	0800936f 	.word	0x0800936f
 8009210:	080091c1 	.word	0x080091c1
 8009214:	080091c1 	.word	0x080091c1
 8009218:	08009345 	.word	0x08009345
 800921c:	080091c1 	.word	0x080091c1
 8009220:	080091c1 	.word	0x080091c1
 8009224:	080091c1 	.word	0x080091c1
 8009228:	080091c1 	.word	0x080091c1
 800922c:	080092fd 	.word	0x080092fd
 8009230:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009234:	e7db      	b.n	80091ee <_scanf_float+0x8e>
 8009236:	290e      	cmp	r1, #14
 8009238:	d8c2      	bhi.n	80091c0 <_scanf_float+0x60>
 800923a:	a001      	add	r0, pc, #4	; (adr r0, 8009240 <_scanf_float+0xe0>)
 800923c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009240:	080092ef 	.word	0x080092ef
 8009244:	080091c1 	.word	0x080091c1
 8009248:	080092ef 	.word	0x080092ef
 800924c:	08009383 	.word	0x08009383
 8009250:	080091c1 	.word	0x080091c1
 8009254:	0800929d 	.word	0x0800929d
 8009258:	080092d9 	.word	0x080092d9
 800925c:	080092d9 	.word	0x080092d9
 8009260:	080092d9 	.word	0x080092d9
 8009264:	080092d9 	.word	0x080092d9
 8009268:	080092d9 	.word	0x080092d9
 800926c:	080092d9 	.word	0x080092d9
 8009270:	080092d9 	.word	0x080092d9
 8009274:	080092d9 	.word	0x080092d9
 8009278:	080092d9 	.word	0x080092d9
 800927c:	2b6e      	cmp	r3, #110	; 0x6e
 800927e:	d809      	bhi.n	8009294 <_scanf_float+0x134>
 8009280:	2b60      	cmp	r3, #96	; 0x60
 8009282:	d8b2      	bhi.n	80091ea <_scanf_float+0x8a>
 8009284:	2b54      	cmp	r3, #84	; 0x54
 8009286:	d077      	beq.n	8009378 <_scanf_float+0x218>
 8009288:	2b59      	cmp	r3, #89	; 0x59
 800928a:	d199      	bne.n	80091c0 <_scanf_float+0x60>
 800928c:	2d07      	cmp	r5, #7
 800928e:	d197      	bne.n	80091c0 <_scanf_float+0x60>
 8009290:	2508      	movs	r5, #8
 8009292:	e029      	b.n	80092e8 <_scanf_float+0x188>
 8009294:	2b74      	cmp	r3, #116	; 0x74
 8009296:	d06f      	beq.n	8009378 <_scanf_float+0x218>
 8009298:	2b79      	cmp	r3, #121	; 0x79
 800929a:	e7f6      	b.n	800928a <_scanf_float+0x12a>
 800929c:	6821      	ldr	r1, [r4, #0]
 800929e:	05c8      	lsls	r0, r1, #23
 80092a0:	d51a      	bpl.n	80092d8 <_scanf_float+0x178>
 80092a2:	9b02      	ldr	r3, [sp, #8]
 80092a4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80092a8:	6021      	str	r1, [r4, #0]
 80092aa:	f109 0901 	add.w	r9, r9, #1
 80092ae:	b11b      	cbz	r3, 80092b8 <_scanf_float+0x158>
 80092b0:	3b01      	subs	r3, #1
 80092b2:	3201      	adds	r2, #1
 80092b4:	9302      	str	r3, [sp, #8]
 80092b6:	60a2      	str	r2, [r4, #8]
 80092b8:	68a3      	ldr	r3, [r4, #8]
 80092ba:	3b01      	subs	r3, #1
 80092bc:	60a3      	str	r3, [r4, #8]
 80092be:	6923      	ldr	r3, [r4, #16]
 80092c0:	3301      	adds	r3, #1
 80092c2:	6123      	str	r3, [r4, #16]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3b01      	subs	r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	607b      	str	r3, [r7, #4]
 80092cc:	f340 8084 	ble.w	80093d8 <_scanf_float+0x278>
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	3301      	adds	r3, #1
 80092d4:	603b      	str	r3, [r7, #0]
 80092d6:	e766      	b.n	80091a6 <_scanf_float+0x46>
 80092d8:	eb1a 0f05 	cmn.w	sl, r5
 80092dc:	f47f af70 	bne.w	80091c0 <_scanf_float+0x60>
 80092e0:	6822      	ldr	r2, [r4, #0]
 80092e2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80092e6:	6022      	str	r2, [r4, #0]
 80092e8:	f806 3b01 	strb.w	r3, [r6], #1
 80092ec:	e7e4      	b.n	80092b8 <_scanf_float+0x158>
 80092ee:	6822      	ldr	r2, [r4, #0]
 80092f0:	0610      	lsls	r0, r2, #24
 80092f2:	f57f af65 	bpl.w	80091c0 <_scanf_float+0x60>
 80092f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092fa:	e7f4      	b.n	80092e6 <_scanf_float+0x186>
 80092fc:	f1ba 0f00 	cmp.w	sl, #0
 8009300:	d10e      	bne.n	8009320 <_scanf_float+0x1c0>
 8009302:	f1b9 0f00 	cmp.w	r9, #0
 8009306:	d10e      	bne.n	8009326 <_scanf_float+0x1c6>
 8009308:	6822      	ldr	r2, [r4, #0]
 800930a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800930e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009312:	d108      	bne.n	8009326 <_scanf_float+0x1c6>
 8009314:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009318:	6022      	str	r2, [r4, #0]
 800931a:	f04f 0a01 	mov.w	sl, #1
 800931e:	e7e3      	b.n	80092e8 <_scanf_float+0x188>
 8009320:	f1ba 0f02 	cmp.w	sl, #2
 8009324:	d055      	beq.n	80093d2 <_scanf_float+0x272>
 8009326:	2d01      	cmp	r5, #1
 8009328:	d002      	beq.n	8009330 <_scanf_float+0x1d0>
 800932a:	2d04      	cmp	r5, #4
 800932c:	f47f af48 	bne.w	80091c0 <_scanf_float+0x60>
 8009330:	3501      	adds	r5, #1
 8009332:	b2ed      	uxtb	r5, r5
 8009334:	e7d8      	b.n	80092e8 <_scanf_float+0x188>
 8009336:	f1ba 0f01 	cmp.w	sl, #1
 800933a:	f47f af41 	bne.w	80091c0 <_scanf_float+0x60>
 800933e:	f04f 0a02 	mov.w	sl, #2
 8009342:	e7d1      	b.n	80092e8 <_scanf_float+0x188>
 8009344:	b97d      	cbnz	r5, 8009366 <_scanf_float+0x206>
 8009346:	f1b9 0f00 	cmp.w	r9, #0
 800934a:	f47f af3c 	bne.w	80091c6 <_scanf_float+0x66>
 800934e:	6822      	ldr	r2, [r4, #0]
 8009350:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009354:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009358:	f47f af39 	bne.w	80091ce <_scanf_float+0x6e>
 800935c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009360:	6022      	str	r2, [r4, #0]
 8009362:	2501      	movs	r5, #1
 8009364:	e7c0      	b.n	80092e8 <_scanf_float+0x188>
 8009366:	2d03      	cmp	r5, #3
 8009368:	d0e2      	beq.n	8009330 <_scanf_float+0x1d0>
 800936a:	2d05      	cmp	r5, #5
 800936c:	e7de      	b.n	800932c <_scanf_float+0x1cc>
 800936e:	2d02      	cmp	r5, #2
 8009370:	f47f af26 	bne.w	80091c0 <_scanf_float+0x60>
 8009374:	2503      	movs	r5, #3
 8009376:	e7b7      	b.n	80092e8 <_scanf_float+0x188>
 8009378:	2d06      	cmp	r5, #6
 800937a:	f47f af21 	bne.w	80091c0 <_scanf_float+0x60>
 800937e:	2507      	movs	r5, #7
 8009380:	e7b2      	b.n	80092e8 <_scanf_float+0x188>
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	0591      	lsls	r1, r2, #22
 8009386:	f57f af1b 	bpl.w	80091c0 <_scanf_float+0x60>
 800938a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800938e:	6022      	str	r2, [r4, #0]
 8009390:	f8cd 9004 	str.w	r9, [sp, #4]
 8009394:	e7a8      	b.n	80092e8 <_scanf_float+0x188>
 8009396:	6822      	ldr	r2, [r4, #0]
 8009398:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800939c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80093a0:	d006      	beq.n	80093b0 <_scanf_float+0x250>
 80093a2:	0550      	lsls	r0, r2, #21
 80093a4:	f57f af0c 	bpl.w	80091c0 <_scanf_float+0x60>
 80093a8:	f1b9 0f00 	cmp.w	r9, #0
 80093ac:	f43f af0f 	beq.w	80091ce <_scanf_float+0x6e>
 80093b0:	0591      	lsls	r1, r2, #22
 80093b2:	bf58      	it	pl
 80093b4:	9901      	ldrpl	r1, [sp, #4]
 80093b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80093ba:	bf58      	it	pl
 80093bc:	eba9 0101 	subpl.w	r1, r9, r1
 80093c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80093c4:	bf58      	it	pl
 80093c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80093ca:	6022      	str	r2, [r4, #0]
 80093cc:	f04f 0900 	mov.w	r9, #0
 80093d0:	e78a      	b.n	80092e8 <_scanf_float+0x188>
 80093d2:	f04f 0a03 	mov.w	sl, #3
 80093d6:	e787      	b.n	80092e8 <_scanf_float+0x188>
 80093d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80093dc:	4639      	mov	r1, r7
 80093de:	4640      	mov	r0, r8
 80093e0:	4798      	blx	r3
 80093e2:	2800      	cmp	r0, #0
 80093e4:	f43f aedf 	beq.w	80091a6 <_scanf_float+0x46>
 80093e8:	e6ea      	b.n	80091c0 <_scanf_float+0x60>
 80093ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80093ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093f2:	463a      	mov	r2, r7
 80093f4:	4640      	mov	r0, r8
 80093f6:	4798      	blx	r3
 80093f8:	6923      	ldr	r3, [r4, #16]
 80093fa:	3b01      	subs	r3, #1
 80093fc:	6123      	str	r3, [r4, #16]
 80093fe:	e6ec      	b.n	80091da <_scanf_float+0x7a>
 8009400:	1e6b      	subs	r3, r5, #1
 8009402:	2b06      	cmp	r3, #6
 8009404:	d825      	bhi.n	8009452 <_scanf_float+0x2f2>
 8009406:	2d02      	cmp	r5, #2
 8009408:	d836      	bhi.n	8009478 <_scanf_float+0x318>
 800940a:	455e      	cmp	r6, fp
 800940c:	f67f aee8 	bls.w	80091e0 <_scanf_float+0x80>
 8009410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009414:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009418:	463a      	mov	r2, r7
 800941a:	4640      	mov	r0, r8
 800941c:	4798      	blx	r3
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	3b01      	subs	r3, #1
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	e7f1      	b.n	800940a <_scanf_float+0x2aa>
 8009426:	9802      	ldr	r0, [sp, #8]
 8009428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800942c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009430:	9002      	str	r0, [sp, #8]
 8009432:	463a      	mov	r2, r7
 8009434:	4640      	mov	r0, r8
 8009436:	4798      	blx	r3
 8009438:	6923      	ldr	r3, [r4, #16]
 800943a:	3b01      	subs	r3, #1
 800943c:	6123      	str	r3, [r4, #16]
 800943e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009442:	fa5f fa8a 	uxtb.w	sl, sl
 8009446:	f1ba 0f02 	cmp.w	sl, #2
 800944a:	d1ec      	bne.n	8009426 <_scanf_float+0x2c6>
 800944c:	3d03      	subs	r5, #3
 800944e:	b2ed      	uxtb	r5, r5
 8009450:	1b76      	subs	r6, r6, r5
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	05da      	lsls	r2, r3, #23
 8009456:	d52f      	bpl.n	80094b8 <_scanf_float+0x358>
 8009458:	055b      	lsls	r3, r3, #21
 800945a:	d510      	bpl.n	800947e <_scanf_float+0x31e>
 800945c:	455e      	cmp	r6, fp
 800945e:	f67f aebf 	bls.w	80091e0 <_scanf_float+0x80>
 8009462:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009466:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800946a:	463a      	mov	r2, r7
 800946c:	4640      	mov	r0, r8
 800946e:	4798      	blx	r3
 8009470:	6923      	ldr	r3, [r4, #16]
 8009472:	3b01      	subs	r3, #1
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	e7f1      	b.n	800945c <_scanf_float+0x2fc>
 8009478:	46aa      	mov	sl, r5
 800947a:	9602      	str	r6, [sp, #8]
 800947c:	e7df      	b.n	800943e <_scanf_float+0x2de>
 800947e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	2965      	cmp	r1, #101	; 0x65
 8009486:	f103 33ff 	add.w	r3, r3, #4294967295
 800948a:	f106 35ff 	add.w	r5, r6, #4294967295
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	d00c      	beq.n	80094ac <_scanf_float+0x34c>
 8009492:	2945      	cmp	r1, #69	; 0x45
 8009494:	d00a      	beq.n	80094ac <_scanf_float+0x34c>
 8009496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800949a:	463a      	mov	r2, r7
 800949c:	4640      	mov	r0, r8
 800949e:	4798      	blx	r3
 80094a0:	6923      	ldr	r3, [r4, #16]
 80094a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	1eb5      	subs	r5, r6, #2
 80094aa:	6123      	str	r3, [r4, #16]
 80094ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80094b0:	463a      	mov	r2, r7
 80094b2:	4640      	mov	r0, r8
 80094b4:	4798      	blx	r3
 80094b6:	462e      	mov	r6, r5
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	f015 0510 	ands.w	r5, r5, #16
 80094be:	d159      	bne.n	8009574 <_scanf_float+0x414>
 80094c0:	7035      	strb	r5, [r6, #0]
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80094c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094cc:	d11b      	bne.n	8009506 <_scanf_float+0x3a6>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	454b      	cmp	r3, r9
 80094d2:	eba3 0209 	sub.w	r2, r3, r9
 80094d6:	d123      	bne.n	8009520 <_scanf_float+0x3c0>
 80094d8:	2200      	movs	r2, #0
 80094da:	4659      	mov	r1, fp
 80094dc:	4640      	mov	r0, r8
 80094de:	f000 ff1d 	bl	800a31c <_strtod_r>
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	9b03      	ldr	r3, [sp, #12]
 80094e6:	f012 0f02 	tst.w	r2, #2
 80094ea:	ec57 6b10 	vmov	r6, r7, d0
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	d021      	beq.n	8009536 <_scanf_float+0x3d6>
 80094f2:	9903      	ldr	r1, [sp, #12]
 80094f4:	1d1a      	adds	r2, r3, #4
 80094f6:	600a      	str	r2, [r1, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	e9c3 6700 	strd	r6, r7, [r3]
 80094fe:	68e3      	ldr	r3, [r4, #12]
 8009500:	3301      	adds	r3, #1
 8009502:	60e3      	str	r3, [r4, #12]
 8009504:	e66d      	b.n	80091e2 <_scanf_float+0x82>
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d0e5      	beq.n	80094d8 <_scanf_float+0x378>
 800950c:	9905      	ldr	r1, [sp, #20]
 800950e:	230a      	movs	r3, #10
 8009510:	462a      	mov	r2, r5
 8009512:	3101      	adds	r1, #1
 8009514:	4640      	mov	r0, r8
 8009516:	f000 ff89 	bl	800a42c <_strtol_r>
 800951a:	9b04      	ldr	r3, [sp, #16]
 800951c:	9e05      	ldr	r6, [sp, #20]
 800951e:	1ac2      	subs	r2, r0, r3
 8009520:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009524:	429e      	cmp	r6, r3
 8009526:	bf28      	it	cs
 8009528:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800952c:	4912      	ldr	r1, [pc, #72]	; (8009578 <_scanf_float+0x418>)
 800952e:	4630      	mov	r0, r6
 8009530:	f000 f8b2 	bl	8009698 <siprintf>
 8009534:	e7d0      	b.n	80094d8 <_scanf_float+0x378>
 8009536:	9903      	ldr	r1, [sp, #12]
 8009538:	f012 0f04 	tst.w	r2, #4
 800953c:	f103 0204 	add.w	r2, r3, #4
 8009540:	600a      	str	r2, [r1, #0]
 8009542:	d1d9      	bne.n	80094f8 <_scanf_float+0x398>
 8009544:	f8d3 8000 	ldr.w	r8, [r3]
 8009548:	ee10 2a10 	vmov	r2, s0
 800954c:	ee10 0a10 	vmov	r0, s0
 8009550:	463b      	mov	r3, r7
 8009552:	4639      	mov	r1, r7
 8009554:	f7f7 faea 	bl	8000b2c <__aeabi_dcmpun>
 8009558:	b128      	cbz	r0, 8009566 <_scanf_float+0x406>
 800955a:	4808      	ldr	r0, [pc, #32]	; (800957c <_scanf_float+0x41c>)
 800955c:	f000 f896 	bl	800968c <nanf>
 8009560:	ed88 0a00 	vstr	s0, [r8]
 8009564:	e7cb      	b.n	80094fe <_scanf_float+0x39e>
 8009566:	4630      	mov	r0, r6
 8009568:	4639      	mov	r1, r7
 800956a:	f7f7 fb3d 	bl	8000be8 <__aeabi_d2f>
 800956e:	f8c8 0000 	str.w	r0, [r8]
 8009572:	e7c4      	b.n	80094fe <_scanf_float+0x39e>
 8009574:	2500      	movs	r5, #0
 8009576:	e634      	b.n	80091e2 <_scanf_float+0x82>
 8009578:	0800d0f4 	.word	0x0800d0f4
 800957c:	0800d568 	.word	0x0800d568

08009580 <_puts_r>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	460e      	mov	r6, r1
 8009584:	4605      	mov	r5, r0
 8009586:	b118      	cbz	r0, 8009590 <_puts_r+0x10>
 8009588:	6983      	ldr	r3, [r0, #24]
 800958a:	b90b      	cbnz	r3, 8009590 <_puts_r+0x10>
 800958c:	f001 ffa4 	bl	800b4d8 <__sinit>
 8009590:	69ab      	ldr	r3, [r5, #24]
 8009592:	68ac      	ldr	r4, [r5, #8]
 8009594:	b913      	cbnz	r3, 800959c <_puts_r+0x1c>
 8009596:	4628      	mov	r0, r5
 8009598:	f001 ff9e 	bl	800b4d8 <__sinit>
 800959c:	4b2c      	ldr	r3, [pc, #176]	; (8009650 <_puts_r+0xd0>)
 800959e:	429c      	cmp	r4, r3
 80095a0:	d120      	bne.n	80095e4 <_puts_r+0x64>
 80095a2:	686c      	ldr	r4, [r5, #4]
 80095a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095a6:	07db      	lsls	r3, r3, #31
 80095a8:	d405      	bmi.n	80095b6 <_puts_r+0x36>
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	0598      	lsls	r0, r3, #22
 80095ae:	d402      	bmi.n	80095b6 <_puts_r+0x36>
 80095b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095b2:	f002 fba2 	bl	800bcfa <__retarget_lock_acquire_recursive>
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	0719      	lsls	r1, r3, #28
 80095ba:	d51d      	bpl.n	80095f8 <_puts_r+0x78>
 80095bc:	6923      	ldr	r3, [r4, #16]
 80095be:	b1db      	cbz	r3, 80095f8 <_puts_r+0x78>
 80095c0:	3e01      	subs	r6, #1
 80095c2:	68a3      	ldr	r3, [r4, #8]
 80095c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095c8:	3b01      	subs	r3, #1
 80095ca:	60a3      	str	r3, [r4, #8]
 80095cc:	bb39      	cbnz	r1, 800961e <_puts_r+0x9e>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	da38      	bge.n	8009644 <_puts_r+0xc4>
 80095d2:	4622      	mov	r2, r4
 80095d4:	210a      	movs	r1, #10
 80095d6:	4628      	mov	r0, r5
 80095d8:	f000 ff2a 	bl	800a430 <__swbuf_r>
 80095dc:	3001      	adds	r0, #1
 80095de:	d011      	beq.n	8009604 <_puts_r+0x84>
 80095e0:	250a      	movs	r5, #10
 80095e2:	e011      	b.n	8009608 <_puts_r+0x88>
 80095e4:	4b1b      	ldr	r3, [pc, #108]	; (8009654 <_puts_r+0xd4>)
 80095e6:	429c      	cmp	r4, r3
 80095e8:	d101      	bne.n	80095ee <_puts_r+0x6e>
 80095ea:	68ac      	ldr	r4, [r5, #8]
 80095ec:	e7da      	b.n	80095a4 <_puts_r+0x24>
 80095ee:	4b1a      	ldr	r3, [pc, #104]	; (8009658 <_puts_r+0xd8>)
 80095f0:	429c      	cmp	r4, r3
 80095f2:	bf08      	it	eq
 80095f4:	68ec      	ldreq	r4, [r5, #12]
 80095f6:	e7d5      	b.n	80095a4 <_puts_r+0x24>
 80095f8:	4621      	mov	r1, r4
 80095fa:	4628      	mov	r0, r5
 80095fc:	f000 ff6a 	bl	800a4d4 <__swsetup_r>
 8009600:	2800      	cmp	r0, #0
 8009602:	d0dd      	beq.n	80095c0 <_puts_r+0x40>
 8009604:	f04f 35ff 	mov.w	r5, #4294967295
 8009608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800960a:	07da      	lsls	r2, r3, #31
 800960c:	d405      	bmi.n	800961a <_puts_r+0x9a>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	059b      	lsls	r3, r3, #22
 8009612:	d402      	bmi.n	800961a <_puts_r+0x9a>
 8009614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009616:	f002 fb71 	bl	800bcfc <__retarget_lock_release_recursive>
 800961a:	4628      	mov	r0, r5
 800961c:	bd70      	pop	{r4, r5, r6, pc}
 800961e:	2b00      	cmp	r3, #0
 8009620:	da04      	bge.n	800962c <_puts_r+0xac>
 8009622:	69a2      	ldr	r2, [r4, #24]
 8009624:	429a      	cmp	r2, r3
 8009626:	dc06      	bgt.n	8009636 <_puts_r+0xb6>
 8009628:	290a      	cmp	r1, #10
 800962a:	d004      	beq.n	8009636 <_puts_r+0xb6>
 800962c:	6823      	ldr	r3, [r4, #0]
 800962e:	1c5a      	adds	r2, r3, #1
 8009630:	6022      	str	r2, [r4, #0]
 8009632:	7019      	strb	r1, [r3, #0]
 8009634:	e7c5      	b.n	80095c2 <_puts_r+0x42>
 8009636:	4622      	mov	r2, r4
 8009638:	4628      	mov	r0, r5
 800963a:	f000 fef9 	bl	800a430 <__swbuf_r>
 800963e:	3001      	adds	r0, #1
 8009640:	d1bf      	bne.n	80095c2 <_puts_r+0x42>
 8009642:	e7df      	b.n	8009604 <_puts_r+0x84>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	250a      	movs	r5, #10
 8009648:	1c5a      	adds	r2, r3, #1
 800964a:	6022      	str	r2, [r4, #0]
 800964c:	701d      	strb	r5, [r3, #0]
 800964e:	e7db      	b.n	8009608 <_puts_r+0x88>
 8009650:	0800d304 	.word	0x0800d304
 8009654:	0800d324 	.word	0x0800d324
 8009658:	0800d2e4 	.word	0x0800d2e4

0800965c <puts>:
 800965c:	4b02      	ldr	r3, [pc, #8]	; (8009668 <puts+0xc>)
 800965e:	4601      	mov	r1, r0
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	f7ff bf8d 	b.w	8009580 <_puts_r>
 8009666:	bf00      	nop
 8009668:	2000002c 	.word	0x2000002c

0800966c <_sbrk_r>:
 800966c:	b538      	push	{r3, r4, r5, lr}
 800966e:	4d06      	ldr	r5, [pc, #24]	; (8009688 <_sbrk_r+0x1c>)
 8009670:	2300      	movs	r3, #0
 8009672:	4604      	mov	r4, r0
 8009674:	4608      	mov	r0, r1
 8009676:	602b      	str	r3, [r5, #0]
 8009678:	f7f8 f900 	bl	800187c <_sbrk>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	d102      	bne.n	8009686 <_sbrk_r+0x1a>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	b103      	cbz	r3, 8009686 <_sbrk_r+0x1a>
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	20000a04 	.word	0x20000a04

0800968c <nanf>:
 800968c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009694 <nanf+0x8>
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	7fc00000 	.word	0x7fc00000

08009698 <siprintf>:
 8009698:	b40e      	push	{r1, r2, r3}
 800969a:	b500      	push	{lr}
 800969c:	b09c      	sub	sp, #112	; 0x70
 800969e:	ab1d      	add	r3, sp, #116	; 0x74
 80096a0:	9002      	str	r0, [sp, #8]
 80096a2:	9006      	str	r0, [sp, #24]
 80096a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096a8:	4809      	ldr	r0, [pc, #36]	; (80096d0 <siprintf+0x38>)
 80096aa:	9107      	str	r1, [sp, #28]
 80096ac:	9104      	str	r1, [sp, #16]
 80096ae:	4909      	ldr	r1, [pc, #36]	; (80096d4 <siprintf+0x3c>)
 80096b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b4:	9105      	str	r1, [sp, #20]
 80096b6:	6800      	ldr	r0, [r0, #0]
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	a902      	add	r1, sp, #8
 80096bc:	f003 f8e2 	bl	800c884 <_svfiprintf_r>
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
 80096c6:	b01c      	add	sp, #112	; 0x70
 80096c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80096cc:	b003      	add	sp, #12
 80096ce:	4770      	bx	lr
 80096d0:	2000002c 	.word	0x2000002c
 80096d4:	ffff0208 	.word	0xffff0208

080096d8 <sulp>:
 80096d8:	b570      	push	{r4, r5, r6, lr}
 80096da:	4604      	mov	r4, r0
 80096dc:	460d      	mov	r5, r1
 80096de:	ec45 4b10 	vmov	d0, r4, r5
 80096e2:	4616      	mov	r6, r2
 80096e4:	f002 ff0e 	bl	800c504 <__ulp>
 80096e8:	ec51 0b10 	vmov	r0, r1, d0
 80096ec:	b17e      	cbz	r6, 800970e <sulp+0x36>
 80096ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80096f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	dd09      	ble.n	800970e <sulp+0x36>
 80096fa:	051b      	lsls	r3, r3, #20
 80096fc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009700:	2400      	movs	r4, #0
 8009702:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009706:	4622      	mov	r2, r4
 8009708:	462b      	mov	r3, r5
 800970a:	f7f6 ff75 	bl	80005f8 <__aeabi_dmul>
 800970e:	bd70      	pop	{r4, r5, r6, pc}

08009710 <_strtod_l>:
 8009710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009714:	ed2d 8b02 	vpush	{d8}
 8009718:	b09d      	sub	sp, #116	; 0x74
 800971a:	461f      	mov	r7, r3
 800971c:	2300      	movs	r3, #0
 800971e:	9318      	str	r3, [sp, #96]	; 0x60
 8009720:	4ba2      	ldr	r3, [pc, #648]	; (80099ac <_strtod_l+0x29c>)
 8009722:	9213      	str	r2, [sp, #76]	; 0x4c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	9305      	str	r3, [sp, #20]
 8009728:	4604      	mov	r4, r0
 800972a:	4618      	mov	r0, r3
 800972c:	4688      	mov	r8, r1
 800972e:	f7f6 fd4f 	bl	80001d0 <strlen>
 8009732:	f04f 0a00 	mov.w	sl, #0
 8009736:	4605      	mov	r5, r0
 8009738:	f04f 0b00 	mov.w	fp, #0
 800973c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009742:	781a      	ldrb	r2, [r3, #0]
 8009744:	2a2b      	cmp	r2, #43	; 0x2b
 8009746:	d04e      	beq.n	80097e6 <_strtod_l+0xd6>
 8009748:	d83b      	bhi.n	80097c2 <_strtod_l+0xb2>
 800974a:	2a0d      	cmp	r2, #13
 800974c:	d834      	bhi.n	80097b8 <_strtod_l+0xa8>
 800974e:	2a08      	cmp	r2, #8
 8009750:	d834      	bhi.n	80097bc <_strtod_l+0xac>
 8009752:	2a00      	cmp	r2, #0
 8009754:	d03e      	beq.n	80097d4 <_strtod_l+0xc4>
 8009756:	2300      	movs	r3, #0
 8009758:	930a      	str	r3, [sp, #40]	; 0x28
 800975a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800975c:	7833      	ldrb	r3, [r6, #0]
 800975e:	2b30      	cmp	r3, #48	; 0x30
 8009760:	f040 80b0 	bne.w	80098c4 <_strtod_l+0x1b4>
 8009764:	7873      	ldrb	r3, [r6, #1]
 8009766:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800976a:	2b58      	cmp	r3, #88	; 0x58
 800976c:	d168      	bne.n	8009840 <_strtod_l+0x130>
 800976e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	ab18      	add	r3, sp, #96	; 0x60
 8009774:	9702      	str	r7, [sp, #8]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4a8d      	ldr	r2, [pc, #564]	; (80099b0 <_strtod_l+0x2a0>)
 800977a:	ab19      	add	r3, sp, #100	; 0x64
 800977c:	a917      	add	r1, sp, #92	; 0x5c
 800977e:	4620      	mov	r0, r4
 8009780:	f001 ffae 	bl	800b6e0 <__gethex>
 8009784:	f010 0707 	ands.w	r7, r0, #7
 8009788:	4605      	mov	r5, r0
 800978a:	d005      	beq.n	8009798 <_strtod_l+0x88>
 800978c:	2f06      	cmp	r7, #6
 800978e:	d12c      	bne.n	80097ea <_strtod_l+0xda>
 8009790:	3601      	adds	r6, #1
 8009792:	2300      	movs	r3, #0
 8009794:	9617      	str	r6, [sp, #92]	; 0x5c
 8009796:	930a      	str	r3, [sp, #40]	; 0x28
 8009798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800979a:	2b00      	cmp	r3, #0
 800979c:	f040 8590 	bne.w	800a2c0 <_strtod_l+0xbb0>
 80097a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a2:	b1eb      	cbz	r3, 80097e0 <_strtod_l+0xd0>
 80097a4:	4652      	mov	r2, sl
 80097a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097aa:	ec43 2b10 	vmov	d0, r2, r3
 80097ae:	b01d      	add	sp, #116	; 0x74
 80097b0:	ecbd 8b02 	vpop	{d8}
 80097b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b8:	2a20      	cmp	r2, #32
 80097ba:	d1cc      	bne.n	8009756 <_strtod_l+0x46>
 80097bc:	3301      	adds	r3, #1
 80097be:	9317      	str	r3, [sp, #92]	; 0x5c
 80097c0:	e7be      	b.n	8009740 <_strtod_l+0x30>
 80097c2:	2a2d      	cmp	r2, #45	; 0x2d
 80097c4:	d1c7      	bne.n	8009756 <_strtod_l+0x46>
 80097c6:	2201      	movs	r2, #1
 80097c8:	920a      	str	r2, [sp, #40]	; 0x28
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80097ce:	785b      	ldrb	r3, [r3, #1]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1c2      	bne.n	800975a <_strtod_l+0x4a>
 80097d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80097da:	2b00      	cmp	r3, #0
 80097dc:	f040 856e 	bne.w	800a2bc <_strtod_l+0xbac>
 80097e0:	4652      	mov	r2, sl
 80097e2:	465b      	mov	r3, fp
 80097e4:	e7e1      	b.n	80097aa <_strtod_l+0x9a>
 80097e6:	2200      	movs	r2, #0
 80097e8:	e7ee      	b.n	80097c8 <_strtod_l+0xb8>
 80097ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80097ec:	b13a      	cbz	r2, 80097fe <_strtod_l+0xee>
 80097ee:	2135      	movs	r1, #53	; 0x35
 80097f0:	a81a      	add	r0, sp, #104	; 0x68
 80097f2:	f002 ff92 	bl	800c71a <__copybits>
 80097f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097f8:	4620      	mov	r0, r4
 80097fa:	f002 fb51 	bl	800bea0 <_Bfree>
 80097fe:	3f01      	subs	r7, #1
 8009800:	2f04      	cmp	r7, #4
 8009802:	d806      	bhi.n	8009812 <_strtod_l+0x102>
 8009804:	e8df f007 	tbb	[pc, r7]
 8009808:	1714030a 	.word	0x1714030a
 800980c:	0a          	.byte	0x0a
 800980d:	00          	.byte	0x00
 800980e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009812:	0728      	lsls	r0, r5, #28
 8009814:	d5c0      	bpl.n	8009798 <_strtod_l+0x88>
 8009816:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800981a:	e7bd      	b.n	8009798 <_strtod_l+0x88>
 800981c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009820:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009822:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009826:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800982a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800982e:	e7f0      	b.n	8009812 <_strtod_l+0x102>
 8009830:	f8df b180 	ldr.w	fp, [pc, #384]	; 80099b4 <_strtod_l+0x2a4>
 8009834:	e7ed      	b.n	8009812 <_strtod_l+0x102>
 8009836:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800983a:	f04f 3aff 	mov.w	sl, #4294967295
 800983e:	e7e8      	b.n	8009812 <_strtod_l+0x102>
 8009840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009842:	1c5a      	adds	r2, r3, #1
 8009844:	9217      	str	r2, [sp, #92]	; 0x5c
 8009846:	785b      	ldrb	r3, [r3, #1]
 8009848:	2b30      	cmp	r3, #48	; 0x30
 800984a:	d0f9      	beq.n	8009840 <_strtod_l+0x130>
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0a3      	beq.n	8009798 <_strtod_l+0x88>
 8009850:	2301      	movs	r3, #1
 8009852:	f04f 0900 	mov.w	r9, #0
 8009856:	9304      	str	r3, [sp, #16]
 8009858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800985a:	9308      	str	r3, [sp, #32]
 800985c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009860:	464f      	mov	r7, r9
 8009862:	220a      	movs	r2, #10
 8009864:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009866:	7806      	ldrb	r6, [r0, #0]
 8009868:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800986c:	b2d9      	uxtb	r1, r3
 800986e:	2909      	cmp	r1, #9
 8009870:	d92a      	bls.n	80098c8 <_strtod_l+0x1b8>
 8009872:	9905      	ldr	r1, [sp, #20]
 8009874:	462a      	mov	r2, r5
 8009876:	f003 f952 	bl	800cb1e <strncmp>
 800987a:	b398      	cbz	r0, 80098e4 <_strtod_l+0x1d4>
 800987c:	2000      	movs	r0, #0
 800987e:	4632      	mov	r2, r6
 8009880:	463d      	mov	r5, r7
 8009882:	9005      	str	r0, [sp, #20]
 8009884:	4603      	mov	r3, r0
 8009886:	2a65      	cmp	r2, #101	; 0x65
 8009888:	d001      	beq.n	800988e <_strtod_l+0x17e>
 800988a:	2a45      	cmp	r2, #69	; 0x45
 800988c:	d118      	bne.n	80098c0 <_strtod_l+0x1b0>
 800988e:	b91d      	cbnz	r5, 8009898 <_strtod_l+0x188>
 8009890:	9a04      	ldr	r2, [sp, #16]
 8009892:	4302      	orrs	r2, r0
 8009894:	d09e      	beq.n	80097d4 <_strtod_l+0xc4>
 8009896:	2500      	movs	r5, #0
 8009898:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800989c:	f108 0201 	add.w	r2, r8, #1
 80098a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80098a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80098a6:	2a2b      	cmp	r2, #43	; 0x2b
 80098a8:	d075      	beq.n	8009996 <_strtod_l+0x286>
 80098aa:	2a2d      	cmp	r2, #45	; 0x2d
 80098ac:	d07b      	beq.n	80099a6 <_strtod_l+0x296>
 80098ae:	f04f 0c00 	mov.w	ip, #0
 80098b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80098b6:	2909      	cmp	r1, #9
 80098b8:	f240 8082 	bls.w	80099c0 <_strtod_l+0x2b0>
 80098bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80098c0:	2600      	movs	r6, #0
 80098c2:	e09d      	b.n	8009a00 <_strtod_l+0x2f0>
 80098c4:	2300      	movs	r3, #0
 80098c6:	e7c4      	b.n	8009852 <_strtod_l+0x142>
 80098c8:	2f08      	cmp	r7, #8
 80098ca:	bfd8      	it	le
 80098cc:	9907      	ldrle	r1, [sp, #28]
 80098ce:	f100 0001 	add.w	r0, r0, #1
 80098d2:	bfda      	itte	le
 80098d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80098d8:	9307      	strle	r3, [sp, #28]
 80098da:	fb02 3909 	mlagt	r9, r2, r9, r3
 80098de:	3701      	adds	r7, #1
 80098e0:	9017      	str	r0, [sp, #92]	; 0x5c
 80098e2:	e7bf      	b.n	8009864 <_strtod_l+0x154>
 80098e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098e6:	195a      	adds	r2, r3, r5
 80098e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80098ea:	5d5a      	ldrb	r2, [r3, r5]
 80098ec:	2f00      	cmp	r7, #0
 80098ee:	d037      	beq.n	8009960 <_strtod_l+0x250>
 80098f0:	9005      	str	r0, [sp, #20]
 80098f2:	463d      	mov	r5, r7
 80098f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80098f8:	2b09      	cmp	r3, #9
 80098fa:	d912      	bls.n	8009922 <_strtod_l+0x212>
 80098fc:	2301      	movs	r3, #1
 80098fe:	e7c2      	b.n	8009886 <_strtod_l+0x176>
 8009900:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	9217      	str	r2, [sp, #92]	; 0x5c
 8009906:	785a      	ldrb	r2, [r3, #1]
 8009908:	3001      	adds	r0, #1
 800990a:	2a30      	cmp	r2, #48	; 0x30
 800990c:	d0f8      	beq.n	8009900 <_strtod_l+0x1f0>
 800990e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009912:	2b08      	cmp	r3, #8
 8009914:	f200 84d9 	bhi.w	800a2ca <_strtod_l+0xbba>
 8009918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800991a:	9005      	str	r0, [sp, #20]
 800991c:	2000      	movs	r0, #0
 800991e:	9308      	str	r3, [sp, #32]
 8009920:	4605      	mov	r5, r0
 8009922:	3a30      	subs	r2, #48	; 0x30
 8009924:	f100 0301 	add.w	r3, r0, #1
 8009928:	d014      	beq.n	8009954 <_strtod_l+0x244>
 800992a:	9905      	ldr	r1, [sp, #20]
 800992c:	4419      	add	r1, r3
 800992e:	9105      	str	r1, [sp, #20]
 8009930:	462b      	mov	r3, r5
 8009932:	eb00 0e05 	add.w	lr, r0, r5
 8009936:	210a      	movs	r1, #10
 8009938:	4573      	cmp	r3, lr
 800993a:	d113      	bne.n	8009964 <_strtod_l+0x254>
 800993c:	182b      	adds	r3, r5, r0
 800993e:	2b08      	cmp	r3, #8
 8009940:	f105 0501 	add.w	r5, r5, #1
 8009944:	4405      	add	r5, r0
 8009946:	dc1c      	bgt.n	8009982 <_strtod_l+0x272>
 8009948:	9907      	ldr	r1, [sp, #28]
 800994a:	230a      	movs	r3, #10
 800994c:	fb03 2301 	mla	r3, r3, r1, r2
 8009950:	9307      	str	r3, [sp, #28]
 8009952:	2300      	movs	r3, #0
 8009954:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009956:	1c51      	adds	r1, r2, #1
 8009958:	9117      	str	r1, [sp, #92]	; 0x5c
 800995a:	7852      	ldrb	r2, [r2, #1]
 800995c:	4618      	mov	r0, r3
 800995e:	e7c9      	b.n	80098f4 <_strtod_l+0x1e4>
 8009960:	4638      	mov	r0, r7
 8009962:	e7d2      	b.n	800990a <_strtod_l+0x1fa>
 8009964:	2b08      	cmp	r3, #8
 8009966:	dc04      	bgt.n	8009972 <_strtod_l+0x262>
 8009968:	9e07      	ldr	r6, [sp, #28]
 800996a:	434e      	muls	r6, r1
 800996c:	9607      	str	r6, [sp, #28]
 800996e:	3301      	adds	r3, #1
 8009970:	e7e2      	b.n	8009938 <_strtod_l+0x228>
 8009972:	f103 0c01 	add.w	ip, r3, #1
 8009976:	f1bc 0f10 	cmp.w	ip, #16
 800997a:	bfd8      	it	le
 800997c:	fb01 f909 	mulle.w	r9, r1, r9
 8009980:	e7f5      	b.n	800996e <_strtod_l+0x25e>
 8009982:	2d10      	cmp	r5, #16
 8009984:	bfdc      	itt	le
 8009986:	230a      	movle	r3, #10
 8009988:	fb03 2909 	mlale	r9, r3, r9, r2
 800998c:	e7e1      	b.n	8009952 <_strtod_l+0x242>
 800998e:	2300      	movs	r3, #0
 8009990:	9305      	str	r3, [sp, #20]
 8009992:	2301      	movs	r3, #1
 8009994:	e77c      	b.n	8009890 <_strtod_l+0x180>
 8009996:	f04f 0c00 	mov.w	ip, #0
 800999a:	f108 0202 	add.w	r2, r8, #2
 800999e:	9217      	str	r2, [sp, #92]	; 0x5c
 80099a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80099a4:	e785      	b.n	80098b2 <_strtod_l+0x1a2>
 80099a6:	f04f 0c01 	mov.w	ip, #1
 80099aa:	e7f6      	b.n	800999a <_strtod_l+0x28a>
 80099ac:	0800d3ac 	.word	0x0800d3ac
 80099b0:	0800d0fc 	.word	0x0800d0fc
 80099b4:	7ff00000 	.word	0x7ff00000
 80099b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099ba:	1c51      	adds	r1, r2, #1
 80099bc:	9117      	str	r1, [sp, #92]	; 0x5c
 80099be:	7852      	ldrb	r2, [r2, #1]
 80099c0:	2a30      	cmp	r2, #48	; 0x30
 80099c2:	d0f9      	beq.n	80099b8 <_strtod_l+0x2a8>
 80099c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80099c8:	2908      	cmp	r1, #8
 80099ca:	f63f af79 	bhi.w	80098c0 <_strtod_l+0x1b0>
 80099ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80099d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099d4:	9206      	str	r2, [sp, #24]
 80099d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099d8:	1c51      	adds	r1, r2, #1
 80099da:	9117      	str	r1, [sp, #92]	; 0x5c
 80099dc:	7852      	ldrb	r2, [r2, #1]
 80099de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80099e2:	2e09      	cmp	r6, #9
 80099e4:	d937      	bls.n	8009a56 <_strtod_l+0x346>
 80099e6:	9e06      	ldr	r6, [sp, #24]
 80099e8:	1b89      	subs	r1, r1, r6
 80099ea:	2908      	cmp	r1, #8
 80099ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80099f0:	dc02      	bgt.n	80099f8 <_strtod_l+0x2e8>
 80099f2:	4576      	cmp	r6, lr
 80099f4:	bfa8      	it	ge
 80099f6:	4676      	movge	r6, lr
 80099f8:	f1bc 0f00 	cmp.w	ip, #0
 80099fc:	d000      	beq.n	8009a00 <_strtod_l+0x2f0>
 80099fe:	4276      	negs	r6, r6
 8009a00:	2d00      	cmp	r5, #0
 8009a02:	d14d      	bne.n	8009aa0 <_strtod_l+0x390>
 8009a04:	9904      	ldr	r1, [sp, #16]
 8009a06:	4301      	orrs	r1, r0
 8009a08:	f47f aec6 	bne.w	8009798 <_strtod_l+0x88>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f47f aee1 	bne.w	80097d4 <_strtod_l+0xc4>
 8009a12:	2a69      	cmp	r2, #105	; 0x69
 8009a14:	d027      	beq.n	8009a66 <_strtod_l+0x356>
 8009a16:	dc24      	bgt.n	8009a62 <_strtod_l+0x352>
 8009a18:	2a49      	cmp	r2, #73	; 0x49
 8009a1a:	d024      	beq.n	8009a66 <_strtod_l+0x356>
 8009a1c:	2a4e      	cmp	r2, #78	; 0x4e
 8009a1e:	f47f aed9 	bne.w	80097d4 <_strtod_l+0xc4>
 8009a22:	499f      	ldr	r1, [pc, #636]	; (8009ca0 <_strtod_l+0x590>)
 8009a24:	a817      	add	r0, sp, #92	; 0x5c
 8009a26:	f002 f8b3 	bl	800bb90 <__match>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	f43f aed2 	beq.w	80097d4 <_strtod_l+0xc4>
 8009a30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b28      	cmp	r3, #40	; 0x28
 8009a36:	d12d      	bne.n	8009a94 <_strtod_l+0x384>
 8009a38:	499a      	ldr	r1, [pc, #616]	; (8009ca4 <_strtod_l+0x594>)
 8009a3a:	aa1a      	add	r2, sp, #104	; 0x68
 8009a3c:	a817      	add	r0, sp, #92	; 0x5c
 8009a3e:	f002 f8bb 	bl	800bbb8 <__hexnan>
 8009a42:	2805      	cmp	r0, #5
 8009a44:	d126      	bne.n	8009a94 <_strtod_l+0x384>
 8009a46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a48:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009a4c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a50:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a54:	e6a0      	b.n	8009798 <_strtod_l+0x88>
 8009a56:	210a      	movs	r1, #10
 8009a58:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009a5c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a60:	e7b9      	b.n	80099d6 <_strtod_l+0x2c6>
 8009a62:	2a6e      	cmp	r2, #110	; 0x6e
 8009a64:	e7db      	b.n	8009a1e <_strtod_l+0x30e>
 8009a66:	4990      	ldr	r1, [pc, #576]	; (8009ca8 <_strtod_l+0x598>)
 8009a68:	a817      	add	r0, sp, #92	; 0x5c
 8009a6a:	f002 f891 	bl	800bb90 <__match>
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f43f aeb0 	beq.w	80097d4 <_strtod_l+0xc4>
 8009a74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a76:	498d      	ldr	r1, [pc, #564]	; (8009cac <_strtod_l+0x59c>)
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	a817      	add	r0, sp, #92	; 0x5c
 8009a7c:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a7e:	f002 f887 	bl	800bb90 <__match>
 8009a82:	b910      	cbnz	r0, 8009a8a <_strtod_l+0x37a>
 8009a84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a86:	3301      	adds	r3, #1
 8009a88:	9317      	str	r3, [sp, #92]	; 0x5c
 8009a8a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009cbc <_strtod_l+0x5ac>
 8009a8e:	f04f 0a00 	mov.w	sl, #0
 8009a92:	e681      	b.n	8009798 <_strtod_l+0x88>
 8009a94:	4886      	ldr	r0, [pc, #536]	; (8009cb0 <_strtod_l+0x5a0>)
 8009a96:	f002 fff7 	bl	800ca88 <nan>
 8009a9a:	ec5b ab10 	vmov	sl, fp, d0
 8009a9e:	e67b      	b.n	8009798 <_strtod_l+0x88>
 8009aa0:	9b05      	ldr	r3, [sp, #20]
 8009aa2:	9807      	ldr	r0, [sp, #28]
 8009aa4:	1af3      	subs	r3, r6, r3
 8009aa6:	2f00      	cmp	r7, #0
 8009aa8:	bf08      	it	eq
 8009aaa:	462f      	moveq	r7, r5
 8009aac:	2d10      	cmp	r5, #16
 8009aae:	9306      	str	r3, [sp, #24]
 8009ab0:	46a8      	mov	r8, r5
 8009ab2:	bfa8      	it	ge
 8009ab4:	f04f 0810 	movge.w	r8, #16
 8009ab8:	f7f6 fd24 	bl	8000504 <__aeabi_ui2d>
 8009abc:	2d09      	cmp	r5, #9
 8009abe:	4682      	mov	sl, r0
 8009ac0:	468b      	mov	fp, r1
 8009ac2:	dd13      	ble.n	8009aec <_strtod_l+0x3dc>
 8009ac4:	4b7b      	ldr	r3, [pc, #492]	; (8009cb4 <_strtod_l+0x5a4>)
 8009ac6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009aca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ace:	f7f6 fd93 	bl	80005f8 <__aeabi_dmul>
 8009ad2:	4682      	mov	sl, r0
 8009ad4:	4648      	mov	r0, r9
 8009ad6:	468b      	mov	fp, r1
 8009ad8:	f7f6 fd14 	bl	8000504 <__aeabi_ui2d>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	4659      	mov	r1, fp
 8009ae4:	f7f6 fbd2 	bl	800028c <__adddf3>
 8009ae8:	4682      	mov	sl, r0
 8009aea:	468b      	mov	fp, r1
 8009aec:	2d0f      	cmp	r5, #15
 8009aee:	dc38      	bgt.n	8009b62 <_strtod_l+0x452>
 8009af0:	9b06      	ldr	r3, [sp, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f43f ae50 	beq.w	8009798 <_strtod_l+0x88>
 8009af8:	dd24      	ble.n	8009b44 <_strtod_l+0x434>
 8009afa:	2b16      	cmp	r3, #22
 8009afc:	dc0b      	bgt.n	8009b16 <_strtod_l+0x406>
 8009afe:	496d      	ldr	r1, [pc, #436]	; (8009cb4 <_strtod_l+0x5a4>)
 8009b00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b08:	4652      	mov	r2, sl
 8009b0a:	465b      	mov	r3, fp
 8009b0c:	f7f6 fd74 	bl	80005f8 <__aeabi_dmul>
 8009b10:	4682      	mov	sl, r0
 8009b12:	468b      	mov	fp, r1
 8009b14:	e640      	b.n	8009798 <_strtod_l+0x88>
 8009b16:	9a06      	ldr	r2, [sp, #24]
 8009b18:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	db20      	blt.n	8009b62 <_strtod_l+0x452>
 8009b20:	4c64      	ldr	r4, [pc, #400]	; (8009cb4 <_strtod_l+0x5a4>)
 8009b22:	f1c5 050f 	rsb	r5, r5, #15
 8009b26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	465b      	mov	r3, fp
 8009b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b32:	f7f6 fd61 	bl	80005f8 <__aeabi_dmul>
 8009b36:	9b06      	ldr	r3, [sp, #24]
 8009b38:	1b5d      	subs	r5, r3, r5
 8009b3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b42:	e7e3      	b.n	8009b0c <_strtod_l+0x3fc>
 8009b44:	9b06      	ldr	r3, [sp, #24]
 8009b46:	3316      	adds	r3, #22
 8009b48:	db0b      	blt.n	8009b62 <_strtod_l+0x452>
 8009b4a:	9b05      	ldr	r3, [sp, #20]
 8009b4c:	1b9e      	subs	r6, r3, r6
 8009b4e:	4b59      	ldr	r3, [pc, #356]	; (8009cb4 <_strtod_l+0x5a4>)
 8009b50:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009b54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b58:	4650      	mov	r0, sl
 8009b5a:	4659      	mov	r1, fp
 8009b5c:	f7f6 fe76 	bl	800084c <__aeabi_ddiv>
 8009b60:	e7d6      	b.n	8009b10 <_strtod_l+0x400>
 8009b62:	9b06      	ldr	r3, [sp, #24]
 8009b64:	eba5 0808 	sub.w	r8, r5, r8
 8009b68:	4498      	add	r8, r3
 8009b6a:	f1b8 0f00 	cmp.w	r8, #0
 8009b6e:	dd74      	ble.n	8009c5a <_strtod_l+0x54a>
 8009b70:	f018 030f 	ands.w	r3, r8, #15
 8009b74:	d00a      	beq.n	8009b8c <_strtod_l+0x47c>
 8009b76:	494f      	ldr	r1, [pc, #316]	; (8009cb4 <_strtod_l+0x5a4>)
 8009b78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b7c:	4652      	mov	r2, sl
 8009b7e:	465b      	mov	r3, fp
 8009b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b84:	f7f6 fd38 	bl	80005f8 <__aeabi_dmul>
 8009b88:	4682      	mov	sl, r0
 8009b8a:	468b      	mov	fp, r1
 8009b8c:	f038 080f 	bics.w	r8, r8, #15
 8009b90:	d04f      	beq.n	8009c32 <_strtod_l+0x522>
 8009b92:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009b96:	dd22      	ble.n	8009bde <_strtod_l+0x4ce>
 8009b98:	2500      	movs	r5, #0
 8009b9a:	462e      	mov	r6, r5
 8009b9c:	9507      	str	r5, [sp, #28]
 8009b9e:	9505      	str	r5, [sp, #20]
 8009ba0:	2322      	movs	r3, #34	; 0x22
 8009ba2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009cbc <_strtod_l+0x5ac>
 8009ba6:	6023      	str	r3, [r4, #0]
 8009ba8:	f04f 0a00 	mov.w	sl, #0
 8009bac:	9b07      	ldr	r3, [sp, #28]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f43f adf2 	beq.w	8009798 <_strtod_l+0x88>
 8009bb4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f002 f972 	bl	800bea0 <_Bfree>
 8009bbc:	9905      	ldr	r1, [sp, #20]
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f002 f96e 	bl	800bea0 <_Bfree>
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f002 f96a 	bl	800bea0 <_Bfree>
 8009bcc:	9907      	ldr	r1, [sp, #28]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f002 f966 	bl	800bea0 <_Bfree>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f002 f962 	bl	800bea0 <_Bfree>
 8009bdc:	e5dc      	b.n	8009798 <_strtod_l+0x88>
 8009bde:	4b36      	ldr	r3, [pc, #216]	; (8009cb8 <_strtod_l+0x5a8>)
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	2300      	movs	r3, #0
 8009be4:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009be8:	4650      	mov	r0, sl
 8009bea:	4659      	mov	r1, fp
 8009bec:	4699      	mov	r9, r3
 8009bee:	f1b8 0f01 	cmp.w	r8, #1
 8009bf2:	dc21      	bgt.n	8009c38 <_strtod_l+0x528>
 8009bf4:	b10b      	cbz	r3, 8009bfa <_strtod_l+0x4ea>
 8009bf6:	4682      	mov	sl, r0
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	4b2f      	ldr	r3, [pc, #188]	; (8009cb8 <_strtod_l+0x5a8>)
 8009bfc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c04:	4652      	mov	r2, sl
 8009c06:	465b      	mov	r3, fp
 8009c08:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c0c:	f7f6 fcf4 	bl	80005f8 <__aeabi_dmul>
 8009c10:	4b2a      	ldr	r3, [pc, #168]	; (8009cbc <_strtod_l+0x5ac>)
 8009c12:	460a      	mov	r2, r1
 8009c14:	400b      	ands	r3, r1
 8009c16:	492a      	ldr	r1, [pc, #168]	; (8009cc0 <_strtod_l+0x5b0>)
 8009c18:	428b      	cmp	r3, r1
 8009c1a:	4682      	mov	sl, r0
 8009c1c:	d8bc      	bhi.n	8009b98 <_strtod_l+0x488>
 8009c1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c22:	428b      	cmp	r3, r1
 8009c24:	bf86      	itte	hi
 8009c26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009cc4 <_strtod_l+0x5b4>
 8009c2a:	f04f 3aff 	movhi.w	sl, #4294967295
 8009c2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c32:	2300      	movs	r3, #0
 8009c34:	9304      	str	r3, [sp, #16]
 8009c36:	e084      	b.n	8009d42 <_strtod_l+0x632>
 8009c38:	f018 0f01 	tst.w	r8, #1
 8009c3c:	d005      	beq.n	8009c4a <_strtod_l+0x53a>
 8009c3e:	9b04      	ldr	r3, [sp, #16]
 8009c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c44:	f7f6 fcd8 	bl	80005f8 <__aeabi_dmul>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	9a04      	ldr	r2, [sp, #16]
 8009c4c:	3208      	adds	r2, #8
 8009c4e:	f109 0901 	add.w	r9, r9, #1
 8009c52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c56:	9204      	str	r2, [sp, #16]
 8009c58:	e7c9      	b.n	8009bee <_strtod_l+0x4de>
 8009c5a:	d0ea      	beq.n	8009c32 <_strtod_l+0x522>
 8009c5c:	f1c8 0800 	rsb	r8, r8, #0
 8009c60:	f018 020f 	ands.w	r2, r8, #15
 8009c64:	d00a      	beq.n	8009c7c <_strtod_l+0x56c>
 8009c66:	4b13      	ldr	r3, [pc, #76]	; (8009cb4 <_strtod_l+0x5a4>)
 8009c68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c6c:	4650      	mov	r0, sl
 8009c6e:	4659      	mov	r1, fp
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 fdea 	bl	800084c <__aeabi_ddiv>
 8009c78:	4682      	mov	sl, r0
 8009c7a:	468b      	mov	fp, r1
 8009c7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009c80:	d0d7      	beq.n	8009c32 <_strtod_l+0x522>
 8009c82:	f1b8 0f1f 	cmp.w	r8, #31
 8009c86:	dd1f      	ble.n	8009cc8 <_strtod_l+0x5b8>
 8009c88:	2500      	movs	r5, #0
 8009c8a:	462e      	mov	r6, r5
 8009c8c:	9507      	str	r5, [sp, #28]
 8009c8e:	9505      	str	r5, [sp, #20]
 8009c90:	2322      	movs	r3, #34	; 0x22
 8009c92:	f04f 0a00 	mov.w	sl, #0
 8009c96:	f04f 0b00 	mov.w	fp, #0
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	e786      	b.n	8009bac <_strtod_l+0x49c>
 8009c9e:	bf00      	nop
 8009ca0:	0800d0cd 	.word	0x0800d0cd
 8009ca4:	0800d110 	.word	0x0800d110
 8009ca8:	0800d0c5 	.word	0x0800d0c5
 8009cac:	0800d254 	.word	0x0800d254
 8009cb0:	0800d568 	.word	0x0800d568
 8009cb4:	0800d448 	.word	0x0800d448
 8009cb8:	0800d420 	.word	0x0800d420
 8009cbc:	7ff00000 	.word	0x7ff00000
 8009cc0:	7ca00000 	.word	0x7ca00000
 8009cc4:	7fefffff 	.word	0x7fefffff
 8009cc8:	f018 0310 	ands.w	r3, r8, #16
 8009ccc:	bf18      	it	ne
 8009cce:	236a      	movne	r3, #106	; 0x6a
 8009cd0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a080 <_strtod_l+0x970>
 8009cd4:	9304      	str	r3, [sp, #16]
 8009cd6:	4650      	mov	r0, sl
 8009cd8:	4659      	mov	r1, fp
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f018 0f01 	tst.w	r8, #1
 8009ce0:	d004      	beq.n	8009cec <_strtod_l+0x5dc>
 8009ce2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009ce6:	f7f6 fc87 	bl	80005f8 <__aeabi_dmul>
 8009cea:	2301      	movs	r3, #1
 8009cec:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009cf0:	f109 0908 	add.w	r9, r9, #8
 8009cf4:	d1f2      	bne.n	8009cdc <_strtod_l+0x5cc>
 8009cf6:	b10b      	cbz	r3, 8009cfc <_strtod_l+0x5ec>
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	468b      	mov	fp, r1
 8009cfc:	9b04      	ldr	r3, [sp, #16]
 8009cfe:	b1c3      	cbz	r3, 8009d32 <_strtod_l+0x622>
 8009d00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	4659      	mov	r1, fp
 8009d0c:	dd11      	ble.n	8009d32 <_strtod_l+0x622>
 8009d0e:	2b1f      	cmp	r3, #31
 8009d10:	f340 8124 	ble.w	8009f5c <_strtod_l+0x84c>
 8009d14:	2b34      	cmp	r3, #52	; 0x34
 8009d16:	bfde      	ittt	le
 8009d18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d1c:	f04f 33ff 	movle.w	r3, #4294967295
 8009d20:	fa03 f202 	lslle.w	r2, r3, r2
 8009d24:	f04f 0a00 	mov.w	sl, #0
 8009d28:	bfcc      	ite	gt
 8009d2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d2e:	ea02 0b01 	andle.w	fp, r2, r1
 8009d32:	2200      	movs	r2, #0
 8009d34:	2300      	movs	r3, #0
 8009d36:	4650      	mov	r0, sl
 8009d38:	4659      	mov	r1, fp
 8009d3a:	f7f6 fec5 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d1a2      	bne.n	8009c88 <_strtod_l+0x578>
 8009d42:	9b07      	ldr	r3, [sp, #28]
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	9908      	ldr	r1, [sp, #32]
 8009d48:	462b      	mov	r3, r5
 8009d4a:	463a      	mov	r2, r7
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f002 f90f 	bl	800bf70 <__s2b>
 8009d52:	9007      	str	r0, [sp, #28]
 8009d54:	2800      	cmp	r0, #0
 8009d56:	f43f af1f 	beq.w	8009b98 <_strtod_l+0x488>
 8009d5a:	9b05      	ldr	r3, [sp, #20]
 8009d5c:	1b9e      	subs	r6, r3, r6
 8009d5e:	9b06      	ldr	r3, [sp, #24]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bfb4      	ite	lt
 8009d64:	4633      	movlt	r3, r6
 8009d66:	2300      	movge	r3, #0
 8009d68:	930c      	str	r3, [sp, #48]	; 0x30
 8009d6a:	9b06      	ldr	r3, [sp, #24]
 8009d6c:	2500      	movs	r5, #0
 8009d6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d72:	9312      	str	r3, [sp, #72]	; 0x48
 8009d74:	462e      	mov	r6, r5
 8009d76:	9b07      	ldr	r3, [sp, #28]
 8009d78:	4620      	mov	r0, r4
 8009d7a:	6859      	ldr	r1, [r3, #4]
 8009d7c:	f002 f850 	bl	800be20 <_Balloc>
 8009d80:	9005      	str	r0, [sp, #20]
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f43f af0c 	beq.w	8009ba0 <_strtod_l+0x490>
 8009d88:	9b07      	ldr	r3, [sp, #28]
 8009d8a:	691a      	ldr	r2, [r3, #16]
 8009d8c:	3202      	adds	r2, #2
 8009d8e:	f103 010c 	add.w	r1, r3, #12
 8009d92:	0092      	lsls	r2, r2, #2
 8009d94:	300c      	adds	r0, #12
 8009d96:	f002 f829 	bl	800bdec <memcpy>
 8009d9a:	ec4b ab10 	vmov	d0, sl, fp
 8009d9e:	aa1a      	add	r2, sp, #104	; 0x68
 8009da0:	a919      	add	r1, sp, #100	; 0x64
 8009da2:	4620      	mov	r0, r4
 8009da4:	f002 fc2a 	bl	800c5fc <__d2b>
 8009da8:	ec4b ab18 	vmov	d8, sl, fp
 8009dac:	9018      	str	r0, [sp, #96]	; 0x60
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f43f aef6 	beq.w	8009ba0 <_strtod_l+0x490>
 8009db4:	2101      	movs	r1, #1
 8009db6:	4620      	mov	r0, r4
 8009db8:	f002 f974 	bl	800c0a4 <__i2b>
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f43f aeee 	beq.w	8009ba0 <_strtod_l+0x490>
 8009dc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009dc6:	9904      	ldr	r1, [sp, #16]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	bfab      	itete	ge
 8009dcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009dce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009dd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009dd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009dd6:	bfac      	ite	ge
 8009dd8:	eb03 0902 	addge.w	r9, r3, r2
 8009ddc:	1ad7      	sublt	r7, r2, r3
 8009dde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009de0:	eba3 0801 	sub.w	r8, r3, r1
 8009de4:	4490      	add	r8, r2
 8009de6:	4ba1      	ldr	r3, [pc, #644]	; (800a06c <_strtod_l+0x95c>)
 8009de8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dec:	4598      	cmp	r8, r3
 8009dee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009df2:	f280 80c7 	bge.w	8009f84 <_strtod_l+0x874>
 8009df6:	eba3 0308 	sub.w	r3, r3, r8
 8009dfa:	2b1f      	cmp	r3, #31
 8009dfc:	eba2 0203 	sub.w	r2, r2, r3
 8009e00:	f04f 0101 	mov.w	r1, #1
 8009e04:	f300 80b1 	bgt.w	8009f6a <_strtod_l+0x85a>
 8009e08:	fa01 f303 	lsl.w	r3, r1, r3
 8009e0c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e0e:	2300      	movs	r3, #0
 8009e10:	9308      	str	r3, [sp, #32]
 8009e12:	eb09 0802 	add.w	r8, r9, r2
 8009e16:	9b04      	ldr	r3, [sp, #16]
 8009e18:	45c1      	cmp	r9, r8
 8009e1a:	4417      	add	r7, r2
 8009e1c:	441f      	add	r7, r3
 8009e1e:	464b      	mov	r3, r9
 8009e20:	bfa8      	it	ge
 8009e22:	4643      	movge	r3, r8
 8009e24:	42bb      	cmp	r3, r7
 8009e26:	bfa8      	it	ge
 8009e28:	463b      	movge	r3, r7
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	bfc2      	ittt	gt
 8009e2e:	eba8 0803 	subgt.w	r8, r8, r3
 8009e32:	1aff      	subgt	r7, r7, r3
 8009e34:	eba9 0903 	subgt.w	r9, r9, r3
 8009e38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	dd17      	ble.n	8009e6e <_strtod_l+0x75e>
 8009e3e:	4631      	mov	r1, r6
 8009e40:	461a      	mov	r2, r3
 8009e42:	4620      	mov	r0, r4
 8009e44:	f002 f9ee 	bl	800c224 <__pow5mult>
 8009e48:	4606      	mov	r6, r0
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	f43f aea8 	beq.w	8009ba0 <_strtod_l+0x490>
 8009e50:	4601      	mov	r1, r0
 8009e52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e54:	4620      	mov	r0, r4
 8009e56:	f002 f93b 	bl	800c0d0 <__multiply>
 8009e5a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	f43f ae9f 	beq.w	8009ba0 <_strtod_l+0x490>
 8009e62:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e64:	4620      	mov	r0, r4
 8009e66:	f002 f81b 	bl	800bea0 <_Bfree>
 8009e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e6c:	9318      	str	r3, [sp, #96]	; 0x60
 8009e6e:	f1b8 0f00 	cmp.w	r8, #0
 8009e72:	f300 808c 	bgt.w	8009f8e <_strtod_l+0x87e>
 8009e76:	9b06      	ldr	r3, [sp, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dd08      	ble.n	8009e8e <_strtod_l+0x77e>
 8009e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e7e:	9905      	ldr	r1, [sp, #20]
 8009e80:	4620      	mov	r0, r4
 8009e82:	f002 f9cf 	bl	800c224 <__pow5mult>
 8009e86:	9005      	str	r0, [sp, #20]
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	f43f ae89 	beq.w	8009ba0 <_strtod_l+0x490>
 8009e8e:	2f00      	cmp	r7, #0
 8009e90:	dd08      	ble.n	8009ea4 <_strtod_l+0x794>
 8009e92:	9905      	ldr	r1, [sp, #20]
 8009e94:	463a      	mov	r2, r7
 8009e96:	4620      	mov	r0, r4
 8009e98:	f002 fa1e 	bl	800c2d8 <__lshift>
 8009e9c:	9005      	str	r0, [sp, #20]
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	f43f ae7e 	beq.w	8009ba0 <_strtod_l+0x490>
 8009ea4:	f1b9 0f00 	cmp.w	r9, #0
 8009ea8:	dd08      	ble.n	8009ebc <_strtod_l+0x7ac>
 8009eaa:	4631      	mov	r1, r6
 8009eac:	464a      	mov	r2, r9
 8009eae:	4620      	mov	r0, r4
 8009eb0:	f002 fa12 	bl	800c2d8 <__lshift>
 8009eb4:	4606      	mov	r6, r0
 8009eb6:	2800      	cmp	r0, #0
 8009eb8:	f43f ae72 	beq.w	8009ba0 <_strtod_l+0x490>
 8009ebc:	9a05      	ldr	r2, [sp, #20]
 8009ebe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f002 fa95 	bl	800c3f0 <__mdiff>
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	f43f ae69 	beq.w	8009ba0 <_strtod_l+0x490>
 8009ece:	68c3      	ldr	r3, [r0, #12]
 8009ed0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60c3      	str	r3, [r0, #12]
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	f002 fa6e 	bl	800c3b8 <__mcmp>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	da60      	bge.n	8009fa2 <_strtod_l+0x892>
 8009ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ee6:	f040 8082 	bne.w	8009fee <_strtod_l+0x8de>
 8009eea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d17d      	bne.n	8009fee <_strtod_l+0x8de>
 8009ef2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009ef6:	0d1b      	lsrs	r3, r3, #20
 8009ef8:	051b      	lsls	r3, r3, #20
 8009efa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009efe:	d976      	bls.n	8009fee <_strtod_l+0x8de>
 8009f00:	696b      	ldr	r3, [r5, #20]
 8009f02:	b913      	cbnz	r3, 8009f0a <_strtod_l+0x7fa>
 8009f04:	692b      	ldr	r3, [r5, #16]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	dd71      	ble.n	8009fee <_strtod_l+0x8de>
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f002 f9e2 	bl	800c2d8 <__lshift>
 8009f14:	4631      	mov	r1, r6
 8009f16:	4605      	mov	r5, r0
 8009f18:	f002 fa4e 	bl	800c3b8 <__mcmp>
 8009f1c:	2800      	cmp	r0, #0
 8009f1e:	dd66      	ble.n	8009fee <_strtod_l+0x8de>
 8009f20:	9904      	ldr	r1, [sp, #16]
 8009f22:	4a53      	ldr	r2, [pc, #332]	; (800a070 <_strtod_l+0x960>)
 8009f24:	465b      	mov	r3, fp
 8009f26:	2900      	cmp	r1, #0
 8009f28:	f000 8081 	beq.w	800a02e <_strtod_l+0x91e>
 8009f2c:	ea02 010b 	and.w	r1, r2, fp
 8009f30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f34:	dc7b      	bgt.n	800a02e <_strtod_l+0x91e>
 8009f36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f3a:	f77f aea9 	ble.w	8009c90 <_strtod_l+0x580>
 8009f3e:	4b4d      	ldr	r3, [pc, #308]	; (800a074 <_strtod_l+0x964>)
 8009f40:	4650      	mov	r0, sl
 8009f42:	4659      	mov	r1, fp
 8009f44:	2200      	movs	r2, #0
 8009f46:	f7f6 fb57 	bl	80005f8 <__aeabi_dmul>
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4303      	orrs	r3, r0
 8009f4e:	bf08      	it	eq
 8009f50:	2322      	moveq	r3, #34	; 0x22
 8009f52:	4682      	mov	sl, r0
 8009f54:	468b      	mov	fp, r1
 8009f56:	bf08      	it	eq
 8009f58:	6023      	streq	r3, [r4, #0]
 8009f5a:	e62b      	b.n	8009bb4 <_strtod_l+0x4a4>
 8009f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f60:	fa02 f303 	lsl.w	r3, r2, r3
 8009f64:	ea03 0a0a 	and.w	sl, r3, sl
 8009f68:	e6e3      	b.n	8009d32 <_strtod_l+0x622>
 8009f6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009f6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009f72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009f76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009f7a:	fa01 f308 	lsl.w	r3, r1, r8
 8009f7e:	9308      	str	r3, [sp, #32]
 8009f80:	910d      	str	r1, [sp, #52]	; 0x34
 8009f82:	e746      	b.n	8009e12 <_strtod_l+0x702>
 8009f84:	2300      	movs	r3, #0
 8009f86:	9308      	str	r3, [sp, #32]
 8009f88:	2301      	movs	r3, #1
 8009f8a:	930d      	str	r3, [sp, #52]	; 0x34
 8009f8c:	e741      	b.n	8009e12 <_strtod_l+0x702>
 8009f8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009f90:	4642      	mov	r2, r8
 8009f92:	4620      	mov	r0, r4
 8009f94:	f002 f9a0 	bl	800c2d8 <__lshift>
 8009f98:	9018      	str	r0, [sp, #96]	; 0x60
 8009f9a:	2800      	cmp	r0, #0
 8009f9c:	f47f af6b 	bne.w	8009e76 <_strtod_l+0x766>
 8009fa0:	e5fe      	b.n	8009ba0 <_strtod_l+0x490>
 8009fa2:	465f      	mov	r7, fp
 8009fa4:	d16e      	bne.n	800a084 <_strtod_l+0x974>
 8009fa6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fa8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fac:	b342      	cbz	r2, 800a000 <_strtod_l+0x8f0>
 8009fae:	4a32      	ldr	r2, [pc, #200]	; (800a078 <_strtod_l+0x968>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d128      	bne.n	800a006 <_strtod_l+0x8f6>
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	4651      	mov	r1, sl
 8009fb8:	b1eb      	cbz	r3, 8009ff6 <_strtod_l+0x8e6>
 8009fba:	4b2d      	ldr	r3, [pc, #180]	; (800a070 <_strtod_l+0x960>)
 8009fbc:	403b      	ands	r3, r7
 8009fbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fc6:	d819      	bhi.n	8009ffc <_strtod_l+0x8ec>
 8009fc8:	0d1b      	lsrs	r3, r3, #20
 8009fca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fce:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd2:	4299      	cmp	r1, r3
 8009fd4:	d117      	bne.n	800a006 <_strtod_l+0x8f6>
 8009fd6:	4b29      	ldr	r3, [pc, #164]	; (800a07c <_strtod_l+0x96c>)
 8009fd8:	429f      	cmp	r7, r3
 8009fda:	d102      	bne.n	8009fe2 <_strtod_l+0x8d2>
 8009fdc:	3101      	adds	r1, #1
 8009fde:	f43f addf 	beq.w	8009ba0 <_strtod_l+0x490>
 8009fe2:	4b23      	ldr	r3, [pc, #140]	; (800a070 <_strtod_l+0x960>)
 8009fe4:	403b      	ands	r3, r7
 8009fe6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009fea:	f04f 0a00 	mov.w	sl, #0
 8009fee:	9b04      	ldr	r3, [sp, #16]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1a4      	bne.n	8009f3e <_strtod_l+0x82e>
 8009ff4:	e5de      	b.n	8009bb4 <_strtod_l+0x4a4>
 8009ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffa:	e7ea      	b.n	8009fd2 <_strtod_l+0x8c2>
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	e7e8      	b.n	8009fd2 <_strtod_l+0x8c2>
 800a000:	ea53 030a 	orrs.w	r3, r3, sl
 800a004:	d08c      	beq.n	8009f20 <_strtod_l+0x810>
 800a006:	9b08      	ldr	r3, [sp, #32]
 800a008:	b1db      	cbz	r3, 800a042 <_strtod_l+0x932>
 800a00a:	423b      	tst	r3, r7
 800a00c:	d0ef      	beq.n	8009fee <_strtod_l+0x8de>
 800a00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a010:	9a04      	ldr	r2, [sp, #16]
 800a012:	4650      	mov	r0, sl
 800a014:	4659      	mov	r1, fp
 800a016:	b1c3      	cbz	r3, 800a04a <_strtod_l+0x93a>
 800a018:	f7ff fb5e 	bl	80096d8 <sulp>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	ec51 0b18 	vmov	r0, r1, d8
 800a024:	f7f6 f932 	bl	800028c <__adddf3>
 800a028:	4682      	mov	sl, r0
 800a02a:	468b      	mov	fp, r1
 800a02c:	e7df      	b.n	8009fee <_strtod_l+0x8de>
 800a02e:	4013      	ands	r3, r2
 800a030:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a034:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a038:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a03c:	f04f 3aff 	mov.w	sl, #4294967295
 800a040:	e7d5      	b.n	8009fee <_strtod_l+0x8de>
 800a042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a044:	ea13 0f0a 	tst.w	r3, sl
 800a048:	e7e0      	b.n	800a00c <_strtod_l+0x8fc>
 800a04a:	f7ff fb45 	bl	80096d8 <sulp>
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	ec51 0b18 	vmov	r0, r1, d8
 800a056:	f7f6 f917 	bl	8000288 <__aeabi_dsub>
 800a05a:	2200      	movs	r2, #0
 800a05c:	2300      	movs	r3, #0
 800a05e:	4682      	mov	sl, r0
 800a060:	468b      	mov	fp, r1
 800a062:	f7f6 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 800a066:	2800      	cmp	r0, #0
 800a068:	d0c1      	beq.n	8009fee <_strtod_l+0x8de>
 800a06a:	e611      	b.n	8009c90 <_strtod_l+0x580>
 800a06c:	fffffc02 	.word	0xfffffc02
 800a070:	7ff00000 	.word	0x7ff00000
 800a074:	39500000 	.word	0x39500000
 800a078:	000fffff 	.word	0x000fffff
 800a07c:	7fefffff 	.word	0x7fefffff
 800a080:	0800d128 	.word	0x0800d128
 800a084:	4631      	mov	r1, r6
 800a086:	4628      	mov	r0, r5
 800a088:	f002 fb14 	bl	800c6b4 <__ratio>
 800a08c:	ec59 8b10 	vmov	r8, r9, d0
 800a090:	ee10 0a10 	vmov	r0, s0
 800a094:	2200      	movs	r2, #0
 800a096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a09a:	4649      	mov	r1, r9
 800a09c:	f7f6 fd28 	bl	8000af0 <__aeabi_dcmple>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	d07a      	beq.n	800a19a <_strtod_l+0xa8a>
 800a0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d04a      	beq.n	800a140 <_strtod_l+0xa30>
 800a0aa:	4b95      	ldr	r3, [pc, #596]	; (800a300 <_strtod_l+0xbf0>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a300 <_strtod_l+0xbf0>
 800a0b6:	f04f 0800 	mov.w	r8, #0
 800a0ba:	4b92      	ldr	r3, [pc, #584]	; (800a304 <_strtod_l+0xbf4>)
 800a0bc:	403b      	ands	r3, r7
 800a0be:	930d      	str	r3, [sp, #52]	; 0x34
 800a0c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0c2:	4b91      	ldr	r3, [pc, #580]	; (800a308 <_strtod_l+0xbf8>)
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	f040 80b0 	bne.w	800a22a <_strtod_l+0xb1a>
 800a0ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a0d2:	ec4b ab10 	vmov	d0, sl, fp
 800a0d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a0da:	f002 fa13 	bl	800c504 <__ulp>
 800a0de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0e2:	ec53 2b10 	vmov	r2, r3, d0
 800a0e6:	f7f6 fa87 	bl	80005f8 <__aeabi_dmul>
 800a0ea:	4652      	mov	r2, sl
 800a0ec:	465b      	mov	r3, fp
 800a0ee:	f7f6 f8cd 	bl	800028c <__adddf3>
 800a0f2:	460b      	mov	r3, r1
 800a0f4:	4983      	ldr	r1, [pc, #524]	; (800a304 <_strtod_l+0xbf4>)
 800a0f6:	4a85      	ldr	r2, [pc, #532]	; (800a30c <_strtod_l+0xbfc>)
 800a0f8:	4019      	ands	r1, r3
 800a0fa:	4291      	cmp	r1, r2
 800a0fc:	4682      	mov	sl, r0
 800a0fe:	d960      	bls.n	800a1c2 <_strtod_l+0xab2>
 800a100:	ee18 3a90 	vmov	r3, s17
 800a104:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a108:	4293      	cmp	r3, r2
 800a10a:	d104      	bne.n	800a116 <_strtod_l+0xa06>
 800a10c:	ee18 3a10 	vmov	r3, s16
 800a110:	3301      	adds	r3, #1
 800a112:	f43f ad45 	beq.w	8009ba0 <_strtod_l+0x490>
 800a116:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a318 <_strtod_l+0xc08>
 800a11a:	f04f 3aff 	mov.w	sl, #4294967295
 800a11e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a120:	4620      	mov	r0, r4
 800a122:	f001 febd 	bl	800bea0 <_Bfree>
 800a126:	9905      	ldr	r1, [sp, #20]
 800a128:	4620      	mov	r0, r4
 800a12a:	f001 feb9 	bl	800bea0 <_Bfree>
 800a12e:	4631      	mov	r1, r6
 800a130:	4620      	mov	r0, r4
 800a132:	f001 feb5 	bl	800bea0 <_Bfree>
 800a136:	4629      	mov	r1, r5
 800a138:	4620      	mov	r0, r4
 800a13a:	f001 feb1 	bl	800bea0 <_Bfree>
 800a13e:	e61a      	b.n	8009d76 <_strtod_l+0x666>
 800a140:	f1ba 0f00 	cmp.w	sl, #0
 800a144:	d11b      	bne.n	800a17e <_strtod_l+0xa6e>
 800a146:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a14a:	b9f3      	cbnz	r3, 800a18a <_strtod_l+0xa7a>
 800a14c:	4b6c      	ldr	r3, [pc, #432]	; (800a300 <_strtod_l+0xbf0>)
 800a14e:	2200      	movs	r2, #0
 800a150:	4640      	mov	r0, r8
 800a152:	4649      	mov	r1, r9
 800a154:	f7f6 fcc2 	bl	8000adc <__aeabi_dcmplt>
 800a158:	b9d0      	cbnz	r0, 800a190 <_strtod_l+0xa80>
 800a15a:	4640      	mov	r0, r8
 800a15c:	4649      	mov	r1, r9
 800a15e:	4b6c      	ldr	r3, [pc, #432]	; (800a310 <_strtod_l+0xc00>)
 800a160:	2200      	movs	r2, #0
 800a162:	f7f6 fa49 	bl	80005f8 <__aeabi_dmul>
 800a166:	4680      	mov	r8, r0
 800a168:	4689      	mov	r9, r1
 800a16a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a16e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a172:	9315      	str	r3, [sp, #84]	; 0x54
 800a174:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a178:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a17c:	e79d      	b.n	800a0ba <_strtod_l+0x9aa>
 800a17e:	f1ba 0f01 	cmp.w	sl, #1
 800a182:	d102      	bne.n	800a18a <_strtod_l+0xa7a>
 800a184:	2f00      	cmp	r7, #0
 800a186:	f43f ad83 	beq.w	8009c90 <_strtod_l+0x580>
 800a18a:	4b62      	ldr	r3, [pc, #392]	; (800a314 <_strtod_l+0xc04>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	e78e      	b.n	800a0ae <_strtod_l+0x99e>
 800a190:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a310 <_strtod_l+0xc00>
 800a194:	f04f 0800 	mov.w	r8, #0
 800a198:	e7e7      	b.n	800a16a <_strtod_l+0xa5a>
 800a19a:	4b5d      	ldr	r3, [pc, #372]	; (800a310 <_strtod_l+0xc00>)
 800a19c:	4640      	mov	r0, r8
 800a19e:	4649      	mov	r1, r9
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f7f6 fa29 	bl	80005f8 <__aeabi_dmul>
 800a1a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	4689      	mov	r9, r1
 800a1ac:	b933      	cbnz	r3, 800a1bc <_strtod_l+0xaac>
 800a1ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1b2:	900e      	str	r0, [sp, #56]	; 0x38
 800a1b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a1ba:	e7dd      	b.n	800a178 <_strtod_l+0xa68>
 800a1bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a1c0:	e7f9      	b.n	800a1b6 <_strtod_l+0xaa6>
 800a1c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a1c6:	9b04      	ldr	r3, [sp, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d1a8      	bne.n	800a11e <_strtod_l+0xa0e>
 800a1cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1d2:	0d1b      	lsrs	r3, r3, #20
 800a1d4:	051b      	lsls	r3, r3, #20
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d1a1      	bne.n	800a11e <_strtod_l+0xa0e>
 800a1da:	4640      	mov	r0, r8
 800a1dc:	4649      	mov	r1, r9
 800a1de:	f7f6 fd6b 	bl	8000cb8 <__aeabi_d2lz>
 800a1e2:	f7f6 f9db 	bl	800059c <__aeabi_l2d>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4649      	mov	r1, r9
 800a1ee:	f7f6 f84b 	bl	8000288 <__aeabi_dsub>
 800a1f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1f8:	ea43 030a 	orr.w	r3, r3, sl
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	4680      	mov	r8, r0
 800a200:	4689      	mov	r9, r1
 800a202:	d055      	beq.n	800a2b0 <_strtod_l+0xba0>
 800a204:	a336      	add	r3, pc, #216	; (adr r3, 800a2e0 <_strtod_l+0xbd0>)
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	f7f6 fc67 	bl	8000adc <__aeabi_dcmplt>
 800a20e:	2800      	cmp	r0, #0
 800a210:	f47f acd0 	bne.w	8009bb4 <_strtod_l+0x4a4>
 800a214:	a334      	add	r3, pc, #208	; (adr r3, 800a2e8 <_strtod_l+0xbd8>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f7f6 fc7b 	bl	8000b18 <__aeabi_dcmpgt>
 800a222:	2800      	cmp	r0, #0
 800a224:	f43f af7b 	beq.w	800a11e <_strtod_l+0xa0e>
 800a228:	e4c4      	b.n	8009bb4 <_strtod_l+0x4a4>
 800a22a:	9b04      	ldr	r3, [sp, #16]
 800a22c:	b333      	cbz	r3, 800a27c <_strtod_l+0xb6c>
 800a22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a230:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a234:	d822      	bhi.n	800a27c <_strtod_l+0xb6c>
 800a236:	a32e      	add	r3, pc, #184	; (adr r3, 800a2f0 <_strtod_l+0xbe0>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	4640      	mov	r0, r8
 800a23e:	4649      	mov	r1, r9
 800a240:	f7f6 fc56 	bl	8000af0 <__aeabi_dcmple>
 800a244:	b1a0      	cbz	r0, 800a270 <_strtod_l+0xb60>
 800a246:	4649      	mov	r1, r9
 800a248:	4640      	mov	r0, r8
 800a24a:	f7f6 fcad 	bl	8000ba8 <__aeabi_d2uiz>
 800a24e:	2801      	cmp	r0, #1
 800a250:	bf38      	it	cc
 800a252:	2001      	movcc	r0, #1
 800a254:	f7f6 f956 	bl	8000504 <__aeabi_ui2d>
 800a258:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a25a:	4680      	mov	r8, r0
 800a25c:	4689      	mov	r9, r1
 800a25e:	bb23      	cbnz	r3, 800a2aa <_strtod_l+0xb9a>
 800a260:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a264:	9010      	str	r0, [sp, #64]	; 0x40
 800a266:	9311      	str	r3, [sp, #68]	; 0x44
 800a268:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a26c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a272:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a274:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	9309      	str	r3, [sp, #36]	; 0x24
 800a27c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a280:	eeb0 0a48 	vmov.f32	s0, s16
 800a284:	eef0 0a68 	vmov.f32	s1, s17
 800a288:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a28c:	f002 f93a 	bl	800c504 <__ulp>
 800a290:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a294:	ec53 2b10 	vmov	r2, r3, d0
 800a298:	f7f6 f9ae 	bl	80005f8 <__aeabi_dmul>
 800a29c:	ec53 2b18 	vmov	r2, r3, d8
 800a2a0:	f7f5 fff4 	bl	800028c <__adddf3>
 800a2a4:	4682      	mov	sl, r0
 800a2a6:	468b      	mov	fp, r1
 800a2a8:	e78d      	b.n	800a1c6 <_strtod_l+0xab6>
 800a2aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a2ae:	e7db      	b.n	800a268 <_strtod_l+0xb58>
 800a2b0:	a311      	add	r3, pc, #68	; (adr r3, 800a2f8 <_strtod_l+0xbe8>)
 800a2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b6:	f7f6 fc11 	bl	8000adc <__aeabi_dcmplt>
 800a2ba:	e7b2      	b.n	800a222 <_strtod_l+0xb12>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	930a      	str	r3, [sp, #40]	; 0x28
 800a2c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2c4:	6013      	str	r3, [r2, #0]
 800a2c6:	f7ff ba6b 	b.w	80097a0 <_strtod_l+0x90>
 800a2ca:	2a65      	cmp	r2, #101	; 0x65
 800a2cc:	f43f ab5f 	beq.w	800998e <_strtod_l+0x27e>
 800a2d0:	2a45      	cmp	r2, #69	; 0x45
 800a2d2:	f43f ab5c 	beq.w	800998e <_strtod_l+0x27e>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f7ff bb94 	b.w	8009a04 <_strtod_l+0x2f4>
 800a2dc:	f3af 8000 	nop.w
 800a2e0:	94a03595 	.word	0x94a03595
 800a2e4:	3fdfffff 	.word	0x3fdfffff
 800a2e8:	35afe535 	.word	0x35afe535
 800a2ec:	3fe00000 	.word	0x3fe00000
 800a2f0:	ffc00000 	.word	0xffc00000
 800a2f4:	41dfffff 	.word	0x41dfffff
 800a2f8:	94a03595 	.word	0x94a03595
 800a2fc:	3fcfffff 	.word	0x3fcfffff
 800a300:	3ff00000 	.word	0x3ff00000
 800a304:	7ff00000 	.word	0x7ff00000
 800a308:	7fe00000 	.word	0x7fe00000
 800a30c:	7c9fffff 	.word	0x7c9fffff
 800a310:	3fe00000 	.word	0x3fe00000
 800a314:	bff00000 	.word	0xbff00000
 800a318:	7fefffff 	.word	0x7fefffff

0800a31c <_strtod_r>:
 800a31c:	4b01      	ldr	r3, [pc, #4]	; (800a324 <_strtod_r+0x8>)
 800a31e:	f7ff b9f7 	b.w	8009710 <_strtod_l>
 800a322:	bf00      	nop
 800a324:	20000094 	.word	0x20000094

0800a328 <_strtol_l.constprop.0>:
 800a328:	2b01      	cmp	r3, #1
 800a32a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a32e:	d001      	beq.n	800a334 <_strtol_l.constprop.0+0xc>
 800a330:	2b24      	cmp	r3, #36	; 0x24
 800a332:	d906      	bls.n	800a342 <_strtol_l.constprop.0+0x1a>
 800a334:	f7fe f988 	bl	8008648 <__errno>
 800a338:	2316      	movs	r3, #22
 800a33a:	6003      	str	r3, [r0, #0]
 800a33c:	2000      	movs	r0, #0
 800a33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a342:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a428 <_strtol_l.constprop.0+0x100>
 800a346:	460d      	mov	r5, r1
 800a348:	462e      	mov	r6, r5
 800a34a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a34e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a352:	f017 0708 	ands.w	r7, r7, #8
 800a356:	d1f7      	bne.n	800a348 <_strtol_l.constprop.0+0x20>
 800a358:	2c2d      	cmp	r4, #45	; 0x2d
 800a35a:	d132      	bne.n	800a3c2 <_strtol_l.constprop.0+0x9a>
 800a35c:	782c      	ldrb	r4, [r5, #0]
 800a35e:	2701      	movs	r7, #1
 800a360:	1cb5      	adds	r5, r6, #2
 800a362:	2b00      	cmp	r3, #0
 800a364:	d05b      	beq.n	800a41e <_strtol_l.constprop.0+0xf6>
 800a366:	2b10      	cmp	r3, #16
 800a368:	d109      	bne.n	800a37e <_strtol_l.constprop.0+0x56>
 800a36a:	2c30      	cmp	r4, #48	; 0x30
 800a36c:	d107      	bne.n	800a37e <_strtol_l.constprop.0+0x56>
 800a36e:	782c      	ldrb	r4, [r5, #0]
 800a370:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a374:	2c58      	cmp	r4, #88	; 0x58
 800a376:	d14d      	bne.n	800a414 <_strtol_l.constprop.0+0xec>
 800a378:	786c      	ldrb	r4, [r5, #1]
 800a37a:	2310      	movs	r3, #16
 800a37c:	3502      	adds	r5, #2
 800a37e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a382:	f108 38ff 	add.w	r8, r8, #4294967295
 800a386:	f04f 0c00 	mov.w	ip, #0
 800a38a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a38e:	4666      	mov	r6, ip
 800a390:	fb03 8a19 	mls	sl, r3, r9, r8
 800a394:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a398:	f1be 0f09 	cmp.w	lr, #9
 800a39c:	d816      	bhi.n	800a3cc <_strtol_l.constprop.0+0xa4>
 800a39e:	4674      	mov	r4, lr
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	dd24      	ble.n	800a3ee <_strtol_l.constprop.0+0xc6>
 800a3a4:	f1bc 0f00 	cmp.w	ip, #0
 800a3a8:	db1e      	blt.n	800a3e8 <_strtol_l.constprop.0+0xc0>
 800a3aa:	45b1      	cmp	r9, r6
 800a3ac:	d31c      	bcc.n	800a3e8 <_strtol_l.constprop.0+0xc0>
 800a3ae:	d101      	bne.n	800a3b4 <_strtol_l.constprop.0+0x8c>
 800a3b0:	45a2      	cmp	sl, r4
 800a3b2:	db19      	blt.n	800a3e8 <_strtol_l.constprop.0+0xc0>
 800a3b4:	fb06 4603 	mla	r6, r6, r3, r4
 800a3b8:	f04f 0c01 	mov.w	ip, #1
 800a3bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3c0:	e7e8      	b.n	800a394 <_strtol_l.constprop.0+0x6c>
 800a3c2:	2c2b      	cmp	r4, #43	; 0x2b
 800a3c4:	bf04      	itt	eq
 800a3c6:	782c      	ldrbeq	r4, [r5, #0]
 800a3c8:	1cb5      	addeq	r5, r6, #2
 800a3ca:	e7ca      	b.n	800a362 <_strtol_l.constprop.0+0x3a>
 800a3cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a3d0:	f1be 0f19 	cmp.w	lr, #25
 800a3d4:	d801      	bhi.n	800a3da <_strtol_l.constprop.0+0xb2>
 800a3d6:	3c37      	subs	r4, #55	; 0x37
 800a3d8:	e7e2      	b.n	800a3a0 <_strtol_l.constprop.0+0x78>
 800a3da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a3de:	f1be 0f19 	cmp.w	lr, #25
 800a3e2:	d804      	bhi.n	800a3ee <_strtol_l.constprop.0+0xc6>
 800a3e4:	3c57      	subs	r4, #87	; 0x57
 800a3e6:	e7db      	b.n	800a3a0 <_strtol_l.constprop.0+0x78>
 800a3e8:	f04f 3cff 	mov.w	ip, #4294967295
 800a3ec:	e7e6      	b.n	800a3bc <_strtol_l.constprop.0+0x94>
 800a3ee:	f1bc 0f00 	cmp.w	ip, #0
 800a3f2:	da05      	bge.n	800a400 <_strtol_l.constprop.0+0xd8>
 800a3f4:	2322      	movs	r3, #34	; 0x22
 800a3f6:	6003      	str	r3, [r0, #0]
 800a3f8:	4646      	mov	r6, r8
 800a3fa:	b942      	cbnz	r2, 800a40e <_strtol_l.constprop.0+0xe6>
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	e79e      	b.n	800a33e <_strtol_l.constprop.0+0x16>
 800a400:	b107      	cbz	r7, 800a404 <_strtol_l.constprop.0+0xdc>
 800a402:	4276      	negs	r6, r6
 800a404:	2a00      	cmp	r2, #0
 800a406:	d0f9      	beq.n	800a3fc <_strtol_l.constprop.0+0xd4>
 800a408:	f1bc 0f00 	cmp.w	ip, #0
 800a40c:	d000      	beq.n	800a410 <_strtol_l.constprop.0+0xe8>
 800a40e:	1e69      	subs	r1, r5, #1
 800a410:	6011      	str	r1, [r2, #0]
 800a412:	e7f3      	b.n	800a3fc <_strtol_l.constprop.0+0xd4>
 800a414:	2430      	movs	r4, #48	; 0x30
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1b1      	bne.n	800a37e <_strtol_l.constprop.0+0x56>
 800a41a:	2308      	movs	r3, #8
 800a41c:	e7af      	b.n	800a37e <_strtol_l.constprop.0+0x56>
 800a41e:	2c30      	cmp	r4, #48	; 0x30
 800a420:	d0a5      	beq.n	800a36e <_strtol_l.constprop.0+0x46>
 800a422:	230a      	movs	r3, #10
 800a424:	e7ab      	b.n	800a37e <_strtol_l.constprop.0+0x56>
 800a426:	bf00      	nop
 800a428:	0800d151 	.word	0x0800d151

0800a42c <_strtol_r>:
 800a42c:	f7ff bf7c 	b.w	800a328 <_strtol_l.constprop.0>

0800a430 <__swbuf_r>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	460e      	mov	r6, r1
 800a434:	4614      	mov	r4, r2
 800a436:	4605      	mov	r5, r0
 800a438:	b118      	cbz	r0, 800a442 <__swbuf_r+0x12>
 800a43a:	6983      	ldr	r3, [r0, #24]
 800a43c:	b90b      	cbnz	r3, 800a442 <__swbuf_r+0x12>
 800a43e:	f001 f84b 	bl	800b4d8 <__sinit>
 800a442:	4b21      	ldr	r3, [pc, #132]	; (800a4c8 <__swbuf_r+0x98>)
 800a444:	429c      	cmp	r4, r3
 800a446:	d12b      	bne.n	800a4a0 <__swbuf_r+0x70>
 800a448:	686c      	ldr	r4, [r5, #4]
 800a44a:	69a3      	ldr	r3, [r4, #24]
 800a44c:	60a3      	str	r3, [r4, #8]
 800a44e:	89a3      	ldrh	r3, [r4, #12]
 800a450:	071a      	lsls	r2, r3, #28
 800a452:	d52f      	bpl.n	800a4b4 <__swbuf_r+0x84>
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	b36b      	cbz	r3, 800a4b4 <__swbuf_r+0x84>
 800a458:	6923      	ldr	r3, [r4, #16]
 800a45a:	6820      	ldr	r0, [r4, #0]
 800a45c:	1ac0      	subs	r0, r0, r3
 800a45e:	6963      	ldr	r3, [r4, #20]
 800a460:	b2f6      	uxtb	r6, r6
 800a462:	4283      	cmp	r3, r0
 800a464:	4637      	mov	r7, r6
 800a466:	dc04      	bgt.n	800a472 <__swbuf_r+0x42>
 800a468:	4621      	mov	r1, r4
 800a46a:	4628      	mov	r0, r5
 800a46c:	f000 ffa0 	bl	800b3b0 <_fflush_r>
 800a470:	bb30      	cbnz	r0, 800a4c0 <__swbuf_r+0x90>
 800a472:	68a3      	ldr	r3, [r4, #8]
 800a474:	3b01      	subs	r3, #1
 800a476:	60a3      	str	r3, [r4, #8]
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	6022      	str	r2, [r4, #0]
 800a47e:	701e      	strb	r6, [r3, #0]
 800a480:	6963      	ldr	r3, [r4, #20]
 800a482:	3001      	adds	r0, #1
 800a484:	4283      	cmp	r3, r0
 800a486:	d004      	beq.n	800a492 <__swbuf_r+0x62>
 800a488:	89a3      	ldrh	r3, [r4, #12]
 800a48a:	07db      	lsls	r3, r3, #31
 800a48c:	d506      	bpl.n	800a49c <__swbuf_r+0x6c>
 800a48e:	2e0a      	cmp	r6, #10
 800a490:	d104      	bne.n	800a49c <__swbuf_r+0x6c>
 800a492:	4621      	mov	r1, r4
 800a494:	4628      	mov	r0, r5
 800a496:	f000 ff8b 	bl	800b3b0 <_fflush_r>
 800a49a:	b988      	cbnz	r0, 800a4c0 <__swbuf_r+0x90>
 800a49c:	4638      	mov	r0, r7
 800a49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4a0:	4b0a      	ldr	r3, [pc, #40]	; (800a4cc <__swbuf_r+0x9c>)
 800a4a2:	429c      	cmp	r4, r3
 800a4a4:	d101      	bne.n	800a4aa <__swbuf_r+0x7a>
 800a4a6:	68ac      	ldr	r4, [r5, #8]
 800a4a8:	e7cf      	b.n	800a44a <__swbuf_r+0x1a>
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <__swbuf_r+0xa0>)
 800a4ac:	429c      	cmp	r4, r3
 800a4ae:	bf08      	it	eq
 800a4b0:	68ec      	ldreq	r4, [r5, #12]
 800a4b2:	e7ca      	b.n	800a44a <__swbuf_r+0x1a>
 800a4b4:	4621      	mov	r1, r4
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	f000 f80c 	bl	800a4d4 <__swsetup_r>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d0cb      	beq.n	800a458 <__swbuf_r+0x28>
 800a4c0:	f04f 37ff 	mov.w	r7, #4294967295
 800a4c4:	e7ea      	b.n	800a49c <__swbuf_r+0x6c>
 800a4c6:	bf00      	nop
 800a4c8:	0800d304 	.word	0x0800d304
 800a4cc:	0800d324 	.word	0x0800d324
 800a4d0:	0800d2e4 	.word	0x0800d2e4

0800a4d4 <__swsetup_r>:
 800a4d4:	4b32      	ldr	r3, [pc, #200]	; (800a5a0 <__swsetup_r+0xcc>)
 800a4d6:	b570      	push	{r4, r5, r6, lr}
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	4606      	mov	r6, r0
 800a4dc:	460c      	mov	r4, r1
 800a4de:	b125      	cbz	r5, 800a4ea <__swsetup_r+0x16>
 800a4e0:	69ab      	ldr	r3, [r5, #24]
 800a4e2:	b913      	cbnz	r3, 800a4ea <__swsetup_r+0x16>
 800a4e4:	4628      	mov	r0, r5
 800a4e6:	f000 fff7 	bl	800b4d8 <__sinit>
 800a4ea:	4b2e      	ldr	r3, [pc, #184]	; (800a5a4 <__swsetup_r+0xd0>)
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	d10f      	bne.n	800a510 <__swsetup_r+0x3c>
 800a4f0:	686c      	ldr	r4, [r5, #4]
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4f8:	0719      	lsls	r1, r3, #28
 800a4fa:	d42c      	bmi.n	800a556 <__swsetup_r+0x82>
 800a4fc:	06dd      	lsls	r5, r3, #27
 800a4fe:	d411      	bmi.n	800a524 <__swsetup_r+0x50>
 800a500:	2309      	movs	r3, #9
 800a502:	6033      	str	r3, [r6, #0]
 800a504:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a508:	81a3      	strh	r3, [r4, #12]
 800a50a:	f04f 30ff 	mov.w	r0, #4294967295
 800a50e:	e03e      	b.n	800a58e <__swsetup_r+0xba>
 800a510:	4b25      	ldr	r3, [pc, #148]	; (800a5a8 <__swsetup_r+0xd4>)
 800a512:	429c      	cmp	r4, r3
 800a514:	d101      	bne.n	800a51a <__swsetup_r+0x46>
 800a516:	68ac      	ldr	r4, [r5, #8]
 800a518:	e7eb      	b.n	800a4f2 <__swsetup_r+0x1e>
 800a51a:	4b24      	ldr	r3, [pc, #144]	; (800a5ac <__swsetup_r+0xd8>)
 800a51c:	429c      	cmp	r4, r3
 800a51e:	bf08      	it	eq
 800a520:	68ec      	ldreq	r4, [r5, #12]
 800a522:	e7e6      	b.n	800a4f2 <__swsetup_r+0x1e>
 800a524:	0758      	lsls	r0, r3, #29
 800a526:	d512      	bpl.n	800a54e <__swsetup_r+0x7a>
 800a528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a52a:	b141      	cbz	r1, 800a53e <__swsetup_r+0x6a>
 800a52c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a530:	4299      	cmp	r1, r3
 800a532:	d002      	beq.n	800a53a <__swsetup_r+0x66>
 800a534:	4630      	mov	r0, r6
 800a536:	f7fe f8c9 	bl	80086cc <_free_r>
 800a53a:	2300      	movs	r3, #0
 800a53c:	6363      	str	r3, [r4, #52]	; 0x34
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a544:	81a3      	strh	r3, [r4, #12]
 800a546:	2300      	movs	r3, #0
 800a548:	6063      	str	r3, [r4, #4]
 800a54a:	6923      	ldr	r3, [r4, #16]
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	89a3      	ldrh	r3, [r4, #12]
 800a550:	f043 0308 	orr.w	r3, r3, #8
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	6923      	ldr	r3, [r4, #16]
 800a558:	b94b      	cbnz	r3, 800a56e <__swsetup_r+0x9a>
 800a55a:	89a3      	ldrh	r3, [r4, #12]
 800a55c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a564:	d003      	beq.n	800a56e <__swsetup_r+0x9a>
 800a566:	4621      	mov	r1, r4
 800a568:	4630      	mov	r0, r6
 800a56a:	f001 fbed 	bl	800bd48 <__smakebuf_r>
 800a56e:	89a0      	ldrh	r0, [r4, #12]
 800a570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a574:	f010 0301 	ands.w	r3, r0, #1
 800a578:	d00a      	beq.n	800a590 <__swsetup_r+0xbc>
 800a57a:	2300      	movs	r3, #0
 800a57c:	60a3      	str	r3, [r4, #8]
 800a57e:	6963      	ldr	r3, [r4, #20]
 800a580:	425b      	negs	r3, r3
 800a582:	61a3      	str	r3, [r4, #24]
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	b943      	cbnz	r3, 800a59a <__swsetup_r+0xc6>
 800a588:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a58c:	d1ba      	bne.n	800a504 <__swsetup_r+0x30>
 800a58e:	bd70      	pop	{r4, r5, r6, pc}
 800a590:	0781      	lsls	r1, r0, #30
 800a592:	bf58      	it	pl
 800a594:	6963      	ldrpl	r3, [r4, #20]
 800a596:	60a3      	str	r3, [r4, #8]
 800a598:	e7f4      	b.n	800a584 <__swsetup_r+0xb0>
 800a59a:	2000      	movs	r0, #0
 800a59c:	e7f7      	b.n	800a58e <__swsetup_r+0xba>
 800a59e:	bf00      	nop
 800a5a0:	2000002c 	.word	0x2000002c
 800a5a4:	0800d304 	.word	0x0800d304
 800a5a8:	0800d324 	.word	0x0800d324
 800a5ac:	0800d2e4 	.word	0x0800d2e4

0800a5b0 <quorem>:
 800a5b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	6903      	ldr	r3, [r0, #16]
 800a5b6:	690c      	ldr	r4, [r1, #16]
 800a5b8:	42a3      	cmp	r3, r4
 800a5ba:	4607      	mov	r7, r0
 800a5bc:	f2c0 8081 	blt.w	800a6c2 <quorem+0x112>
 800a5c0:	3c01      	subs	r4, #1
 800a5c2:	f101 0814 	add.w	r8, r1, #20
 800a5c6:	f100 0514 	add.w	r5, r0, #20
 800a5ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5e8:	d331      	bcc.n	800a64e <quorem+0x9e>
 800a5ea:	f04f 0e00 	mov.w	lr, #0
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	46ac      	mov	ip, r5
 800a5f2:	46f2      	mov	sl, lr
 800a5f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5f8:	b293      	uxth	r3, r2
 800a5fa:	fb06 e303 	mla	r3, r6, r3, lr
 800a5fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a602:	b29b      	uxth	r3, r3
 800a604:	ebaa 0303 	sub.w	r3, sl, r3
 800a608:	f8dc a000 	ldr.w	sl, [ip]
 800a60c:	0c12      	lsrs	r2, r2, #16
 800a60e:	fa13 f38a 	uxtah	r3, r3, sl
 800a612:	fb06 e202 	mla	r2, r6, r2, lr
 800a616:	9300      	str	r3, [sp, #0]
 800a618:	9b00      	ldr	r3, [sp, #0]
 800a61a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a61e:	b292      	uxth	r2, r2
 800a620:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a628:	f8bd 3000 	ldrh.w	r3, [sp]
 800a62c:	4581      	cmp	r9, r0
 800a62e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a632:	f84c 3b04 	str.w	r3, [ip], #4
 800a636:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a63a:	d2db      	bcs.n	800a5f4 <quorem+0x44>
 800a63c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a640:	b92b      	cbnz	r3, 800a64e <quorem+0x9e>
 800a642:	9b01      	ldr	r3, [sp, #4]
 800a644:	3b04      	subs	r3, #4
 800a646:	429d      	cmp	r5, r3
 800a648:	461a      	mov	r2, r3
 800a64a:	d32e      	bcc.n	800a6aa <quorem+0xfa>
 800a64c:	613c      	str	r4, [r7, #16]
 800a64e:	4638      	mov	r0, r7
 800a650:	f001 feb2 	bl	800c3b8 <__mcmp>
 800a654:	2800      	cmp	r0, #0
 800a656:	db24      	blt.n	800a6a2 <quorem+0xf2>
 800a658:	3601      	adds	r6, #1
 800a65a:	4628      	mov	r0, r5
 800a65c:	f04f 0c00 	mov.w	ip, #0
 800a660:	f858 2b04 	ldr.w	r2, [r8], #4
 800a664:	f8d0 e000 	ldr.w	lr, [r0]
 800a668:	b293      	uxth	r3, r2
 800a66a:	ebac 0303 	sub.w	r3, ip, r3
 800a66e:	0c12      	lsrs	r2, r2, #16
 800a670:	fa13 f38e 	uxtah	r3, r3, lr
 800a674:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a678:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a682:	45c1      	cmp	r9, r8
 800a684:	f840 3b04 	str.w	r3, [r0], #4
 800a688:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a68c:	d2e8      	bcs.n	800a660 <quorem+0xb0>
 800a68e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a696:	b922      	cbnz	r2, 800a6a2 <quorem+0xf2>
 800a698:	3b04      	subs	r3, #4
 800a69a:	429d      	cmp	r5, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	d30a      	bcc.n	800a6b6 <quorem+0x106>
 800a6a0:	613c      	str	r4, [r7, #16]
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	b003      	add	sp, #12
 800a6a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6aa:	6812      	ldr	r2, [r2, #0]
 800a6ac:	3b04      	subs	r3, #4
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	d1cc      	bne.n	800a64c <quorem+0x9c>
 800a6b2:	3c01      	subs	r4, #1
 800a6b4:	e7c7      	b.n	800a646 <quorem+0x96>
 800a6b6:	6812      	ldr	r2, [r2, #0]
 800a6b8:	3b04      	subs	r3, #4
 800a6ba:	2a00      	cmp	r2, #0
 800a6bc:	d1f0      	bne.n	800a6a0 <quorem+0xf0>
 800a6be:	3c01      	subs	r4, #1
 800a6c0:	e7eb      	b.n	800a69a <quorem+0xea>
 800a6c2:	2000      	movs	r0, #0
 800a6c4:	e7ee      	b.n	800a6a4 <quorem+0xf4>
	...

0800a6c8 <_dtoa_r>:
 800a6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6cc:	ed2d 8b04 	vpush	{d8-d9}
 800a6d0:	ec57 6b10 	vmov	r6, r7, d0
 800a6d4:	b093      	sub	sp, #76	; 0x4c
 800a6d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6dc:	9106      	str	r1, [sp, #24]
 800a6de:	ee10 aa10 	vmov	sl, s0
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6e8:	46bb      	mov	fp, r7
 800a6ea:	b975      	cbnz	r5, 800a70a <_dtoa_r+0x42>
 800a6ec:	2010      	movs	r0, #16
 800a6ee:	f7fd ffd5 	bl	800869c <malloc>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	6260      	str	r0, [r4, #36]	; 0x24
 800a6f6:	b920      	cbnz	r0, 800a702 <_dtoa_r+0x3a>
 800a6f8:	4ba7      	ldr	r3, [pc, #668]	; (800a998 <_dtoa_r+0x2d0>)
 800a6fa:	21ea      	movs	r1, #234	; 0xea
 800a6fc:	48a7      	ldr	r0, [pc, #668]	; (800a99c <_dtoa_r+0x2d4>)
 800a6fe:	f002 fa41 	bl	800cb84 <__assert_func>
 800a702:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a706:	6005      	str	r5, [r0, #0]
 800a708:	60c5      	str	r5, [r0, #12]
 800a70a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a70c:	6819      	ldr	r1, [r3, #0]
 800a70e:	b151      	cbz	r1, 800a726 <_dtoa_r+0x5e>
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	604a      	str	r2, [r1, #4]
 800a714:	2301      	movs	r3, #1
 800a716:	4093      	lsls	r3, r2
 800a718:	608b      	str	r3, [r1, #8]
 800a71a:	4620      	mov	r0, r4
 800a71c:	f001 fbc0 	bl	800bea0 <_Bfree>
 800a720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	1e3b      	subs	r3, r7, #0
 800a728:	bfaa      	itet	ge
 800a72a:	2300      	movge	r3, #0
 800a72c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a730:	f8c8 3000 	strge.w	r3, [r8]
 800a734:	4b9a      	ldr	r3, [pc, #616]	; (800a9a0 <_dtoa_r+0x2d8>)
 800a736:	bfbc      	itt	lt
 800a738:	2201      	movlt	r2, #1
 800a73a:	f8c8 2000 	strlt.w	r2, [r8]
 800a73e:	ea33 030b 	bics.w	r3, r3, fp
 800a742:	d11b      	bne.n	800a77c <_dtoa_r+0xb4>
 800a744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a746:	f242 730f 	movw	r3, #9999	; 0x270f
 800a74a:	6013      	str	r3, [r2, #0]
 800a74c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a750:	4333      	orrs	r3, r6
 800a752:	f000 8592 	beq.w	800b27a <_dtoa_r+0xbb2>
 800a756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a758:	b963      	cbnz	r3, 800a774 <_dtoa_r+0xac>
 800a75a:	4b92      	ldr	r3, [pc, #584]	; (800a9a4 <_dtoa_r+0x2dc>)
 800a75c:	e022      	b.n	800a7a4 <_dtoa_r+0xdc>
 800a75e:	4b92      	ldr	r3, [pc, #584]	; (800a9a8 <_dtoa_r+0x2e0>)
 800a760:	9301      	str	r3, [sp, #4]
 800a762:	3308      	adds	r3, #8
 800a764:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	9801      	ldr	r0, [sp, #4]
 800a76a:	b013      	add	sp, #76	; 0x4c
 800a76c:	ecbd 8b04 	vpop	{d8-d9}
 800a770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a774:	4b8b      	ldr	r3, [pc, #556]	; (800a9a4 <_dtoa_r+0x2dc>)
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	3303      	adds	r3, #3
 800a77a:	e7f3      	b.n	800a764 <_dtoa_r+0x9c>
 800a77c:	2200      	movs	r2, #0
 800a77e:	2300      	movs	r3, #0
 800a780:	4650      	mov	r0, sl
 800a782:	4659      	mov	r1, fp
 800a784:	f7f6 f9a0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a788:	ec4b ab19 	vmov	d9, sl, fp
 800a78c:	4680      	mov	r8, r0
 800a78e:	b158      	cbz	r0, 800a7a8 <_dtoa_r+0xe0>
 800a790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a792:	2301      	movs	r3, #1
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 856b 	beq.w	800b274 <_dtoa_r+0xbac>
 800a79e:	4883      	ldr	r0, [pc, #524]	; (800a9ac <_dtoa_r+0x2e4>)
 800a7a0:	6018      	str	r0, [r3, #0]
 800a7a2:	1e43      	subs	r3, r0, #1
 800a7a4:	9301      	str	r3, [sp, #4]
 800a7a6:	e7df      	b.n	800a768 <_dtoa_r+0xa0>
 800a7a8:	ec4b ab10 	vmov	d0, sl, fp
 800a7ac:	aa10      	add	r2, sp, #64	; 0x40
 800a7ae:	a911      	add	r1, sp, #68	; 0x44
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f001 ff23 	bl	800c5fc <__d2b>
 800a7b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a7ba:	ee08 0a10 	vmov	s16, r0
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	f000 8084 	beq.w	800a8cc <_dtoa_r+0x204>
 800a7c4:	ee19 3a90 	vmov	r3, s19
 800a7c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a7d0:	4656      	mov	r6, sl
 800a7d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a7d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a7de:	4b74      	ldr	r3, [pc, #464]	; (800a9b0 <_dtoa_r+0x2e8>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	4639      	mov	r1, r7
 800a7e6:	f7f5 fd4f 	bl	8000288 <__aeabi_dsub>
 800a7ea:	a365      	add	r3, pc, #404	; (adr r3, 800a980 <_dtoa_r+0x2b8>)
 800a7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f0:	f7f5 ff02 	bl	80005f8 <__aeabi_dmul>
 800a7f4:	a364      	add	r3, pc, #400	; (adr r3, 800a988 <_dtoa_r+0x2c0>)
 800a7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fa:	f7f5 fd47 	bl	800028c <__adddf3>
 800a7fe:	4606      	mov	r6, r0
 800a800:	4628      	mov	r0, r5
 800a802:	460f      	mov	r7, r1
 800a804:	f7f5 fe8e 	bl	8000524 <__aeabi_i2d>
 800a808:	a361      	add	r3, pc, #388	; (adr r3, 800a990 <_dtoa_r+0x2c8>)
 800a80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a80e:	f7f5 fef3 	bl	80005f8 <__aeabi_dmul>
 800a812:	4602      	mov	r2, r0
 800a814:	460b      	mov	r3, r1
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f5 fd37 	bl	800028c <__adddf3>
 800a81e:	4606      	mov	r6, r0
 800a820:	460f      	mov	r7, r1
 800a822:	f7f6 f999 	bl	8000b58 <__aeabi_d2iz>
 800a826:	2200      	movs	r2, #0
 800a828:	9000      	str	r0, [sp, #0]
 800a82a:	2300      	movs	r3, #0
 800a82c:	4630      	mov	r0, r6
 800a82e:	4639      	mov	r1, r7
 800a830:	f7f6 f954 	bl	8000adc <__aeabi_dcmplt>
 800a834:	b150      	cbz	r0, 800a84c <_dtoa_r+0x184>
 800a836:	9800      	ldr	r0, [sp, #0]
 800a838:	f7f5 fe74 	bl	8000524 <__aeabi_i2d>
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	f7f6 f942 	bl	8000ac8 <__aeabi_dcmpeq>
 800a844:	b910      	cbnz	r0, 800a84c <_dtoa_r+0x184>
 800a846:	9b00      	ldr	r3, [sp, #0]
 800a848:	3b01      	subs	r3, #1
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	9b00      	ldr	r3, [sp, #0]
 800a84e:	2b16      	cmp	r3, #22
 800a850:	d85a      	bhi.n	800a908 <_dtoa_r+0x240>
 800a852:	9a00      	ldr	r2, [sp, #0]
 800a854:	4b57      	ldr	r3, [pc, #348]	; (800a9b4 <_dtoa_r+0x2ec>)
 800a856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	ec51 0b19 	vmov	r0, r1, d9
 800a862:	f7f6 f93b 	bl	8000adc <__aeabi_dcmplt>
 800a866:	2800      	cmp	r0, #0
 800a868:	d050      	beq.n	800a90c <_dtoa_r+0x244>
 800a86a:	9b00      	ldr	r3, [sp, #0]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	2300      	movs	r3, #0
 800a872:	930b      	str	r3, [sp, #44]	; 0x2c
 800a874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a876:	1b5d      	subs	r5, r3, r5
 800a878:	1e6b      	subs	r3, r5, #1
 800a87a:	9305      	str	r3, [sp, #20]
 800a87c:	bf45      	ittet	mi
 800a87e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a882:	9304      	strmi	r3, [sp, #16]
 800a884:	2300      	movpl	r3, #0
 800a886:	2300      	movmi	r3, #0
 800a888:	bf4c      	ite	mi
 800a88a:	9305      	strmi	r3, [sp, #20]
 800a88c:	9304      	strpl	r3, [sp, #16]
 800a88e:	9b00      	ldr	r3, [sp, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	db3d      	blt.n	800a910 <_dtoa_r+0x248>
 800a894:	9b05      	ldr	r3, [sp, #20]
 800a896:	9a00      	ldr	r2, [sp, #0]
 800a898:	920a      	str	r2, [sp, #40]	; 0x28
 800a89a:	4413      	add	r3, r2
 800a89c:	9305      	str	r3, [sp, #20]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	9307      	str	r3, [sp, #28]
 800a8a2:	9b06      	ldr	r3, [sp, #24]
 800a8a4:	2b09      	cmp	r3, #9
 800a8a6:	f200 8089 	bhi.w	800a9bc <_dtoa_r+0x2f4>
 800a8aa:	2b05      	cmp	r3, #5
 800a8ac:	bfc4      	itt	gt
 800a8ae:	3b04      	subgt	r3, #4
 800a8b0:	9306      	strgt	r3, [sp, #24]
 800a8b2:	9b06      	ldr	r3, [sp, #24]
 800a8b4:	f1a3 0302 	sub.w	r3, r3, #2
 800a8b8:	bfcc      	ite	gt
 800a8ba:	2500      	movgt	r5, #0
 800a8bc:	2501      	movle	r5, #1
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	f200 8087 	bhi.w	800a9d2 <_dtoa_r+0x30a>
 800a8c4:	e8df f003 	tbb	[pc, r3]
 800a8c8:	59383a2d 	.word	0x59383a2d
 800a8cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a8d0:	441d      	add	r5, r3
 800a8d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8d6:	2b20      	cmp	r3, #32
 800a8d8:	bfc1      	itttt	gt
 800a8da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a8e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8ea:	bfda      	itte	le
 800a8ec:	f1c3 0320 	rsble	r3, r3, #32
 800a8f0:	fa06 f003 	lslle.w	r0, r6, r3
 800a8f4:	4318      	orrgt	r0, r3
 800a8f6:	f7f5 fe05 	bl	8000504 <__aeabi_ui2d>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4606      	mov	r6, r0
 800a8fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a902:	3d01      	subs	r5, #1
 800a904:	930e      	str	r3, [sp, #56]	; 0x38
 800a906:	e76a      	b.n	800a7de <_dtoa_r+0x116>
 800a908:	2301      	movs	r3, #1
 800a90a:	e7b2      	b.n	800a872 <_dtoa_r+0x1aa>
 800a90c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a90e:	e7b1      	b.n	800a874 <_dtoa_r+0x1ac>
 800a910:	9b04      	ldr	r3, [sp, #16]
 800a912:	9a00      	ldr	r2, [sp, #0]
 800a914:	1a9b      	subs	r3, r3, r2
 800a916:	9304      	str	r3, [sp, #16]
 800a918:	4253      	negs	r3, r2
 800a91a:	9307      	str	r3, [sp, #28]
 800a91c:	2300      	movs	r3, #0
 800a91e:	930a      	str	r3, [sp, #40]	; 0x28
 800a920:	e7bf      	b.n	800a8a2 <_dtoa_r+0x1da>
 800a922:	2300      	movs	r3, #0
 800a924:	9308      	str	r3, [sp, #32]
 800a926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	dc55      	bgt.n	800a9d8 <_dtoa_r+0x310>
 800a92c:	2301      	movs	r3, #1
 800a92e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a932:	461a      	mov	r2, r3
 800a934:	9209      	str	r2, [sp, #36]	; 0x24
 800a936:	e00c      	b.n	800a952 <_dtoa_r+0x28a>
 800a938:	2301      	movs	r3, #1
 800a93a:	e7f3      	b.n	800a924 <_dtoa_r+0x25c>
 800a93c:	2300      	movs	r3, #0
 800a93e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a940:	9308      	str	r3, [sp, #32]
 800a942:	9b00      	ldr	r3, [sp, #0]
 800a944:	4413      	add	r3, r2
 800a946:	9302      	str	r3, [sp, #8]
 800a948:	3301      	adds	r3, #1
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	bfb8      	it	lt
 800a950:	2301      	movlt	r3, #1
 800a952:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a954:	2200      	movs	r2, #0
 800a956:	6042      	str	r2, [r0, #4]
 800a958:	2204      	movs	r2, #4
 800a95a:	f102 0614 	add.w	r6, r2, #20
 800a95e:	429e      	cmp	r6, r3
 800a960:	6841      	ldr	r1, [r0, #4]
 800a962:	d93d      	bls.n	800a9e0 <_dtoa_r+0x318>
 800a964:	4620      	mov	r0, r4
 800a966:	f001 fa5b 	bl	800be20 <_Balloc>
 800a96a:	9001      	str	r0, [sp, #4]
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d13b      	bne.n	800a9e8 <_dtoa_r+0x320>
 800a970:	4b11      	ldr	r3, [pc, #68]	; (800a9b8 <_dtoa_r+0x2f0>)
 800a972:	4602      	mov	r2, r0
 800a974:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a978:	e6c0      	b.n	800a6fc <_dtoa_r+0x34>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e7df      	b.n	800a93e <_dtoa_r+0x276>
 800a97e:	bf00      	nop
 800a980:	636f4361 	.word	0x636f4361
 800a984:	3fd287a7 	.word	0x3fd287a7
 800a988:	8b60c8b3 	.word	0x8b60c8b3
 800a98c:	3fc68a28 	.word	0x3fc68a28
 800a990:	509f79fb 	.word	0x509f79fb
 800a994:	3fd34413 	.word	0x3fd34413
 800a998:	0800d25e 	.word	0x0800d25e
 800a99c:	0800d275 	.word	0x0800d275
 800a9a0:	7ff00000 	.word	0x7ff00000
 800a9a4:	0800d25a 	.word	0x0800d25a
 800a9a8:	0800d251 	.word	0x0800d251
 800a9ac:	0800d0d1 	.word	0x0800d0d1
 800a9b0:	3ff80000 	.word	0x3ff80000
 800a9b4:	0800d448 	.word	0x0800d448
 800a9b8:	0800d2d0 	.word	0x0800d2d0
 800a9bc:	2501      	movs	r5, #1
 800a9be:	2300      	movs	r3, #0
 800a9c0:	9306      	str	r3, [sp, #24]
 800a9c2:	9508      	str	r5, [sp, #32]
 800a9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	2312      	movs	r3, #18
 800a9d0:	e7b0      	b.n	800a934 <_dtoa_r+0x26c>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	9308      	str	r3, [sp, #32]
 800a9d6:	e7f5      	b.n	800a9c4 <_dtoa_r+0x2fc>
 800a9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9de:	e7b8      	b.n	800a952 <_dtoa_r+0x28a>
 800a9e0:	3101      	adds	r1, #1
 800a9e2:	6041      	str	r1, [r0, #4]
 800a9e4:	0052      	lsls	r2, r2, #1
 800a9e6:	e7b8      	b.n	800a95a <_dtoa_r+0x292>
 800a9e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9ea:	9a01      	ldr	r2, [sp, #4]
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	9b03      	ldr	r3, [sp, #12]
 800a9f0:	2b0e      	cmp	r3, #14
 800a9f2:	f200 809d 	bhi.w	800ab30 <_dtoa_r+0x468>
 800a9f6:	2d00      	cmp	r5, #0
 800a9f8:	f000 809a 	beq.w	800ab30 <_dtoa_r+0x468>
 800a9fc:	9b00      	ldr	r3, [sp, #0]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	dd32      	ble.n	800aa68 <_dtoa_r+0x3a0>
 800aa02:	4ab7      	ldr	r2, [pc, #732]	; (800ace0 <_dtoa_r+0x618>)
 800aa04:	f003 030f 	and.w	r3, r3, #15
 800aa08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa10:	9b00      	ldr	r3, [sp, #0]
 800aa12:	05d8      	lsls	r0, r3, #23
 800aa14:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aa18:	d516      	bpl.n	800aa48 <_dtoa_r+0x380>
 800aa1a:	4bb2      	ldr	r3, [pc, #712]	; (800ace4 <_dtoa_r+0x61c>)
 800aa1c:	ec51 0b19 	vmov	r0, r1, d9
 800aa20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa24:	f7f5 ff12 	bl	800084c <__aeabi_ddiv>
 800aa28:	f007 070f 	and.w	r7, r7, #15
 800aa2c:	4682      	mov	sl, r0
 800aa2e:	468b      	mov	fp, r1
 800aa30:	2503      	movs	r5, #3
 800aa32:	4eac      	ldr	r6, [pc, #688]	; (800ace4 <_dtoa_r+0x61c>)
 800aa34:	b957      	cbnz	r7, 800aa4c <_dtoa_r+0x384>
 800aa36:	4642      	mov	r2, r8
 800aa38:	464b      	mov	r3, r9
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	4659      	mov	r1, fp
 800aa3e:	f7f5 ff05 	bl	800084c <__aeabi_ddiv>
 800aa42:	4682      	mov	sl, r0
 800aa44:	468b      	mov	fp, r1
 800aa46:	e028      	b.n	800aa9a <_dtoa_r+0x3d2>
 800aa48:	2502      	movs	r5, #2
 800aa4a:	e7f2      	b.n	800aa32 <_dtoa_r+0x36a>
 800aa4c:	07f9      	lsls	r1, r7, #31
 800aa4e:	d508      	bpl.n	800aa62 <_dtoa_r+0x39a>
 800aa50:	4640      	mov	r0, r8
 800aa52:	4649      	mov	r1, r9
 800aa54:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa58:	f7f5 fdce 	bl	80005f8 <__aeabi_dmul>
 800aa5c:	3501      	adds	r5, #1
 800aa5e:	4680      	mov	r8, r0
 800aa60:	4689      	mov	r9, r1
 800aa62:	107f      	asrs	r7, r7, #1
 800aa64:	3608      	adds	r6, #8
 800aa66:	e7e5      	b.n	800aa34 <_dtoa_r+0x36c>
 800aa68:	f000 809b 	beq.w	800aba2 <_dtoa_r+0x4da>
 800aa6c:	9b00      	ldr	r3, [sp, #0]
 800aa6e:	4f9d      	ldr	r7, [pc, #628]	; (800ace4 <_dtoa_r+0x61c>)
 800aa70:	425e      	negs	r6, r3
 800aa72:	4b9b      	ldr	r3, [pc, #620]	; (800ace0 <_dtoa_r+0x618>)
 800aa74:	f006 020f 	and.w	r2, r6, #15
 800aa78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	ec51 0b19 	vmov	r0, r1, d9
 800aa84:	f7f5 fdb8 	bl	80005f8 <__aeabi_dmul>
 800aa88:	1136      	asrs	r6, r6, #4
 800aa8a:	4682      	mov	sl, r0
 800aa8c:	468b      	mov	fp, r1
 800aa8e:	2300      	movs	r3, #0
 800aa90:	2502      	movs	r5, #2
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	d17a      	bne.n	800ab8c <_dtoa_r+0x4c4>
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1d3      	bne.n	800aa42 <_dtoa_r+0x37a>
 800aa9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	f000 8082 	beq.w	800aba6 <_dtoa_r+0x4de>
 800aaa2:	4b91      	ldr	r3, [pc, #580]	; (800ace8 <_dtoa_r+0x620>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	4650      	mov	r0, sl
 800aaa8:	4659      	mov	r1, fp
 800aaaa:	f7f6 f817 	bl	8000adc <__aeabi_dcmplt>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d079      	beq.n	800aba6 <_dtoa_r+0x4de>
 800aab2:	9b03      	ldr	r3, [sp, #12]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d076      	beq.n	800aba6 <_dtoa_r+0x4de>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dd36      	ble.n	800ab2c <_dtoa_r+0x464>
 800aabe:	9b00      	ldr	r3, [sp, #0]
 800aac0:	4650      	mov	r0, sl
 800aac2:	4659      	mov	r1, fp
 800aac4:	1e5f      	subs	r7, r3, #1
 800aac6:	2200      	movs	r2, #0
 800aac8:	4b88      	ldr	r3, [pc, #544]	; (800acec <_dtoa_r+0x624>)
 800aaca:	f7f5 fd95 	bl	80005f8 <__aeabi_dmul>
 800aace:	9e02      	ldr	r6, [sp, #8]
 800aad0:	4682      	mov	sl, r0
 800aad2:	468b      	mov	fp, r1
 800aad4:	3501      	adds	r5, #1
 800aad6:	4628      	mov	r0, r5
 800aad8:	f7f5 fd24 	bl	8000524 <__aeabi_i2d>
 800aadc:	4652      	mov	r2, sl
 800aade:	465b      	mov	r3, fp
 800aae0:	f7f5 fd8a 	bl	80005f8 <__aeabi_dmul>
 800aae4:	4b82      	ldr	r3, [pc, #520]	; (800acf0 <_dtoa_r+0x628>)
 800aae6:	2200      	movs	r2, #0
 800aae8:	f7f5 fbd0 	bl	800028c <__adddf3>
 800aaec:	46d0      	mov	r8, sl
 800aaee:	46d9      	mov	r9, fp
 800aaf0:	4682      	mov	sl, r0
 800aaf2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aaf6:	2e00      	cmp	r6, #0
 800aaf8:	d158      	bne.n	800abac <_dtoa_r+0x4e4>
 800aafa:	4b7e      	ldr	r3, [pc, #504]	; (800acf4 <_dtoa_r+0x62c>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	4640      	mov	r0, r8
 800ab00:	4649      	mov	r1, r9
 800ab02:	f7f5 fbc1 	bl	8000288 <__aeabi_dsub>
 800ab06:	4652      	mov	r2, sl
 800ab08:	465b      	mov	r3, fp
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	4689      	mov	r9, r1
 800ab0e:	f7f6 f803 	bl	8000b18 <__aeabi_dcmpgt>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	f040 8295 	bne.w	800b042 <_dtoa_r+0x97a>
 800ab18:	4652      	mov	r2, sl
 800ab1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab1e:	4640      	mov	r0, r8
 800ab20:	4649      	mov	r1, r9
 800ab22:	f7f5 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f040 8289 	bne.w	800b03e <_dtoa_r+0x976>
 800ab2c:	ec5b ab19 	vmov	sl, fp, d9
 800ab30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f2c0 8148 	blt.w	800adc8 <_dtoa_r+0x700>
 800ab38:	9a00      	ldr	r2, [sp, #0]
 800ab3a:	2a0e      	cmp	r2, #14
 800ab3c:	f300 8144 	bgt.w	800adc8 <_dtoa_r+0x700>
 800ab40:	4b67      	ldr	r3, [pc, #412]	; (800ace0 <_dtoa_r+0x618>)
 800ab42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab46:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f280 80d5 	bge.w	800acfc <_dtoa_r+0x634>
 800ab52:	9b03      	ldr	r3, [sp, #12]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f300 80d1 	bgt.w	800acfc <_dtoa_r+0x634>
 800ab5a:	f040 826f 	bne.w	800b03c <_dtoa_r+0x974>
 800ab5e:	4b65      	ldr	r3, [pc, #404]	; (800acf4 <_dtoa_r+0x62c>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	4640      	mov	r0, r8
 800ab64:	4649      	mov	r1, r9
 800ab66:	f7f5 fd47 	bl	80005f8 <__aeabi_dmul>
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	465b      	mov	r3, fp
 800ab6e:	f7f5 ffc9 	bl	8000b04 <__aeabi_dcmpge>
 800ab72:	9e03      	ldr	r6, [sp, #12]
 800ab74:	4637      	mov	r7, r6
 800ab76:	2800      	cmp	r0, #0
 800ab78:	f040 8245 	bne.w	800b006 <_dtoa_r+0x93e>
 800ab7c:	9d01      	ldr	r5, [sp, #4]
 800ab7e:	2331      	movs	r3, #49	; 0x31
 800ab80:	f805 3b01 	strb.w	r3, [r5], #1
 800ab84:	9b00      	ldr	r3, [sp, #0]
 800ab86:	3301      	adds	r3, #1
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	e240      	b.n	800b00e <_dtoa_r+0x946>
 800ab8c:	07f2      	lsls	r2, r6, #31
 800ab8e:	d505      	bpl.n	800ab9c <_dtoa_r+0x4d4>
 800ab90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab94:	f7f5 fd30 	bl	80005f8 <__aeabi_dmul>
 800ab98:	3501      	adds	r5, #1
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	1076      	asrs	r6, r6, #1
 800ab9e:	3708      	adds	r7, #8
 800aba0:	e777      	b.n	800aa92 <_dtoa_r+0x3ca>
 800aba2:	2502      	movs	r5, #2
 800aba4:	e779      	b.n	800aa9a <_dtoa_r+0x3d2>
 800aba6:	9f00      	ldr	r7, [sp, #0]
 800aba8:	9e03      	ldr	r6, [sp, #12]
 800abaa:	e794      	b.n	800aad6 <_dtoa_r+0x40e>
 800abac:	9901      	ldr	r1, [sp, #4]
 800abae:	4b4c      	ldr	r3, [pc, #304]	; (800ace0 <_dtoa_r+0x618>)
 800abb0:	4431      	add	r1, r6
 800abb2:	910d      	str	r1, [sp, #52]	; 0x34
 800abb4:	9908      	ldr	r1, [sp, #32]
 800abb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abbe:	2900      	cmp	r1, #0
 800abc0:	d043      	beq.n	800ac4a <_dtoa_r+0x582>
 800abc2:	494d      	ldr	r1, [pc, #308]	; (800acf8 <_dtoa_r+0x630>)
 800abc4:	2000      	movs	r0, #0
 800abc6:	f7f5 fe41 	bl	800084c <__aeabi_ddiv>
 800abca:	4652      	mov	r2, sl
 800abcc:	465b      	mov	r3, fp
 800abce:	f7f5 fb5b 	bl	8000288 <__aeabi_dsub>
 800abd2:	9d01      	ldr	r5, [sp, #4]
 800abd4:	4682      	mov	sl, r0
 800abd6:	468b      	mov	fp, r1
 800abd8:	4649      	mov	r1, r9
 800abda:	4640      	mov	r0, r8
 800abdc:	f7f5 ffbc 	bl	8000b58 <__aeabi_d2iz>
 800abe0:	4606      	mov	r6, r0
 800abe2:	f7f5 fc9f 	bl	8000524 <__aeabi_i2d>
 800abe6:	4602      	mov	r2, r0
 800abe8:	460b      	mov	r3, r1
 800abea:	4640      	mov	r0, r8
 800abec:	4649      	mov	r1, r9
 800abee:	f7f5 fb4b 	bl	8000288 <__aeabi_dsub>
 800abf2:	3630      	adds	r6, #48	; 0x30
 800abf4:	f805 6b01 	strb.w	r6, [r5], #1
 800abf8:	4652      	mov	r2, sl
 800abfa:	465b      	mov	r3, fp
 800abfc:	4680      	mov	r8, r0
 800abfe:	4689      	mov	r9, r1
 800ac00:	f7f5 ff6c 	bl	8000adc <__aeabi_dcmplt>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d163      	bne.n	800acd0 <_dtoa_r+0x608>
 800ac08:	4642      	mov	r2, r8
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	4936      	ldr	r1, [pc, #216]	; (800ace8 <_dtoa_r+0x620>)
 800ac0e:	2000      	movs	r0, #0
 800ac10:	f7f5 fb3a 	bl	8000288 <__aeabi_dsub>
 800ac14:	4652      	mov	r2, sl
 800ac16:	465b      	mov	r3, fp
 800ac18:	f7f5 ff60 	bl	8000adc <__aeabi_dcmplt>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	f040 80b5 	bne.w	800ad8c <_dtoa_r+0x6c4>
 800ac22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac24:	429d      	cmp	r5, r3
 800ac26:	d081      	beq.n	800ab2c <_dtoa_r+0x464>
 800ac28:	4b30      	ldr	r3, [pc, #192]	; (800acec <_dtoa_r+0x624>)
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4650      	mov	r0, sl
 800ac2e:	4659      	mov	r1, fp
 800ac30:	f7f5 fce2 	bl	80005f8 <__aeabi_dmul>
 800ac34:	4b2d      	ldr	r3, [pc, #180]	; (800acec <_dtoa_r+0x624>)
 800ac36:	4682      	mov	sl, r0
 800ac38:	468b      	mov	fp, r1
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f7f5 fcda 	bl	80005f8 <__aeabi_dmul>
 800ac44:	4680      	mov	r8, r0
 800ac46:	4689      	mov	r9, r1
 800ac48:	e7c6      	b.n	800abd8 <_dtoa_r+0x510>
 800ac4a:	4650      	mov	r0, sl
 800ac4c:	4659      	mov	r1, fp
 800ac4e:	f7f5 fcd3 	bl	80005f8 <__aeabi_dmul>
 800ac52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac54:	9d01      	ldr	r5, [sp, #4]
 800ac56:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac58:	4682      	mov	sl, r0
 800ac5a:	468b      	mov	fp, r1
 800ac5c:	4649      	mov	r1, r9
 800ac5e:	4640      	mov	r0, r8
 800ac60:	f7f5 ff7a 	bl	8000b58 <__aeabi_d2iz>
 800ac64:	4606      	mov	r6, r0
 800ac66:	f7f5 fc5d 	bl	8000524 <__aeabi_i2d>
 800ac6a:	3630      	adds	r6, #48	; 0x30
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4640      	mov	r0, r8
 800ac72:	4649      	mov	r1, r9
 800ac74:	f7f5 fb08 	bl	8000288 <__aeabi_dsub>
 800ac78:	f805 6b01 	strb.w	r6, [r5], #1
 800ac7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac7e:	429d      	cmp	r5, r3
 800ac80:	4680      	mov	r8, r0
 800ac82:	4689      	mov	r9, r1
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	d124      	bne.n	800acd4 <_dtoa_r+0x60c>
 800ac8a:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <_dtoa_r+0x630>)
 800ac8c:	4650      	mov	r0, sl
 800ac8e:	4659      	mov	r1, fp
 800ac90:	f7f5 fafc 	bl	800028c <__adddf3>
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	4640      	mov	r0, r8
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	f7f5 ff3c 	bl	8000b18 <__aeabi_dcmpgt>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d173      	bne.n	800ad8c <_dtoa_r+0x6c4>
 800aca4:	4652      	mov	r2, sl
 800aca6:	465b      	mov	r3, fp
 800aca8:	4913      	ldr	r1, [pc, #76]	; (800acf8 <_dtoa_r+0x630>)
 800acaa:	2000      	movs	r0, #0
 800acac:	f7f5 faec 	bl	8000288 <__aeabi_dsub>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	4640      	mov	r0, r8
 800acb6:	4649      	mov	r1, r9
 800acb8:	f7f5 ff10 	bl	8000adc <__aeabi_dcmplt>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	f43f af35 	beq.w	800ab2c <_dtoa_r+0x464>
 800acc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800acc4:	1e6b      	subs	r3, r5, #1
 800acc6:	930f      	str	r3, [sp, #60]	; 0x3c
 800acc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800accc:	2b30      	cmp	r3, #48	; 0x30
 800acce:	d0f8      	beq.n	800acc2 <_dtoa_r+0x5fa>
 800acd0:	9700      	str	r7, [sp, #0]
 800acd2:	e049      	b.n	800ad68 <_dtoa_r+0x6a0>
 800acd4:	4b05      	ldr	r3, [pc, #20]	; (800acec <_dtoa_r+0x624>)
 800acd6:	f7f5 fc8f 	bl	80005f8 <__aeabi_dmul>
 800acda:	4680      	mov	r8, r0
 800acdc:	4689      	mov	r9, r1
 800acde:	e7bd      	b.n	800ac5c <_dtoa_r+0x594>
 800ace0:	0800d448 	.word	0x0800d448
 800ace4:	0800d420 	.word	0x0800d420
 800ace8:	3ff00000 	.word	0x3ff00000
 800acec:	40240000 	.word	0x40240000
 800acf0:	401c0000 	.word	0x401c0000
 800acf4:	40140000 	.word	0x40140000
 800acf8:	3fe00000 	.word	0x3fe00000
 800acfc:	9d01      	ldr	r5, [sp, #4]
 800acfe:	4656      	mov	r6, sl
 800ad00:	465f      	mov	r7, fp
 800ad02:	4642      	mov	r2, r8
 800ad04:	464b      	mov	r3, r9
 800ad06:	4630      	mov	r0, r6
 800ad08:	4639      	mov	r1, r7
 800ad0a:	f7f5 fd9f 	bl	800084c <__aeabi_ddiv>
 800ad0e:	f7f5 ff23 	bl	8000b58 <__aeabi_d2iz>
 800ad12:	4682      	mov	sl, r0
 800ad14:	f7f5 fc06 	bl	8000524 <__aeabi_i2d>
 800ad18:	4642      	mov	r2, r8
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	f7f5 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4630      	mov	r0, r6
 800ad26:	4639      	mov	r1, r7
 800ad28:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ad2c:	f7f5 faac 	bl	8000288 <__aeabi_dsub>
 800ad30:	f805 6b01 	strb.w	r6, [r5], #1
 800ad34:	9e01      	ldr	r6, [sp, #4]
 800ad36:	9f03      	ldr	r7, [sp, #12]
 800ad38:	1bae      	subs	r6, r5, r6
 800ad3a:	42b7      	cmp	r7, r6
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	d135      	bne.n	800adae <_dtoa_r+0x6e6>
 800ad42:	f7f5 faa3 	bl	800028c <__adddf3>
 800ad46:	4642      	mov	r2, r8
 800ad48:	464b      	mov	r3, r9
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	460f      	mov	r7, r1
 800ad4e:	f7f5 fee3 	bl	8000b18 <__aeabi_dcmpgt>
 800ad52:	b9d0      	cbnz	r0, 800ad8a <_dtoa_r+0x6c2>
 800ad54:	4642      	mov	r2, r8
 800ad56:	464b      	mov	r3, r9
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7f5 feb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad60:	b110      	cbz	r0, 800ad68 <_dtoa_r+0x6a0>
 800ad62:	f01a 0f01 	tst.w	sl, #1
 800ad66:	d110      	bne.n	800ad8a <_dtoa_r+0x6c2>
 800ad68:	4620      	mov	r0, r4
 800ad6a:	ee18 1a10 	vmov	r1, s16
 800ad6e:	f001 f897 	bl	800bea0 <_Bfree>
 800ad72:	2300      	movs	r3, #0
 800ad74:	9800      	ldr	r0, [sp, #0]
 800ad76:	702b      	strb	r3, [r5, #0]
 800ad78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	6018      	str	r0, [r3, #0]
 800ad7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	f43f acf1 	beq.w	800a768 <_dtoa_r+0xa0>
 800ad86:	601d      	str	r5, [r3, #0]
 800ad88:	e4ee      	b.n	800a768 <_dtoa_r+0xa0>
 800ad8a:	9f00      	ldr	r7, [sp, #0]
 800ad8c:	462b      	mov	r3, r5
 800ad8e:	461d      	mov	r5, r3
 800ad90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad94:	2a39      	cmp	r2, #57	; 0x39
 800ad96:	d106      	bne.n	800ada6 <_dtoa_r+0x6de>
 800ad98:	9a01      	ldr	r2, [sp, #4]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d1f7      	bne.n	800ad8e <_dtoa_r+0x6c6>
 800ad9e:	9901      	ldr	r1, [sp, #4]
 800ada0:	2230      	movs	r2, #48	; 0x30
 800ada2:	3701      	adds	r7, #1
 800ada4:	700a      	strb	r2, [r1, #0]
 800ada6:	781a      	ldrb	r2, [r3, #0]
 800ada8:	3201      	adds	r2, #1
 800adaa:	701a      	strb	r2, [r3, #0]
 800adac:	e790      	b.n	800acd0 <_dtoa_r+0x608>
 800adae:	4ba6      	ldr	r3, [pc, #664]	; (800b048 <_dtoa_r+0x980>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	f7f5 fc21 	bl	80005f8 <__aeabi_dmul>
 800adb6:	2200      	movs	r2, #0
 800adb8:	2300      	movs	r3, #0
 800adba:	4606      	mov	r6, r0
 800adbc:	460f      	mov	r7, r1
 800adbe:	f7f5 fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d09d      	beq.n	800ad02 <_dtoa_r+0x63a>
 800adc6:	e7cf      	b.n	800ad68 <_dtoa_r+0x6a0>
 800adc8:	9a08      	ldr	r2, [sp, #32]
 800adca:	2a00      	cmp	r2, #0
 800adcc:	f000 80d7 	beq.w	800af7e <_dtoa_r+0x8b6>
 800add0:	9a06      	ldr	r2, [sp, #24]
 800add2:	2a01      	cmp	r2, #1
 800add4:	f300 80ba 	bgt.w	800af4c <_dtoa_r+0x884>
 800add8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800adda:	2a00      	cmp	r2, #0
 800addc:	f000 80b2 	beq.w	800af44 <_dtoa_r+0x87c>
 800ade0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ade4:	9e07      	ldr	r6, [sp, #28]
 800ade6:	9d04      	ldr	r5, [sp, #16]
 800ade8:	9a04      	ldr	r2, [sp, #16]
 800adea:	441a      	add	r2, r3
 800adec:	9204      	str	r2, [sp, #16]
 800adee:	9a05      	ldr	r2, [sp, #20]
 800adf0:	2101      	movs	r1, #1
 800adf2:	441a      	add	r2, r3
 800adf4:	4620      	mov	r0, r4
 800adf6:	9205      	str	r2, [sp, #20]
 800adf8:	f001 f954 	bl	800c0a4 <__i2b>
 800adfc:	4607      	mov	r7, r0
 800adfe:	2d00      	cmp	r5, #0
 800ae00:	dd0c      	ble.n	800ae1c <_dtoa_r+0x754>
 800ae02:	9b05      	ldr	r3, [sp, #20]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	dd09      	ble.n	800ae1c <_dtoa_r+0x754>
 800ae08:	42ab      	cmp	r3, r5
 800ae0a:	9a04      	ldr	r2, [sp, #16]
 800ae0c:	bfa8      	it	ge
 800ae0e:	462b      	movge	r3, r5
 800ae10:	1ad2      	subs	r2, r2, r3
 800ae12:	9204      	str	r2, [sp, #16]
 800ae14:	9a05      	ldr	r2, [sp, #20]
 800ae16:	1aed      	subs	r5, r5, r3
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	9305      	str	r3, [sp, #20]
 800ae1c:	9b07      	ldr	r3, [sp, #28]
 800ae1e:	b31b      	cbz	r3, 800ae68 <_dtoa_r+0x7a0>
 800ae20:	9b08      	ldr	r3, [sp, #32]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f000 80af 	beq.w	800af86 <_dtoa_r+0x8be>
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	dd13      	ble.n	800ae54 <_dtoa_r+0x78c>
 800ae2c:	4639      	mov	r1, r7
 800ae2e:	4632      	mov	r2, r6
 800ae30:	4620      	mov	r0, r4
 800ae32:	f001 f9f7 	bl	800c224 <__pow5mult>
 800ae36:	ee18 2a10 	vmov	r2, s16
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f001 f946 	bl	800c0d0 <__multiply>
 800ae44:	ee18 1a10 	vmov	r1, s16
 800ae48:	4680      	mov	r8, r0
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	f001 f828 	bl	800bea0 <_Bfree>
 800ae50:	ee08 8a10 	vmov	s16, r8
 800ae54:	9b07      	ldr	r3, [sp, #28]
 800ae56:	1b9a      	subs	r2, r3, r6
 800ae58:	d006      	beq.n	800ae68 <_dtoa_r+0x7a0>
 800ae5a:	ee18 1a10 	vmov	r1, s16
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f001 f9e0 	bl	800c224 <__pow5mult>
 800ae64:	ee08 0a10 	vmov	s16, r0
 800ae68:	2101      	movs	r1, #1
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f001 f91a 	bl	800c0a4 <__i2b>
 800ae70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	4606      	mov	r6, r0
 800ae76:	f340 8088 	ble.w	800af8a <_dtoa_r+0x8c2>
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	4601      	mov	r1, r0
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f001 f9d0 	bl	800c224 <__pow5mult>
 800ae84:	9b06      	ldr	r3, [sp, #24]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	4606      	mov	r6, r0
 800ae8a:	f340 8081 	ble.w	800af90 <_dtoa_r+0x8c8>
 800ae8e:	f04f 0800 	mov.w	r8, #0
 800ae92:	6933      	ldr	r3, [r6, #16]
 800ae94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae98:	6918      	ldr	r0, [r3, #16]
 800ae9a:	f001 f8b3 	bl	800c004 <__hi0bits>
 800ae9e:	f1c0 0020 	rsb	r0, r0, #32
 800aea2:	9b05      	ldr	r3, [sp, #20]
 800aea4:	4418      	add	r0, r3
 800aea6:	f010 001f 	ands.w	r0, r0, #31
 800aeaa:	f000 8092 	beq.w	800afd2 <_dtoa_r+0x90a>
 800aeae:	f1c0 0320 	rsb	r3, r0, #32
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	f340 808a 	ble.w	800afcc <_dtoa_r+0x904>
 800aeb8:	f1c0 001c 	rsb	r0, r0, #28
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	4403      	add	r3, r0
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	9b05      	ldr	r3, [sp, #20]
 800aec4:	4403      	add	r3, r0
 800aec6:	4405      	add	r5, r0
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	9b04      	ldr	r3, [sp, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dd07      	ble.n	800aee0 <_dtoa_r+0x818>
 800aed0:	ee18 1a10 	vmov	r1, s16
 800aed4:	461a      	mov	r2, r3
 800aed6:	4620      	mov	r0, r4
 800aed8:	f001 f9fe 	bl	800c2d8 <__lshift>
 800aedc:	ee08 0a10 	vmov	s16, r0
 800aee0:	9b05      	ldr	r3, [sp, #20]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	dd05      	ble.n	800aef2 <_dtoa_r+0x82a>
 800aee6:	4631      	mov	r1, r6
 800aee8:	461a      	mov	r2, r3
 800aeea:	4620      	mov	r0, r4
 800aeec:	f001 f9f4 	bl	800c2d8 <__lshift>
 800aef0:	4606      	mov	r6, r0
 800aef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d06e      	beq.n	800afd6 <_dtoa_r+0x90e>
 800aef8:	ee18 0a10 	vmov	r0, s16
 800aefc:	4631      	mov	r1, r6
 800aefe:	f001 fa5b 	bl	800c3b8 <__mcmp>
 800af02:	2800      	cmp	r0, #0
 800af04:	da67      	bge.n	800afd6 <_dtoa_r+0x90e>
 800af06:	9b00      	ldr	r3, [sp, #0]
 800af08:	3b01      	subs	r3, #1
 800af0a:	ee18 1a10 	vmov	r1, s16
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	220a      	movs	r2, #10
 800af12:	2300      	movs	r3, #0
 800af14:	4620      	mov	r0, r4
 800af16:	f000 ffe5 	bl	800bee4 <__multadd>
 800af1a:	9b08      	ldr	r3, [sp, #32]
 800af1c:	ee08 0a10 	vmov	s16, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 81b1 	beq.w	800b288 <_dtoa_r+0xbc0>
 800af26:	2300      	movs	r3, #0
 800af28:	4639      	mov	r1, r7
 800af2a:	220a      	movs	r2, #10
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 ffd9 	bl	800bee4 <__multadd>
 800af32:	9b02      	ldr	r3, [sp, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	4607      	mov	r7, r0
 800af38:	f300 808e 	bgt.w	800b058 <_dtoa_r+0x990>
 800af3c:	9b06      	ldr	r3, [sp, #24]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	dc51      	bgt.n	800afe6 <_dtoa_r+0x91e>
 800af42:	e089      	b.n	800b058 <_dtoa_r+0x990>
 800af44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af4a:	e74b      	b.n	800ade4 <_dtoa_r+0x71c>
 800af4c:	9b03      	ldr	r3, [sp, #12]
 800af4e:	1e5e      	subs	r6, r3, #1
 800af50:	9b07      	ldr	r3, [sp, #28]
 800af52:	42b3      	cmp	r3, r6
 800af54:	bfbf      	itttt	lt
 800af56:	9b07      	ldrlt	r3, [sp, #28]
 800af58:	9607      	strlt	r6, [sp, #28]
 800af5a:	1af2      	sublt	r2, r6, r3
 800af5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af5e:	bfb6      	itet	lt
 800af60:	189b      	addlt	r3, r3, r2
 800af62:	1b9e      	subge	r6, r3, r6
 800af64:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af66:	9b03      	ldr	r3, [sp, #12]
 800af68:	bfb8      	it	lt
 800af6a:	2600      	movlt	r6, #0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bfb7      	itett	lt
 800af70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800af74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800af78:	1a9d      	sublt	r5, r3, r2
 800af7a:	2300      	movlt	r3, #0
 800af7c:	e734      	b.n	800ade8 <_dtoa_r+0x720>
 800af7e:	9e07      	ldr	r6, [sp, #28]
 800af80:	9d04      	ldr	r5, [sp, #16]
 800af82:	9f08      	ldr	r7, [sp, #32]
 800af84:	e73b      	b.n	800adfe <_dtoa_r+0x736>
 800af86:	9a07      	ldr	r2, [sp, #28]
 800af88:	e767      	b.n	800ae5a <_dtoa_r+0x792>
 800af8a:	9b06      	ldr	r3, [sp, #24]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	dc18      	bgt.n	800afc2 <_dtoa_r+0x8fa>
 800af90:	f1ba 0f00 	cmp.w	sl, #0
 800af94:	d115      	bne.n	800afc2 <_dtoa_r+0x8fa>
 800af96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af9a:	b993      	cbnz	r3, 800afc2 <_dtoa_r+0x8fa>
 800af9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afa0:	0d1b      	lsrs	r3, r3, #20
 800afa2:	051b      	lsls	r3, r3, #20
 800afa4:	b183      	cbz	r3, 800afc8 <_dtoa_r+0x900>
 800afa6:	9b04      	ldr	r3, [sp, #16]
 800afa8:	3301      	adds	r3, #1
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	9b05      	ldr	r3, [sp, #20]
 800afae:	3301      	adds	r3, #1
 800afb0:	9305      	str	r3, [sp, #20]
 800afb2:	f04f 0801 	mov.w	r8, #1
 800afb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f47f af6a 	bne.w	800ae92 <_dtoa_r+0x7ca>
 800afbe:	2001      	movs	r0, #1
 800afc0:	e76f      	b.n	800aea2 <_dtoa_r+0x7da>
 800afc2:	f04f 0800 	mov.w	r8, #0
 800afc6:	e7f6      	b.n	800afb6 <_dtoa_r+0x8ee>
 800afc8:	4698      	mov	r8, r3
 800afca:	e7f4      	b.n	800afb6 <_dtoa_r+0x8ee>
 800afcc:	f43f af7d 	beq.w	800aeca <_dtoa_r+0x802>
 800afd0:	4618      	mov	r0, r3
 800afd2:	301c      	adds	r0, #28
 800afd4:	e772      	b.n	800aebc <_dtoa_r+0x7f4>
 800afd6:	9b03      	ldr	r3, [sp, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	dc37      	bgt.n	800b04c <_dtoa_r+0x984>
 800afdc:	9b06      	ldr	r3, [sp, #24]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	dd34      	ble.n	800b04c <_dtoa_r+0x984>
 800afe2:	9b03      	ldr	r3, [sp, #12]
 800afe4:	9302      	str	r3, [sp, #8]
 800afe6:	9b02      	ldr	r3, [sp, #8]
 800afe8:	b96b      	cbnz	r3, 800b006 <_dtoa_r+0x93e>
 800afea:	4631      	mov	r1, r6
 800afec:	2205      	movs	r2, #5
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 ff78 	bl	800bee4 <__multadd>
 800aff4:	4601      	mov	r1, r0
 800aff6:	4606      	mov	r6, r0
 800aff8:	ee18 0a10 	vmov	r0, s16
 800affc:	f001 f9dc 	bl	800c3b8 <__mcmp>
 800b000:	2800      	cmp	r0, #0
 800b002:	f73f adbb 	bgt.w	800ab7c <_dtoa_r+0x4b4>
 800b006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b008:	9d01      	ldr	r5, [sp, #4]
 800b00a:	43db      	mvns	r3, r3
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	f04f 0800 	mov.w	r8, #0
 800b012:	4631      	mov	r1, r6
 800b014:	4620      	mov	r0, r4
 800b016:	f000 ff43 	bl	800bea0 <_Bfree>
 800b01a:	2f00      	cmp	r7, #0
 800b01c:	f43f aea4 	beq.w	800ad68 <_dtoa_r+0x6a0>
 800b020:	f1b8 0f00 	cmp.w	r8, #0
 800b024:	d005      	beq.n	800b032 <_dtoa_r+0x96a>
 800b026:	45b8      	cmp	r8, r7
 800b028:	d003      	beq.n	800b032 <_dtoa_r+0x96a>
 800b02a:	4641      	mov	r1, r8
 800b02c:	4620      	mov	r0, r4
 800b02e:	f000 ff37 	bl	800bea0 <_Bfree>
 800b032:	4639      	mov	r1, r7
 800b034:	4620      	mov	r0, r4
 800b036:	f000 ff33 	bl	800bea0 <_Bfree>
 800b03a:	e695      	b.n	800ad68 <_dtoa_r+0x6a0>
 800b03c:	2600      	movs	r6, #0
 800b03e:	4637      	mov	r7, r6
 800b040:	e7e1      	b.n	800b006 <_dtoa_r+0x93e>
 800b042:	9700      	str	r7, [sp, #0]
 800b044:	4637      	mov	r7, r6
 800b046:	e599      	b.n	800ab7c <_dtoa_r+0x4b4>
 800b048:	40240000 	.word	0x40240000
 800b04c:	9b08      	ldr	r3, [sp, #32]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	f000 80ca 	beq.w	800b1e8 <_dtoa_r+0xb20>
 800b054:	9b03      	ldr	r3, [sp, #12]
 800b056:	9302      	str	r3, [sp, #8]
 800b058:	2d00      	cmp	r5, #0
 800b05a:	dd05      	ble.n	800b068 <_dtoa_r+0x9a0>
 800b05c:	4639      	mov	r1, r7
 800b05e:	462a      	mov	r2, r5
 800b060:	4620      	mov	r0, r4
 800b062:	f001 f939 	bl	800c2d8 <__lshift>
 800b066:	4607      	mov	r7, r0
 800b068:	f1b8 0f00 	cmp.w	r8, #0
 800b06c:	d05b      	beq.n	800b126 <_dtoa_r+0xa5e>
 800b06e:	6879      	ldr	r1, [r7, #4]
 800b070:	4620      	mov	r0, r4
 800b072:	f000 fed5 	bl	800be20 <_Balloc>
 800b076:	4605      	mov	r5, r0
 800b078:	b928      	cbnz	r0, 800b086 <_dtoa_r+0x9be>
 800b07a:	4b87      	ldr	r3, [pc, #540]	; (800b298 <_dtoa_r+0xbd0>)
 800b07c:	4602      	mov	r2, r0
 800b07e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b082:	f7ff bb3b 	b.w	800a6fc <_dtoa_r+0x34>
 800b086:	693a      	ldr	r2, [r7, #16]
 800b088:	3202      	adds	r2, #2
 800b08a:	0092      	lsls	r2, r2, #2
 800b08c:	f107 010c 	add.w	r1, r7, #12
 800b090:	300c      	adds	r0, #12
 800b092:	f000 feab 	bl	800bdec <memcpy>
 800b096:	2201      	movs	r2, #1
 800b098:	4629      	mov	r1, r5
 800b09a:	4620      	mov	r0, r4
 800b09c:	f001 f91c 	bl	800c2d8 <__lshift>
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	f103 0901 	add.w	r9, r3, #1
 800b0a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	9305      	str	r3, [sp, #20]
 800b0ae:	f00a 0301 	and.w	r3, sl, #1
 800b0b2:	46b8      	mov	r8, r7
 800b0b4:	9304      	str	r3, [sp, #16]
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	4631      	mov	r1, r6
 800b0ba:	ee18 0a10 	vmov	r0, s16
 800b0be:	f7ff fa77 	bl	800a5b0 <quorem>
 800b0c2:	4641      	mov	r1, r8
 800b0c4:	9002      	str	r0, [sp, #8]
 800b0c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0ca:	ee18 0a10 	vmov	r0, s16
 800b0ce:	f001 f973 	bl	800c3b8 <__mcmp>
 800b0d2:	463a      	mov	r2, r7
 800b0d4:	9003      	str	r0, [sp, #12]
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f001 f989 	bl	800c3f0 <__mdiff>
 800b0de:	68c2      	ldr	r2, [r0, #12]
 800b0e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	bb02      	cbnz	r2, 800b12a <_dtoa_r+0xa62>
 800b0e8:	4601      	mov	r1, r0
 800b0ea:	ee18 0a10 	vmov	r0, s16
 800b0ee:	f001 f963 	bl	800c3b8 <__mcmp>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	9207      	str	r2, [sp, #28]
 800b0fa:	f000 fed1 	bl	800bea0 <_Bfree>
 800b0fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b102:	ea43 0102 	orr.w	r1, r3, r2
 800b106:	9b04      	ldr	r3, [sp, #16]
 800b108:	430b      	orrs	r3, r1
 800b10a:	464d      	mov	r5, r9
 800b10c:	d10f      	bne.n	800b12e <_dtoa_r+0xa66>
 800b10e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b112:	d02a      	beq.n	800b16a <_dtoa_r+0xaa2>
 800b114:	9b03      	ldr	r3, [sp, #12]
 800b116:	2b00      	cmp	r3, #0
 800b118:	dd02      	ble.n	800b120 <_dtoa_r+0xa58>
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b120:	f88b a000 	strb.w	sl, [fp]
 800b124:	e775      	b.n	800b012 <_dtoa_r+0x94a>
 800b126:	4638      	mov	r0, r7
 800b128:	e7ba      	b.n	800b0a0 <_dtoa_r+0x9d8>
 800b12a:	2201      	movs	r2, #1
 800b12c:	e7e2      	b.n	800b0f4 <_dtoa_r+0xa2c>
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	db04      	blt.n	800b13e <_dtoa_r+0xa76>
 800b134:	9906      	ldr	r1, [sp, #24]
 800b136:	430b      	orrs	r3, r1
 800b138:	9904      	ldr	r1, [sp, #16]
 800b13a:	430b      	orrs	r3, r1
 800b13c:	d122      	bne.n	800b184 <_dtoa_r+0xabc>
 800b13e:	2a00      	cmp	r2, #0
 800b140:	ddee      	ble.n	800b120 <_dtoa_r+0xa58>
 800b142:	ee18 1a10 	vmov	r1, s16
 800b146:	2201      	movs	r2, #1
 800b148:	4620      	mov	r0, r4
 800b14a:	f001 f8c5 	bl	800c2d8 <__lshift>
 800b14e:	4631      	mov	r1, r6
 800b150:	ee08 0a10 	vmov	s16, r0
 800b154:	f001 f930 	bl	800c3b8 <__mcmp>
 800b158:	2800      	cmp	r0, #0
 800b15a:	dc03      	bgt.n	800b164 <_dtoa_r+0xa9c>
 800b15c:	d1e0      	bne.n	800b120 <_dtoa_r+0xa58>
 800b15e:	f01a 0f01 	tst.w	sl, #1
 800b162:	d0dd      	beq.n	800b120 <_dtoa_r+0xa58>
 800b164:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b168:	d1d7      	bne.n	800b11a <_dtoa_r+0xa52>
 800b16a:	2339      	movs	r3, #57	; 0x39
 800b16c:	f88b 3000 	strb.w	r3, [fp]
 800b170:	462b      	mov	r3, r5
 800b172:	461d      	mov	r5, r3
 800b174:	3b01      	subs	r3, #1
 800b176:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b17a:	2a39      	cmp	r2, #57	; 0x39
 800b17c:	d071      	beq.n	800b262 <_dtoa_r+0xb9a>
 800b17e:	3201      	adds	r2, #1
 800b180:	701a      	strb	r2, [r3, #0]
 800b182:	e746      	b.n	800b012 <_dtoa_r+0x94a>
 800b184:	2a00      	cmp	r2, #0
 800b186:	dd07      	ble.n	800b198 <_dtoa_r+0xad0>
 800b188:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b18c:	d0ed      	beq.n	800b16a <_dtoa_r+0xaa2>
 800b18e:	f10a 0301 	add.w	r3, sl, #1
 800b192:	f88b 3000 	strb.w	r3, [fp]
 800b196:	e73c      	b.n	800b012 <_dtoa_r+0x94a>
 800b198:	9b05      	ldr	r3, [sp, #20]
 800b19a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b19e:	4599      	cmp	r9, r3
 800b1a0:	d047      	beq.n	800b232 <_dtoa_r+0xb6a>
 800b1a2:	ee18 1a10 	vmov	r1, s16
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	220a      	movs	r2, #10
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f000 fe9a 	bl	800bee4 <__multadd>
 800b1b0:	45b8      	cmp	r8, r7
 800b1b2:	ee08 0a10 	vmov	s16, r0
 800b1b6:	f04f 0300 	mov.w	r3, #0
 800b1ba:	f04f 020a 	mov.w	r2, #10
 800b1be:	4641      	mov	r1, r8
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	d106      	bne.n	800b1d2 <_dtoa_r+0xb0a>
 800b1c4:	f000 fe8e 	bl	800bee4 <__multadd>
 800b1c8:	4680      	mov	r8, r0
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	f109 0901 	add.w	r9, r9, #1
 800b1d0:	e772      	b.n	800b0b8 <_dtoa_r+0x9f0>
 800b1d2:	f000 fe87 	bl	800bee4 <__multadd>
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	4680      	mov	r8, r0
 800b1da:	2300      	movs	r3, #0
 800b1dc:	220a      	movs	r2, #10
 800b1de:	4620      	mov	r0, r4
 800b1e0:	f000 fe80 	bl	800bee4 <__multadd>
 800b1e4:	4607      	mov	r7, r0
 800b1e6:	e7f1      	b.n	800b1cc <_dtoa_r+0xb04>
 800b1e8:	9b03      	ldr	r3, [sp, #12]
 800b1ea:	9302      	str	r3, [sp, #8]
 800b1ec:	9d01      	ldr	r5, [sp, #4]
 800b1ee:	ee18 0a10 	vmov	r0, s16
 800b1f2:	4631      	mov	r1, r6
 800b1f4:	f7ff f9dc 	bl	800a5b0 <quorem>
 800b1f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b1fc:	9b01      	ldr	r3, [sp, #4]
 800b1fe:	f805 ab01 	strb.w	sl, [r5], #1
 800b202:	1aea      	subs	r2, r5, r3
 800b204:	9b02      	ldr	r3, [sp, #8]
 800b206:	4293      	cmp	r3, r2
 800b208:	dd09      	ble.n	800b21e <_dtoa_r+0xb56>
 800b20a:	ee18 1a10 	vmov	r1, s16
 800b20e:	2300      	movs	r3, #0
 800b210:	220a      	movs	r2, #10
 800b212:	4620      	mov	r0, r4
 800b214:	f000 fe66 	bl	800bee4 <__multadd>
 800b218:	ee08 0a10 	vmov	s16, r0
 800b21c:	e7e7      	b.n	800b1ee <_dtoa_r+0xb26>
 800b21e:	9b02      	ldr	r3, [sp, #8]
 800b220:	2b00      	cmp	r3, #0
 800b222:	bfc8      	it	gt
 800b224:	461d      	movgt	r5, r3
 800b226:	9b01      	ldr	r3, [sp, #4]
 800b228:	bfd8      	it	le
 800b22a:	2501      	movle	r5, #1
 800b22c:	441d      	add	r5, r3
 800b22e:	f04f 0800 	mov.w	r8, #0
 800b232:	ee18 1a10 	vmov	r1, s16
 800b236:	2201      	movs	r2, #1
 800b238:	4620      	mov	r0, r4
 800b23a:	f001 f84d 	bl	800c2d8 <__lshift>
 800b23e:	4631      	mov	r1, r6
 800b240:	ee08 0a10 	vmov	s16, r0
 800b244:	f001 f8b8 	bl	800c3b8 <__mcmp>
 800b248:	2800      	cmp	r0, #0
 800b24a:	dc91      	bgt.n	800b170 <_dtoa_r+0xaa8>
 800b24c:	d102      	bne.n	800b254 <_dtoa_r+0xb8c>
 800b24e:	f01a 0f01 	tst.w	sl, #1
 800b252:	d18d      	bne.n	800b170 <_dtoa_r+0xaa8>
 800b254:	462b      	mov	r3, r5
 800b256:	461d      	mov	r5, r3
 800b258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b25c:	2a30      	cmp	r2, #48	; 0x30
 800b25e:	d0fa      	beq.n	800b256 <_dtoa_r+0xb8e>
 800b260:	e6d7      	b.n	800b012 <_dtoa_r+0x94a>
 800b262:	9a01      	ldr	r2, [sp, #4]
 800b264:	429a      	cmp	r2, r3
 800b266:	d184      	bne.n	800b172 <_dtoa_r+0xaaa>
 800b268:	9b00      	ldr	r3, [sp, #0]
 800b26a:	3301      	adds	r3, #1
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	2331      	movs	r3, #49	; 0x31
 800b270:	7013      	strb	r3, [r2, #0]
 800b272:	e6ce      	b.n	800b012 <_dtoa_r+0x94a>
 800b274:	4b09      	ldr	r3, [pc, #36]	; (800b29c <_dtoa_r+0xbd4>)
 800b276:	f7ff ba95 	b.w	800a7a4 <_dtoa_r+0xdc>
 800b27a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f47f aa6e 	bne.w	800a75e <_dtoa_r+0x96>
 800b282:	4b07      	ldr	r3, [pc, #28]	; (800b2a0 <_dtoa_r+0xbd8>)
 800b284:	f7ff ba8e 	b.w	800a7a4 <_dtoa_r+0xdc>
 800b288:	9b02      	ldr	r3, [sp, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	dcae      	bgt.n	800b1ec <_dtoa_r+0xb24>
 800b28e:	9b06      	ldr	r3, [sp, #24]
 800b290:	2b02      	cmp	r3, #2
 800b292:	f73f aea8 	bgt.w	800afe6 <_dtoa_r+0x91e>
 800b296:	e7a9      	b.n	800b1ec <_dtoa_r+0xb24>
 800b298:	0800d2d0 	.word	0x0800d2d0
 800b29c:	0800d0d0 	.word	0x0800d0d0
 800b2a0:	0800d251 	.word	0x0800d251

0800b2a4 <__sflush_r>:
 800b2a4:	898a      	ldrh	r2, [r1, #12]
 800b2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	0710      	lsls	r0, r2, #28
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	d458      	bmi.n	800b364 <__sflush_r+0xc0>
 800b2b2:	684b      	ldr	r3, [r1, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	dc05      	bgt.n	800b2c4 <__sflush_r+0x20>
 800b2b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	dc02      	bgt.n	800b2c4 <__sflush_r+0x20>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2c6:	2e00      	cmp	r6, #0
 800b2c8:	d0f9      	beq.n	800b2be <__sflush_r+0x1a>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b2d0:	682f      	ldr	r7, [r5, #0]
 800b2d2:	602b      	str	r3, [r5, #0]
 800b2d4:	d032      	beq.n	800b33c <__sflush_r+0x98>
 800b2d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b2d8:	89a3      	ldrh	r3, [r4, #12]
 800b2da:	075a      	lsls	r2, r3, #29
 800b2dc:	d505      	bpl.n	800b2ea <__sflush_r+0x46>
 800b2de:	6863      	ldr	r3, [r4, #4]
 800b2e0:	1ac0      	subs	r0, r0, r3
 800b2e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b2e4:	b10b      	cbz	r3, 800b2ea <__sflush_r+0x46>
 800b2e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b2e8:	1ac0      	subs	r0, r0, r3
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2f0:	6a21      	ldr	r1, [r4, #32]
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	47b0      	blx	r6
 800b2f6:	1c43      	adds	r3, r0, #1
 800b2f8:	89a3      	ldrh	r3, [r4, #12]
 800b2fa:	d106      	bne.n	800b30a <__sflush_r+0x66>
 800b2fc:	6829      	ldr	r1, [r5, #0]
 800b2fe:	291d      	cmp	r1, #29
 800b300:	d82c      	bhi.n	800b35c <__sflush_r+0xb8>
 800b302:	4a2a      	ldr	r2, [pc, #168]	; (800b3ac <__sflush_r+0x108>)
 800b304:	40ca      	lsrs	r2, r1
 800b306:	07d6      	lsls	r6, r2, #31
 800b308:	d528      	bpl.n	800b35c <__sflush_r+0xb8>
 800b30a:	2200      	movs	r2, #0
 800b30c:	6062      	str	r2, [r4, #4]
 800b30e:	04d9      	lsls	r1, r3, #19
 800b310:	6922      	ldr	r2, [r4, #16]
 800b312:	6022      	str	r2, [r4, #0]
 800b314:	d504      	bpl.n	800b320 <__sflush_r+0x7c>
 800b316:	1c42      	adds	r2, r0, #1
 800b318:	d101      	bne.n	800b31e <__sflush_r+0x7a>
 800b31a:	682b      	ldr	r3, [r5, #0]
 800b31c:	b903      	cbnz	r3, 800b320 <__sflush_r+0x7c>
 800b31e:	6560      	str	r0, [r4, #84]	; 0x54
 800b320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b322:	602f      	str	r7, [r5, #0]
 800b324:	2900      	cmp	r1, #0
 800b326:	d0ca      	beq.n	800b2be <__sflush_r+0x1a>
 800b328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b32c:	4299      	cmp	r1, r3
 800b32e:	d002      	beq.n	800b336 <__sflush_r+0x92>
 800b330:	4628      	mov	r0, r5
 800b332:	f7fd f9cb 	bl	80086cc <_free_r>
 800b336:	2000      	movs	r0, #0
 800b338:	6360      	str	r0, [r4, #52]	; 0x34
 800b33a:	e7c1      	b.n	800b2c0 <__sflush_r+0x1c>
 800b33c:	6a21      	ldr	r1, [r4, #32]
 800b33e:	2301      	movs	r3, #1
 800b340:	4628      	mov	r0, r5
 800b342:	47b0      	blx	r6
 800b344:	1c41      	adds	r1, r0, #1
 800b346:	d1c7      	bne.n	800b2d8 <__sflush_r+0x34>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0c4      	beq.n	800b2d8 <__sflush_r+0x34>
 800b34e:	2b1d      	cmp	r3, #29
 800b350:	d001      	beq.n	800b356 <__sflush_r+0xb2>
 800b352:	2b16      	cmp	r3, #22
 800b354:	d101      	bne.n	800b35a <__sflush_r+0xb6>
 800b356:	602f      	str	r7, [r5, #0]
 800b358:	e7b1      	b.n	800b2be <__sflush_r+0x1a>
 800b35a:	89a3      	ldrh	r3, [r4, #12]
 800b35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b360:	81a3      	strh	r3, [r4, #12]
 800b362:	e7ad      	b.n	800b2c0 <__sflush_r+0x1c>
 800b364:	690f      	ldr	r7, [r1, #16]
 800b366:	2f00      	cmp	r7, #0
 800b368:	d0a9      	beq.n	800b2be <__sflush_r+0x1a>
 800b36a:	0793      	lsls	r3, r2, #30
 800b36c:	680e      	ldr	r6, [r1, #0]
 800b36e:	bf08      	it	eq
 800b370:	694b      	ldreq	r3, [r1, #20]
 800b372:	600f      	str	r7, [r1, #0]
 800b374:	bf18      	it	ne
 800b376:	2300      	movne	r3, #0
 800b378:	eba6 0807 	sub.w	r8, r6, r7
 800b37c:	608b      	str	r3, [r1, #8]
 800b37e:	f1b8 0f00 	cmp.w	r8, #0
 800b382:	dd9c      	ble.n	800b2be <__sflush_r+0x1a>
 800b384:	6a21      	ldr	r1, [r4, #32]
 800b386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b388:	4643      	mov	r3, r8
 800b38a:	463a      	mov	r2, r7
 800b38c:	4628      	mov	r0, r5
 800b38e:	47b0      	blx	r6
 800b390:	2800      	cmp	r0, #0
 800b392:	dc06      	bgt.n	800b3a2 <__sflush_r+0xfe>
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b39a:	81a3      	strh	r3, [r4, #12]
 800b39c:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a0:	e78e      	b.n	800b2c0 <__sflush_r+0x1c>
 800b3a2:	4407      	add	r7, r0
 800b3a4:	eba8 0800 	sub.w	r8, r8, r0
 800b3a8:	e7e9      	b.n	800b37e <__sflush_r+0xda>
 800b3aa:	bf00      	nop
 800b3ac:	20400001 	.word	0x20400001

0800b3b0 <_fflush_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	690b      	ldr	r3, [r1, #16]
 800b3b4:	4605      	mov	r5, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	b913      	cbnz	r3, 800b3c0 <_fflush_r+0x10>
 800b3ba:	2500      	movs	r5, #0
 800b3bc:	4628      	mov	r0, r5
 800b3be:	bd38      	pop	{r3, r4, r5, pc}
 800b3c0:	b118      	cbz	r0, 800b3ca <_fflush_r+0x1a>
 800b3c2:	6983      	ldr	r3, [r0, #24]
 800b3c4:	b90b      	cbnz	r3, 800b3ca <_fflush_r+0x1a>
 800b3c6:	f000 f887 	bl	800b4d8 <__sinit>
 800b3ca:	4b14      	ldr	r3, [pc, #80]	; (800b41c <_fflush_r+0x6c>)
 800b3cc:	429c      	cmp	r4, r3
 800b3ce:	d11b      	bne.n	800b408 <_fflush_r+0x58>
 800b3d0:	686c      	ldr	r4, [r5, #4]
 800b3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d0ef      	beq.n	800b3ba <_fflush_r+0xa>
 800b3da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b3dc:	07d0      	lsls	r0, r2, #31
 800b3de:	d404      	bmi.n	800b3ea <_fflush_r+0x3a>
 800b3e0:	0599      	lsls	r1, r3, #22
 800b3e2:	d402      	bmi.n	800b3ea <_fflush_r+0x3a>
 800b3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3e6:	f000 fc88 	bl	800bcfa <__retarget_lock_acquire_recursive>
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	f7ff ff59 	bl	800b2a4 <__sflush_r>
 800b3f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3f4:	07da      	lsls	r2, r3, #31
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	d4e0      	bmi.n	800b3bc <_fflush_r+0xc>
 800b3fa:	89a3      	ldrh	r3, [r4, #12]
 800b3fc:	059b      	lsls	r3, r3, #22
 800b3fe:	d4dd      	bmi.n	800b3bc <_fflush_r+0xc>
 800b400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b402:	f000 fc7b 	bl	800bcfc <__retarget_lock_release_recursive>
 800b406:	e7d9      	b.n	800b3bc <_fflush_r+0xc>
 800b408:	4b05      	ldr	r3, [pc, #20]	; (800b420 <_fflush_r+0x70>)
 800b40a:	429c      	cmp	r4, r3
 800b40c:	d101      	bne.n	800b412 <_fflush_r+0x62>
 800b40e:	68ac      	ldr	r4, [r5, #8]
 800b410:	e7df      	b.n	800b3d2 <_fflush_r+0x22>
 800b412:	4b04      	ldr	r3, [pc, #16]	; (800b424 <_fflush_r+0x74>)
 800b414:	429c      	cmp	r4, r3
 800b416:	bf08      	it	eq
 800b418:	68ec      	ldreq	r4, [r5, #12]
 800b41a:	e7da      	b.n	800b3d2 <_fflush_r+0x22>
 800b41c:	0800d304 	.word	0x0800d304
 800b420:	0800d324 	.word	0x0800d324
 800b424:	0800d2e4 	.word	0x0800d2e4

0800b428 <std>:
 800b428:	2300      	movs	r3, #0
 800b42a:	b510      	push	{r4, lr}
 800b42c:	4604      	mov	r4, r0
 800b42e:	e9c0 3300 	strd	r3, r3, [r0]
 800b432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b436:	6083      	str	r3, [r0, #8]
 800b438:	8181      	strh	r1, [r0, #12]
 800b43a:	6643      	str	r3, [r0, #100]	; 0x64
 800b43c:	81c2      	strh	r2, [r0, #14]
 800b43e:	6183      	str	r3, [r0, #24]
 800b440:	4619      	mov	r1, r3
 800b442:	2208      	movs	r2, #8
 800b444:	305c      	adds	r0, #92	; 0x5c
 800b446:	f7fd f939 	bl	80086bc <memset>
 800b44a:	4b05      	ldr	r3, [pc, #20]	; (800b460 <std+0x38>)
 800b44c:	6263      	str	r3, [r4, #36]	; 0x24
 800b44e:	4b05      	ldr	r3, [pc, #20]	; (800b464 <std+0x3c>)
 800b450:	62a3      	str	r3, [r4, #40]	; 0x28
 800b452:	4b05      	ldr	r3, [pc, #20]	; (800b468 <std+0x40>)
 800b454:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b456:	4b05      	ldr	r3, [pc, #20]	; (800b46c <std+0x44>)
 800b458:	6224      	str	r4, [r4, #32]
 800b45a:	6323      	str	r3, [r4, #48]	; 0x30
 800b45c:	bd10      	pop	{r4, pc}
 800b45e:	bf00      	nop
 800b460:	0800ca99 	.word	0x0800ca99
 800b464:	0800cabb 	.word	0x0800cabb
 800b468:	0800caf3 	.word	0x0800caf3
 800b46c:	0800cb17 	.word	0x0800cb17

0800b470 <_cleanup_r>:
 800b470:	4901      	ldr	r1, [pc, #4]	; (800b478 <_cleanup_r+0x8>)
 800b472:	f000 b8af 	b.w	800b5d4 <_fwalk_reent>
 800b476:	bf00      	nop
 800b478:	0800b3b1 	.word	0x0800b3b1

0800b47c <__sfmoreglue>:
 800b47c:	b570      	push	{r4, r5, r6, lr}
 800b47e:	2268      	movs	r2, #104	; 0x68
 800b480:	1e4d      	subs	r5, r1, #1
 800b482:	4355      	muls	r5, r2
 800b484:	460e      	mov	r6, r1
 800b486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b48a:	f7fd f98b 	bl	80087a4 <_malloc_r>
 800b48e:	4604      	mov	r4, r0
 800b490:	b140      	cbz	r0, 800b4a4 <__sfmoreglue+0x28>
 800b492:	2100      	movs	r1, #0
 800b494:	e9c0 1600 	strd	r1, r6, [r0]
 800b498:	300c      	adds	r0, #12
 800b49a:	60a0      	str	r0, [r4, #8]
 800b49c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b4a0:	f7fd f90c 	bl	80086bc <memset>
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	bd70      	pop	{r4, r5, r6, pc}

0800b4a8 <__sfp_lock_acquire>:
 800b4a8:	4801      	ldr	r0, [pc, #4]	; (800b4b0 <__sfp_lock_acquire+0x8>)
 800b4aa:	f000 bc26 	b.w	800bcfa <__retarget_lock_acquire_recursive>
 800b4ae:	bf00      	nop
 800b4b0:	20000a01 	.word	0x20000a01

0800b4b4 <__sfp_lock_release>:
 800b4b4:	4801      	ldr	r0, [pc, #4]	; (800b4bc <__sfp_lock_release+0x8>)
 800b4b6:	f000 bc21 	b.w	800bcfc <__retarget_lock_release_recursive>
 800b4ba:	bf00      	nop
 800b4bc:	20000a01 	.word	0x20000a01

0800b4c0 <__sinit_lock_acquire>:
 800b4c0:	4801      	ldr	r0, [pc, #4]	; (800b4c8 <__sinit_lock_acquire+0x8>)
 800b4c2:	f000 bc1a 	b.w	800bcfa <__retarget_lock_acquire_recursive>
 800b4c6:	bf00      	nop
 800b4c8:	20000a02 	.word	0x20000a02

0800b4cc <__sinit_lock_release>:
 800b4cc:	4801      	ldr	r0, [pc, #4]	; (800b4d4 <__sinit_lock_release+0x8>)
 800b4ce:	f000 bc15 	b.w	800bcfc <__retarget_lock_release_recursive>
 800b4d2:	bf00      	nop
 800b4d4:	20000a02 	.word	0x20000a02

0800b4d8 <__sinit>:
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	4604      	mov	r4, r0
 800b4dc:	f7ff fff0 	bl	800b4c0 <__sinit_lock_acquire>
 800b4e0:	69a3      	ldr	r3, [r4, #24]
 800b4e2:	b11b      	cbz	r3, 800b4ec <__sinit+0x14>
 800b4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e8:	f7ff bff0 	b.w	800b4cc <__sinit_lock_release>
 800b4ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4f0:	6523      	str	r3, [r4, #80]	; 0x50
 800b4f2:	4b13      	ldr	r3, [pc, #76]	; (800b540 <__sinit+0x68>)
 800b4f4:	4a13      	ldr	r2, [pc, #76]	; (800b544 <__sinit+0x6c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4fa:	42a3      	cmp	r3, r4
 800b4fc:	bf04      	itt	eq
 800b4fe:	2301      	moveq	r3, #1
 800b500:	61a3      	streq	r3, [r4, #24]
 800b502:	4620      	mov	r0, r4
 800b504:	f000 f820 	bl	800b548 <__sfp>
 800b508:	6060      	str	r0, [r4, #4]
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 f81c 	bl	800b548 <__sfp>
 800b510:	60a0      	str	r0, [r4, #8]
 800b512:	4620      	mov	r0, r4
 800b514:	f000 f818 	bl	800b548 <__sfp>
 800b518:	2200      	movs	r2, #0
 800b51a:	60e0      	str	r0, [r4, #12]
 800b51c:	2104      	movs	r1, #4
 800b51e:	6860      	ldr	r0, [r4, #4]
 800b520:	f7ff ff82 	bl	800b428 <std>
 800b524:	68a0      	ldr	r0, [r4, #8]
 800b526:	2201      	movs	r2, #1
 800b528:	2109      	movs	r1, #9
 800b52a:	f7ff ff7d 	bl	800b428 <std>
 800b52e:	68e0      	ldr	r0, [r4, #12]
 800b530:	2202      	movs	r2, #2
 800b532:	2112      	movs	r1, #18
 800b534:	f7ff ff78 	bl	800b428 <std>
 800b538:	2301      	movs	r3, #1
 800b53a:	61a3      	str	r3, [r4, #24]
 800b53c:	e7d2      	b.n	800b4e4 <__sinit+0xc>
 800b53e:	bf00      	nop
 800b540:	0800d0bc 	.word	0x0800d0bc
 800b544:	0800b471 	.word	0x0800b471

0800b548 <__sfp>:
 800b548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b54a:	4607      	mov	r7, r0
 800b54c:	f7ff ffac 	bl	800b4a8 <__sfp_lock_acquire>
 800b550:	4b1e      	ldr	r3, [pc, #120]	; (800b5cc <__sfp+0x84>)
 800b552:	681e      	ldr	r6, [r3, #0]
 800b554:	69b3      	ldr	r3, [r6, #24]
 800b556:	b913      	cbnz	r3, 800b55e <__sfp+0x16>
 800b558:	4630      	mov	r0, r6
 800b55a:	f7ff ffbd 	bl	800b4d8 <__sinit>
 800b55e:	3648      	adds	r6, #72	; 0x48
 800b560:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b564:	3b01      	subs	r3, #1
 800b566:	d503      	bpl.n	800b570 <__sfp+0x28>
 800b568:	6833      	ldr	r3, [r6, #0]
 800b56a:	b30b      	cbz	r3, 800b5b0 <__sfp+0x68>
 800b56c:	6836      	ldr	r6, [r6, #0]
 800b56e:	e7f7      	b.n	800b560 <__sfp+0x18>
 800b570:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b574:	b9d5      	cbnz	r5, 800b5ac <__sfp+0x64>
 800b576:	4b16      	ldr	r3, [pc, #88]	; (800b5d0 <__sfp+0x88>)
 800b578:	60e3      	str	r3, [r4, #12]
 800b57a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b57e:	6665      	str	r5, [r4, #100]	; 0x64
 800b580:	f000 fbba 	bl	800bcf8 <__retarget_lock_init_recursive>
 800b584:	f7ff ff96 	bl	800b4b4 <__sfp_lock_release>
 800b588:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b58c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b590:	6025      	str	r5, [r4, #0]
 800b592:	61a5      	str	r5, [r4, #24]
 800b594:	2208      	movs	r2, #8
 800b596:	4629      	mov	r1, r5
 800b598:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b59c:	f7fd f88e 	bl	80086bc <memset>
 800b5a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b5a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5ac:	3468      	adds	r4, #104	; 0x68
 800b5ae:	e7d9      	b.n	800b564 <__sfp+0x1c>
 800b5b0:	2104      	movs	r1, #4
 800b5b2:	4638      	mov	r0, r7
 800b5b4:	f7ff ff62 	bl	800b47c <__sfmoreglue>
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	6030      	str	r0, [r6, #0]
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	d1d5      	bne.n	800b56c <__sfp+0x24>
 800b5c0:	f7ff ff78 	bl	800b4b4 <__sfp_lock_release>
 800b5c4:	230c      	movs	r3, #12
 800b5c6:	603b      	str	r3, [r7, #0]
 800b5c8:	e7ee      	b.n	800b5a8 <__sfp+0x60>
 800b5ca:	bf00      	nop
 800b5cc:	0800d0bc 	.word	0x0800d0bc
 800b5d0:	ffff0001 	.word	0xffff0001

0800b5d4 <_fwalk_reent>:
 800b5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5d8:	4606      	mov	r6, r0
 800b5da:	4688      	mov	r8, r1
 800b5dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5e0:	2700      	movs	r7, #0
 800b5e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5e6:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ea:	d505      	bpl.n	800b5f8 <_fwalk_reent+0x24>
 800b5ec:	6824      	ldr	r4, [r4, #0]
 800b5ee:	2c00      	cmp	r4, #0
 800b5f0:	d1f7      	bne.n	800b5e2 <_fwalk_reent+0xe>
 800b5f2:	4638      	mov	r0, r7
 800b5f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5f8:	89ab      	ldrh	r3, [r5, #12]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d907      	bls.n	800b60e <_fwalk_reent+0x3a>
 800b5fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b602:	3301      	adds	r3, #1
 800b604:	d003      	beq.n	800b60e <_fwalk_reent+0x3a>
 800b606:	4629      	mov	r1, r5
 800b608:	4630      	mov	r0, r6
 800b60a:	47c0      	blx	r8
 800b60c:	4307      	orrs	r7, r0
 800b60e:	3568      	adds	r5, #104	; 0x68
 800b610:	e7e9      	b.n	800b5e6 <_fwalk_reent+0x12>

0800b612 <rshift>:
 800b612:	6903      	ldr	r3, [r0, #16]
 800b614:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b61c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b620:	f100 0414 	add.w	r4, r0, #20
 800b624:	dd45      	ble.n	800b6b2 <rshift+0xa0>
 800b626:	f011 011f 	ands.w	r1, r1, #31
 800b62a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b62e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b632:	d10c      	bne.n	800b64e <rshift+0x3c>
 800b634:	f100 0710 	add.w	r7, r0, #16
 800b638:	4629      	mov	r1, r5
 800b63a:	42b1      	cmp	r1, r6
 800b63c:	d334      	bcc.n	800b6a8 <rshift+0x96>
 800b63e:	1a9b      	subs	r3, r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	1eea      	subs	r2, r5, #3
 800b644:	4296      	cmp	r6, r2
 800b646:	bf38      	it	cc
 800b648:	2300      	movcc	r3, #0
 800b64a:	4423      	add	r3, r4
 800b64c:	e015      	b.n	800b67a <rshift+0x68>
 800b64e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b652:	f1c1 0820 	rsb	r8, r1, #32
 800b656:	40cf      	lsrs	r7, r1
 800b658:	f105 0e04 	add.w	lr, r5, #4
 800b65c:	46a1      	mov	r9, r4
 800b65e:	4576      	cmp	r6, lr
 800b660:	46f4      	mov	ip, lr
 800b662:	d815      	bhi.n	800b690 <rshift+0x7e>
 800b664:	1a9a      	subs	r2, r3, r2
 800b666:	0092      	lsls	r2, r2, #2
 800b668:	3a04      	subs	r2, #4
 800b66a:	3501      	adds	r5, #1
 800b66c:	42ae      	cmp	r6, r5
 800b66e:	bf38      	it	cc
 800b670:	2200      	movcc	r2, #0
 800b672:	18a3      	adds	r3, r4, r2
 800b674:	50a7      	str	r7, [r4, r2]
 800b676:	b107      	cbz	r7, 800b67a <rshift+0x68>
 800b678:	3304      	adds	r3, #4
 800b67a:	1b1a      	subs	r2, r3, r4
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b682:	bf08      	it	eq
 800b684:	2300      	moveq	r3, #0
 800b686:	6102      	str	r2, [r0, #16]
 800b688:	bf08      	it	eq
 800b68a:	6143      	streq	r3, [r0, #20]
 800b68c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b690:	f8dc c000 	ldr.w	ip, [ip]
 800b694:	fa0c fc08 	lsl.w	ip, ip, r8
 800b698:	ea4c 0707 	orr.w	r7, ip, r7
 800b69c:	f849 7b04 	str.w	r7, [r9], #4
 800b6a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6a4:	40cf      	lsrs	r7, r1
 800b6a6:	e7da      	b.n	800b65e <rshift+0x4c>
 800b6a8:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6ac:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6b0:	e7c3      	b.n	800b63a <rshift+0x28>
 800b6b2:	4623      	mov	r3, r4
 800b6b4:	e7e1      	b.n	800b67a <rshift+0x68>

0800b6b6 <__hexdig_fun>:
 800b6b6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b6ba:	2b09      	cmp	r3, #9
 800b6bc:	d802      	bhi.n	800b6c4 <__hexdig_fun+0xe>
 800b6be:	3820      	subs	r0, #32
 800b6c0:	b2c0      	uxtb	r0, r0
 800b6c2:	4770      	bx	lr
 800b6c4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b6c8:	2b05      	cmp	r3, #5
 800b6ca:	d801      	bhi.n	800b6d0 <__hexdig_fun+0x1a>
 800b6cc:	3847      	subs	r0, #71	; 0x47
 800b6ce:	e7f7      	b.n	800b6c0 <__hexdig_fun+0xa>
 800b6d0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b6d4:	2b05      	cmp	r3, #5
 800b6d6:	d801      	bhi.n	800b6dc <__hexdig_fun+0x26>
 800b6d8:	3827      	subs	r0, #39	; 0x27
 800b6da:	e7f1      	b.n	800b6c0 <__hexdig_fun+0xa>
 800b6dc:	2000      	movs	r0, #0
 800b6de:	4770      	bx	lr

0800b6e0 <__gethex>:
 800b6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e4:	ed2d 8b02 	vpush	{d8}
 800b6e8:	b089      	sub	sp, #36	; 0x24
 800b6ea:	ee08 0a10 	vmov	s16, r0
 800b6ee:	9304      	str	r3, [sp, #16]
 800b6f0:	4bb4      	ldr	r3, [pc, #720]	; (800b9c4 <__gethex+0x2e4>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	9301      	str	r3, [sp, #4]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	468b      	mov	fp, r1
 800b6fa:	4690      	mov	r8, r2
 800b6fc:	f7f4 fd68 	bl	80001d0 <strlen>
 800b700:	9b01      	ldr	r3, [sp, #4]
 800b702:	f8db 2000 	ldr.w	r2, [fp]
 800b706:	4403      	add	r3, r0
 800b708:	4682      	mov	sl, r0
 800b70a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b70e:	9305      	str	r3, [sp, #20]
 800b710:	1c93      	adds	r3, r2, #2
 800b712:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b716:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b71a:	32fe      	adds	r2, #254	; 0xfe
 800b71c:	18d1      	adds	r1, r2, r3
 800b71e:	461f      	mov	r7, r3
 800b720:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b724:	9100      	str	r1, [sp, #0]
 800b726:	2830      	cmp	r0, #48	; 0x30
 800b728:	d0f8      	beq.n	800b71c <__gethex+0x3c>
 800b72a:	f7ff ffc4 	bl	800b6b6 <__hexdig_fun>
 800b72e:	4604      	mov	r4, r0
 800b730:	2800      	cmp	r0, #0
 800b732:	d13a      	bne.n	800b7aa <__gethex+0xca>
 800b734:	9901      	ldr	r1, [sp, #4]
 800b736:	4652      	mov	r2, sl
 800b738:	4638      	mov	r0, r7
 800b73a:	f001 f9f0 	bl	800cb1e <strncmp>
 800b73e:	4605      	mov	r5, r0
 800b740:	2800      	cmp	r0, #0
 800b742:	d168      	bne.n	800b816 <__gethex+0x136>
 800b744:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b748:	eb07 060a 	add.w	r6, r7, sl
 800b74c:	f7ff ffb3 	bl	800b6b6 <__hexdig_fun>
 800b750:	2800      	cmp	r0, #0
 800b752:	d062      	beq.n	800b81a <__gethex+0x13a>
 800b754:	4633      	mov	r3, r6
 800b756:	7818      	ldrb	r0, [r3, #0]
 800b758:	2830      	cmp	r0, #48	; 0x30
 800b75a:	461f      	mov	r7, r3
 800b75c:	f103 0301 	add.w	r3, r3, #1
 800b760:	d0f9      	beq.n	800b756 <__gethex+0x76>
 800b762:	f7ff ffa8 	bl	800b6b6 <__hexdig_fun>
 800b766:	2301      	movs	r3, #1
 800b768:	fab0 f480 	clz	r4, r0
 800b76c:	0964      	lsrs	r4, r4, #5
 800b76e:	4635      	mov	r5, r6
 800b770:	9300      	str	r3, [sp, #0]
 800b772:	463a      	mov	r2, r7
 800b774:	4616      	mov	r6, r2
 800b776:	3201      	adds	r2, #1
 800b778:	7830      	ldrb	r0, [r6, #0]
 800b77a:	f7ff ff9c 	bl	800b6b6 <__hexdig_fun>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d1f8      	bne.n	800b774 <__gethex+0x94>
 800b782:	9901      	ldr	r1, [sp, #4]
 800b784:	4652      	mov	r2, sl
 800b786:	4630      	mov	r0, r6
 800b788:	f001 f9c9 	bl	800cb1e <strncmp>
 800b78c:	b980      	cbnz	r0, 800b7b0 <__gethex+0xd0>
 800b78e:	b94d      	cbnz	r5, 800b7a4 <__gethex+0xc4>
 800b790:	eb06 050a 	add.w	r5, r6, sl
 800b794:	462a      	mov	r2, r5
 800b796:	4616      	mov	r6, r2
 800b798:	3201      	adds	r2, #1
 800b79a:	7830      	ldrb	r0, [r6, #0]
 800b79c:	f7ff ff8b 	bl	800b6b6 <__hexdig_fun>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d1f8      	bne.n	800b796 <__gethex+0xb6>
 800b7a4:	1bad      	subs	r5, r5, r6
 800b7a6:	00ad      	lsls	r5, r5, #2
 800b7a8:	e004      	b.n	800b7b4 <__gethex+0xd4>
 800b7aa:	2400      	movs	r4, #0
 800b7ac:	4625      	mov	r5, r4
 800b7ae:	e7e0      	b.n	800b772 <__gethex+0x92>
 800b7b0:	2d00      	cmp	r5, #0
 800b7b2:	d1f7      	bne.n	800b7a4 <__gethex+0xc4>
 800b7b4:	7833      	ldrb	r3, [r6, #0]
 800b7b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b7ba:	2b50      	cmp	r3, #80	; 0x50
 800b7bc:	d13b      	bne.n	800b836 <__gethex+0x156>
 800b7be:	7873      	ldrb	r3, [r6, #1]
 800b7c0:	2b2b      	cmp	r3, #43	; 0x2b
 800b7c2:	d02c      	beq.n	800b81e <__gethex+0x13e>
 800b7c4:	2b2d      	cmp	r3, #45	; 0x2d
 800b7c6:	d02e      	beq.n	800b826 <__gethex+0x146>
 800b7c8:	1c71      	adds	r1, r6, #1
 800b7ca:	f04f 0900 	mov.w	r9, #0
 800b7ce:	7808      	ldrb	r0, [r1, #0]
 800b7d0:	f7ff ff71 	bl	800b6b6 <__hexdig_fun>
 800b7d4:	1e43      	subs	r3, r0, #1
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	2b18      	cmp	r3, #24
 800b7da:	d82c      	bhi.n	800b836 <__gethex+0x156>
 800b7dc:	f1a0 0210 	sub.w	r2, r0, #16
 800b7e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7e4:	f7ff ff67 	bl	800b6b6 <__hexdig_fun>
 800b7e8:	1e43      	subs	r3, r0, #1
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b18      	cmp	r3, #24
 800b7ee:	d91d      	bls.n	800b82c <__gethex+0x14c>
 800b7f0:	f1b9 0f00 	cmp.w	r9, #0
 800b7f4:	d000      	beq.n	800b7f8 <__gethex+0x118>
 800b7f6:	4252      	negs	r2, r2
 800b7f8:	4415      	add	r5, r2
 800b7fa:	f8cb 1000 	str.w	r1, [fp]
 800b7fe:	b1e4      	cbz	r4, 800b83a <__gethex+0x15a>
 800b800:	9b00      	ldr	r3, [sp, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	bf14      	ite	ne
 800b806:	2700      	movne	r7, #0
 800b808:	2706      	moveq	r7, #6
 800b80a:	4638      	mov	r0, r7
 800b80c:	b009      	add	sp, #36	; 0x24
 800b80e:	ecbd 8b02 	vpop	{d8}
 800b812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b816:	463e      	mov	r6, r7
 800b818:	4625      	mov	r5, r4
 800b81a:	2401      	movs	r4, #1
 800b81c:	e7ca      	b.n	800b7b4 <__gethex+0xd4>
 800b81e:	f04f 0900 	mov.w	r9, #0
 800b822:	1cb1      	adds	r1, r6, #2
 800b824:	e7d3      	b.n	800b7ce <__gethex+0xee>
 800b826:	f04f 0901 	mov.w	r9, #1
 800b82a:	e7fa      	b.n	800b822 <__gethex+0x142>
 800b82c:	230a      	movs	r3, #10
 800b82e:	fb03 0202 	mla	r2, r3, r2, r0
 800b832:	3a10      	subs	r2, #16
 800b834:	e7d4      	b.n	800b7e0 <__gethex+0x100>
 800b836:	4631      	mov	r1, r6
 800b838:	e7df      	b.n	800b7fa <__gethex+0x11a>
 800b83a:	1bf3      	subs	r3, r6, r7
 800b83c:	3b01      	subs	r3, #1
 800b83e:	4621      	mov	r1, r4
 800b840:	2b07      	cmp	r3, #7
 800b842:	dc0b      	bgt.n	800b85c <__gethex+0x17c>
 800b844:	ee18 0a10 	vmov	r0, s16
 800b848:	f000 faea 	bl	800be20 <_Balloc>
 800b84c:	4604      	mov	r4, r0
 800b84e:	b940      	cbnz	r0, 800b862 <__gethex+0x182>
 800b850:	4b5d      	ldr	r3, [pc, #372]	; (800b9c8 <__gethex+0x2e8>)
 800b852:	4602      	mov	r2, r0
 800b854:	21de      	movs	r1, #222	; 0xde
 800b856:	485d      	ldr	r0, [pc, #372]	; (800b9cc <__gethex+0x2ec>)
 800b858:	f001 f994 	bl	800cb84 <__assert_func>
 800b85c:	3101      	adds	r1, #1
 800b85e:	105b      	asrs	r3, r3, #1
 800b860:	e7ee      	b.n	800b840 <__gethex+0x160>
 800b862:	f100 0914 	add.w	r9, r0, #20
 800b866:	f04f 0b00 	mov.w	fp, #0
 800b86a:	f1ca 0301 	rsb	r3, sl, #1
 800b86e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b872:	f8cd b000 	str.w	fp, [sp]
 800b876:	9306      	str	r3, [sp, #24]
 800b878:	42b7      	cmp	r7, r6
 800b87a:	d340      	bcc.n	800b8fe <__gethex+0x21e>
 800b87c:	9802      	ldr	r0, [sp, #8]
 800b87e:	9b00      	ldr	r3, [sp, #0]
 800b880:	f840 3b04 	str.w	r3, [r0], #4
 800b884:	eba0 0009 	sub.w	r0, r0, r9
 800b888:	1080      	asrs	r0, r0, #2
 800b88a:	0146      	lsls	r6, r0, #5
 800b88c:	6120      	str	r0, [r4, #16]
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fbb8 	bl	800c004 <__hi0bits>
 800b894:	1a30      	subs	r0, r6, r0
 800b896:	f8d8 6000 	ldr.w	r6, [r8]
 800b89a:	42b0      	cmp	r0, r6
 800b89c:	dd63      	ble.n	800b966 <__gethex+0x286>
 800b89e:	1b87      	subs	r7, r0, r6
 800b8a0:	4639      	mov	r1, r7
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f000 ff5c 	bl	800c760 <__any_on>
 800b8a8:	4682      	mov	sl, r0
 800b8aa:	b1a8      	cbz	r0, 800b8d8 <__gethex+0x1f8>
 800b8ac:	1e7b      	subs	r3, r7, #1
 800b8ae:	1159      	asrs	r1, r3, #5
 800b8b0:	f003 021f 	and.w	r2, r3, #31
 800b8b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b8b8:	f04f 0a01 	mov.w	sl, #1
 800b8bc:	fa0a f202 	lsl.w	r2, sl, r2
 800b8c0:	420a      	tst	r2, r1
 800b8c2:	d009      	beq.n	800b8d8 <__gethex+0x1f8>
 800b8c4:	4553      	cmp	r3, sl
 800b8c6:	dd05      	ble.n	800b8d4 <__gethex+0x1f4>
 800b8c8:	1eb9      	subs	r1, r7, #2
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 ff48 	bl	800c760 <__any_on>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d145      	bne.n	800b960 <__gethex+0x280>
 800b8d4:	f04f 0a02 	mov.w	sl, #2
 800b8d8:	4639      	mov	r1, r7
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f7ff fe99 	bl	800b612 <rshift>
 800b8e0:	443d      	add	r5, r7
 800b8e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8e6:	42ab      	cmp	r3, r5
 800b8e8:	da4c      	bge.n	800b984 <__gethex+0x2a4>
 800b8ea:	ee18 0a10 	vmov	r0, s16
 800b8ee:	4621      	mov	r1, r4
 800b8f0:	f000 fad6 	bl	800bea0 <_Bfree>
 800b8f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	27a3      	movs	r7, #163	; 0xa3
 800b8fc:	e785      	b.n	800b80a <__gethex+0x12a>
 800b8fe:	1e73      	subs	r3, r6, #1
 800b900:	9a05      	ldr	r2, [sp, #20]
 800b902:	9303      	str	r3, [sp, #12]
 800b904:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b908:	4293      	cmp	r3, r2
 800b90a:	d019      	beq.n	800b940 <__gethex+0x260>
 800b90c:	f1bb 0f20 	cmp.w	fp, #32
 800b910:	d107      	bne.n	800b922 <__gethex+0x242>
 800b912:	9b02      	ldr	r3, [sp, #8]
 800b914:	9a00      	ldr	r2, [sp, #0]
 800b916:	f843 2b04 	str.w	r2, [r3], #4
 800b91a:	9302      	str	r3, [sp, #8]
 800b91c:	2300      	movs	r3, #0
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	469b      	mov	fp, r3
 800b922:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b926:	f7ff fec6 	bl	800b6b6 <__hexdig_fun>
 800b92a:	9b00      	ldr	r3, [sp, #0]
 800b92c:	f000 000f 	and.w	r0, r0, #15
 800b930:	fa00 f00b 	lsl.w	r0, r0, fp
 800b934:	4303      	orrs	r3, r0
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	f10b 0b04 	add.w	fp, fp, #4
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	e00d      	b.n	800b95c <__gethex+0x27c>
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	9a06      	ldr	r2, [sp, #24]
 800b944:	4413      	add	r3, r2
 800b946:	42bb      	cmp	r3, r7
 800b948:	d3e0      	bcc.n	800b90c <__gethex+0x22c>
 800b94a:	4618      	mov	r0, r3
 800b94c:	9901      	ldr	r1, [sp, #4]
 800b94e:	9307      	str	r3, [sp, #28]
 800b950:	4652      	mov	r2, sl
 800b952:	f001 f8e4 	bl	800cb1e <strncmp>
 800b956:	9b07      	ldr	r3, [sp, #28]
 800b958:	2800      	cmp	r0, #0
 800b95a:	d1d7      	bne.n	800b90c <__gethex+0x22c>
 800b95c:	461e      	mov	r6, r3
 800b95e:	e78b      	b.n	800b878 <__gethex+0x198>
 800b960:	f04f 0a03 	mov.w	sl, #3
 800b964:	e7b8      	b.n	800b8d8 <__gethex+0x1f8>
 800b966:	da0a      	bge.n	800b97e <__gethex+0x29e>
 800b968:	1a37      	subs	r7, r6, r0
 800b96a:	4621      	mov	r1, r4
 800b96c:	ee18 0a10 	vmov	r0, s16
 800b970:	463a      	mov	r2, r7
 800b972:	f000 fcb1 	bl	800c2d8 <__lshift>
 800b976:	1bed      	subs	r5, r5, r7
 800b978:	4604      	mov	r4, r0
 800b97a:	f100 0914 	add.w	r9, r0, #20
 800b97e:	f04f 0a00 	mov.w	sl, #0
 800b982:	e7ae      	b.n	800b8e2 <__gethex+0x202>
 800b984:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b988:	42a8      	cmp	r0, r5
 800b98a:	dd72      	ble.n	800ba72 <__gethex+0x392>
 800b98c:	1b45      	subs	r5, r0, r5
 800b98e:	42ae      	cmp	r6, r5
 800b990:	dc36      	bgt.n	800ba00 <__gethex+0x320>
 800b992:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b996:	2b02      	cmp	r3, #2
 800b998:	d02a      	beq.n	800b9f0 <__gethex+0x310>
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d02c      	beq.n	800b9f8 <__gethex+0x318>
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d11c      	bne.n	800b9dc <__gethex+0x2fc>
 800b9a2:	42ae      	cmp	r6, r5
 800b9a4:	d11a      	bne.n	800b9dc <__gethex+0x2fc>
 800b9a6:	2e01      	cmp	r6, #1
 800b9a8:	d112      	bne.n	800b9d0 <__gethex+0x2f0>
 800b9aa:	9a04      	ldr	r2, [sp, #16]
 800b9ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b9b0:	6013      	str	r3, [r2, #0]
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	6123      	str	r3, [r4, #16]
 800b9b6:	f8c9 3000 	str.w	r3, [r9]
 800b9ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b9bc:	2762      	movs	r7, #98	; 0x62
 800b9be:	601c      	str	r4, [r3, #0]
 800b9c0:	e723      	b.n	800b80a <__gethex+0x12a>
 800b9c2:	bf00      	nop
 800b9c4:	0800d3ac 	.word	0x0800d3ac
 800b9c8:	0800d2d0 	.word	0x0800d2d0
 800b9cc:	0800d344 	.word	0x0800d344
 800b9d0:	1e71      	subs	r1, r6, #1
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 fec4 	bl	800c760 <__any_on>
 800b9d8:	2800      	cmp	r0, #0
 800b9da:	d1e6      	bne.n	800b9aa <__gethex+0x2ca>
 800b9dc:	ee18 0a10 	vmov	r0, s16
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	f000 fa5d 	bl	800bea0 <_Bfree>
 800b9e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	2750      	movs	r7, #80	; 0x50
 800b9ee:	e70c      	b.n	800b80a <__gethex+0x12a>
 800b9f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1f2      	bne.n	800b9dc <__gethex+0x2fc>
 800b9f6:	e7d8      	b.n	800b9aa <__gethex+0x2ca>
 800b9f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1d5      	bne.n	800b9aa <__gethex+0x2ca>
 800b9fe:	e7ed      	b.n	800b9dc <__gethex+0x2fc>
 800ba00:	1e6f      	subs	r7, r5, #1
 800ba02:	f1ba 0f00 	cmp.w	sl, #0
 800ba06:	d131      	bne.n	800ba6c <__gethex+0x38c>
 800ba08:	b127      	cbz	r7, 800ba14 <__gethex+0x334>
 800ba0a:	4639      	mov	r1, r7
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f000 fea7 	bl	800c760 <__any_on>
 800ba12:	4682      	mov	sl, r0
 800ba14:	117b      	asrs	r3, r7, #5
 800ba16:	2101      	movs	r1, #1
 800ba18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ba1c:	f007 071f 	and.w	r7, r7, #31
 800ba20:	fa01 f707 	lsl.w	r7, r1, r7
 800ba24:	421f      	tst	r7, r3
 800ba26:	4629      	mov	r1, r5
 800ba28:	4620      	mov	r0, r4
 800ba2a:	bf18      	it	ne
 800ba2c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ba30:	1b76      	subs	r6, r6, r5
 800ba32:	f7ff fdee 	bl	800b612 <rshift>
 800ba36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ba3a:	2702      	movs	r7, #2
 800ba3c:	f1ba 0f00 	cmp.w	sl, #0
 800ba40:	d048      	beq.n	800bad4 <__gethex+0x3f4>
 800ba42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba46:	2b02      	cmp	r3, #2
 800ba48:	d015      	beq.n	800ba76 <__gethex+0x396>
 800ba4a:	2b03      	cmp	r3, #3
 800ba4c:	d017      	beq.n	800ba7e <__gethex+0x39e>
 800ba4e:	2b01      	cmp	r3, #1
 800ba50:	d109      	bne.n	800ba66 <__gethex+0x386>
 800ba52:	f01a 0f02 	tst.w	sl, #2
 800ba56:	d006      	beq.n	800ba66 <__gethex+0x386>
 800ba58:	f8d9 0000 	ldr.w	r0, [r9]
 800ba5c:	ea4a 0a00 	orr.w	sl, sl, r0
 800ba60:	f01a 0f01 	tst.w	sl, #1
 800ba64:	d10e      	bne.n	800ba84 <__gethex+0x3a4>
 800ba66:	f047 0710 	orr.w	r7, r7, #16
 800ba6a:	e033      	b.n	800bad4 <__gethex+0x3f4>
 800ba6c:	f04f 0a01 	mov.w	sl, #1
 800ba70:	e7d0      	b.n	800ba14 <__gethex+0x334>
 800ba72:	2701      	movs	r7, #1
 800ba74:	e7e2      	b.n	800ba3c <__gethex+0x35c>
 800ba76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba78:	f1c3 0301 	rsb	r3, r3, #1
 800ba7c:	9315      	str	r3, [sp, #84]	; 0x54
 800ba7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d0f0      	beq.n	800ba66 <__gethex+0x386>
 800ba84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba88:	f104 0314 	add.w	r3, r4, #20
 800ba8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba94:	f04f 0c00 	mov.w	ip, #0
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800baa2:	d01c      	beq.n	800bade <__gethex+0x3fe>
 800baa4:	3201      	adds	r2, #1
 800baa6:	6002      	str	r2, [r0, #0]
 800baa8:	2f02      	cmp	r7, #2
 800baaa:	f104 0314 	add.w	r3, r4, #20
 800baae:	d13f      	bne.n	800bb30 <__gethex+0x450>
 800bab0:	f8d8 2000 	ldr.w	r2, [r8]
 800bab4:	3a01      	subs	r2, #1
 800bab6:	42b2      	cmp	r2, r6
 800bab8:	d10a      	bne.n	800bad0 <__gethex+0x3f0>
 800baba:	1171      	asrs	r1, r6, #5
 800babc:	2201      	movs	r2, #1
 800babe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bac2:	f006 061f 	and.w	r6, r6, #31
 800bac6:	fa02 f606 	lsl.w	r6, r2, r6
 800baca:	421e      	tst	r6, r3
 800bacc:	bf18      	it	ne
 800bace:	4617      	movne	r7, r2
 800bad0:	f047 0720 	orr.w	r7, r7, #32
 800bad4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bad6:	601c      	str	r4, [r3, #0]
 800bad8:	9b04      	ldr	r3, [sp, #16]
 800bada:	601d      	str	r5, [r3, #0]
 800badc:	e695      	b.n	800b80a <__gethex+0x12a>
 800bade:	4299      	cmp	r1, r3
 800bae0:	f843 cc04 	str.w	ip, [r3, #-4]
 800bae4:	d8d8      	bhi.n	800ba98 <__gethex+0x3b8>
 800bae6:	68a3      	ldr	r3, [r4, #8]
 800bae8:	459b      	cmp	fp, r3
 800baea:	db19      	blt.n	800bb20 <__gethex+0x440>
 800baec:	6861      	ldr	r1, [r4, #4]
 800baee:	ee18 0a10 	vmov	r0, s16
 800baf2:	3101      	adds	r1, #1
 800baf4:	f000 f994 	bl	800be20 <_Balloc>
 800baf8:	4681      	mov	r9, r0
 800bafa:	b918      	cbnz	r0, 800bb04 <__gethex+0x424>
 800bafc:	4b1a      	ldr	r3, [pc, #104]	; (800bb68 <__gethex+0x488>)
 800bafe:	4602      	mov	r2, r0
 800bb00:	2184      	movs	r1, #132	; 0x84
 800bb02:	e6a8      	b.n	800b856 <__gethex+0x176>
 800bb04:	6922      	ldr	r2, [r4, #16]
 800bb06:	3202      	adds	r2, #2
 800bb08:	f104 010c 	add.w	r1, r4, #12
 800bb0c:	0092      	lsls	r2, r2, #2
 800bb0e:	300c      	adds	r0, #12
 800bb10:	f000 f96c 	bl	800bdec <memcpy>
 800bb14:	4621      	mov	r1, r4
 800bb16:	ee18 0a10 	vmov	r0, s16
 800bb1a:	f000 f9c1 	bl	800bea0 <_Bfree>
 800bb1e:	464c      	mov	r4, r9
 800bb20:	6923      	ldr	r3, [r4, #16]
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb28:	6122      	str	r2, [r4, #16]
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	615a      	str	r2, [r3, #20]
 800bb2e:	e7bb      	b.n	800baa8 <__gethex+0x3c8>
 800bb30:	6922      	ldr	r2, [r4, #16]
 800bb32:	455a      	cmp	r2, fp
 800bb34:	dd0b      	ble.n	800bb4e <__gethex+0x46e>
 800bb36:	2101      	movs	r1, #1
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f7ff fd6a 	bl	800b612 <rshift>
 800bb3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb42:	3501      	adds	r5, #1
 800bb44:	42ab      	cmp	r3, r5
 800bb46:	f6ff aed0 	blt.w	800b8ea <__gethex+0x20a>
 800bb4a:	2701      	movs	r7, #1
 800bb4c:	e7c0      	b.n	800bad0 <__gethex+0x3f0>
 800bb4e:	f016 061f 	ands.w	r6, r6, #31
 800bb52:	d0fa      	beq.n	800bb4a <__gethex+0x46a>
 800bb54:	4453      	add	r3, sl
 800bb56:	f1c6 0620 	rsb	r6, r6, #32
 800bb5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb5e:	f000 fa51 	bl	800c004 <__hi0bits>
 800bb62:	42b0      	cmp	r0, r6
 800bb64:	dbe7      	blt.n	800bb36 <__gethex+0x456>
 800bb66:	e7f0      	b.n	800bb4a <__gethex+0x46a>
 800bb68:	0800d2d0 	.word	0x0800d2d0

0800bb6c <L_shift>:
 800bb6c:	f1c2 0208 	rsb	r2, r2, #8
 800bb70:	0092      	lsls	r2, r2, #2
 800bb72:	b570      	push	{r4, r5, r6, lr}
 800bb74:	f1c2 0620 	rsb	r6, r2, #32
 800bb78:	6843      	ldr	r3, [r0, #4]
 800bb7a:	6804      	ldr	r4, [r0, #0]
 800bb7c:	fa03 f506 	lsl.w	r5, r3, r6
 800bb80:	432c      	orrs	r4, r5
 800bb82:	40d3      	lsrs	r3, r2
 800bb84:	6004      	str	r4, [r0, #0]
 800bb86:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb8a:	4288      	cmp	r0, r1
 800bb8c:	d3f4      	bcc.n	800bb78 <L_shift+0xc>
 800bb8e:	bd70      	pop	{r4, r5, r6, pc}

0800bb90 <__match>:
 800bb90:	b530      	push	{r4, r5, lr}
 800bb92:	6803      	ldr	r3, [r0, #0]
 800bb94:	3301      	adds	r3, #1
 800bb96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb9a:	b914      	cbnz	r4, 800bba2 <__match+0x12>
 800bb9c:	6003      	str	r3, [r0, #0]
 800bb9e:	2001      	movs	r0, #1
 800bba0:	bd30      	pop	{r4, r5, pc}
 800bba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bba6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800bbaa:	2d19      	cmp	r5, #25
 800bbac:	bf98      	it	ls
 800bbae:	3220      	addls	r2, #32
 800bbb0:	42a2      	cmp	r2, r4
 800bbb2:	d0f0      	beq.n	800bb96 <__match+0x6>
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	e7f3      	b.n	800bba0 <__match+0x10>

0800bbb8 <__hexnan>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	680b      	ldr	r3, [r1, #0]
 800bbbe:	115e      	asrs	r6, r3, #5
 800bbc0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bbc4:	f013 031f 	ands.w	r3, r3, #31
 800bbc8:	b087      	sub	sp, #28
 800bbca:	bf18      	it	ne
 800bbcc:	3604      	addne	r6, #4
 800bbce:	2500      	movs	r5, #0
 800bbd0:	1f37      	subs	r7, r6, #4
 800bbd2:	4690      	mov	r8, r2
 800bbd4:	6802      	ldr	r2, [r0, #0]
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	4682      	mov	sl, r0
 800bbda:	f846 5c04 	str.w	r5, [r6, #-4]
 800bbde:	46b9      	mov	r9, r7
 800bbe0:	463c      	mov	r4, r7
 800bbe2:	9502      	str	r5, [sp, #8]
 800bbe4:	46ab      	mov	fp, r5
 800bbe6:	7851      	ldrb	r1, [r2, #1]
 800bbe8:	1c53      	adds	r3, r2, #1
 800bbea:	9303      	str	r3, [sp, #12]
 800bbec:	b341      	cbz	r1, 800bc40 <__hexnan+0x88>
 800bbee:	4608      	mov	r0, r1
 800bbf0:	9205      	str	r2, [sp, #20]
 800bbf2:	9104      	str	r1, [sp, #16]
 800bbf4:	f7ff fd5f 	bl	800b6b6 <__hexdig_fun>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d14f      	bne.n	800bc9c <__hexnan+0xe4>
 800bbfc:	9904      	ldr	r1, [sp, #16]
 800bbfe:	9a05      	ldr	r2, [sp, #20]
 800bc00:	2920      	cmp	r1, #32
 800bc02:	d818      	bhi.n	800bc36 <__hexnan+0x7e>
 800bc04:	9b02      	ldr	r3, [sp, #8]
 800bc06:	459b      	cmp	fp, r3
 800bc08:	dd13      	ble.n	800bc32 <__hexnan+0x7a>
 800bc0a:	454c      	cmp	r4, r9
 800bc0c:	d206      	bcs.n	800bc1c <__hexnan+0x64>
 800bc0e:	2d07      	cmp	r5, #7
 800bc10:	dc04      	bgt.n	800bc1c <__hexnan+0x64>
 800bc12:	462a      	mov	r2, r5
 800bc14:	4649      	mov	r1, r9
 800bc16:	4620      	mov	r0, r4
 800bc18:	f7ff ffa8 	bl	800bb6c <L_shift>
 800bc1c:	4544      	cmp	r4, r8
 800bc1e:	d950      	bls.n	800bcc2 <__hexnan+0x10a>
 800bc20:	2300      	movs	r3, #0
 800bc22:	f1a4 0904 	sub.w	r9, r4, #4
 800bc26:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc2a:	f8cd b008 	str.w	fp, [sp, #8]
 800bc2e:	464c      	mov	r4, r9
 800bc30:	461d      	mov	r5, r3
 800bc32:	9a03      	ldr	r2, [sp, #12]
 800bc34:	e7d7      	b.n	800bbe6 <__hexnan+0x2e>
 800bc36:	2929      	cmp	r1, #41	; 0x29
 800bc38:	d156      	bne.n	800bce8 <__hexnan+0x130>
 800bc3a:	3202      	adds	r2, #2
 800bc3c:	f8ca 2000 	str.w	r2, [sl]
 800bc40:	f1bb 0f00 	cmp.w	fp, #0
 800bc44:	d050      	beq.n	800bce8 <__hexnan+0x130>
 800bc46:	454c      	cmp	r4, r9
 800bc48:	d206      	bcs.n	800bc58 <__hexnan+0xa0>
 800bc4a:	2d07      	cmp	r5, #7
 800bc4c:	dc04      	bgt.n	800bc58 <__hexnan+0xa0>
 800bc4e:	462a      	mov	r2, r5
 800bc50:	4649      	mov	r1, r9
 800bc52:	4620      	mov	r0, r4
 800bc54:	f7ff ff8a 	bl	800bb6c <L_shift>
 800bc58:	4544      	cmp	r4, r8
 800bc5a:	d934      	bls.n	800bcc6 <__hexnan+0x10e>
 800bc5c:	f1a8 0204 	sub.w	r2, r8, #4
 800bc60:	4623      	mov	r3, r4
 800bc62:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc66:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc6a:	429f      	cmp	r7, r3
 800bc6c:	d2f9      	bcs.n	800bc62 <__hexnan+0xaa>
 800bc6e:	1b3b      	subs	r3, r7, r4
 800bc70:	f023 0303 	bic.w	r3, r3, #3
 800bc74:	3304      	adds	r3, #4
 800bc76:	3401      	adds	r4, #1
 800bc78:	3e03      	subs	r6, #3
 800bc7a:	42b4      	cmp	r4, r6
 800bc7c:	bf88      	it	hi
 800bc7e:	2304      	movhi	r3, #4
 800bc80:	4443      	add	r3, r8
 800bc82:	2200      	movs	r2, #0
 800bc84:	f843 2b04 	str.w	r2, [r3], #4
 800bc88:	429f      	cmp	r7, r3
 800bc8a:	d2fb      	bcs.n	800bc84 <__hexnan+0xcc>
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	b91b      	cbnz	r3, 800bc98 <__hexnan+0xe0>
 800bc90:	4547      	cmp	r7, r8
 800bc92:	d127      	bne.n	800bce4 <__hexnan+0x12c>
 800bc94:	2301      	movs	r3, #1
 800bc96:	603b      	str	r3, [r7, #0]
 800bc98:	2005      	movs	r0, #5
 800bc9a:	e026      	b.n	800bcea <__hexnan+0x132>
 800bc9c:	3501      	adds	r5, #1
 800bc9e:	2d08      	cmp	r5, #8
 800bca0:	f10b 0b01 	add.w	fp, fp, #1
 800bca4:	dd06      	ble.n	800bcb4 <__hexnan+0xfc>
 800bca6:	4544      	cmp	r4, r8
 800bca8:	d9c3      	bls.n	800bc32 <__hexnan+0x7a>
 800bcaa:	2300      	movs	r3, #0
 800bcac:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcb0:	2501      	movs	r5, #1
 800bcb2:	3c04      	subs	r4, #4
 800bcb4:	6822      	ldr	r2, [r4, #0]
 800bcb6:	f000 000f 	and.w	r0, r0, #15
 800bcba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bcbe:	6022      	str	r2, [r4, #0]
 800bcc0:	e7b7      	b.n	800bc32 <__hexnan+0x7a>
 800bcc2:	2508      	movs	r5, #8
 800bcc4:	e7b5      	b.n	800bc32 <__hexnan+0x7a>
 800bcc6:	9b01      	ldr	r3, [sp, #4]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d0df      	beq.n	800bc8c <__hexnan+0xd4>
 800bccc:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd0:	f1c3 0320 	rsb	r3, r3, #32
 800bcd4:	fa22 f303 	lsr.w	r3, r2, r3
 800bcd8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcdc:	401a      	ands	r2, r3
 800bcde:	f846 2c04 	str.w	r2, [r6, #-4]
 800bce2:	e7d3      	b.n	800bc8c <__hexnan+0xd4>
 800bce4:	3f04      	subs	r7, #4
 800bce6:	e7d1      	b.n	800bc8c <__hexnan+0xd4>
 800bce8:	2004      	movs	r0, #4
 800bcea:	b007      	add	sp, #28
 800bcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bcf0 <_localeconv_r>:
 800bcf0:	4800      	ldr	r0, [pc, #0]	; (800bcf4 <_localeconv_r+0x4>)
 800bcf2:	4770      	bx	lr
 800bcf4:	20000184 	.word	0x20000184

0800bcf8 <__retarget_lock_init_recursive>:
 800bcf8:	4770      	bx	lr

0800bcfa <__retarget_lock_acquire_recursive>:
 800bcfa:	4770      	bx	lr

0800bcfc <__retarget_lock_release_recursive>:
 800bcfc:	4770      	bx	lr

0800bcfe <__swhatbuf_r>:
 800bcfe:	b570      	push	{r4, r5, r6, lr}
 800bd00:	460e      	mov	r6, r1
 800bd02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd06:	2900      	cmp	r1, #0
 800bd08:	b096      	sub	sp, #88	; 0x58
 800bd0a:	4614      	mov	r4, r2
 800bd0c:	461d      	mov	r5, r3
 800bd0e:	da08      	bge.n	800bd22 <__swhatbuf_r+0x24>
 800bd10:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	602a      	str	r2, [r5, #0]
 800bd18:	061a      	lsls	r2, r3, #24
 800bd1a:	d410      	bmi.n	800bd3e <__swhatbuf_r+0x40>
 800bd1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd20:	e00e      	b.n	800bd40 <__swhatbuf_r+0x42>
 800bd22:	466a      	mov	r2, sp
 800bd24:	f000 ff6e 	bl	800cc04 <_fstat_r>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	dbf1      	blt.n	800bd10 <__swhatbuf_r+0x12>
 800bd2c:	9a01      	ldr	r2, [sp, #4]
 800bd2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd36:	425a      	negs	r2, r3
 800bd38:	415a      	adcs	r2, r3
 800bd3a:	602a      	str	r2, [r5, #0]
 800bd3c:	e7ee      	b.n	800bd1c <__swhatbuf_r+0x1e>
 800bd3e:	2340      	movs	r3, #64	; 0x40
 800bd40:	2000      	movs	r0, #0
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	b016      	add	sp, #88	; 0x58
 800bd46:	bd70      	pop	{r4, r5, r6, pc}

0800bd48 <__smakebuf_r>:
 800bd48:	898b      	ldrh	r3, [r1, #12]
 800bd4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd4c:	079d      	lsls	r5, r3, #30
 800bd4e:	4606      	mov	r6, r0
 800bd50:	460c      	mov	r4, r1
 800bd52:	d507      	bpl.n	800bd64 <__smakebuf_r+0x1c>
 800bd54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	6123      	str	r3, [r4, #16]
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	6163      	str	r3, [r4, #20]
 800bd60:	b002      	add	sp, #8
 800bd62:	bd70      	pop	{r4, r5, r6, pc}
 800bd64:	ab01      	add	r3, sp, #4
 800bd66:	466a      	mov	r2, sp
 800bd68:	f7ff ffc9 	bl	800bcfe <__swhatbuf_r>
 800bd6c:	9900      	ldr	r1, [sp, #0]
 800bd6e:	4605      	mov	r5, r0
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7fc fd17 	bl	80087a4 <_malloc_r>
 800bd76:	b948      	cbnz	r0, 800bd8c <__smakebuf_r+0x44>
 800bd78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd7c:	059a      	lsls	r2, r3, #22
 800bd7e:	d4ef      	bmi.n	800bd60 <__smakebuf_r+0x18>
 800bd80:	f023 0303 	bic.w	r3, r3, #3
 800bd84:	f043 0302 	orr.w	r3, r3, #2
 800bd88:	81a3      	strh	r3, [r4, #12]
 800bd8a:	e7e3      	b.n	800bd54 <__smakebuf_r+0xc>
 800bd8c:	4b0d      	ldr	r3, [pc, #52]	; (800bdc4 <__smakebuf_r+0x7c>)
 800bd8e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	6020      	str	r0, [r4, #0]
 800bd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd98:	81a3      	strh	r3, [r4, #12]
 800bd9a:	9b00      	ldr	r3, [sp, #0]
 800bd9c:	6163      	str	r3, [r4, #20]
 800bd9e:	9b01      	ldr	r3, [sp, #4]
 800bda0:	6120      	str	r0, [r4, #16]
 800bda2:	b15b      	cbz	r3, 800bdbc <__smakebuf_r+0x74>
 800bda4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bda8:	4630      	mov	r0, r6
 800bdaa:	f000 ff3d 	bl	800cc28 <_isatty_r>
 800bdae:	b128      	cbz	r0, 800bdbc <__smakebuf_r+0x74>
 800bdb0:	89a3      	ldrh	r3, [r4, #12]
 800bdb2:	f023 0303 	bic.w	r3, r3, #3
 800bdb6:	f043 0301 	orr.w	r3, r3, #1
 800bdba:	81a3      	strh	r3, [r4, #12]
 800bdbc:	89a0      	ldrh	r0, [r4, #12]
 800bdbe:	4305      	orrs	r5, r0
 800bdc0:	81a5      	strh	r5, [r4, #12]
 800bdc2:	e7cd      	b.n	800bd60 <__smakebuf_r+0x18>
 800bdc4:	0800b471 	.word	0x0800b471

0800bdc8 <__ascii_mbtowc>:
 800bdc8:	b082      	sub	sp, #8
 800bdca:	b901      	cbnz	r1, 800bdce <__ascii_mbtowc+0x6>
 800bdcc:	a901      	add	r1, sp, #4
 800bdce:	b142      	cbz	r2, 800bde2 <__ascii_mbtowc+0x1a>
 800bdd0:	b14b      	cbz	r3, 800bde6 <__ascii_mbtowc+0x1e>
 800bdd2:	7813      	ldrb	r3, [r2, #0]
 800bdd4:	600b      	str	r3, [r1, #0]
 800bdd6:	7812      	ldrb	r2, [r2, #0]
 800bdd8:	1e10      	subs	r0, r2, #0
 800bdda:	bf18      	it	ne
 800bddc:	2001      	movne	r0, #1
 800bdde:	b002      	add	sp, #8
 800bde0:	4770      	bx	lr
 800bde2:	4610      	mov	r0, r2
 800bde4:	e7fb      	b.n	800bdde <__ascii_mbtowc+0x16>
 800bde6:	f06f 0001 	mvn.w	r0, #1
 800bdea:	e7f8      	b.n	800bdde <__ascii_mbtowc+0x16>

0800bdec <memcpy>:
 800bdec:	440a      	add	r2, r1
 800bdee:	4291      	cmp	r1, r2
 800bdf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdf4:	d100      	bne.n	800bdf8 <memcpy+0xc>
 800bdf6:	4770      	bx	lr
 800bdf8:	b510      	push	{r4, lr}
 800bdfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be02:	4291      	cmp	r1, r2
 800be04:	d1f9      	bne.n	800bdfa <memcpy+0xe>
 800be06:	bd10      	pop	{r4, pc}

0800be08 <__malloc_lock>:
 800be08:	4801      	ldr	r0, [pc, #4]	; (800be10 <__malloc_lock+0x8>)
 800be0a:	f7ff bf76 	b.w	800bcfa <__retarget_lock_acquire_recursive>
 800be0e:	bf00      	nop
 800be10:	20000a00 	.word	0x20000a00

0800be14 <__malloc_unlock>:
 800be14:	4801      	ldr	r0, [pc, #4]	; (800be1c <__malloc_unlock+0x8>)
 800be16:	f7ff bf71 	b.w	800bcfc <__retarget_lock_release_recursive>
 800be1a:	bf00      	nop
 800be1c:	20000a00 	.word	0x20000a00

0800be20 <_Balloc>:
 800be20:	b570      	push	{r4, r5, r6, lr}
 800be22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be24:	4604      	mov	r4, r0
 800be26:	460d      	mov	r5, r1
 800be28:	b976      	cbnz	r6, 800be48 <_Balloc+0x28>
 800be2a:	2010      	movs	r0, #16
 800be2c:	f7fc fc36 	bl	800869c <malloc>
 800be30:	4602      	mov	r2, r0
 800be32:	6260      	str	r0, [r4, #36]	; 0x24
 800be34:	b920      	cbnz	r0, 800be40 <_Balloc+0x20>
 800be36:	4b18      	ldr	r3, [pc, #96]	; (800be98 <_Balloc+0x78>)
 800be38:	4818      	ldr	r0, [pc, #96]	; (800be9c <_Balloc+0x7c>)
 800be3a:	2166      	movs	r1, #102	; 0x66
 800be3c:	f000 fea2 	bl	800cb84 <__assert_func>
 800be40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be44:	6006      	str	r6, [r0, #0]
 800be46:	60c6      	str	r6, [r0, #12]
 800be48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be4a:	68f3      	ldr	r3, [r6, #12]
 800be4c:	b183      	cbz	r3, 800be70 <_Balloc+0x50>
 800be4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be50:	68db      	ldr	r3, [r3, #12]
 800be52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be56:	b9b8      	cbnz	r0, 800be88 <_Balloc+0x68>
 800be58:	2101      	movs	r1, #1
 800be5a:	fa01 f605 	lsl.w	r6, r1, r5
 800be5e:	1d72      	adds	r2, r6, #5
 800be60:	0092      	lsls	r2, r2, #2
 800be62:	4620      	mov	r0, r4
 800be64:	f000 fc9d 	bl	800c7a2 <_calloc_r>
 800be68:	b160      	cbz	r0, 800be84 <_Balloc+0x64>
 800be6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be6e:	e00e      	b.n	800be8e <_Balloc+0x6e>
 800be70:	2221      	movs	r2, #33	; 0x21
 800be72:	2104      	movs	r1, #4
 800be74:	4620      	mov	r0, r4
 800be76:	f000 fc94 	bl	800c7a2 <_calloc_r>
 800be7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be7c:	60f0      	str	r0, [r6, #12]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e4      	bne.n	800be4e <_Balloc+0x2e>
 800be84:	2000      	movs	r0, #0
 800be86:	bd70      	pop	{r4, r5, r6, pc}
 800be88:	6802      	ldr	r2, [r0, #0]
 800be8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be8e:	2300      	movs	r3, #0
 800be90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be94:	e7f7      	b.n	800be86 <_Balloc+0x66>
 800be96:	bf00      	nop
 800be98:	0800d25e 	.word	0x0800d25e
 800be9c:	0800d3c0 	.word	0x0800d3c0

0800bea0 <_Bfree>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bea4:	4605      	mov	r5, r0
 800bea6:	460c      	mov	r4, r1
 800bea8:	b976      	cbnz	r6, 800bec8 <_Bfree+0x28>
 800beaa:	2010      	movs	r0, #16
 800beac:	f7fc fbf6 	bl	800869c <malloc>
 800beb0:	4602      	mov	r2, r0
 800beb2:	6268      	str	r0, [r5, #36]	; 0x24
 800beb4:	b920      	cbnz	r0, 800bec0 <_Bfree+0x20>
 800beb6:	4b09      	ldr	r3, [pc, #36]	; (800bedc <_Bfree+0x3c>)
 800beb8:	4809      	ldr	r0, [pc, #36]	; (800bee0 <_Bfree+0x40>)
 800beba:	218a      	movs	r1, #138	; 0x8a
 800bebc:	f000 fe62 	bl	800cb84 <__assert_func>
 800bec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bec4:	6006      	str	r6, [r0, #0]
 800bec6:	60c6      	str	r6, [r0, #12]
 800bec8:	b13c      	cbz	r4, 800beda <_Bfree+0x3a>
 800beca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800becc:	6862      	ldr	r2, [r4, #4]
 800bece:	68db      	ldr	r3, [r3, #12]
 800bed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bed4:	6021      	str	r1, [r4, #0]
 800bed6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beda:	bd70      	pop	{r4, r5, r6, pc}
 800bedc:	0800d25e 	.word	0x0800d25e
 800bee0:	0800d3c0 	.word	0x0800d3c0

0800bee4 <__multadd>:
 800bee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee8:	690d      	ldr	r5, [r1, #16]
 800beea:	4607      	mov	r7, r0
 800beec:	460c      	mov	r4, r1
 800beee:	461e      	mov	r6, r3
 800bef0:	f101 0c14 	add.w	ip, r1, #20
 800bef4:	2000      	movs	r0, #0
 800bef6:	f8dc 3000 	ldr.w	r3, [ip]
 800befa:	b299      	uxth	r1, r3
 800befc:	fb02 6101 	mla	r1, r2, r1, r6
 800bf00:	0c1e      	lsrs	r6, r3, #16
 800bf02:	0c0b      	lsrs	r3, r1, #16
 800bf04:	fb02 3306 	mla	r3, r2, r6, r3
 800bf08:	b289      	uxth	r1, r1
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf10:	4285      	cmp	r5, r0
 800bf12:	f84c 1b04 	str.w	r1, [ip], #4
 800bf16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf1a:	dcec      	bgt.n	800bef6 <__multadd+0x12>
 800bf1c:	b30e      	cbz	r6, 800bf62 <__multadd+0x7e>
 800bf1e:	68a3      	ldr	r3, [r4, #8]
 800bf20:	42ab      	cmp	r3, r5
 800bf22:	dc19      	bgt.n	800bf58 <__multadd+0x74>
 800bf24:	6861      	ldr	r1, [r4, #4]
 800bf26:	4638      	mov	r0, r7
 800bf28:	3101      	adds	r1, #1
 800bf2a:	f7ff ff79 	bl	800be20 <_Balloc>
 800bf2e:	4680      	mov	r8, r0
 800bf30:	b928      	cbnz	r0, 800bf3e <__multadd+0x5a>
 800bf32:	4602      	mov	r2, r0
 800bf34:	4b0c      	ldr	r3, [pc, #48]	; (800bf68 <__multadd+0x84>)
 800bf36:	480d      	ldr	r0, [pc, #52]	; (800bf6c <__multadd+0x88>)
 800bf38:	21b5      	movs	r1, #181	; 0xb5
 800bf3a:	f000 fe23 	bl	800cb84 <__assert_func>
 800bf3e:	6922      	ldr	r2, [r4, #16]
 800bf40:	3202      	adds	r2, #2
 800bf42:	f104 010c 	add.w	r1, r4, #12
 800bf46:	0092      	lsls	r2, r2, #2
 800bf48:	300c      	adds	r0, #12
 800bf4a:	f7ff ff4f 	bl	800bdec <memcpy>
 800bf4e:	4621      	mov	r1, r4
 800bf50:	4638      	mov	r0, r7
 800bf52:	f7ff ffa5 	bl	800bea0 <_Bfree>
 800bf56:	4644      	mov	r4, r8
 800bf58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	615e      	str	r6, [r3, #20]
 800bf60:	6125      	str	r5, [r4, #16]
 800bf62:	4620      	mov	r0, r4
 800bf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf68:	0800d2d0 	.word	0x0800d2d0
 800bf6c:	0800d3c0 	.word	0x0800d3c0

0800bf70 <__s2b>:
 800bf70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf74:	460c      	mov	r4, r1
 800bf76:	4615      	mov	r5, r2
 800bf78:	461f      	mov	r7, r3
 800bf7a:	2209      	movs	r2, #9
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	4606      	mov	r6, r0
 800bf80:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf84:	2100      	movs	r1, #0
 800bf86:	2201      	movs	r2, #1
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	db09      	blt.n	800bfa0 <__s2b+0x30>
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7ff ff47 	bl	800be20 <_Balloc>
 800bf92:	b940      	cbnz	r0, 800bfa6 <__s2b+0x36>
 800bf94:	4602      	mov	r2, r0
 800bf96:	4b19      	ldr	r3, [pc, #100]	; (800bffc <__s2b+0x8c>)
 800bf98:	4819      	ldr	r0, [pc, #100]	; (800c000 <__s2b+0x90>)
 800bf9a:	21ce      	movs	r1, #206	; 0xce
 800bf9c:	f000 fdf2 	bl	800cb84 <__assert_func>
 800bfa0:	0052      	lsls	r2, r2, #1
 800bfa2:	3101      	adds	r1, #1
 800bfa4:	e7f0      	b.n	800bf88 <__s2b+0x18>
 800bfa6:	9b08      	ldr	r3, [sp, #32]
 800bfa8:	6143      	str	r3, [r0, #20]
 800bfaa:	2d09      	cmp	r5, #9
 800bfac:	f04f 0301 	mov.w	r3, #1
 800bfb0:	6103      	str	r3, [r0, #16]
 800bfb2:	dd16      	ble.n	800bfe2 <__s2b+0x72>
 800bfb4:	f104 0909 	add.w	r9, r4, #9
 800bfb8:	46c8      	mov	r8, r9
 800bfba:	442c      	add	r4, r5
 800bfbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	3b30      	subs	r3, #48	; 0x30
 800bfc4:	220a      	movs	r2, #10
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f7ff ff8c 	bl	800bee4 <__multadd>
 800bfcc:	45a0      	cmp	r8, r4
 800bfce:	d1f5      	bne.n	800bfbc <__s2b+0x4c>
 800bfd0:	f1a5 0408 	sub.w	r4, r5, #8
 800bfd4:	444c      	add	r4, r9
 800bfd6:	1b2d      	subs	r5, r5, r4
 800bfd8:	1963      	adds	r3, r4, r5
 800bfda:	42bb      	cmp	r3, r7
 800bfdc:	db04      	blt.n	800bfe8 <__s2b+0x78>
 800bfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe2:	340a      	adds	r4, #10
 800bfe4:	2509      	movs	r5, #9
 800bfe6:	e7f6      	b.n	800bfd6 <__s2b+0x66>
 800bfe8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bfec:	4601      	mov	r1, r0
 800bfee:	3b30      	subs	r3, #48	; 0x30
 800bff0:	220a      	movs	r2, #10
 800bff2:	4630      	mov	r0, r6
 800bff4:	f7ff ff76 	bl	800bee4 <__multadd>
 800bff8:	e7ee      	b.n	800bfd8 <__s2b+0x68>
 800bffa:	bf00      	nop
 800bffc:	0800d2d0 	.word	0x0800d2d0
 800c000:	0800d3c0 	.word	0x0800d3c0

0800c004 <__hi0bits>:
 800c004:	0c03      	lsrs	r3, r0, #16
 800c006:	041b      	lsls	r3, r3, #16
 800c008:	b9d3      	cbnz	r3, 800c040 <__hi0bits+0x3c>
 800c00a:	0400      	lsls	r0, r0, #16
 800c00c:	2310      	movs	r3, #16
 800c00e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c012:	bf04      	itt	eq
 800c014:	0200      	lsleq	r0, r0, #8
 800c016:	3308      	addeq	r3, #8
 800c018:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c01c:	bf04      	itt	eq
 800c01e:	0100      	lsleq	r0, r0, #4
 800c020:	3304      	addeq	r3, #4
 800c022:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c026:	bf04      	itt	eq
 800c028:	0080      	lsleq	r0, r0, #2
 800c02a:	3302      	addeq	r3, #2
 800c02c:	2800      	cmp	r0, #0
 800c02e:	db05      	blt.n	800c03c <__hi0bits+0x38>
 800c030:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c034:	f103 0301 	add.w	r3, r3, #1
 800c038:	bf08      	it	eq
 800c03a:	2320      	moveq	r3, #32
 800c03c:	4618      	mov	r0, r3
 800c03e:	4770      	bx	lr
 800c040:	2300      	movs	r3, #0
 800c042:	e7e4      	b.n	800c00e <__hi0bits+0xa>

0800c044 <__lo0bits>:
 800c044:	6803      	ldr	r3, [r0, #0]
 800c046:	f013 0207 	ands.w	r2, r3, #7
 800c04a:	4601      	mov	r1, r0
 800c04c:	d00b      	beq.n	800c066 <__lo0bits+0x22>
 800c04e:	07da      	lsls	r2, r3, #31
 800c050:	d423      	bmi.n	800c09a <__lo0bits+0x56>
 800c052:	0798      	lsls	r0, r3, #30
 800c054:	bf49      	itett	mi
 800c056:	085b      	lsrmi	r3, r3, #1
 800c058:	089b      	lsrpl	r3, r3, #2
 800c05a:	2001      	movmi	r0, #1
 800c05c:	600b      	strmi	r3, [r1, #0]
 800c05e:	bf5c      	itt	pl
 800c060:	600b      	strpl	r3, [r1, #0]
 800c062:	2002      	movpl	r0, #2
 800c064:	4770      	bx	lr
 800c066:	b298      	uxth	r0, r3
 800c068:	b9a8      	cbnz	r0, 800c096 <__lo0bits+0x52>
 800c06a:	0c1b      	lsrs	r3, r3, #16
 800c06c:	2010      	movs	r0, #16
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	b90a      	cbnz	r2, 800c076 <__lo0bits+0x32>
 800c072:	3008      	adds	r0, #8
 800c074:	0a1b      	lsrs	r3, r3, #8
 800c076:	071a      	lsls	r2, r3, #28
 800c078:	bf04      	itt	eq
 800c07a:	091b      	lsreq	r3, r3, #4
 800c07c:	3004      	addeq	r0, #4
 800c07e:	079a      	lsls	r2, r3, #30
 800c080:	bf04      	itt	eq
 800c082:	089b      	lsreq	r3, r3, #2
 800c084:	3002      	addeq	r0, #2
 800c086:	07da      	lsls	r2, r3, #31
 800c088:	d403      	bmi.n	800c092 <__lo0bits+0x4e>
 800c08a:	085b      	lsrs	r3, r3, #1
 800c08c:	f100 0001 	add.w	r0, r0, #1
 800c090:	d005      	beq.n	800c09e <__lo0bits+0x5a>
 800c092:	600b      	str	r3, [r1, #0]
 800c094:	4770      	bx	lr
 800c096:	4610      	mov	r0, r2
 800c098:	e7e9      	b.n	800c06e <__lo0bits+0x2a>
 800c09a:	2000      	movs	r0, #0
 800c09c:	4770      	bx	lr
 800c09e:	2020      	movs	r0, #32
 800c0a0:	4770      	bx	lr
	...

0800c0a4 <__i2b>:
 800c0a4:	b510      	push	{r4, lr}
 800c0a6:	460c      	mov	r4, r1
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	f7ff feb9 	bl	800be20 <_Balloc>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	b928      	cbnz	r0, 800c0be <__i2b+0x1a>
 800c0b2:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <__i2b+0x24>)
 800c0b4:	4805      	ldr	r0, [pc, #20]	; (800c0cc <__i2b+0x28>)
 800c0b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0ba:	f000 fd63 	bl	800cb84 <__assert_func>
 800c0be:	2301      	movs	r3, #1
 800c0c0:	6144      	str	r4, [r0, #20]
 800c0c2:	6103      	str	r3, [r0, #16]
 800c0c4:	bd10      	pop	{r4, pc}
 800c0c6:	bf00      	nop
 800c0c8:	0800d2d0 	.word	0x0800d2d0
 800c0cc:	0800d3c0 	.word	0x0800d3c0

0800c0d0 <__multiply>:
 800c0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0d4:	4691      	mov	r9, r2
 800c0d6:	690a      	ldr	r2, [r1, #16]
 800c0d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	bfb8      	it	lt
 800c0e0:	460b      	movlt	r3, r1
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	bfbc      	itt	lt
 800c0e6:	464c      	movlt	r4, r9
 800c0e8:	4699      	movlt	r9, r3
 800c0ea:	6927      	ldr	r7, [r4, #16]
 800c0ec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0f0:	68a3      	ldr	r3, [r4, #8]
 800c0f2:	6861      	ldr	r1, [r4, #4]
 800c0f4:	eb07 060a 	add.w	r6, r7, sl
 800c0f8:	42b3      	cmp	r3, r6
 800c0fa:	b085      	sub	sp, #20
 800c0fc:	bfb8      	it	lt
 800c0fe:	3101      	addlt	r1, #1
 800c100:	f7ff fe8e 	bl	800be20 <_Balloc>
 800c104:	b930      	cbnz	r0, 800c114 <__multiply+0x44>
 800c106:	4602      	mov	r2, r0
 800c108:	4b44      	ldr	r3, [pc, #272]	; (800c21c <__multiply+0x14c>)
 800c10a:	4845      	ldr	r0, [pc, #276]	; (800c220 <__multiply+0x150>)
 800c10c:	f240 115d 	movw	r1, #349	; 0x15d
 800c110:	f000 fd38 	bl	800cb84 <__assert_func>
 800c114:	f100 0514 	add.w	r5, r0, #20
 800c118:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c11c:	462b      	mov	r3, r5
 800c11e:	2200      	movs	r2, #0
 800c120:	4543      	cmp	r3, r8
 800c122:	d321      	bcc.n	800c168 <__multiply+0x98>
 800c124:	f104 0314 	add.w	r3, r4, #20
 800c128:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c12c:	f109 0314 	add.w	r3, r9, #20
 800c130:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c134:	9202      	str	r2, [sp, #8]
 800c136:	1b3a      	subs	r2, r7, r4
 800c138:	3a15      	subs	r2, #21
 800c13a:	f022 0203 	bic.w	r2, r2, #3
 800c13e:	3204      	adds	r2, #4
 800c140:	f104 0115 	add.w	r1, r4, #21
 800c144:	428f      	cmp	r7, r1
 800c146:	bf38      	it	cc
 800c148:	2204      	movcc	r2, #4
 800c14a:	9201      	str	r2, [sp, #4]
 800c14c:	9a02      	ldr	r2, [sp, #8]
 800c14e:	9303      	str	r3, [sp, #12]
 800c150:	429a      	cmp	r2, r3
 800c152:	d80c      	bhi.n	800c16e <__multiply+0x9e>
 800c154:	2e00      	cmp	r6, #0
 800c156:	dd03      	ble.n	800c160 <__multiply+0x90>
 800c158:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d05a      	beq.n	800c216 <__multiply+0x146>
 800c160:	6106      	str	r6, [r0, #16]
 800c162:	b005      	add	sp, #20
 800c164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c168:	f843 2b04 	str.w	r2, [r3], #4
 800c16c:	e7d8      	b.n	800c120 <__multiply+0x50>
 800c16e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c172:	f1ba 0f00 	cmp.w	sl, #0
 800c176:	d024      	beq.n	800c1c2 <__multiply+0xf2>
 800c178:	f104 0e14 	add.w	lr, r4, #20
 800c17c:	46a9      	mov	r9, r5
 800c17e:	f04f 0c00 	mov.w	ip, #0
 800c182:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c186:	f8d9 1000 	ldr.w	r1, [r9]
 800c18a:	fa1f fb82 	uxth.w	fp, r2
 800c18e:	b289      	uxth	r1, r1
 800c190:	fb0a 110b 	mla	r1, sl, fp, r1
 800c194:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c198:	f8d9 2000 	ldr.w	r2, [r9]
 800c19c:	4461      	add	r1, ip
 800c19e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1a2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1a6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1aa:	b289      	uxth	r1, r1
 800c1ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1b0:	4577      	cmp	r7, lr
 800c1b2:	f849 1b04 	str.w	r1, [r9], #4
 800c1b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1ba:	d8e2      	bhi.n	800c182 <__multiply+0xb2>
 800c1bc:	9a01      	ldr	r2, [sp, #4]
 800c1be:	f845 c002 	str.w	ip, [r5, r2]
 800c1c2:	9a03      	ldr	r2, [sp, #12]
 800c1c4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c1c8:	3304      	adds	r3, #4
 800c1ca:	f1b9 0f00 	cmp.w	r9, #0
 800c1ce:	d020      	beq.n	800c212 <__multiply+0x142>
 800c1d0:	6829      	ldr	r1, [r5, #0]
 800c1d2:	f104 0c14 	add.w	ip, r4, #20
 800c1d6:	46ae      	mov	lr, r5
 800c1d8:	f04f 0a00 	mov.w	sl, #0
 800c1dc:	f8bc b000 	ldrh.w	fp, [ip]
 800c1e0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c1e4:	fb09 220b 	mla	r2, r9, fp, r2
 800c1e8:	4492      	add	sl, r2
 800c1ea:	b289      	uxth	r1, r1
 800c1ec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c1f0:	f84e 1b04 	str.w	r1, [lr], #4
 800c1f4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1f8:	f8be 1000 	ldrh.w	r1, [lr]
 800c1fc:	0c12      	lsrs	r2, r2, #16
 800c1fe:	fb09 1102 	mla	r1, r9, r2, r1
 800c202:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c206:	4567      	cmp	r7, ip
 800c208:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c20c:	d8e6      	bhi.n	800c1dc <__multiply+0x10c>
 800c20e:	9a01      	ldr	r2, [sp, #4]
 800c210:	50a9      	str	r1, [r5, r2]
 800c212:	3504      	adds	r5, #4
 800c214:	e79a      	b.n	800c14c <__multiply+0x7c>
 800c216:	3e01      	subs	r6, #1
 800c218:	e79c      	b.n	800c154 <__multiply+0x84>
 800c21a:	bf00      	nop
 800c21c:	0800d2d0 	.word	0x0800d2d0
 800c220:	0800d3c0 	.word	0x0800d3c0

0800c224 <__pow5mult>:
 800c224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c228:	4615      	mov	r5, r2
 800c22a:	f012 0203 	ands.w	r2, r2, #3
 800c22e:	4606      	mov	r6, r0
 800c230:	460f      	mov	r7, r1
 800c232:	d007      	beq.n	800c244 <__pow5mult+0x20>
 800c234:	4c25      	ldr	r4, [pc, #148]	; (800c2cc <__pow5mult+0xa8>)
 800c236:	3a01      	subs	r2, #1
 800c238:	2300      	movs	r3, #0
 800c23a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c23e:	f7ff fe51 	bl	800bee4 <__multadd>
 800c242:	4607      	mov	r7, r0
 800c244:	10ad      	asrs	r5, r5, #2
 800c246:	d03d      	beq.n	800c2c4 <__pow5mult+0xa0>
 800c248:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c24a:	b97c      	cbnz	r4, 800c26c <__pow5mult+0x48>
 800c24c:	2010      	movs	r0, #16
 800c24e:	f7fc fa25 	bl	800869c <malloc>
 800c252:	4602      	mov	r2, r0
 800c254:	6270      	str	r0, [r6, #36]	; 0x24
 800c256:	b928      	cbnz	r0, 800c264 <__pow5mult+0x40>
 800c258:	4b1d      	ldr	r3, [pc, #116]	; (800c2d0 <__pow5mult+0xac>)
 800c25a:	481e      	ldr	r0, [pc, #120]	; (800c2d4 <__pow5mult+0xb0>)
 800c25c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c260:	f000 fc90 	bl	800cb84 <__assert_func>
 800c264:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c268:	6004      	str	r4, [r0, #0]
 800c26a:	60c4      	str	r4, [r0, #12]
 800c26c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c270:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c274:	b94c      	cbnz	r4, 800c28a <__pow5mult+0x66>
 800c276:	f240 2171 	movw	r1, #625	; 0x271
 800c27a:	4630      	mov	r0, r6
 800c27c:	f7ff ff12 	bl	800c0a4 <__i2b>
 800c280:	2300      	movs	r3, #0
 800c282:	f8c8 0008 	str.w	r0, [r8, #8]
 800c286:	4604      	mov	r4, r0
 800c288:	6003      	str	r3, [r0, #0]
 800c28a:	f04f 0900 	mov.w	r9, #0
 800c28e:	07eb      	lsls	r3, r5, #31
 800c290:	d50a      	bpl.n	800c2a8 <__pow5mult+0x84>
 800c292:	4639      	mov	r1, r7
 800c294:	4622      	mov	r2, r4
 800c296:	4630      	mov	r0, r6
 800c298:	f7ff ff1a 	bl	800c0d0 <__multiply>
 800c29c:	4639      	mov	r1, r7
 800c29e:	4680      	mov	r8, r0
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	f7ff fdfd 	bl	800bea0 <_Bfree>
 800c2a6:	4647      	mov	r7, r8
 800c2a8:	106d      	asrs	r5, r5, #1
 800c2aa:	d00b      	beq.n	800c2c4 <__pow5mult+0xa0>
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	b938      	cbnz	r0, 800c2c0 <__pow5mult+0x9c>
 800c2b0:	4622      	mov	r2, r4
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f7ff ff0b 	bl	800c0d0 <__multiply>
 800c2ba:	6020      	str	r0, [r4, #0]
 800c2bc:	f8c0 9000 	str.w	r9, [r0]
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	e7e4      	b.n	800c28e <__pow5mult+0x6a>
 800c2c4:	4638      	mov	r0, r7
 800c2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ca:	bf00      	nop
 800c2cc:	0800d510 	.word	0x0800d510
 800c2d0:	0800d25e 	.word	0x0800d25e
 800c2d4:	0800d3c0 	.word	0x0800d3c0

0800c2d8 <__lshift>:
 800c2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2dc:	460c      	mov	r4, r1
 800c2de:	6849      	ldr	r1, [r1, #4]
 800c2e0:	6923      	ldr	r3, [r4, #16]
 800c2e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	4691      	mov	r9, r2
 800c2ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2f0:	f108 0601 	add.w	r6, r8, #1
 800c2f4:	42b3      	cmp	r3, r6
 800c2f6:	db0b      	blt.n	800c310 <__lshift+0x38>
 800c2f8:	4638      	mov	r0, r7
 800c2fa:	f7ff fd91 	bl	800be20 <_Balloc>
 800c2fe:	4605      	mov	r5, r0
 800c300:	b948      	cbnz	r0, 800c316 <__lshift+0x3e>
 800c302:	4602      	mov	r2, r0
 800c304:	4b2a      	ldr	r3, [pc, #168]	; (800c3b0 <__lshift+0xd8>)
 800c306:	482b      	ldr	r0, [pc, #172]	; (800c3b4 <__lshift+0xdc>)
 800c308:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c30c:	f000 fc3a 	bl	800cb84 <__assert_func>
 800c310:	3101      	adds	r1, #1
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	e7ee      	b.n	800c2f4 <__lshift+0x1c>
 800c316:	2300      	movs	r3, #0
 800c318:	f100 0114 	add.w	r1, r0, #20
 800c31c:	f100 0210 	add.w	r2, r0, #16
 800c320:	4618      	mov	r0, r3
 800c322:	4553      	cmp	r3, sl
 800c324:	db37      	blt.n	800c396 <__lshift+0xbe>
 800c326:	6920      	ldr	r0, [r4, #16]
 800c328:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c32c:	f104 0314 	add.w	r3, r4, #20
 800c330:	f019 091f 	ands.w	r9, r9, #31
 800c334:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c338:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c33c:	d02f      	beq.n	800c39e <__lshift+0xc6>
 800c33e:	f1c9 0e20 	rsb	lr, r9, #32
 800c342:	468a      	mov	sl, r1
 800c344:	f04f 0c00 	mov.w	ip, #0
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	fa02 f209 	lsl.w	r2, r2, r9
 800c34e:	ea42 020c 	orr.w	r2, r2, ip
 800c352:	f84a 2b04 	str.w	r2, [sl], #4
 800c356:	f853 2b04 	ldr.w	r2, [r3], #4
 800c35a:	4298      	cmp	r0, r3
 800c35c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c360:	d8f2      	bhi.n	800c348 <__lshift+0x70>
 800c362:	1b03      	subs	r3, r0, r4
 800c364:	3b15      	subs	r3, #21
 800c366:	f023 0303 	bic.w	r3, r3, #3
 800c36a:	3304      	adds	r3, #4
 800c36c:	f104 0215 	add.w	r2, r4, #21
 800c370:	4290      	cmp	r0, r2
 800c372:	bf38      	it	cc
 800c374:	2304      	movcc	r3, #4
 800c376:	f841 c003 	str.w	ip, [r1, r3]
 800c37a:	f1bc 0f00 	cmp.w	ip, #0
 800c37e:	d001      	beq.n	800c384 <__lshift+0xac>
 800c380:	f108 0602 	add.w	r6, r8, #2
 800c384:	3e01      	subs	r6, #1
 800c386:	4638      	mov	r0, r7
 800c388:	612e      	str	r6, [r5, #16]
 800c38a:	4621      	mov	r1, r4
 800c38c:	f7ff fd88 	bl	800bea0 <_Bfree>
 800c390:	4628      	mov	r0, r5
 800c392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c396:	f842 0f04 	str.w	r0, [r2, #4]!
 800c39a:	3301      	adds	r3, #1
 800c39c:	e7c1      	b.n	800c322 <__lshift+0x4a>
 800c39e:	3904      	subs	r1, #4
 800c3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3a8:	4298      	cmp	r0, r3
 800c3aa:	d8f9      	bhi.n	800c3a0 <__lshift+0xc8>
 800c3ac:	e7ea      	b.n	800c384 <__lshift+0xac>
 800c3ae:	bf00      	nop
 800c3b0:	0800d2d0 	.word	0x0800d2d0
 800c3b4:	0800d3c0 	.word	0x0800d3c0

0800c3b8 <__mcmp>:
 800c3b8:	b530      	push	{r4, r5, lr}
 800c3ba:	6902      	ldr	r2, [r0, #16]
 800c3bc:	690c      	ldr	r4, [r1, #16]
 800c3be:	1b12      	subs	r2, r2, r4
 800c3c0:	d10e      	bne.n	800c3e0 <__mcmp+0x28>
 800c3c2:	f100 0314 	add.w	r3, r0, #20
 800c3c6:	3114      	adds	r1, #20
 800c3c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c3cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c3d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c3d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c3d8:	42a5      	cmp	r5, r4
 800c3da:	d003      	beq.n	800c3e4 <__mcmp+0x2c>
 800c3dc:	d305      	bcc.n	800c3ea <__mcmp+0x32>
 800c3de:	2201      	movs	r2, #1
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	bd30      	pop	{r4, r5, pc}
 800c3e4:	4283      	cmp	r3, r0
 800c3e6:	d3f3      	bcc.n	800c3d0 <__mcmp+0x18>
 800c3e8:	e7fa      	b.n	800c3e0 <__mcmp+0x28>
 800c3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ee:	e7f7      	b.n	800c3e0 <__mcmp+0x28>

0800c3f0 <__mdiff>:
 800c3f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	4690      	mov	r8, r2
 800c3fe:	f7ff ffdb 	bl	800c3b8 <__mcmp>
 800c402:	1e05      	subs	r5, r0, #0
 800c404:	d110      	bne.n	800c428 <__mdiff+0x38>
 800c406:	4629      	mov	r1, r5
 800c408:	4630      	mov	r0, r6
 800c40a:	f7ff fd09 	bl	800be20 <_Balloc>
 800c40e:	b930      	cbnz	r0, 800c41e <__mdiff+0x2e>
 800c410:	4b3a      	ldr	r3, [pc, #232]	; (800c4fc <__mdiff+0x10c>)
 800c412:	4602      	mov	r2, r0
 800c414:	f240 2132 	movw	r1, #562	; 0x232
 800c418:	4839      	ldr	r0, [pc, #228]	; (800c500 <__mdiff+0x110>)
 800c41a:	f000 fbb3 	bl	800cb84 <__assert_func>
 800c41e:	2301      	movs	r3, #1
 800c420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c428:	bfa4      	itt	ge
 800c42a:	4643      	movge	r3, r8
 800c42c:	46a0      	movge	r8, r4
 800c42e:	4630      	mov	r0, r6
 800c430:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c434:	bfa6      	itte	ge
 800c436:	461c      	movge	r4, r3
 800c438:	2500      	movge	r5, #0
 800c43a:	2501      	movlt	r5, #1
 800c43c:	f7ff fcf0 	bl	800be20 <_Balloc>
 800c440:	b920      	cbnz	r0, 800c44c <__mdiff+0x5c>
 800c442:	4b2e      	ldr	r3, [pc, #184]	; (800c4fc <__mdiff+0x10c>)
 800c444:	4602      	mov	r2, r0
 800c446:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c44a:	e7e5      	b.n	800c418 <__mdiff+0x28>
 800c44c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c450:	6926      	ldr	r6, [r4, #16]
 800c452:	60c5      	str	r5, [r0, #12]
 800c454:	f104 0914 	add.w	r9, r4, #20
 800c458:	f108 0514 	add.w	r5, r8, #20
 800c45c:	f100 0e14 	add.w	lr, r0, #20
 800c460:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c464:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c468:	f108 0210 	add.w	r2, r8, #16
 800c46c:	46f2      	mov	sl, lr
 800c46e:	2100      	movs	r1, #0
 800c470:	f859 3b04 	ldr.w	r3, [r9], #4
 800c474:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c478:	fa1f f883 	uxth.w	r8, r3
 800c47c:	fa11 f18b 	uxtah	r1, r1, fp
 800c480:	0c1b      	lsrs	r3, r3, #16
 800c482:	eba1 0808 	sub.w	r8, r1, r8
 800c486:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c48a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c48e:	fa1f f888 	uxth.w	r8, r8
 800c492:	1419      	asrs	r1, r3, #16
 800c494:	454e      	cmp	r6, r9
 800c496:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c49a:	f84a 3b04 	str.w	r3, [sl], #4
 800c49e:	d8e7      	bhi.n	800c470 <__mdiff+0x80>
 800c4a0:	1b33      	subs	r3, r6, r4
 800c4a2:	3b15      	subs	r3, #21
 800c4a4:	f023 0303 	bic.w	r3, r3, #3
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	3415      	adds	r4, #21
 800c4ac:	42a6      	cmp	r6, r4
 800c4ae:	bf38      	it	cc
 800c4b0:	2304      	movcc	r3, #4
 800c4b2:	441d      	add	r5, r3
 800c4b4:	4473      	add	r3, lr
 800c4b6:	469e      	mov	lr, r3
 800c4b8:	462e      	mov	r6, r5
 800c4ba:	4566      	cmp	r6, ip
 800c4bc:	d30e      	bcc.n	800c4dc <__mdiff+0xec>
 800c4be:	f10c 0203 	add.w	r2, ip, #3
 800c4c2:	1b52      	subs	r2, r2, r5
 800c4c4:	f022 0203 	bic.w	r2, r2, #3
 800c4c8:	3d03      	subs	r5, #3
 800c4ca:	45ac      	cmp	ip, r5
 800c4cc:	bf38      	it	cc
 800c4ce:	2200      	movcc	r2, #0
 800c4d0:	441a      	add	r2, r3
 800c4d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c4d6:	b17b      	cbz	r3, 800c4f8 <__mdiff+0x108>
 800c4d8:	6107      	str	r7, [r0, #16]
 800c4da:	e7a3      	b.n	800c424 <__mdiff+0x34>
 800c4dc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c4e0:	fa11 f288 	uxtah	r2, r1, r8
 800c4e4:	1414      	asrs	r4, r2, #16
 800c4e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c4ea:	b292      	uxth	r2, r2
 800c4ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c4f0:	f84e 2b04 	str.w	r2, [lr], #4
 800c4f4:	1421      	asrs	r1, r4, #16
 800c4f6:	e7e0      	b.n	800c4ba <__mdiff+0xca>
 800c4f8:	3f01      	subs	r7, #1
 800c4fa:	e7ea      	b.n	800c4d2 <__mdiff+0xe2>
 800c4fc:	0800d2d0 	.word	0x0800d2d0
 800c500:	0800d3c0 	.word	0x0800d3c0

0800c504 <__ulp>:
 800c504:	b082      	sub	sp, #8
 800c506:	ed8d 0b00 	vstr	d0, [sp]
 800c50a:	9b01      	ldr	r3, [sp, #4]
 800c50c:	4912      	ldr	r1, [pc, #72]	; (800c558 <__ulp+0x54>)
 800c50e:	4019      	ands	r1, r3
 800c510:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c514:	2900      	cmp	r1, #0
 800c516:	dd05      	ble.n	800c524 <__ulp+0x20>
 800c518:	2200      	movs	r2, #0
 800c51a:	460b      	mov	r3, r1
 800c51c:	ec43 2b10 	vmov	d0, r2, r3
 800c520:	b002      	add	sp, #8
 800c522:	4770      	bx	lr
 800c524:	4249      	negs	r1, r1
 800c526:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c52a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c52e:	f04f 0200 	mov.w	r2, #0
 800c532:	f04f 0300 	mov.w	r3, #0
 800c536:	da04      	bge.n	800c542 <__ulp+0x3e>
 800c538:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c53c:	fa41 f300 	asr.w	r3, r1, r0
 800c540:	e7ec      	b.n	800c51c <__ulp+0x18>
 800c542:	f1a0 0114 	sub.w	r1, r0, #20
 800c546:	291e      	cmp	r1, #30
 800c548:	bfda      	itte	le
 800c54a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c54e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c552:	2101      	movgt	r1, #1
 800c554:	460a      	mov	r2, r1
 800c556:	e7e1      	b.n	800c51c <__ulp+0x18>
 800c558:	7ff00000 	.word	0x7ff00000

0800c55c <__b2d>:
 800c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55e:	6905      	ldr	r5, [r0, #16]
 800c560:	f100 0714 	add.w	r7, r0, #20
 800c564:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c568:	1f2e      	subs	r6, r5, #4
 800c56a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c56e:	4620      	mov	r0, r4
 800c570:	f7ff fd48 	bl	800c004 <__hi0bits>
 800c574:	f1c0 0320 	rsb	r3, r0, #32
 800c578:	280a      	cmp	r0, #10
 800c57a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c5f8 <__b2d+0x9c>
 800c57e:	600b      	str	r3, [r1, #0]
 800c580:	dc14      	bgt.n	800c5ac <__b2d+0x50>
 800c582:	f1c0 0e0b 	rsb	lr, r0, #11
 800c586:	fa24 f10e 	lsr.w	r1, r4, lr
 800c58a:	42b7      	cmp	r7, r6
 800c58c:	ea41 030c 	orr.w	r3, r1, ip
 800c590:	bf34      	ite	cc
 800c592:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c596:	2100      	movcs	r1, #0
 800c598:	3015      	adds	r0, #21
 800c59a:	fa04 f000 	lsl.w	r0, r4, r0
 800c59e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c5a2:	ea40 0201 	orr.w	r2, r0, r1
 800c5a6:	ec43 2b10 	vmov	d0, r2, r3
 800c5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ac:	42b7      	cmp	r7, r6
 800c5ae:	bf3a      	itte	cc
 800c5b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c5b4:	f1a5 0608 	subcc.w	r6, r5, #8
 800c5b8:	2100      	movcs	r1, #0
 800c5ba:	380b      	subs	r0, #11
 800c5bc:	d017      	beq.n	800c5ee <__b2d+0x92>
 800c5be:	f1c0 0c20 	rsb	ip, r0, #32
 800c5c2:	fa04 f500 	lsl.w	r5, r4, r0
 800c5c6:	42be      	cmp	r6, r7
 800c5c8:	fa21 f40c 	lsr.w	r4, r1, ip
 800c5cc:	ea45 0504 	orr.w	r5, r5, r4
 800c5d0:	bf8c      	ite	hi
 800c5d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c5d6:	2400      	movls	r4, #0
 800c5d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c5dc:	fa01 f000 	lsl.w	r0, r1, r0
 800c5e0:	fa24 f40c 	lsr.w	r4, r4, ip
 800c5e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c5e8:	ea40 0204 	orr.w	r2, r0, r4
 800c5ec:	e7db      	b.n	800c5a6 <__b2d+0x4a>
 800c5ee:	ea44 030c 	orr.w	r3, r4, ip
 800c5f2:	460a      	mov	r2, r1
 800c5f4:	e7d7      	b.n	800c5a6 <__b2d+0x4a>
 800c5f6:	bf00      	nop
 800c5f8:	3ff00000 	.word	0x3ff00000

0800c5fc <__d2b>:
 800c5fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c600:	4689      	mov	r9, r1
 800c602:	2101      	movs	r1, #1
 800c604:	ec57 6b10 	vmov	r6, r7, d0
 800c608:	4690      	mov	r8, r2
 800c60a:	f7ff fc09 	bl	800be20 <_Balloc>
 800c60e:	4604      	mov	r4, r0
 800c610:	b930      	cbnz	r0, 800c620 <__d2b+0x24>
 800c612:	4602      	mov	r2, r0
 800c614:	4b25      	ldr	r3, [pc, #148]	; (800c6ac <__d2b+0xb0>)
 800c616:	4826      	ldr	r0, [pc, #152]	; (800c6b0 <__d2b+0xb4>)
 800c618:	f240 310a 	movw	r1, #778	; 0x30a
 800c61c:	f000 fab2 	bl	800cb84 <__assert_func>
 800c620:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c624:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c628:	bb35      	cbnz	r5, 800c678 <__d2b+0x7c>
 800c62a:	2e00      	cmp	r6, #0
 800c62c:	9301      	str	r3, [sp, #4]
 800c62e:	d028      	beq.n	800c682 <__d2b+0x86>
 800c630:	4668      	mov	r0, sp
 800c632:	9600      	str	r6, [sp, #0]
 800c634:	f7ff fd06 	bl	800c044 <__lo0bits>
 800c638:	9900      	ldr	r1, [sp, #0]
 800c63a:	b300      	cbz	r0, 800c67e <__d2b+0x82>
 800c63c:	9a01      	ldr	r2, [sp, #4]
 800c63e:	f1c0 0320 	rsb	r3, r0, #32
 800c642:	fa02 f303 	lsl.w	r3, r2, r3
 800c646:	430b      	orrs	r3, r1
 800c648:	40c2      	lsrs	r2, r0
 800c64a:	6163      	str	r3, [r4, #20]
 800c64c:	9201      	str	r2, [sp, #4]
 800c64e:	9b01      	ldr	r3, [sp, #4]
 800c650:	61a3      	str	r3, [r4, #24]
 800c652:	2b00      	cmp	r3, #0
 800c654:	bf14      	ite	ne
 800c656:	2202      	movne	r2, #2
 800c658:	2201      	moveq	r2, #1
 800c65a:	6122      	str	r2, [r4, #16]
 800c65c:	b1d5      	cbz	r5, 800c694 <__d2b+0x98>
 800c65e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c662:	4405      	add	r5, r0
 800c664:	f8c9 5000 	str.w	r5, [r9]
 800c668:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c66c:	f8c8 0000 	str.w	r0, [r8]
 800c670:	4620      	mov	r0, r4
 800c672:	b003      	add	sp, #12
 800c674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c67c:	e7d5      	b.n	800c62a <__d2b+0x2e>
 800c67e:	6161      	str	r1, [r4, #20]
 800c680:	e7e5      	b.n	800c64e <__d2b+0x52>
 800c682:	a801      	add	r0, sp, #4
 800c684:	f7ff fcde 	bl	800c044 <__lo0bits>
 800c688:	9b01      	ldr	r3, [sp, #4]
 800c68a:	6163      	str	r3, [r4, #20]
 800c68c:	2201      	movs	r2, #1
 800c68e:	6122      	str	r2, [r4, #16]
 800c690:	3020      	adds	r0, #32
 800c692:	e7e3      	b.n	800c65c <__d2b+0x60>
 800c694:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c698:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c69c:	f8c9 0000 	str.w	r0, [r9]
 800c6a0:	6918      	ldr	r0, [r3, #16]
 800c6a2:	f7ff fcaf 	bl	800c004 <__hi0bits>
 800c6a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6aa:	e7df      	b.n	800c66c <__d2b+0x70>
 800c6ac:	0800d2d0 	.word	0x0800d2d0
 800c6b0:	0800d3c0 	.word	0x0800d3c0

0800c6b4 <__ratio>:
 800c6b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	4688      	mov	r8, r1
 800c6ba:	4669      	mov	r1, sp
 800c6bc:	4681      	mov	r9, r0
 800c6be:	f7ff ff4d 	bl	800c55c <__b2d>
 800c6c2:	a901      	add	r1, sp, #4
 800c6c4:	4640      	mov	r0, r8
 800c6c6:	ec55 4b10 	vmov	r4, r5, d0
 800c6ca:	f7ff ff47 	bl	800c55c <__b2d>
 800c6ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c6d6:	eba3 0c02 	sub.w	ip, r3, r2
 800c6da:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c6de:	1a9b      	subs	r3, r3, r2
 800c6e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c6e4:	ec51 0b10 	vmov	r0, r1, d0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bfd6      	itet	le
 800c6ec:	460a      	movle	r2, r1
 800c6ee:	462a      	movgt	r2, r5
 800c6f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6f4:	468b      	mov	fp, r1
 800c6f6:	462f      	mov	r7, r5
 800c6f8:	bfd4      	ite	le
 800c6fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c6fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c702:	4620      	mov	r0, r4
 800c704:	ee10 2a10 	vmov	r2, s0
 800c708:	465b      	mov	r3, fp
 800c70a:	4639      	mov	r1, r7
 800c70c:	f7f4 f89e 	bl	800084c <__aeabi_ddiv>
 800c710:	ec41 0b10 	vmov	d0, r0, r1
 800c714:	b003      	add	sp, #12
 800c716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c71a <__copybits>:
 800c71a:	3901      	subs	r1, #1
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	1149      	asrs	r1, r1, #5
 800c720:	6914      	ldr	r4, [r2, #16]
 800c722:	3101      	adds	r1, #1
 800c724:	f102 0314 	add.w	r3, r2, #20
 800c728:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c72c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c730:	1f05      	subs	r5, r0, #4
 800c732:	42a3      	cmp	r3, r4
 800c734:	d30c      	bcc.n	800c750 <__copybits+0x36>
 800c736:	1aa3      	subs	r3, r4, r2
 800c738:	3b11      	subs	r3, #17
 800c73a:	f023 0303 	bic.w	r3, r3, #3
 800c73e:	3211      	adds	r2, #17
 800c740:	42a2      	cmp	r2, r4
 800c742:	bf88      	it	hi
 800c744:	2300      	movhi	r3, #0
 800c746:	4418      	add	r0, r3
 800c748:	2300      	movs	r3, #0
 800c74a:	4288      	cmp	r0, r1
 800c74c:	d305      	bcc.n	800c75a <__copybits+0x40>
 800c74e:	bd70      	pop	{r4, r5, r6, pc}
 800c750:	f853 6b04 	ldr.w	r6, [r3], #4
 800c754:	f845 6f04 	str.w	r6, [r5, #4]!
 800c758:	e7eb      	b.n	800c732 <__copybits+0x18>
 800c75a:	f840 3b04 	str.w	r3, [r0], #4
 800c75e:	e7f4      	b.n	800c74a <__copybits+0x30>

0800c760 <__any_on>:
 800c760:	f100 0214 	add.w	r2, r0, #20
 800c764:	6900      	ldr	r0, [r0, #16]
 800c766:	114b      	asrs	r3, r1, #5
 800c768:	4298      	cmp	r0, r3
 800c76a:	b510      	push	{r4, lr}
 800c76c:	db11      	blt.n	800c792 <__any_on+0x32>
 800c76e:	dd0a      	ble.n	800c786 <__any_on+0x26>
 800c770:	f011 011f 	ands.w	r1, r1, #31
 800c774:	d007      	beq.n	800c786 <__any_on+0x26>
 800c776:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c77a:	fa24 f001 	lsr.w	r0, r4, r1
 800c77e:	fa00 f101 	lsl.w	r1, r0, r1
 800c782:	428c      	cmp	r4, r1
 800c784:	d10b      	bne.n	800c79e <__any_on+0x3e>
 800c786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d803      	bhi.n	800c796 <__any_on+0x36>
 800c78e:	2000      	movs	r0, #0
 800c790:	bd10      	pop	{r4, pc}
 800c792:	4603      	mov	r3, r0
 800c794:	e7f7      	b.n	800c786 <__any_on+0x26>
 800c796:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c79a:	2900      	cmp	r1, #0
 800c79c:	d0f5      	beq.n	800c78a <__any_on+0x2a>
 800c79e:	2001      	movs	r0, #1
 800c7a0:	e7f6      	b.n	800c790 <__any_on+0x30>

0800c7a2 <_calloc_r>:
 800c7a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7a4:	fba1 2402 	umull	r2, r4, r1, r2
 800c7a8:	b94c      	cbnz	r4, 800c7be <_calloc_r+0x1c>
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	9201      	str	r2, [sp, #4]
 800c7ae:	f7fb fff9 	bl	80087a4 <_malloc_r>
 800c7b2:	9a01      	ldr	r2, [sp, #4]
 800c7b4:	4605      	mov	r5, r0
 800c7b6:	b930      	cbnz	r0, 800c7c6 <_calloc_r+0x24>
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	b003      	add	sp, #12
 800c7bc:	bd30      	pop	{r4, r5, pc}
 800c7be:	220c      	movs	r2, #12
 800c7c0:	6002      	str	r2, [r0, #0]
 800c7c2:	2500      	movs	r5, #0
 800c7c4:	e7f8      	b.n	800c7b8 <_calloc_r+0x16>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	f7fb ff78 	bl	80086bc <memset>
 800c7cc:	e7f4      	b.n	800c7b8 <_calloc_r+0x16>

0800c7ce <__ssputs_r>:
 800c7ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d2:	688e      	ldr	r6, [r1, #8]
 800c7d4:	429e      	cmp	r6, r3
 800c7d6:	4682      	mov	sl, r0
 800c7d8:	460c      	mov	r4, r1
 800c7da:	4690      	mov	r8, r2
 800c7dc:	461f      	mov	r7, r3
 800c7de:	d838      	bhi.n	800c852 <__ssputs_r+0x84>
 800c7e0:	898a      	ldrh	r2, [r1, #12]
 800c7e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7e6:	d032      	beq.n	800c84e <__ssputs_r+0x80>
 800c7e8:	6825      	ldr	r5, [r4, #0]
 800c7ea:	6909      	ldr	r1, [r1, #16]
 800c7ec:	eba5 0901 	sub.w	r9, r5, r1
 800c7f0:	6965      	ldr	r5, [r4, #20]
 800c7f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	444b      	add	r3, r9
 800c7fe:	106d      	asrs	r5, r5, #1
 800c800:	429d      	cmp	r5, r3
 800c802:	bf38      	it	cc
 800c804:	461d      	movcc	r5, r3
 800c806:	0553      	lsls	r3, r2, #21
 800c808:	d531      	bpl.n	800c86e <__ssputs_r+0xa0>
 800c80a:	4629      	mov	r1, r5
 800c80c:	f7fb ffca 	bl	80087a4 <_malloc_r>
 800c810:	4606      	mov	r6, r0
 800c812:	b950      	cbnz	r0, 800c82a <__ssputs_r+0x5c>
 800c814:	230c      	movs	r3, #12
 800c816:	f8ca 3000 	str.w	r3, [sl]
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c820:	81a3      	strh	r3, [r4, #12]
 800c822:	f04f 30ff 	mov.w	r0, #4294967295
 800c826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c82a:	6921      	ldr	r1, [r4, #16]
 800c82c:	464a      	mov	r2, r9
 800c82e:	f7ff fadd 	bl	800bdec <memcpy>
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83c:	81a3      	strh	r3, [r4, #12]
 800c83e:	6126      	str	r6, [r4, #16]
 800c840:	6165      	str	r5, [r4, #20]
 800c842:	444e      	add	r6, r9
 800c844:	eba5 0509 	sub.w	r5, r5, r9
 800c848:	6026      	str	r6, [r4, #0]
 800c84a:	60a5      	str	r5, [r4, #8]
 800c84c:	463e      	mov	r6, r7
 800c84e:	42be      	cmp	r6, r7
 800c850:	d900      	bls.n	800c854 <__ssputs_r+0x86>
 800c852:	463e      	mov	r6, r7
 800c854:	6820      	ldr	r0, [r4, #0]
 800c856:	4632      	mov	r2, r6
 800c858:	4641      	mov	r1, r8
 800c85a:	f000 fa07 	bl	800cc6c <memmove>
 800c85e:	68a3      	ldr	r3, [r4, #8]
 800c860:	1b9b      	subs	r3, r3, r6
 800c862:	60a3      	str	r3, [r4, #8]
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	4433      	add	r3, r6
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	2000      	movs	r0, #0
 800c86c:	e7db      	b.n	800c826 <__ssputs_r+0x58>
 800c86e:	462a      	mov	r2, r5
 800c870:	f000 fa16 	bl	800cca0 <_realloc_r>
 800c874:	4606      	mov	r6, r0
 800c876:	2800      	cmp	r0, #0
 800c878:	d1e1      	bne.n	800c83e <__ssputs_r+0x70>
 800c87a:	6921      	ldr	r1, [r4, #16]
 800c87c:	4650      	mov	r0, sl
 800c87e:	f7fb ff25 	bl	80086cc <_free_r>
 800c882:	e7c7      	b.n	800c814 <__ssputs_r+0x46>

0800c884 <_svfiprintf_r>:
 800c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	4698      	mov	r8, r3
 800c88a:	898b      	ldrh	r3, [r1, #12]
 800c88c:	061b      	lsls	r3, r3, #24
 800c88e:	b09d      	sub	sp, #116	; 0x74
 800c890:	4607      	mov	r7, r0
 800c892:	460d      	mov	r5, r1
 800c894:	4614      	mov	r4, r2
 800c896:	d50e      	bpl.n	800c8b6 <_svfiprintf_r+0x32>
 800c898:	690b      	ldr	r3, [r1, #16]
 800c89a:	b963      	cbnz	r3, 800c8b6 <_svfiprintf_r+0x32>
 800c89c:	2140      	movs	r1, #64	; 0x40
 800c89e:	f7fb ff81 	bl	80087a4 <_malloc_r>
 800c8a2:	6028      	str	r0, [r5, #0]
 800c8a4:	6128      	str	r0, [r5, #16]
 800c8a6:	b920      	cbnz	r0, 800c8b2 <_svfiprintf_r+0x2e>
 800c8a8:	230c      	movs	r3, #12
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b0:	e0d1      	b.n	800ca56 <_svfiprintf_r+0x1d2>
 800c8b2:	2340      	movs	r3, #64	; 0x40
 800c8b4:	616b      	str	r3, [r5, #20]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ba:	2320      	movs	r3, #32
 800c8bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8c4:	2330      	movs	r3, #48	; 0x30
 800c8c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca70 <_svfiprintf_r+0x1ec>
 800c8ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8ce:	f04f 0901 	mov.w	r9, #1
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8da:	b10a      	cbz	r2, 800c8e0 <_svfiprintf_r+0x5c>
 800c8dc:	2a25      	cmp	r2, #37	; 0x25
 800c8de:	d1f9      	bne.n	800c8d4 <_svfiprintf_r+0x50>
 800c8e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c8e4:	d00b      	beq.n	800c8fe <_svfiprintf_r+0x7a>
 800c8e6:	465b      	mov	r3, fp
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff ff6e 	bl	800c7ce <__ssputs_r>
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	f000 80aa 	beq.w	800ca4c <_svfiprintf_r+0x1c8>
 800c8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8fa:	445a      	add	r2, fp
 800c8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80a2 	beq.w	800ca4c <_svfiprintf_r+0x1c8>
 800c908:	2300      	movs	r3, #0
 800c90a:	f04f 32ff 	mov.w	r2, #4294967295
 800c90e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c912:	f10a 0a01 	add.w	sl, sl, #1
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	9307      	str	r3, [sp, #28]
 800c91a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c91e:	931a      	str	r3, [sp, #104]	; 0x68
 800c920:	4654      	mov	r4, sl
 800c922:	2205      	movs	r2, #5
 800c924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c928:	4851      	ldr	r0, [pc, #324]	; (800ca70 <_svfiprintf_r+0x1ec>)
 800c92a:	f7f3 fc59 	bl	80001e0 <memchr>
 800c92e:	9a04      	ldr	r2, [sp, #16]
 800c930:	b9d8      	cbnz	r0, 800c96a <_svfiprintf_r+0xe6>
 800c932:	06d0      	lsls	r0, r2, #27
 800c934:	bf44      	itt	mi
 800c936:	2320      	movmi	r3, #32
 800c938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c93c:	0711      	lsls	r1, r2, #28
 800c93e:	bf44      	itt	mi
 800c940:	232b      	movmi	r3, #43	; 0x2b
 800c942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c946:	f89a 3000 	ldrb.w	r3, [sl]
 800c94a:	2b2a      	cmp	r3, #42	; 0x2a
 800c94c:	d015      	beq.n	800c97a <_svfiprintf_r+0xf6>
 800c94e:	9a07      	ldr	r2, [sp, #28]
 800c950:	4654      	mov	r4, sl
 800c952:	2000      	movs	r0, #0
 800c954:	f04f 0c0a 	mov.w	ip, #10
 800c958:	4621      	mov	r1, r4
 800c95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c95e:	3b30      	subs	r3, #48	; 0x30
 800c960:	2b09      	cmp	r3, #9
 800c962:	d94e      	bls.n	800ca02 <_svfiprintf_r+0x17e>
 800c964:	b1b0      	cbz	r0, 800c994 <_svfiprintf_r+0x110>
 800c966:	9207      	str	r2, [sp, #28]
 800c968:	e014      	b.n	800c994 <_svfiprintf_r+0x110>
 800c96a:	eba0 0308 	sub.w	r3, r0, r8
 800c96e:	fa09 f303 	lsl.w	r3, r9, r3
 800c972:	4313      	orrs	r3, r2
 800c974:	9304      	str	r3, [sp, #16]
 800c976:	46a2      	mov	sl, r4
 800c978:	e7d2      	b.n	800c920 <_svfiprintf_r+0x9c>
 800c97a:	9b03      	ldr	r3, [sp, #12]
 800c97c:	1d19      	adds	r1, r3, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	9103      	str	r1, [sp, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	bfbb      	ittet	lt
 800c986:	425b      	neglt	r3, r3
 800c988:	f042 0202 	orrlt.w	r2, r2, #2
 800c98c:	9307      	strge	r3, [sp, #28]
 800c98e:	9307      	strlt	r3, [sp, #28]
 800c990:	bfb8      	it	lt
 800c992:	9204      	strlt	r2, [sp, #16]
 800c994:	7823      	ldrb	r3, [r4, #0]
 800c996:	2b2e      	cmp	r3, #46	; 0x2e
 800c998:	d10c      	bne.n	800c9b4 <_svfiprintf_r+0x130>
 800c99a:	7863      	ldrb	r3, [r4, #1]
 800c99c:	2b2a      	cmp	r3, #42	; 0x2a
 800c99e:	d135      	bne.n	800ca0c <_svfiprintf_r+0x188>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	1d1a      	adds	r2, r3, #4
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	9203      	str	r2, [sp, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	bfb8      	it	lt
 800c9ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9b0:	3402      	adds	r4, #2
 800c9b2:	9305      	str	r3, [sp, #20]
 800c9b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca80 <_svfiprintf_r+0x1fc>
 800c9b8:	7821      	ldrb	r1, [r4, #0]
 800c9ba:	2203      	movs	r2, #3
 800c9bc:	4650      	mov	r0, sl
 800c9be:	f7f3 fc0f 	bl	80001e0 <memchr>
 800c9c2:	b140      	cbz	r0, 800c9d6 <_svfiprintf_r+0x152>
 800c9c4:	2340      	movs	r3, #64	; 0x40
 800c9c6:	eba0 000a 	sub.w	r0, r0, sl
 800c9ca:	fa03 f000 	lsl.w	r0, r3, r0
 800c9ce:	9b04      	ldr	r3, [sp, #16]
 800c9d0:	4303      	orrs	r3, r0
 800c9d2:	3401      	adds	r4, #1
 800c9d4:	9304      	str	r3, [sp, #16]
 800c9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9da:	4826      	ldr	r0, [pc, #152]	; (800ca74 <_svfiprintf_r+0x1f0>)
 800c9dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9e0:	2206      	movs	r2, #6
 800c9e2:	f7f3 fbfd 	bl	80001e0 <memchr>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d038      	beq.n	800ca5c <_svfiprintf_r+0x1d8>
 800c9ea:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <_svfiprintf_r+0x1f4>)
 800c9ec:	bb1b      	cbnz	r3, 800ca36 <_svfiprintf_r+0x1b2>
 800c9ee:	9b03      	ldr	r3, [sp, #12]
 800c9f0:	3307      	adds	r3, #7
 800c9f2:	f023 0307 	bic.w	r3, r3, #7
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	9303      	str	r3, [sp, #12]
 800c9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fc:	4433      	add	r3, r6
 800c9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800ca00:	e767      	b.n	800c8d2 <_svfiprintf_r+0x4e>
 800ca02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca06:	460c      	mov	r4, r1
 800ca08:	2001      	movs	r0, #1
 800ca0a:	e7a5      	b.n	800c958 <_svfiprintf_r+0xd4>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	3401      	adds	r4, #1
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	4619      	mov	r1, r3
 800ca14:	f04f 0c0a 	mov.w	ip, #10
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca1e:	3a30      	subs	r2, #48	; 0x30
 800ca20:	2a09      	cmp	r2, #9
 800ca22:	d903      	bls.n	800ca2c <_svfiprintf_r+0x1a8>
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d0c5      	beq.n	800c9b4 <_svfiprintf_r+0x130>
 800ca28:	9105      	str	r1, [sp, #20]
 800ca2a:	e7c3      	b.n	800c9b4 <_svfiprintf_r+0x130>
 800ca2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca30:	4604      	mov	r4, r0
 800ca32:	2301      	movs	r3, #1
 800ca34:	e7f0      	b.n	800ca18 <_svfiprintf_r+0x194>
 800ca36:	ab03      	add	r3, sp, #12
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	4b0f      	ldr	r3, [pc, #60]	; (800ca7c <_svfiprintf_r+0x1f8>)
 800ca3e:	a904      	add	r1, sp, #16
 800ca40:	4638      	mov	r0, r7
 800ca42:	f7fb ffc3 	bl	80089cc <_printf_float>
 800ca46:	1c42      	adds	r2, r0, #1
 800ca48:	4606      	mov	r6, r0
 800ca4a:	d1d6      	bne.n	800c9fa <_svfiprintf_r+0x176>
 800ca4c:	89ab      	ldrh	r3, [r5, #12]
 800ca4e:	065b      	lsls	r3, r3, #25
 800ca50:	f53f af2c 	bmi.w	800c8ac <_svfiprintf_r+0x28>
 800ca54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca56:	b01d      	add	sp, #116	; 0x74
 800ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5c:	ab03      	add	r3, sp, #12
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	462a      	mov	r2, r5
 800ca62:	4b06      	ldr	r3, [pc, #24]	; (800ca7c <_svfiprintf_r+0x1f8>)
 800ca64:	a904      	add	r1, sp, #16
 800ca66:	4638      	mov	r0, r7
 800ca68:	f7fc fa54 	bl	8008f14 <_printf_i>
 800ca6c:	e7eb      	b.n	800ca46 <_svfiprintf_r+0x1c2>
 800ca6e:	bf00      	nop
 800ca70:	0800d51c 	.word	0x0800d51c
 800ca74:	0800d526 	.word	0x0800d526
 800ca78:	080089cd 	.word	0x080089cd
 800ca7c:	0800c7cf 	.word	0x0800c7cf
 800ca80:	0800d522 	.word	0x0800d522
 800ca84:	00000000 	.word	0x00000000

0800ca88 <nan>:
 800ca88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ca90 <nan+0x8>
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	00000000 	.word	0x00000000
 800ca94:	7ff80000 	.word	0x7ff80000

0800ca98 <__sread>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	460c      	mov	r4, r1
 800ca9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800caa0:	f000 fa86 	bl	800cfb0 <_read_r>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	bfab      	itete	ge
 800caa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800caaa:	89a3      	ldrhlt	r3, [r4, #12]
 800caac:	181b      	addge	r3, r3, r0
 800caae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cab2:	bfac      	ite	ge
 800cab4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cab6:	81a3      	strhlt	r3, [r4, #12]
 800cab8:	bd10      	pop	{r4, pc}

0800caba <__swrite>:
 800caba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cabe:	461f      	mov	r7, r3
 800cac0:	898b      	ldrh	r3, [r1, #12]
 800cac2:	05db      	lsls	r3, r3, #23
 800cac4:	4605      	mov	r5, r0
 800cac6:	460c      	mov	r4, r1
 800cac8:	4616      	mov	r6, r2
 800caca:	d505      	bpl.n	800cad8 <__swrite+0x1e>
 800cacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad0:	2302      	movs	r3, #2
 800cad2:	2200      	movs	r2, #0
 800cad4:	f000 f8b8 	bl	800cc48 <_lseek_r>
 800cad8:	89a3      	ldrh	r3, [r4, #12]
 800cada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cae2:	81a3      	strh	r3, [r4, #12]
 800cae4:	4632      	mov	r2, r6
 800cae6:	463b      	mov	r3, r7
 800cae8:	4628      	mov	r0, r5
 800caea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caee:	f000 b837 	b.w	800cb60 <_write_r>

0800caf2 <__sseek>:
 800caf2:	b510      	push	{r4, lr}
 800caf4:	460c      	mov	r4, r1
 800caf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cafa:	f000 f8a5 	bl	800cc48 <_lseek_r>
 800cafe:	1c43      	adds	r3, r0, #1
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	bf15      	itete	ne
 800cb04:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb0e:	81a3      	strheq	r3, [r4, #12]
 800cb10:	bf18      	it	ne
 800cb12:	81a3      	strhne	r3, [r4, #12]
 800cb14:	bd10      	pop	{r4, pc}

0800cb16 <__sclose>:
 800cb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb1a:	f000 b851 	b.w	800cbc0 <_close_r>

0800cb1e <strncmp>:
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	b17a      	cbz	r2, 800cb42 <strncmp+0x24>
 800cb22:	4603      	mov	r3, r0
 800cb24:	3901      	subs	r1, #1
 800cb26:	1884      	adds	r4, r0, r2
 800cb28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cb2c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cb30:	4290      	cmp	r0, r2
 800cb32:	d101      	bne.n	800cb38 <strncmp+0x1a>
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	d101      	bne.n	800cb3c <strncmp+0x1e>
 800cb38:	1a80      	subs	r0, r0, r2
 800cb3a:	bd10      	pop	{r4, pc}
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d1f3      	bne.n	800cb28 <strncmp+0xa>
 800cb40:	e7fa      	b.n	800cb38 <strncmp+0x1a>
 800cb42:	4610      	mov	r0, r2
 800cb44:	e7f9      	b.n	800cb3a <strncmp+0x1c>

0800cb46 <__ascii_wctomb>:
 800cb46:	b149      	cbz	r1, 800cb5c <__ascii_wctomb+0x16>
 800cb48:	2aff      	cmp	r2, #255	; 0xff
 800cb4a:	bf85      	ittet	hi
 800cb4c:	238a      	movhi	r3, #138	; 0x8a
 800cb4e:	6003      	strhi	r3, [r0, #0]
 800cb50:	700a      	strbls	r2, [r1, #0]
 800cb52:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb56:	bf98      	it	ls
 800cb58:	2001      	movls	r0, #1
 800cb5a:	4770      	bx	lr
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	4770      	bx	lr

0800cb60 <_write_r>:
 800cb60:	b538      	push	{r3, r4, r5, lr}
 800cb62:	4d07      	ldr	r5, [pc, #28]	; (800cb80 <_write_r+0x20>)
 800cb64:	4604      	mov	r4, r0
 800cb66:	4608      	mov	r0, r1
 800cb68:	4611      	mov	r1, r2
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	602a      	str	r2, [r5, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	f7f4 fa69 	bl	8001046 <_write>
 800cb74:	1c43      	adds	r3, r0, #1
 800cb76:	d102      	bne.n	800cb7e <_write_r+0x1e>
 800cb78:	682b      	ldr	r3, [r5, #0]
 800cb7a:	b103      	cbz	r3, 800cb7e <_write_r+0x1e>
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	bd38      	pop	{r3, r4, r5, pc}
 800cb80:	20000a04 	.word	0x20000a04

0800cb84 <__assert_func>:
 800cb84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb86:	4614      	mov	r4, r2
 800cb88:	461a      	mov	r2, r3
 800cb8a:	4b09      	ldr	r3, [pc, #36]	; (800cbb0 <__assert_func+0x2c>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	4605      	mov	r5, r0
 800cb90:	68d8      	ldr	r0, [r3, #12]
 800cb92:	b14c      	cbz	r4, 800cba8 <__assert_func+0x24>
 800cb94:	4b07      	ldr	r3, [pc, #28]	; (800cbb4 <__assert_func+0x30>)
 800cb96:	9100      	str	r1, [sp, #0]
 800cb98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb9c:	4906      	ldr	r1, [pc, #24]	; (800cbb8 <__assert_func+0x34>)
 800cb9e:	462b      	mov	r3, r5
 800cba0:	f000 f81e 	bl	800cbe0 <fiprintf>
 800cba4:	f000 fa16 	bl	800cfd4 <abort>
 800cba8:	4b04      	ldr	r3, [pc, #16]	; (800cbbc <__assert_func+0x38>)
 800cbaa:	461c      	mov	r4, r3
 800cbac:	e7f3      	b.n	800cb96 <__assert_func+0x12>
 800cbae:	bf00      	nop
 800cbb0:	2000002c 	.word	0x2000002c
 800cbb4:	0800d52d 	.word	0x0800d52d
 800cbb8:	0800d53a 	.word	0x0800d53a
 800cbbc:	0800d568 	.word	0x0800d568

0800cbc0 <_close_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4d06      	ldr	r5, [pc, #24]	; (800cbdc <_close_r+0x1c>)
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	4608      	mov	r0, r1
 800cbca:	602b      	str	r3, [r5, #0]
 800cbcc:	f7f4 fe21 	bl	8001812 <_close>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d102      	bne.n	800cbda <_close_r+0x1a>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	b103      	cbz	r3, 800cbda <_close_r+0x1a>
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
 800cbdc:	20000a04 	.word	0x20000a04

0800cbe0 <fiprintf>:
 800cbe0:	b40e      	push	{r1, r2, r3}
 800cbe2:	b503      	push	{r0, r1, lr}
 800cbe4:	4601      	mov	r1, r0
 800cbe6:	ab03      	add	r3, sp, #12
 800cbe8:	4805      	ldr	r0, [pc, #20]	; (800cc00 <fiprintf+0x20>)
 800cbea:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbee:	6800      	ldr	r0, [r0, #0]
 800cbf0:	9301      	str	r3, [sp, #4]
 800cbf2:	f000 f8ad 	bl	800cd50 <_vfiprintf_r>
 800cbf6:	b002      	add	sp, #8
 800cbf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbfc:	b003      	add	sp, #12
 800cbfe:	4770      	bx	lr
 800cc00:	2000002c 	.word	0x2000002c

0800cc04 <_fstat_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d07      	ldr	r5, [pc, #28]	; (800cc24 <_fstat_r+0x20>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	4611      	mov	r1, r2
 800cc10:	602b      	str	r3, [r5, #0]
 800cc12:	f7f4 fe0a 	bl	800182a <_fstat>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d102      	bne.n	800cc20 <_fstat_r+0x1c>
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	b103      	cbz	r3, 800cc20 <_fstat_r+0x1c>
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	bd38      	pop	{r3, r4, r5, pc}
 800cc22:	bf00      	nop
 800cc24:	20000a04 	.word	0x20000a04

0800cc28 <_isatty_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d06      	ldr	r5, [pc, #24]	; (800cc44 <_isatty_r+0x1c>)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4608      	mov	r0, r1
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	f7f4 fe09 	bl	800184a <_isatty>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_isatty_r+0x1a>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_isatty_r+0x1a>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	20000a04 	.word	0x20000a04

0800cc48 <_lseek_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4d07      	ldr	r5, [pc, #28]	; (800cc68 <_lseek_r+0x20>)
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	4608      	mov	r0, r1
 800cc50:	4611      	mov	r1, r2
 800cc52:	2200      	movs	r2, #0
 800cc54:	602a      	str	r2, [r5, #0]
 800cc56:	461a      	mov	r2, r3
 800cc58:	f7f4 fe02 	bl	8001860 <_lseek>
 800cc5c:	1c43      	adds	r3, r0, #1
 800cc5e:	d102      	bne.n	800cc66 <_lseek_r+0x1e>
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	b103      	cbz	r3, 800cc66 <_lseek_r+0x1e>
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	bd38      	pop	{r3, r4, r5, pc}
 800cc68:	20000a04 	.word	0x20000a04

0800cc6c <memmove>:
 800cc6c:	4288      	cmp	r0, r1
 800cc6e:	b510      	push	{r4, lr}
 800cc70:	eb01 0402 	add.w	r4, r1, r2
 800cc74:	d902      	bls.n	800cc7c <memmove+0x10>
 800cc76:	4284      	cmp	r4, r0
 800cc78:	4623      	mov	r3, r4
 800cc7a:	d807      	bhi.n	800cc8c <memmove+0x20>
 800cc7c:	1e43      	subs	r3, r0, #1
 800cc7e:	42a1      	cmp	r1, r4
 800cc80:	d008      	beq.n	800cc94 <memmove+0x28>
 800cc82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc8a:	e7f8      	b.n	800cc7e <memmove+0x12>
 800cc8c:	4402      	add	r2, r0
 800cc8e:	4601      	mov	r1, r0
 800cc90:	428a      	cmp	r2, r1
 800cc92:	d100      	bne.n	800cc96 <memmove+0x2a>
 800cc94:	bd10      	pop	{r4, pc}
 800cc96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc9e:	e7f7      	b.n	800cc90 <memmove+0x24>

0800cca0 <_realloc_r>:
 800cca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca4:	4680      	mov	r8, r0
 800cca6:	4614      	mov	r4, r2
 800cca8:	460e      	mov	r6, r1
 800ccaa:	b921      	cbnz	r1, 800ccb6 <_realloc_r+0x16>
 800ccac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb0:	4611      	mov	r1, r2
 800ccb2:	f7fb bd77 	b.w	80087a4 <_malloc_r>
 800ccb6:	b92a      	cbnz	r2, 800ccc4 <_realloc_r+0x24>
 800ccb8:	f7fb fd08 	bl	80086cc <_free_r>
 800ccbc:	4625      	mov	r5, r4
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc4:	f000 f98d 	bl	800cfe2 <_malloc_usable_size_r>
 800ccc8:	4284      	cmp	r4, r0
 800ccca:	4607      	mov	r7, r0
 800cccc:	d802      	bhi.n	800ccd4 <_realloc_r+0x34>
 800ccce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccd2:	d812      	bhi.n	800ccfa <_realloc_r+0x5a>
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	4640      	mov	r0, r8
 800ccd8:	f7fb fd64 	bl	80087a4 <_malloc_r>
 800ccdc:	4605      	mov	r5, r0
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0ed      	beq.n	800ccbe <_realloc_r+0x1e>
 800cce2:	42bc      	cmp	r4, r7
 800cce4:	4622      	mov	r2, r4
 800cce6:	4631      	mov	r1, r6
 800cce8:	bf28      	it	cs
 800ccea:	463a      	movcs	r2, r7
 800ccec:	f7ff f87e 	bl	800bdec <memcpy>
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4640      	mov	r0, r8
 800ccf4:	f7fb fcea 	bl	80086cc <_free_r>
 800ccf8:	e7e1      	b.n	800ccbe <_realloc_r+0x1e>
 800ccfa:	4635      	mov	r5, r6
 800ccfc:	e7df      	b.n	800ccbe <_realloc_r+0x1e>

0800ccfe <__sfputc_r>:
 800ccfe:	6893      	ldr	r3, [r2, #8]
 800cd00:	3b01      	subs	r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	b410      	push	{r4}
 800cd06:	6093      	str	r3, [r2, #8]
 800cd08:	da08      	bge.n	800cd1c <__sfputc_r+0x1e>
 800cd0a:	6994      	ldr	r4, [r2, #24]
 800cd0c:	42a3      	cmp	r3, r4
 800cd0e:	db01      	blt.n	800cd14 <__sfputc_r+0x16>
 800cd10:	290a      	cmp	r1, #10
 800cd12:	d103      	bne.n	800cd1c <__sfputc_r+0x1e>
 800cd14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd18:	f7fd bb8a 	b.w	800a430 <__swbuf_r>
 800cd1c:	6813      	ldr	r3, [r2, #0]
 800cd1e:	1c58      	adds	r0, r3, #1
 800cd20:	6010      	str	r0, [r2, #0]
 800cd22:	7019      	strb	r1, [r3, #0]
 800cd24:	4608      	mov	r0, r1
 800cd26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <__sfputs_r>:
 800cd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2e:	4606      	mov	r6, r0
 800cd30:	460f      	mov	r7, r1
 800cd32:	4614      	mov	r4, r2
 800cd34:	18d5      	adds	r5, r2, r3
 800cd36:	42ac      	cmp	r4, r5
 800cd38:	d101      	bne.n	800cd3e <__sfputs_r+0x12>
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	e007      	b.n	800cd4e <__sfputs_r+0x22>
 800cd3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd42:	463a      	mov	r2, r7
 800cd44:	4630      	mov	r0, r6
 800cd46:	f7ff ffda 	bl	800ccfe <__sfputc_r>
 800cd4a:	1c43      	adds	r3, r0, #1
 800cd4c:	d1f3      	bne.n	800cd36 <__sfputs_r+0xa>
 800cd4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd50 <_vfiprintf_r>:
 800cd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	460d      	mov	r5, r1
 800cd56:	b09d      	sub	sp, #116	; 0x74
 800cd58:	4614      	mov	r4, r2
 800cd5a:	4698      	mov	r8, r3
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	b118      	cbz	r0, 800cd68 <_vfiprintf_r+0x18>
 800cd60:	6983      	ldr	r3, [r0, #24]
 800cd62:	b90b      	cbnz	r3, 800cd68 <_vfiprintf_r+0x18>
 800cd64:	f7fe fbb8 	bl	800b4d8 <__sinit>
 800cd68:	4b89      	ldr	r3, [pc, #548]	; (800cf90 <_vfiprintf_r+0x240>)
 800cd6a:	429d      	cmp	r5, r3
 800cd6c:	d11b      	bne.n	800cda6 <_vfiprintf_r+0x56>
 800cd6e:	6875      	ldr	r5, [r6, #4]
 800cd70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd72:	07d9      	lsls	r1, r3, #31
 800cd74:	d405      	bmi.n	800cd82 <_vfiprintf_r+0x32>
 800cd76:	89ab      	ldrh	r3, [r5, #12]
 800cd78:	059a      	lsls	r2, r3, #22
 800cd7a:	d402      	bmi.n	800cd82 <_vfiprintf_r+0x32>
 800cd7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd7e:	f7fe ffbc 	bl	800bcfa <__retarget_lock_acquire_recursive>
 800cd82:	89ab      	ldrh	r3, [r5, #12]
 800cd84:	071b      	lsls	r3, r3, #28
 800cd86:	d501      	bpl.n	800cd8c <_vfiprintf_r+0x3c>
 800cd88:	692b      	ldr	r3, [r5, #16]
 800cd8a:	b9eb      	cbnz	r3, 800cdc8 <_vfiprintf_r+0x78>
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	4630      	mov	r0, r6
 800cd90:	f7fd fba0 	bl	800a4d4 <__swsetup_r>
 800cd94:	b1c0      	cbz	r0, 800cdc8 <_vfiprintf_r+0x78>
 800cd96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd98:	07dc      	lsls	r4, r3, #31
 800cd9a:	d50e      	bpl.n	800cdba <_vfiprintf_r+0x6a>
 800cd9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cda0:	b01d      	add	sp, #116	; 0x74
 800cda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda6:	4b7b      	ldr	r3, [pc, #492]	; (800cf94 <_vfiprintf_r+0x244>)
 800cda8:	429d      	cmp	r5, r3
 800cdaa:	d101      	bne.n	800cdb0 <_vfiprintf_r+0x60>
 800cdac:	68b5      	ldr	r5, [r6, #8]
 800cdae:	e7df      	b.n	800cd70 <_vfiprintf_r+0x20>
 800cdb0:	4b79      	ldr	r3, [pc, #484]	; (800cf98 <_vfiprintf_r+0x248>)
 800cdb2:	429d      	cmp	r5, r3
 800cdb4:	bf08      	it	eq
 800cdb6:	68f5      	ldreq	r5, [r6, #12]
 800cdb8:	e7da      	b.n	800cd70 <_vfiprintf_r+0x20>
 800cdba:	89ab      	ldrh	r3, [r5, #12]
 800cdbc:	0598      	lsls	r0, r3, #22
 800cdbe:	d4ed      	bmi.n	800cd9c <_vfiprintf_r+0x4c>
 800cdc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdc2:	f7fe ff9b 	bl	800bcfc <__retarget_lock_release_recursive>
 800cdc6:	e7e9      	b.n	800cd9c <_vfiprintf_r+0x4c>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	9309      	str	r3, [sp, #36]	; 0x24
 800cdcc:	2320      	movs	r3, #32
 800cdce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdd6:	2330      	movs	r3, #48	; 0x30
 800cdd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cf9c <_vfiprintf_r+0x24c>
 800cddc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cde0:	f04f 0901 	mov.w	r9, #1
 800cde4:	4623      	mov	r3, r4
 800cde6:	469a      	mov	sl, r3
 800cde8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdec:	b10a      	cbz	r2, 800cdf2 <_vfiprintf_r+0xa2>
 800cdee:	2a25      	cmp	r2, #37	; 0x25
 800cdf0:	d1f9      	bne.n	800cde6 <_vfiprintf_r+0x96>
 800cdf2:	ebba 0b04 	subs.w	fp, sl, r4
 800cdf6:	d00b      	beq.n	800ce10 <_vfiprintf_r+0xc0>
 800cdf8:	465b      	mov	r3, fp
 800cdfa:	4622      	mov	r2, r4
 800cdfc:	4629      	mov	r1, r5
 800cdfe:	4630      	mov	r0, r6
 800ce00:	f7ff ff94 	bl	800cd2c <__sfputs_r>
 800ce04:	3001      	adds	r0, #1
 800ce06:	f000 80aa 	beq.w	800cf5e <_vfiprintf_r+0x20e>
 800ce0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce0c:	445a      	add	r2, fp
 800ce0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ce10:	f89a 3000 	ldrb.w	r3, [sl]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f000 80a2 	beq.w	800cf5e <_vfiprintf_r+0x20e>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce24:	f10a 0a01 	add.w	sl, sl, #1
 800ce28:	9304      	str	r3, [sp, #16]
 800ce2a:	9307      	str	r3, [sp, #28]
 800ce2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce30:	931a      	str	r3, [sp, #104]	; 0x68
 800ce32:	4654      	mov	r4, sl
 800ce34:	2205      	movs	r2, #5
 800ce36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce3a:	4858      	ldr	r0, [pc, #352]	; (800cf9c <_vfiprintf_r+0x24c>)
 800ce3c:	f7f3 f9d0 	bl	80001e0 <memchr>
 800ce40:	9a04      	ldr	r2, [sp, #16]
 800ce42:	b9d8      	cbnz	r0, 800ce7c <_vfiprintf_r+0x12c>
 800ce44:	06d1      	lsls	r1, r2, #27
 800ce46:	bf44      	itt	mi
 800ce48:	2320      	movmi	r3, #32
 800ce4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce4e:	0713      	lsls	r3, r2, #28
 800ce50:	bf44      	itt	mi
 800ce52:	232b      	movmi	r3, #43	; 0x2b
 800ce54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce58:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce5e:	d015      	beq.n	800ce8c <_vfiprintf_r+0x13c>
 800ce60:	9a07      	ldr	r2, [sp, #28]
 800ce62:	4654      	mov	r4, sl
 800ce64:	2000      	movs	r0, #0
 800ce66:	f04f 0c0a 	mov.w	ip, #10
 800ce6a:	4621      	mov	r1, r4
 800ce6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce70:	3b30      	subs	r3, #48	; 0x30
 800ce72:	2b09      	cmp	r3, #9
 800ce74:	d94e      	bls.n	800cf14 <_vfiprintf_r+0x1c4>
 800ce76:	b1b0      	cbz	r0, 800cea6 <_vfiprintf_r+0x156>
 800ce78:	9207      	str	r2, [sp, #28]
 800ce7a:	e014      	b.n	800cea6 <_vfiprintf_r+0x156>
 800ce7c:	eba0 0308 	sub.w	r3, r0, r8
 800ce80:	fa09 f303 	lsl.w	r3, r9, r3
 800ce84:	4313      	orrs	r3, r2
 800ce86:	9304      	str	r3, [sp, #16]
 800ce88:	46a2      	mov	sl, r4
 800ce8a:	e7d2      	b.n	800ce32 <_vfiprintf_r+0xe2>
 800ce8c:	9b03      	ldr	r3, [sp, #12]
 800ce8e:	1d19      	adds	r1, r3, #4
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	9103      	str	r1, [sp, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bfbb      	ittet	lt
 800ce98:	425b      	neglt	r3, r3
 800ce9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ce9e:	9307      	strge	r3, [sp, #28]
 800cea0:	9307      	strlt	r3, [sp, #28]
 800cea2:	bfb8      	it	lt
 800cea4:	9204      	strlt	r2, [sp, #16]
 800cea6:	7823      	ldrb	r3, [r4, #0]
 800cea8:	2b2e      	cmp	r3, #46	; 0x2e
 800ceaa:	d10c      	bne.n	800cec6 <_vfiprintf_r+0x176>
 800ceac:	7863      	ldrb	r3, [r4, #1]
 800ceae:	2b2a      	cmp	r3, #42	; 0x2a
 800ceb0:	d135      	bne.n	800cf1e <_vfiprintf_r+0x1ce>
 800ceb2:	9b03      	ldr	r3, [sp, #12]
 800ceb4:	1d1a      	adds	r2, r3, #4
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	9203      	str	r2, [sp, #12]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	bfb8      	it	lt
 800cebe:	f04f 33ff 	movlt.w	r3, #4294967295
 800cec2:	3402      	adds	r4, #2
 800cec4:	9305      	str	r3, [sp, #20]
 800cec6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cfac <_vfiprintf_r+0x25c>
 800ceca:	7821      	ldrb	r1, [r4, #0]
 800cecc:	2203      	movs	r2, #3
 800cece:	4650      	mov	r0, sl
 800ced0:	f7f3 f986 	bl	80001e0 <memchr>
 800ced4:	b140      	cbz	r0, 800cee8 <_vfiprintf_r+0x198>
 800ced6:	2340      	movs	r3, #64	; 0x40
 800ced8:	eba0 000a 	sub.w	r0, r0, sl
 800cedc:	fa03 f000 	lsl.w	r0, r3, r0
 800cee0:	9b04      	ldr	r3, [sp, #16]
 800cee2:	4303      	orrs	r3, r0
 800cee4:	3401      	adds	r4, #1
 800cee6:	9304      	str	r3, [sp, #16]
 800cee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceec:	482c      	ldr	r0, [pc, #176]	; (800cfa0 <_vfiprintf_r+0x250>)
 800ceee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cef2:	2206      	movs	r2, #6
 800cef4:	f7f3 f974 	bl	80001e0 <memchr>
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d03f      	beq.n	800cf7c <_vfiprintf_r+0x22c>
 800cefc:	4b29      	ldr	r3, [pc, #164]	; (800cfa4 <_vfiprintf_r+0x254>)
 800cefe:	bb1b      	cbnz	r3, 800cf48 <_vfiprintf_r+0x1f8>
 800cf00:	9b03      	ldr	r3, [sp, #12]
 800cf02:	3307      	adds	r3, #7
 800cf04:	f023 0307 	bic.w	r3, r3, #7
 800cf08:	3308      	adds	r3, #8
 800cf0a:	9303      	str	r3, [sp, #12]
 800cf0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf0e:	443b      	add	r3, r7
 800cf10:	9309      	str	r3, [sp, #36]	; 0x24
 800cf12:	e767      	b.n	800cde4 <_vfiprintf_r+0x94>
 800cf14:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf18:	460c      	mov	r4, r1
 800cf1a:	2001      	movs	r0, #1
 800cf1c:	e7a5      	b.n	800ce6a <_vfiprintf_r+0x11a>
 800cf1e:	2300      	movs	r3, #0
 800cf20:	3401      	adds	r4, #1
 800cf22:	9305      	str	r3, [sp, #20]
 800cf24:	4619      	mov	r1, r3
 800cf26:	f04f 0c0a 	mov.w	ip, #10
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf30:	3a30      	subs	r2, #48	; 0x30
 800cf32:	2a09      	cmp	r2, #9
 800cf34:	d903      	bls.n	800cf3e <_vfiprintf_r+0x1ee>
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0c5      	beq.n	800cec6 <_vfiprintf_r+0x176>
 800cf3a:	9105      	str	r1, [sp, #20]
 800cf3c:	e7c3      	b.n	800cec6 <_vfiprintf_r+0x176>
 800cf3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf42:	4604      	mov	r4, r0
 800cf44:	2301      	movs	r3, #1
 800cf46:	e7f0      	b.n	800cf2a <_vfiprintf_r+0x1da>
 800cf48:	ab03      	add	r3, sp, #12
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	462a      	mov	r2, r5
 800cf4e:	4b16      	ldr	r3, [pc, #88]	; (800cfa8 <_vfiprintf_r+0x258>)
 800cf50:	a904      	add	r1, sp, #16
 800cf52:	4630      	mov	r0, r6
 800cf54:	f7fb fd3a 	bl	80089cc <_printf_float>
 800cf58:	4607      	mov	r7, r0
 800cf5a:	1c78      	adds	r0, r7, #1
 800cf5c:	d1d6      	bne.n	800cf0c <_vfiprintf_r+0x1bc>
 800cf5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf60:	07d9      	lsls	r1, r3, #31
 800cf62:	d405      	bmi.n	800cf70 <_vfiprintf_r+0x220>
 800cf64:	89ab      	ldrh	r3, [r5, #12]
 800cf66:	059a      	lsls	r2, r3, #22
 800cf68:	d402      	bmi.n	800cf70 <_vfiprintf_r+0x220>
 800cf6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf6c:	f7fe fec6 	bl	800bcfc <__retarget_lock_release_recursive>
 800cf70:	89ab      	ldrh	r3, [r5, #12]
 800cf72:	065b      	lsls	r3, r3, #25
 800cf74:	f53f af12 	bmi.w	800cd9c <_vfiprintf_r+0x4c>
 800cf78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf7a:	e711      	b.n	800cda0 <_vfiprintf_r+0x50>
 800cf7c:	ab03      	add	r3, sp, #12
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	462a      	mov	r2, r5
 800cf82:	4b09      	ldr	r3, [pc, #36]	; (800cfa8 <_vfiprintf_r+0x258>)
 800cf84:	a904      	add	r1, sp, #16
 800cf86:	4630      	mov	r0, r6
 800cf88:	f7fb ffc4 	bl	8008f14 <_printf_i>
 800cf8c:	e7e4      	b.n	800cf58 <_vfiprintf_r+0x208>
 800cf8e:	bf00      	nop
 800cf90:	0800d304 	.word	0x0800d304
 800cf94:	0800d324 	.word	0x0800d324
 800cf98:	0800d2e4 	.word	0x0800d2e4
 800cf9c:	0800d51c 	.word	0x0800d51c
 800cfa0:	0800d526 	.word	0x0800d526
 800cfa4:	080089cd 	.word	0x080089cd
 800cfa8:	0800cd2d 	.word	0x0800cd2d
 800cfac:	0800d522 	.word	0x0800d522

0800cfb0 <_read_r>:
 800cfb0:	b538      	push	{r3, r4, r5, lr}
 800cfb2:	4d07      	ldr	r5, [pc, #28]	; (800cfd0 <_read_r+0x20>)
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	4608      	mov	r0, r1
 800cfb8:	4611      	mov	r1, r2
 800cfba:	2200      	movs	r2, #0
 800cfbc:	602a      	str	r2, [r5, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	f7f4 fc0a 	bl	80017d8 <_read>
 800cfc4:	1c43      	adds	r3, r0, #1
 800cfc6:	d102      	bne.n	800cfce <_read_r+0x1e>
 800cfc8:	682b      	ldr	r3, [r5, #0]
 800cfca:	b103      	cbz	r3, 800cfce <_read_r+0x1e>
 800cfcc:	6023      	str	r3, [r4, #0]
 800cfce:	bd38      	pop	{r3, r4, r5, pc}
 800cfd0:	20000a04 	.word	0x20000a04

0800cfd4 <abort>:
 800cfd4:	b508      	push	{r3, lr}
 800cfd6:	2006      	movs	r0, #6
 800cfd8:	f000 f834 	bl	800d044 <raise>
 800cfdc:	2001      	movs	r0, #1
 800cfde:	f7f4 fbf1 	bl	80017c4 <_exit>

0800cfe2 <_malloc_usable_size_r>:
 800cfe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfe6:	1f18      	subs	r0, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	bfbc      	itt	lt
 800cfec:	580b      	ldrlt	r3, [r1, r0]
 800cfee:	18c0      	addlt	r0, r0, r3
 800cff0:	4770      	bx	lr

0800cff2 <_raise_r>:
 800cff2:	291f      	cmp	r1, #31
 800cff4:	b538      	push	{r3, r4, r5, lr}
 800cff6:	4604      	mov	r4, r0
 800cff8:	460d      	mov	r5, r1
 800cffa:	d904      	bls.n	800d006 <_raise_r+0x14>
 800cffc:	2316      	movs	r3, #22
 800cffe:	6003      	str	r3, [r0, #0]
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	bd38      	pop	{r3, r4, r5, pc}
 800d006:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d008:	b112      	cbz	r2, 800d010 <_raise_r+0x1e>
 800d00a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d00e:	b94b      	cbnz	r3, 800d024 <_raise_r+0x32>
 800d010:	4620      	mov	r0, r4
 800d012:	f000 f831 	bl	800d078 <_getpid_r>
 800d016:	462a      	mov	r2, r5
 800d018:	4601      	mov	r1, r0
 800d01a:	4620      	mov	r0, r4
 800d01c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d020:	f000 b818 	b.w	800d054 <_kill_r>
 800d024:	2b01      	cmp	r3, #1
 800d026:	d00a      	beq.n	800d03e <_raise_r+0x4c>
 800d028:	1c59      	adds	r1, r3, #1
 800d02a:	d103      	bne.n	800d034 <_raise_r+0x42>
 800d02c:	2316      	movs	r3, #22
 800d02e:	6003      	str	r3, [r0, #0]
 800d030:	2001      	movs	r0, #1
 800d032:	e7e7      	b.n	800d004 <_raise_r+0x12>
 800d034:	2400      	movs	r4, #0
 800d036:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d03a:	4628      	mov	r0, r5
 800d03c:	4798      	blx	r3
 800d03e:	2000      	movs	r0, #0
 800d040:	e7e0      	b.n	800d004 <_raise_r+0x12>
	...

0800d044 <raise>:
 800d044:	4b02      	ldr	r3, [pc, #8]	; (800d050 <raise+0xc>)
 800d046:	4601      	mov	r1, r0
 800d048:	6818      	ldr	r0, [r3, #0]
 800d04a:	f7ff bfd2 	b.w	800cff2 <_raise_r>
 800d04e:	bf00      	nop
 800d050:	2000002c 	.word	0x2000002c

0800d054 <_kill_r>:
 800d054:	b538      	push	{r3, r4, r5, lr}
 800d056:	4d07      	ldr	r5, [pc, #28]	; (800d074 <_kill_r+0x20>)
 800d058:	2300      	movs	r3, #0
 800d05a:	4604      	mov	r4, r0
 800d05c:	4608      	mov	r0, r1
 800d05e:	4611      	mov	r1, r2
 800d060:	602b      	str	r3, [r5, #0]
 800d062:	f7f4 fb9f 	bl	80017a4 <_kill>
 800d066:	1c43      	adds	r3, r0, #1
 800d068:	d102      	bne.n	800d070 <_kill_r+0x1c>
 800d06a:	682b      	ldr	r3, [r5, #0]
 800d06c:	b103      	cbz	r3, 800d070 <_kill_r+0x1c>
 800d06e:	6023      	str	r3, [r4, #0]
 800d070:	bd38      	pop	{r3, r4, r5, pc}
 800d072:	bf00      	nop
 800d074:	20000a04 	.word	0x20000a04

0800d078 <_getpid_r>:
 800d078:	f7f4 bb8c 	b.w	8001794 <_getpid>

0800d07c <_init>:
 800d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d07e:	bf00      	nop
 800d080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d082:	bc08      	pop	{r3}
 800d084:	469e      	mov	lr, r3
 800d086:	4770      	bx	lr

0800d088 <_fini>:
 800d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08a:	bf00      	nop
 800d08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08e:	bc08      	pop	{r3}
 800d090:	469e      	mov	lr, r3
 800d092:	4770      	bx	lr

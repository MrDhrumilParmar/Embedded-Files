
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009248  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080093d0  080093d0  000193d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093ec  080093ec  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093f4  080093f4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093f4  080093f4  000193f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093f8  080093f8  000193f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080093fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          000008e0  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000970  20000970  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a5dc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf1  00000000  00000000  0003a69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0003e290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014e8  00000000  00000000  0003f908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245cd  00000000  00000000  00040df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001caa9  00000000  00000000  000653bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b9f  00000000  00000000  00081e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155a05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000619c  00000000  00000000  00155a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080093b8 	.word	0x080093b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080093b8 	.word	0x080093b8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 feee 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f848 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fb32 	bl	8000b40 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f8ae 	bl	800063c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8da 	bl	8000698 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f908 	bl	80006f8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 fb1e 	bl	8008b28 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80004ec:	f000 f93a 	bl	8000764 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f0:	f000 f9f2 	bl	80008d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004f4:	f000 fa96 	bl	8000a24 <MX_TIM3_Init>
//  HAL_Delay(500);
//  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
//  pulse1=2500;
//	  pulse2=5000;
//  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004f8:	2100      	movs	r1, #0
 80004fa:	4819      	ldr	r0, [pc, #100]	; (8000560 <main+0x94>)
 80004fc:	f004 fb72 	bl	8004be4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000500:	2100      	movs	r1, #0
 8000502:	4818      	ldr	r0, [pc, #96]	; (8000564 <main+0x98>)
 8000504:	f004 fb6e 	bl	8004be4 <HAL_TIM_PWM_Start>

  	  HAL_Delay(5000);
 8000508:	f241 3088 	movw	r0, #5000	; 0x1388
 800050c:	f000 ff42 	bl	8001394 <HAL_Delay>

//  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000510:	2100      	movs	r1, #0
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <main+0x94>)
 8000514:	f004 fc2e 	bl	8004d74 <HAL_TIM_PWM_Stop>
  	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000518:	2100      	movs	r1, #0
 800051a:	4812      	ldr	r0, [pc, #72]	; (8000564 <main+0x98>)
 800051c:	f004 fc2a 	bl	8004d74 <HAL_TIM_PWM_Stop>

//  	  MX_TIM2_Init();
//  	  MX_TIM3_Init();
  	  HAL_Delay(5000);
 8000520:	f241 3088 	movw	r0, #5000	; 0x1388
 8000524:	f000 ff36 	bl	8001394 <HAL_Delay>

//  	  pulse1=5000;
//  	  pulse2=2500;
//  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	480d      	ldr	r0, [pc, #52]	; (8000560 <main+0x94>)
 800052c:	f004 fb5a 	bl	8004be4 <HAL_TIM_PWM_Start>
  	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000530:	2100      	movs	r1, #0
 8000532:	480c      	ldr	r0, [pc, #48]	; (8000564 <main+0x98>)
 8000534:	f004 fb56 	bl	8004be4 <HAL_TIM_PWM_Start>

  	  HAL_Delay(5000);
 8000538:	f241 3088 	movw	r0, #5000	; 0x1388
 800053c:	f000 ff2a 	bl	8001394 <HAL_Delay>

  	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000540:	2100      	movs	r1, #0
 8000542:	4807      	ldr	r0, [pc, #28]	; (8000560 <main+0x94>)
 8000544:	f004 fc16 	bl	8004d74 <HAL_TIM_PWM_Stop>
  	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000548:	2100      	movs	r1, #0
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x98>)
 800054c:	f004 fc12 	bl	8004d74 <HAL_TIM_PWM_Stop>

  	  HAL_Delay(5000);
 8000550:	f241 3088 	movw	r0, #5000	; 0x1388
 8000554:	f000 ff1e 	bl	8001394 <HAL_Delay>

  {


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000558:	f008 fb0c 	bl	8008b74 <MX_USB_HOST_Process>
 800055c:	e7fc      	b.n	8000558 <main+0x8c>
 800055e:	bf00      	nop
 8000560:	200001e8 	.word	0x200001e8
 8000564:	20000230 	.word	0x20000230

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f008 fe18 	bl	80091ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fbaa 	bl	8003d48 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 fb9f 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fe0b 	bl	8004238 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000628:	f000 fb88 	bl	8000d3c <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x50>)
 8000642:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_I2C1_Init+0x54>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x50>)
 8000648:	4a12      	ldr	r2, [pc, #72]	; (8000694 <MX_I2C1_Init+0x58>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_I2C1_Init+0x50>)
 800065a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_I2C1_Init+0x50>)
 800067a:	f002 fd81 	bl	8003180 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 fb5a 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000ac 	.word	0x200000ac
 8000690:	40005400 	.word	0x40005400
 8000694:	000186a0 	.word	0x000186a0

08000698 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_I2S3_Init+0x54>)
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <MX_I2S3_Init+0x58>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2S3_Init+0x54>)
 80006a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_I2S3_Init+0x54>)
 80006b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006bc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_I2S3_Init+0x54>)
 80006c0:	4a0c      	ldr	r2, [pc, #48]	; (80006f4 <MX_I2S3_Init+0x5c>)
 80006c2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2S3_Init+0x54>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_I2S3_Init+0x54>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2S3_Init+0x54>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_I2S3_Init+0x54>)
 80006d8:	f002 fe96 	bl	8003408 <HAL_I2S_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006e2:	f000 fb2b 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000100 	.word	0x20000100
 80006f0:	40003c00 	.word	0x40003c00
 80006f4:	00017700 	.word	0x00017700

080006f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006fc:	4b17      	ldr	r3, [pc, #92]	; (800075c <MX_SPI1_Init+0x64>)
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <MX_SPI1_Init+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_SPI1_Init+0x64>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_SPI1_Init+0x64>)
 8000738:	2200      	movs	r2, #0
 800073a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <MX_SPI1_Init+0x64>)
 800073e:	2200      	movs	r2, #0
 8000740:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_SPI1_Init+0x64>)
 8000744:	220a      	movs	r2, #10
 8000746:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	; (800075c <MX_SPI1_Init+0x64>)
 800074a:	f004 f8c1 	bl	80048d0 <HAL_SPI_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000754:	f000 faf2 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000148 	.word	0x20000148
 8000760:	40013000 	.word	0x40013000

08000764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b096      	sub	sp, #88	; 0x58
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2220      	movs	r2, #32
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f008 fd05 	bl	80091ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a2:	4b4b      	ldr	r3, [pc, #300]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007a4:	4a4b      	ldr	r2, [pc, #300]	; (80008d4 <MX_TIM1_Init+0x170>)
 80007a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 80007a8:	4b49      	ldr	r3, [pc, #292]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007aa:	22a7      	movs	r2, #167	; 0xa7
 80007ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80007b4:	4b46      	ldr	r3, [pc, #280]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80007ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b44      	ldr	r3, [pc, #272]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c2:	4b43      	ldr	r3, [pc, #268]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b41      	ldr	r3, [pc, #260]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ce:	4840      	ldr	r0, [pc, #256]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007d0:	f004 f907 	bl	80049e2 <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007da:	f000 faaf 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e8:	4619      	mov	r1, r3
 80007ea:	4839      	ldr	r0, [pc, #228]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007ec:	f004 fc50 	bl	8005090 <HAL_TIM_ConfigClockSource>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80007f6:	f000 faa1 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fa:	4835      	ldr	r0, [pc, #212]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80007fc:	f004 f999 	bl	8004b32 <HAL_TIM_PWM_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000806:	f000 fa99 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800080a:	4831      	ldr	r0, [pc, #196]	; (80008d0 <MX_TIM1_Init+0x16c>)
 800080c:	f004 f938 	bl	8004a80 <HAL_TIM_OC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000816:	f000 fa91 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800081a:	2350      	movs	r3, #80	; 0x50
 800081c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000822:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000826:	4619      	mov	r1, r3
 8000828:	4829      	ldr	r0, [pc, #164]	; (80008d0 <MX_TIM1_Init+0x16c>)
 800082a:	f005 f8db 	bl	80059e4 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000834:	f000 fa82 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000838:	2360      	movs	r3, #96	; 0x60
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	481c      	ldr	r0, [pc, #112]	; (80008d0 <MX_TIM1_Init+0x16c>)
 800085e:	f004 fb55 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000868:	f000 fa68 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800086c:	2310      	movs	r3, #16
 800086e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2500;
 8000870:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087a:	2204      	movs	r2, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4814      	ldr	r0, [pc, #80]	; (80008d0 <MX_TIM1_Init+0x16c>)
 8000880:	f004 fae8 	bl	8004e54 <HAL_TIM_OC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800088a:	f000 fa57 	bl	8000d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80008b2:	f005 f913 	bl	8005adc <HAL_TIMEx_ConfigBreakDeadTime>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80008bc:	f000 fa3e 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c0:	4803      	ldr	r0, [pc, #12]	; (80008d0 <MX_TIM1_Init+0x16c>)
 80008c2:	f000 fbc5 	bl	8001050 <HAL_TIM_MspPostInit>

}
 80008c6:	bf00      	nop
 80008c8:	3758      	adds	r7, #88	; 0x58
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200001a0 	.word	0x200001a0
 80008d4:	40010000 	.word	0x40010000

080008d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b092      	sub	sp, #72	; 0x48
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000918:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <MX_TIM2_Init+0x148>)
 800091a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000920:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <MX_TIM2_Init+0x148>)
 8000922:	2253      	movs	r2, #83	; 0x53
 8000924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <MX_TIM2_Init+0x148>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <MX_TIM2_Init+0x148>)
 800092e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <MX_TIM2_Init+0x148>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <MX_TIM2_Init+0x148>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000940:	4837      	ldr	r0, [pc, #220]	; (8000a20 <MX_TIM2_Init+0x148>)
 8000942:	f004 f84e 	bl	80049e2 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800094c:	f000 f9f6 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000954:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095a:	4619      	mov	r1, r3
 800095c:	4830      	ldr	r0, [pc, #192]	; (8000a20 <MX_TIM2_Init+0x148>)
 800095e:	f004 fb97 	bl	8005090 <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000968:	f000 f9e8 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800096c:	482c      	ldr	r0, [pc, #176]	; (8000a20 <MX_TIM2_Init+0x148>)
 800096e:	f004 f8e0 	bl	8004b32 <HAL_TIM_PWM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000978:	f000 f9e0 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800097c:	4828      	ldr	r0, [pc, #160]	; (8000a20 <MX_TIM2_Init+0x148>)
 800097e:	f004 f87f 	bl	8004a80 <HAL_TIM_OC_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000988:	f000 f9d8 	bl	8000d3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800098c:	2306      	movs	r3, #6
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4821      	ldr	r0, [pc, #132]	; (8000a20 <MX_TIM2_Init+0x148>)
 800099c:	f004 fc3f 	bl	800521e <HAL_TIM_SlaveConfigSynchro>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80009a6:	f000 f9c9 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80009aa:	2350      	movs	r3, #80	; 0x50
 80009ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4819      	ldr	r0, [pc, #100]	; (8000a20 <MX_TIM2_Init+0x148>)
 80009ba:	f005 f813 	bl	80059e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80009c4:	f000 f9ba 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c8:	2360      	movs	r3, #96	; 0x60
 80009ca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 80009cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80009d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	2200      	movs	r2, #0
 80009de:	4619      	mov	r1, r3
 80009e0:	480f      	ldr	r0, [pc, #60]	; (8000a20 <MX_TIM2_Init+0x148>)
 80009e2:	f004 fa93 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80009ec:	f000 f9a6 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80009f0:	2310      	movs	r3, #16
 80009f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 3500;
 80009f4:	f640 53ac 	movw	r3, #3500	; 0xdac
 80009f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009fa:	463b      	mov	r3, r7
 80009fc:	2204      	movs	r2, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_TIM2_Init+0x148>)
 8000a02:	f004 fa27 	bl	8004e54 <HAL_TIM_OC_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM2_Init+0x138>
  {
    Error_Handler();
 8000a0c:	f000 f996 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <MX_TIM2_Init+0x148>)
 8000a12:	f000 fb1d 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000a16:	bf00      	nop
 8000a18:	3748      	adds	r7, #72	; 0x48
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200001e8 	.word	0x200001e8

08000a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b092      	sub	sp, #72	; 0x48
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	f107 031c 	add.w	r3, r7, #28
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]
 8000a62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a64:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000a66:	4a35      	ldr	r2, [pc, #212]	; (8000b3c <MX_TIM3_Init+0x118>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000a6a:	4b33      	ldr	r3, [pc, #204]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000a6c:	2253      	movs	r2, #83	; 0x53
 8000a6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000a76:	4b30      	ldr	r3, [pc, #192]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000a78:	f242 720f 	movw	r2, #9999	; 0x270f
 8000a7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b2c      	ldr	r3, [pc, #176]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a8a:	482b      	ldr	r0, [pc, #172]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000a8c:	f003 ffa9 	bl	80049e2 <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a96:	f000 f951 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4824      	ldr	r0, [pc, #144]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000aa8:	f004 faf2 	bl	8005090 <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ab2:	f000 f943 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ab6:	4820      	ldr	r0, [pc, #128]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000ab8:	f004 f83b 	bl	8004b32 <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000ac2:	f000 f93b 	bl	8000d3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ac6:	2306      	movs	r3, #6
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000aca:	2310      	movs	r3, #16
 8000acc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4818      	ldr	r0, [pc, #96]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000ad6:	f004 fba2 	bl	800521e <HAL_TIM_SlaveConfigSynchro>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8000ae0:	f000 f92c 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000aec:	f107 031c 	add.w	r3, r7, #28
 8000af0:	4619      	mov	r1, r3
 8000af2:	4811      	ldr	r0, [pc, #68]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000af4:	f004 ff76 	bl	80059e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8000afe:	f000 f91d 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b02:	2360      	movs	r3, #96	; 0x60
 8000b04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000;
 8000b06:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000b1c:	f004 f9f6 	bl	8004f0c <HAL_TIM_PWM_ConfigChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000b26:	f000 f909 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b2a:	4803      	ldr	r0, [pc, #12]	; (8000b38 <MX_TIM3_Init+0x114>)
 8000b2c:	f000 fa90 	bl	8001050 <HAL_TIM_MspPostInit>

}
 8000b30:	bf00      	nop
 8000b32:	3748      	adds	r7, #72	; 0x48
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000230 	.word	0x20000230
 8000b3c:	40000400 	.word	0x40000400

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	4b72      	ldr	r3, [pc, #456]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a71      	ldr	r2, [pc, #452]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b6f      	ldr	r3, [pc, #444]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
 8000b76:	4b6b      	ldr	r3, [pc, #428]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a6a      	ldr	r2, [pc, #424]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b68      	ldr	r3, [pc, #416]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	4b64      	ldr	r3, [pc, #400]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a63      	ldr	r2, [pc, #396]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b61      	ldr	r3, [pc, #388]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	4b5d      	ldr	r3, [pc, #372]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a5c      	ldr	r2, [pc, #368]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b5a      	ldr	r3, [pc, #360]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	4b56      	ldr	r3, [pc, #344]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a55      	ldr	r2, [pc, #340]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b53      	ldr	r3, [pc, #332]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b4f      	ldr	r3, [pc, #316]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a4e      	ldr	r2, [pc, #312]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b4c      	ldr	r3, [pc, #304]	; (8000d24 <MX_GPIO_Init+0x1e4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2108      	movs	r1, #8
 8000c02:	4849      	ldr	r0, [pc, #292]	; (8000d28 <MX_GPIO_Init+0x1e8>)
 8000c04:	f000 fe98 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4847      	ldr	r0, [pc, #284]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000c0e:	f000 fe93 	bl	8001938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c12:	2200      	movs	r2, #0
 8000c14:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c18:	4845      	ldr	r0, [pc, #276]	; (8000d30 <MX_GPIO_Init+0x1f0>)
 8000c1a:	f000 fe8d 	bl	8001938 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	483c      	ldr	r0, [pc, #240]	; (8000d28 <MX_GPIO_Init+0x1e8>)
 8000c36:	f000 fce3 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4836      	ldr	r0, [pc, #216]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000c52:	f000 fcd5 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c56:	2308      	movs	r3, #8
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c66:	2305      	movs	r3, #5
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	482e      	ldr	r0, [pc, #184]	; (8000d2c <MX_GPIO_Init+0x1ec>)
 8000c72:	f000 fcc5 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c7a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4619      	mov	r1, r3
 8000c8a:	482a      	ldr	r0, [pc, #168]	; (8000d34 <MX_GPIO_Init+0x1f4>)
 8000c8c:	f000 fcb8 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c90:	2304      	movs	r3, #4
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4825      	ldr	r0, [pc, #148]	; (8000d38 <MX_GPIO_Init+0x1f8>)
 8000ca4:	f000 fcac 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	481c      	ldr	r0, [pc, #112]	; (8000d38 <MX_GPIO_Init+0x1f8>)
 8000cc6:	f000 fc9b 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000cca:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000cce:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4813      	ldr	r0, [pc, #76]	; (8000d30 <MX_GPIO_Init+0x1f0>)
 8000ce4:	f000 fc8c 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ce8:	2320      	movs	r3, #32
 8000cea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_GPIO_Init+0x1f0>)
 8000cfc:	f000 fc80 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	f107 031c 	add.w	r3, r7, #28
 8000d12:	4619      	mov	r1, r3
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_GPIO_Init+0x1e8>)
 8000d16:	f000 fc73 	bl	8001600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3730      	adds	r7, #48	; 0x30
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020c00 	.word	0x40020c00
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020400 	.word	0x40020400

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d86:	2007      	movs	r0, #7
 8000d88:	f000 fbf8 	bl	800157c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a19      	ldr	r2, [pc, #100]	; (8000e1c <HAL_I2C_MspInit+0x84>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d12c      	bne.n	8000e14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dd6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	480c      	ldr	r0, [pc, #48]	; (8000e24 <HAL_I2C_MspInit+0x8c>)
 8000df4:	f000 fc04 	bl	8001600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000e02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e06:	6413      	str	r3, [r2, #64]	; 0x40
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_I2C_MspInit+0x88>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	40005400 	.word	0x40005400
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40020400 	.word	0x40020400

08000e28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08e      	sub	sp, #56	; 0x38
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a31      	ldr	r2, [pc, #196]	; (8000f18 <HAL_I2S_MspInit+0xf0>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d15a      	bne.n	8000f0e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000e5c:	23c0      	movs	r3, #192	; 0xc0
 8000e5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fbf1 	bl	8004650 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000e74:	f7ff ff62 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000e9e:	f043 0301 	orr.w	r3, r3, #1
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0301 	and.w	r3, r3, #1
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000eba:	f043 0304 	orr.w	r3, r3, #4
 8000ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <HAL_I2S_MspInit+0xf4>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec4:	f003 0304 	and.w	r3, r3, #4
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ecc:	2310      	movs	r3, #16
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000edc:	2306      	movs	r3, #6
 8000ede:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480e      	ldr	r0, [pc, #56]	; (8000f20 <HAL_I2S_MspInit+0xf8>)
 8000ee8:	f000 fb8a 	bl	8001600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000eec:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000efe:	2306      	movs	r3, #6
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <HAL_I2S_MspInit+0xfc>)
 8000f0a:	f000 fb79 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f0e:	bf00      	nop
 8000f10:	3738      	adds	r7, #56	; 0x38
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40003c00 	.word	0x40003c00
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020800 	.word	0x40020800

08000f28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	; 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a19      	ldr	r2, [pc, #100]	; (8000fac <HAL_SPI_MspInit+0x84>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d12b      	bne.n	8000fa2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a17      	ldr	r2, [pc, #92]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_SPI_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f82:	23e0      	movs	r3, #224	; 0xe0
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f92:	2305      	movs	r3, #5
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <HAL_SPI_MspInit+0x8c>)
 8000f9e:	f000 fb2f 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40013000 	.word	0x40013000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <HAL_TIM_Base_MspInit+0x8c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d10e      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a1d      	ldr	r2, [pc, #116]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b1b      	ldr	r3, [pc, #108]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fe6:	e026      	b.n	8001036 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff0:	d10e      	bne.n	8001010 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6413      	str	r3, [r2, #64]	; 0x40
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
}
 800100e:	e012      	b.n	8001036 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_TIM_Base_MspInit+0x94>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_TIM_Base_MspInit+0x90>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
}
 8001036:	bf00      	nop
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40010000 	.word	0x40010000
 8001048:	40023800 	.word	0x40023800
 800104c:	40000400 	.word	0x40000400

08001050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a37      	ldr	r2, [pc, #220]	; (800114c <HAL_TIM_MspPostInit+0xfc>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11f      	bne.n	80010b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b36      	ldr	r3, [pc, #216]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a35      	ldr	r2, [pc, #212]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b33      	ldr	r3, [pc, #204]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	482a      	ldr	r0, [pc, #168]	; (8001154 <HAL_TIM_MspPostInit+0x104>)
 80010ac:	f000 faa8 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80010b0:	e047      	b.n	8001142 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM2)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ba:	d11f      	bne.n	80010fc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4b23      	ldr	r3, [pc, #140]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	4a22      	ldr	r2, [pc, #136]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 80010c6:	f043 0301 	orr.w	r3, r3, #1
 80010ca:	6313      	str	r3, [r2, #48]	; 0x30
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010ea:	2301      	movs	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4818      	ldr	r0, [pc, #96]	; (8001158 <HAL_TIM_MspPostInit+0x108>)
 80010f6:	f000 fa83 	bl	8001600 <HAL_GPIO_Init>
}
 80010fa:	e022      	b.n	8001142 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM3)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a16      	ldr	r2, [pc, #88]	; (800115c <HAL_TIM_MspPostInit+0x10c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d11d      	bne.n	8001142 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_TIM_MspPostInit+0x100>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001122:	2340      	movs	r3, #64	; 0x40
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001132:	2302      	movs	r3, #2
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4808      	ldr	r0, [pc, #32]	; (8001160 <HAL_TIM_MspPostInit+0x110>)
 800113e:	f000 fa5f 	bl	8001600 <HAL_GPIO_Init>
}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40010000 	.word	0x40010000
 8001150:	40023800 	.word	0x40023800
 8001154:	40021000 	.word	0x40021000
 8001158:	40020000 	.word	0x40020000
 800115c:	40000400 	.word	0x40000400
 8001160:	40020800 	.word	0x40020800

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <NMI_Handler+0x4>

0800116a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <HardFault_Handler+0x4>

08001170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <MemManage_Handler+0x4>

08001176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <BusFault_Handler+0x4>

0800117c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <UsageFault_Handler+0x4>

08001182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b0:	f000 f8d0 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <OTG_FS_IRQHandler+0x10>)
 80011be:	f000 fe3f 	bl	8001e40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000065c 	.word	0x2000065c

080011cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <_sbrk+0x5c>)
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <_sbrk+0x60>)
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_sbrk+0x64>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d102      	bne.n	80011ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_sbrk+0x64>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <_sbrk+0x68>)
 80011ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d207      	bcs.n	800120c <_sbrk+0x40>
  {

	  errno = ENOMEM;
 80011fc:	f007 ff9c 	bl	8009138 <__errno>
 8001200:	4603      	mov	r3, r0
 8001202:	220c      	movs	r2, #12
 8001204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
 800120a:	e009      	b.n	8001220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <_sbrk+0x64>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_sbrk+0x64>)
 800121c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800121e:	68fb      	ldr	r3, [r7, #12]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20020000 	.word	0x20020000
 800122c:	00000400 	.word	0x00000400
 8001230:	20000278 	.word	0x20000278
 8001234:	20000970 	.word	0x20000970

08001238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001294 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001260:	480d      	ldr	r0, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001262:	490e      	ldr	r1, [pc, #56]	; (800129c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001264:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001278:	4c0b      	ldr	r4, [pc, #44]	; (80012a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001286:	f7ff ffd7 	bl	8001238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f007 ff5b 	bl	8009144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff f91d 	bl	80004cc <main>
  bx  lr    
 8001292:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012a0:	080093fc 	.word	0x080093fc
  ldr r2, =_sbss
 80012a4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012a8:	20000970 	.word	0x20000970

080012ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <HAL_Init+0x40>)
 80012ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <HAL_Init+0x40>)
 80012c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_Init+0x40>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 f94f 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	2000      	movs	r0, #0
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fd30 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f967 	bl	80015e6 <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f000 f92f 	bl	8001592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000000 	.word	0x20000000
 800134c:	20000008 	.word	0x20000008
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008
 8001378:	2000027c 	.word	0x2000027c

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	2000027c 	.word	0x2000027c

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff8e 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff29 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff3e 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff8e 	bl	80014d0 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff31 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa2 	bl	8001538 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	e16b      	b.n	80018f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 815a 	bne.w	80018ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d005      	beq.n	8001652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164e:	2b02      	cmp	r3, #2
 8001650:	d130      	bne.n	80016b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2203      	movs	r2, #3
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68da      	ldr	r2, [r3, #12]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001688:	2201      	movs	r2, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	091b      	lsrs	r3, r3, #4
 800169e:	f003 0201 	and.w	r2, r3, #1
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d017      	beq.n	80016f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80b4 	beq.w	80018ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b60      	ldr	r3, [pc, #384]	; (800190c <HAL_GPIO_Init+0x30c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a5f      	ldr	r2, [pc, #380]	; (800190c <HAL_GPIO_Init+0x30c>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_GPIO_Init+0x30c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a2:	4a5b      	ldr	r2, [pc, #364]	; (8001910 <HAL_GPIO_Init+0x310>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_GPIO_Init+0x314>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d02b      	beq.n	8001826 <HAL_GPIO_Init+0x226>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a51      	ldr	r2, [pc, #324]	; (8001918 <HAL_GPIO_Init+0x318>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d025      	beq.n	8001822 <HAL_GPIO_Init+0x222>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a50      	ldr	r2, [pc, #320]	; (800191c <HAL_GPIO_Init+0x31c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d01f      	beq.n	800181e <HAL_GPIO_Init+0x21e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4f      	ldr	r2, [pc, #316]	; (8001920 <HAL_GPIO_Init+0x320>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d019      	beq.n	800181a <HAL_GPIO_Init+0x21a>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4e      	ldr	r2, [pc, #312]	; (8001924 <HAL_GPIO_Init+0x324>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_Init+0x216>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <HAL_GPIO_Init+0x328>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_Init+0x212>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_GPIO_Init+0x32c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_Init+0x20e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4b      	ldr	r2, [pc, #300]	; (8001930 <HAL_GPIO_Init+0x330>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_Init+0x20a>
 8001806:	2307      	movs	r3, #7
 8001808:	e00e      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800180a:	2308      	movs	r3, #8
 800180c:	e00c      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800180e:	2306      	movs	r3, #6
 8001810:	e00a      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001812:	2305      	movs	r3, #5
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001816:	2304      	movs	r3, #4
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x228>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x228>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001838:	4935      	ldr	r1, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x310>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001846:	4b3b      	ldr	r3, [pc, #236]	; (8001934 <HAL_GPIO_Init+0x334>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800186a:	4a32      	ldr	r2, [pc, #200]	; (8001934 <HAL_GPIO_Init+0x334>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <HAL_GPIO_Init+0x334>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001894:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_GPIO_Init+0x334>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <HAL_GPIO_Init+0x334>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018be:	4a1d      	ldr	r2, [pc, #116]	; (8001934 <HAL_GPIO_Init+0x334>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_GPIO_Init+0x334>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018e8:	4a12      	ldr	r2, [pc, #72]	; (8001934 <HAL_GPIO_Init+0x334>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f ae90 	bls.w	800161c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	3724      	adds	r7, #36	; 0x24
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40013800 	.word	0x40013800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020400 	.word	0x40020400
 800191c:	40020800 	.word	0x40020800
 8001920:	40020c00 	.word	0x40020c00
 8001924:	40021000 	.word	0x40021000
 8001928:	40021400 	.word	0x40021400
 800192c:	40021800 	.word	0x40021800
 8001930:	40021c00 	.word	0x40021c00
 8001934:	40013c00 	.word	0x40013c00

08001938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
 8001944:	4613      	mov	r3, r2
 8001946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001948:	787b      	ldrb	r3, [r7, #1]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194e:	887a      	ldrh	r2, [r7, #2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001954:	e003      	b.n	800195e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	041a      	lsls	r2, r3, #16
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	619a      	str	r2, [r3, #24]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800196a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196c:	b08f      	sub	sp, #60	; 0x3c
 800196e:	af0a      	add	r7, sp, #40	; 0x28
 8001970:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e054      	b.n	8001a26 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f007 f924 	bl	8008be4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2203      	movs	r2, #3
 80019a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f004 f952 	bl	8005c64 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	687e      	ldr	r6, [r7, #4]
 80019c8:	466d      	mov	r5, sp
 80019ca:	f106 0410 	add.w	r4, r6, #16
 80019ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019da:	e885 0003 	stmia.w	r5, {r0, r1}
 80019de:	1d33      	adds	r3, r6, #4
 80019e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e2:	6838      	ldr	r0, [r7, #0]
 80019e4:	f004 f8cc 	bl	8005b80 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 f949 	bl	8005c86 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	687e      	ldr	r6, [r7, #4]
 80019fc:	466d      	mov	r5, sp
 80019fe:	f106 0410 	add.w	r4, r6, #16
 8001a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a12:	1d33      	adds	r3, r6, #4
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	6838      	ldr	r0, [r7, #0]
 8001a18:	f004 fad2 	bl	8005fc0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a2e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001a2e:	b590      	push	{r4, r7, lr}
 8001a30:	b089      	sub	sp, #36	; 0x24
 8001a32:	af04      	add	r7, sp, #16
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	4608      	mov	r0, r1
 8001a38:	4611      	mov	r1, r2
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	70fb      	strb	r3, [r7, #3]
 8001a40:	460b      	mov	r3, r1
 8001a42:	70bb      	strb	r3, [r7, #2]
 8001a44:	4613      	mov	r3, r2
 8001a46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_HCD_HC_Init+0x28>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e076      	b.n	8001b44 <HAL_HCD_HC_Init+0x116>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	212c      	movs	r1, #44	; 0x2c
 8001a64:	fb01 f303 	mul.w	r3, r1, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	333d      	adds	r3, #61	; 0x3d
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	212c      	movs	r1, #44	; 0x2c
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	3338      	adds	r3, #56	; 0x38
 8001a7e:	787a      	ldrb	r2, [r7, #1]
 8001a80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3340      	adds	r3, #64	; 0x40
 8001a90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001a92:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	fb01 f303 	mul.w	r3, r1, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3339      	adds	r3, #57	; 0x39
 8001aa2:	78fa      	ldrb	r2, [r7, #3]
 8001aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	212c      	movs	r1, #44	; 0x2c
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	333f      	adds	r3, #63	; 0x3f
 8001ab4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ab8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	78ba      	ldrb	r2, [r7, #2]
 8001abe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ac2:	b2d0      	uxtb	r0, r2
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	212c      	movs	r1, #44	; 0x2c
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	4413      	add	r3, r2
 8001ace:	333a      	adds	r3, #58	; 0x3a
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ad4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	da09      	bge.n	8001af0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	212c      	movs	r1, #44	; 0x2c
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	333b      	adds	r3, #59	; 0x3b
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	e008      	b.n	8001b02 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001af0:	78fb      	ldrb	r3, [r7, #3]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	212c      	movs	r1, #44	; 0x2c
 8001af6:	fb01 f303 	mul.w	r3, r1, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	333b      	adds	r3, #59	; 0x3b
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	212c      	movs	r1, #44	; 0x2c
 8001b08:	fb01 f303 	mul.w	r3, r1, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	333c      	adds	r3, #60	; 0x3c
 8001b10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b14:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	787c      	ldrb	r4, [r7, #1]
 8001b1c:	78ba      	ldrb	r2, [r7, #2]
 8001b1e:	78f9      	ldrb	r1, [r7, #3]
 8001b20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	4623      	mov	r3, r4
 8001b32:	f004 fbcb 	bl	80062cc <USB_HC_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}

08001b4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d101      	bne.n	8001b6a <HAL_HCD_HC_Halt+0x1e>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e00f      	b.n	8001b8a <HAL_HCD_HC_Halt+0x3e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 fe1b 	bl	80067b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	4608      	mov	r0, r1
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	70fb      	strb	r3, [r7, #3]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	70bb      	strb	r3, [r7, #2]
 8001baa:	4613      	mov	r3, r2
 8001bac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	333b      	adds	r3, #59	; 0x3b
 8001bbc:	78ba      	ldrb	r2, [r7, #2]
 8001bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	333f      	adds	r3, #63	; 0x3f
 8001bce:	787a      	ldrb	r2, [r7, #1]
 8001bd0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001bd2:	7c3b      	ldrb	r3, [r7, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d112      	bne.n	8001bfe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	212c      	movs	r1, #44	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	3342      	adds	r3, #66	; 0x42
 8001be6:	2203      	movs	r2, #3
 8001be8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	212c      	movs	r1, #44	; 0x2c
 8001bf0:	fb01 f303 	mul.w	r3, r1, r3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	333d      	adds	r3, #61	; 0x3d
 8001bf8:	7f3a      	ldrb	r2, [r7, #28]
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	e008      	b.n	8001c10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfe:	78fb      	ldrb	r3, [r7, #3]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	212c      	movs	r1, #44	; 0x2c
 8001c04:	fb01 f303 	mul.w	r3, r1, r3
 8001c08:	4413      	add	r3, r2
 8001c0a:	3342      	adds	r3, #66	; 0x42
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	f200 80c6 	bhi.w	8001da4 <HAL_HCD_HC_SubmitRequest+0x210>
 8001c18:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	08001c31 	.word	0x08001c31
 8001c24:	08001d91 	.word	0x08001d91
 8001c28:	08001c95 	.word	0x08001c95
 8001c2c:	08001d13 	.word	0x08001d13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001c30:	7c3b      	ldrb	r3, [r7, #16]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 80b8 	bne.w	8001da8 <HAL_HCD_HC_SubmitRequest+0x214>
 8001c38:	78bb      	ldrb	r3, [r7, #2]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 80b4 	bne.w	8001da8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001c40:	8b3b      	ldrh	r3, [r7, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001c46:	78fb      	ldrb	r3, [r7, #3]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	212c      	movs	r1, #44	; 0x2c
 8001c4c:	fb01 f303 	mul.w	r3, r1, r3
 8001c50:	4413      	add	r3, r2
 8001c52:	3355      	adds	r3, #85	; 0x55
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	3355      	adds	r3, #85	; 0x55
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c6c:	78fb      	ldrb	r3, [r7, #3]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	3342      	adds	r3, #66	; 0x42
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001c7e:	e093      	b.n	8001da8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c80:	78fb      	ldrb	r3, [r7, #3]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3342      	adds	r3, #66	; 0x42
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
      break;
 8001c92:	e089      	b.n	8001da8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c94:	78bb      	ldrb	r3, [r7, #2]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d11d      	bne.n	8001cd6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3355      	adds	r3, #85	; 0x55
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3342      	adds	r3, #66	; 0x42
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001cc0:	e073      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cc2:	78fb      	ldrb	r3, [r7, #3]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	212c      	movs	r1, #44	; 0x2c
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4413      	add	r3, r2
 8001cce:	3342      	adds	r3, #66	; 0x42
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	701a      	strb	r2, [r3, #0]
      break;
 8001cd4:	e069      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cd6:	78fb      	ldrb	r3, [r7, #3]
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	212c      	movs	r1, #44	; 0x2c
 8001cdc:	fb01 f303 	mul.w	r3, r1, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3354      	adds	r3, #84	; 0x54
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	212c      	movs	r1, #44	; 0x2c
 8001cf0:	fb01 f303 	mul.w	r3, r1, r3
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3342      	adds	r3, #66	; 0x42
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]
      break;
 8001cfc:	e055      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	212c      	movs	r1, #44	; 0x2c
 8001d04:	fb01 f303 	mul.w	r3, r1, r3
 8001d08:	4413      	add	r3, r2
 8001d0a:	3342      	adds	r3, #66	; 0x42
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	701a      	strb	r2, [r3, #0]
      break;
 8001d10:	e04b      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001d12:	78bb      	ldrb	r3, [r7, #2]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d11d      	bne.n	8001d54 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	212c      	movs	r1, #44	; 0x2c
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	3355      	adds	r3, #85	; 0x55
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3342      	adds	r3, #66	; 0x42
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d3e:	e034      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3342      	adds	r3, #66	; 0x42
 8001d4e:	2202      	movs	r2, #2
 8001d50:	701a      	strb	r2, [r3, #0]
      break;
 8001d52:	e02a      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3354      	adds	r3, #84	; 0x54
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d109      	bne.n	8001d7c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	3342      	adds	r3, #66	; 0x42
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
      break;
 8001d7a:	e016      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	212c      	movs	r1, #44	; 0x2c
 8001d82:	fb01 f303 	mul.w	r3, r1, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	3342      	adds	r3, #66	; 0x42
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
      break;
 8001d8e:	e00c      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	212c      	movs	r1, #44	; 0x2c
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3342      	adds	r3, #66	; 0x42
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
      break;
 8001da2:	e002      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001da4:	bf00      	nop
 8001da6:	e000      	b.n	8001daa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001da8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	3344      	adds	r3, #68	; 0x44
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	8b3a      	ldrh	r2, [r7, #24]
 8001dc0:	6879      	ldr	r1, [r7, #4]
 8001dc2:	202c      	movs	r0, #44	; 0x2c
 8001dc4:	fb00 f303 	mul.w	r3, r0, r3
 8001dc8:	440b      	add	r3, r1
 8001dca:	334c      	adds	r3, #76	; 0x4c
 8001dcc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	212c      	movs	r1, #44	; 0x2c
 8001dd4:	fb01 f303 	mul.w	r3, r1, r3
 8001dd8:	4413      	add	r3, r2
 8001dda:	3360      	adds	r3, #96	; 0x60
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001de0:	78fb      	ldrb	r3, [r7, #3]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	3350      	adds	r3, #80	; 0x50
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3339      	adds	r3, #57	; 0x39
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3361      	adds	r3, #97	; 0x61
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	222c      	movs	r2, #44	; 0x2c
 8001e1e:	fb02 f303 	mul.w	r3, r2, r3
 8001e22:	3338      	adds	r3, #56	; 0x38
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	18d1      	adds	r1, r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f004 fb6e 	bl	8006510 <USB_HC_StartXfer>
 8001e34:	4603      	mov	r3, r0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop

08001e40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f004 f86f 	bl	8005f3a <USB_GetMode>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	f040 80f6 	bne.w	8002050 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 f853 	bl	8005f14 <USB_ReadInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80ec 	beq.w	800204e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f004 f84a 	bl	8005f14 <USB_ReadInterrupts>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e8a:	d104      	bne.n	8001e96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f004 f83a 	bl	8005f14 <USB_ReadInterrupts>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eaa:	d104      	bne.n	8001eb6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001eb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 f82a 	bl	8005f14 <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eca:	d104      	bne.n	8001ed6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ed4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f004 f81a 	bl	8005f14 <USB_ReadInterrupts>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d103      	bne.n	8001ef2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f004 f80c 	bl	8005f14 <USB_ReadInterrupts>
 8001efc:	4603      	mov	r3, r0
 8001efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f06:	d11c      	bne.n	8001f42 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f22:	2110      	movs	r1, #16
 8001f24:	6938      	ldr	r0, [r7, #16]
 8001f26:	f003 fefb 	bl	8005d20 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f2a:	6938      	ldr	r0, [r7, #16]
 8001f2c:	f003 ff2c 	bl	8005d88 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2101      	movs	r1, #1
 8001f36:	4618      	mov	r0, r3
 8001f38:	f004 f902 	bl	8006140 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f006 fecf 	bl	8008ce0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f003 ffe4 	bl	8005f14 <USB_ReadInterrupts>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f56:	d102      	bne.n	8001f5e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f001 f89e 	bl	800309a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f003 ffd6 	bl	8005f14 <USB_ReadInterrupts>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d106      	bne.n	8001f80 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f006 fe98 	bl	8008ca8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f003 ffc5 	bl	8005f14 <USB_ReadInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b10      	cmp	r3, #16
 8001f92:	d101      	bne.n	8001f98 <HAL_HCD_IRQHandler+0x158>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_HCD_IRQHandler+0x15a>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0210 	bic.w	r2, r2, #16
 8001fac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 ffa1 	bl	8002ef6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0210 	orr.w	r2, r2, #16
 8001fc2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 ffa3 	bl	8005f14 <USB_ReadInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fd8:	d13a      	bne.n	8002050 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 fbd8 	bl	8006794 <USB_HC_ReadInterrupt>
 8001fe4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	e025      	b.n	8002038 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d018      	beq.n	8002032 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	4413      	add	r3, r2
 8002008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002016:	d106      	bne.n	8002026 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	4619      	mov	r1, r3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8ab 	bl	800217a <HCD_HC_IN_IRQHandler>
 8002024:	e005      	b.n	8002032 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fbf9 	bl	8002824 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	429a      	cmp	r2, r3
 8002040:	d3d4      	bcc.n	8001fec <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800204a:	615a      	str	r2, [r3, #20]
 800204c:	e000      	b.n	8002050 <HAL_HCD_IRQHandler+0x210>
      return;
 800204e:	bf00      	nop
    }
  }
}
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_HCD_Start+0x16>
 8002068:	2302      	movs	r3, #2
 800206a:	e013      	b.n	8002094 <HAL_HCD_Start+0x3e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2101      	movs	r1, #1
 800207a:	4618      	mov	r0, r3
 800207c:	f004 f8c4 	bl	8006208 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f003 fddc 	bl	8005c42 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_HCD_Stop+0x16>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e00d      	b.n	80020ce <HAL_HCD_Stop+0x32>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 fcb2 	bl	8006a28 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 f866 	bl	80061b4 <USB_ResetPort>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	460b      	mov	r3, r1
 80020fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3360      	adds	r3, #96	; 0x60
 800210c:	781b      	ldrb	r3, [r3, #0]
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3350      	adds	r3, #80	; 0x50
 8002134:	681b      	ldr	r3, [r3, #0]
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f004 f8aa 	bl	80062a8 <USB_GetCurrentFrame>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f004 f885 	bl	800627a <USB_GetHostSpeed>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b086      	sub	sp, #24
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	015a      	lsls	r2, r3, #5
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4413      	add	r3, r2
 800219c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d11a      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	015a      	lsls	r2, r3, #5
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b6:	461a      	mov	r2, r3
 80021b8:	2304      	movs	r3, #4
 80021ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3361      	adds	r3, #97	; 0x61
 80021ca:	2206      	movs	r2, #6
 80021cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f004 faec 	bl	80067b6 <USB_HC_Halt>
 80021de:	e0af      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f6:	d11b      	bne.n	8002230 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002204:	461a      	mov	r2, r3
 8002206:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3361      	adds	r3, #97	; 0x61
 800221a:	2207      	movs	r2, #7
 800221c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f004 fac4 	bl	80067b6 <USB_HC_Halt>
 800222e:	e087      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	015a      	lsls	r2, r3, #5
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4413      	add	r3, r2
 8002238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b20      	cmp	r3, #32
 8002244:	d109      	bne.n	800225a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4413      	add	r3, r2
 800224e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002252:	461a      	mov	r2, r3
 8002254:	2320      	movs	r3, #32
 8002256:	6093      	str	r3, [r2, #8]
 8002258:	e072      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	015a      	lsls	r2, r3, #5
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4413      	add	r3, r2
 8002262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b08      	cmp	r3, #8
 800226e:	d11a      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	2308      	movs	r3, #8
 8002280:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3361      	adds	r3, #97	; 0x61
 8002290:	2205      	movs	r2, #5
 8002292:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 fa89 	bl	80067b6 <USB_HC_Halt>
 80022a4:	e04c      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022bc:	d11b      	bne.n	80022f6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	3361      	adds	r3, #97	; 0x61
 80022e0:	2208      	movs	r2, #8
 80022e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f004 fa61 	bl	80067b6 <USB_HC_Halt>
 80022f4:	e024      	b.n	8002340 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d119      	bne.n	8002340 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	015a      	lsls	r2, r3, #5
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002318:	461a      	mov	r2, r3
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3361      	adds	r3, #97	; 0x61
 800232c:	2206      	movs	r2, #6
 800232e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f004 fa3b 	bl	80067b6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4413      	add	r3, r2
 8002348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002356:	d112      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f004 fa27 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	461a      	mov	r2, r3
 8002376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800237a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800237c:	e24e      	b.n	800281c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4413      	add	r3, r2
 8002386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	f040 80df 	bne.w	8002554 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d019      	beq.n	80023d2 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3348      	adds	r3, #72	; 0x48
 80023ac:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0159      	lsls	r1, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	440b      	add	r3, r1
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80023c0:	1ad2      	subs	r2, r2, r3
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	202c      	movs	r0, #44	; 0x2c
 80023c8:	fb00 f303 	mul.w	r3, r0, r3
 80023cc:	440b      	add	r3, r1
 80023ce:	3350      	adds	r3, #80	; 0x50
 80023d0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	212c      	movs	r1, #44	; 0x2c
 80023d8:	fb01 f303 	mul.w	r3, r1, r3
 80023dc:	4413      	add	r3, r2
 80023de:	3361      	adds	r3, #97	; 0x61
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	212c      	movs	r1, #44	; 0x2c
 80023ea:	fb01 f303 	mul.w	r3, r1, r3
 80023ee:	4413      	add	r3, r2
 80023f0:	335c      	adds	r3, #92	; 0x5c
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	461a      	mov	r2, r3
 8002404:	2301      	movs	r3, #1
 8002406:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	212c      	movs	r1, #44	; 0x2c
 800240e:	fb01 f303 	mul.w	r3, r1, r3
 8002412:	4413      	add	r3, r2
 8002414:	333f      	adds	r3, #63	; 0x3f
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d009      	beq.n	8002430 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	212c      	movs	r1, #44	; 0x2c
 8002422:	fb01 f303 	mul.w	r3, r1, r3
 8002426:	4413      	add	r3, r2
 8002428:	333f      	adds	r3, #63	; 0x3f
 800242a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800242c:	2b02      	cmp	r3, #2
 800242e:	d111      	bne.n	8002454 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f004 f9bb 	bl	80067b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244c:	461a      	mov	r2, r3
 800244e:	2310      	movs	r3, #16
 8002450:	6093      	str	r3, [r2, #8]
 8002452:	e03a      	b.n	80024ca <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	212c      	movs	r1, #44	; 0x2c
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	4413      	add	r3, r2
 8002460:	333f      	adds	r3, #63	; 0x3f
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b03      	cmp	r3, #3
 8002466:	d009      	beq.n	800247c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	212c      	movs	r1, #44	; 0x2c
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	4413      	add	r3, r2
 8002474:	333f      	adds	r3, #63	; 0x3f
 8002476:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002478:	2b01      	cmp	r3, #1
 800247a:	d126      	bne.n	80024ca <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	0151      	lsls	r1, r2, #5
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	440a      	add	r2, r1
 8002492:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002496:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800249a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	212c      	movs	r1, #44	; 0x2c
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	4413      	add	r3, r2
 80024a8:	3360      	adds	r3, #96	; 0x60
 80024aa:	2201      	movs	r2, #1
 80024ac:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	b2d9      	uxtb	r1, r3
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	202c      	movs	r0, #44	; 0x2c
 80024b8:	fb00 f303 	mul.w	r3, r0, r3
 80024bc:	4413      	add	r3, r2
 80024be:	3360      	adds	r3, #96	; 0x60
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f006 fc19 	bl	8008cfc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d12b      	bne.n	800252a <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	212c      	movs	r1, #44	; 0x2c
 80024d8:	fb01 f303 	mul.w	r3, r1, r3
 80024dc:	4413      	add	r3, r2
 80024de:	3348      	adds	r3, #72	; 0x48
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	202c      	movs	r0, #44	; 0x2c
 80024e8:	fb00 f202 	mul.w	r2, r0, r2
 80024ec:	440a      	add	r2, r1
 80024ee:	3240      	adds	r2, #64	; 0x40
 80024f0:	8812      	ldrh	r2, [r2, #0]
 80024f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 818e 	beq.w	800281c <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	212c      	movs	r1, #44	; 0x2c
 8002506:	fb01 f303 	mul.w	r3, r1, r3
 800250a:	4413      	add	r3, r2
 800250c:	3354      	adds	r3, #84	; 0x54
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	f083 0301 	eor.w	r3, r3, #1
 8002514:	b2d8      	uxtb	r0, r3
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3354      	adds	r3, #84	; 0x54
 8002524:	4602      	mov	r2, r0
 8002526:	701a      	strb	r2, [r3, #0]
}
 8002528:	e178      	b.n	800281c <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	212c      	movs	r1, #44	; 0x2c
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	4413      	add	r3, r2
 8002536:	3354      	adds	r3, #84	; 0x54
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2d8      	uxtb	r0, r3
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3354      	adds	r3, #84	; 0x54
 800254e:	4602      	mov	r2, r0
 8002550:	701a      	strb	r2, [r3, #0]
}
 8002552:	e163      	b.n	800281c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b02      	cmp	r3, #2
 8002568:	f040 80f6 	bne.w	8002758 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3361      	adds	r3, #97	; 0x61
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d109      	bne.n	8002594 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	212c      	movs	r1, #44	; 0x2c
 8002586:	fb01 f303 	mul.w	r3, r1, r3
 800258a:	4413      	add	r3, r2
 800258c:	3360      	adds	r3, #96	; 0x60
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e0c9      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	212c      	movs	r1, #44	; 0x2c
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	3361      	adds	r3, #97	; 0x61
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d109      	bne.n	80025bc <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	212c      	movs	r1, #44	; 0x2c
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	4413      	add	r3, r2
 80025b4:	3360      	adds	r3, #96	; 0x60
 80025b6:	2205      	movs	r2, #5
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e0b5      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	212c      	movs	r1, #44	; 0x2c
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3361      	adds	r3, #97	; 0x61
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b06      	cmp	r3, #6
 80025ce:	d009      	beq.n	80025e4 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	212c      	movs	r1, #44	; 0x2c
 80025d6:	fb01 f303 	mul.w	r3, r1, r3
 80025da:	4413      	add	r3, r2
 80025dc:	3361      	adds	r3, #97	; 0x61
 80025de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d150      	bne.n	8002686 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	335c      	adds	r3, #92	; 0x5c
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	202c      	movs	r0, #44	; 0x2c
 80025fc:	fb00 f303 	mul.w	r3, r0, r3
 8002600:	440b      	add	r3, r1
 8002602:	335c      	adds	r3, #92	; 0x5c
 8002604:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	335c      	adds	r3, #92	; 0x5c
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d912      	bls.n	8002640 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	212c      	movs	r1, #44	; 0x2c
 8002620:	fb01 f303 	mul.w	r3, r1, r3
 8002624:	4413      	add	r3, r2
 8002626:	335c      	adds	r3, #92	; 0x5c
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3360      	adds	r3, #96	; 0x60
 800263a:	2204      	movs	r2, #4
 800263c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800263e:	e073      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3360      	adds	r3, #96	; 0x60
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002668:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002670:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002684:	e050      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	212c      	movs	r1, #44	; 0x2c
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4413      	add	r3, r2
 8002692:	3361      	adds	r3, #97	; 0x61
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d122      	bne.n	80026e0 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3360      	adds	r3, #96	; 0x60
 80026a8:	2202      	movs	r2, #2
 80026aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e023      	b.n	8002728 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	3361      	adds	r3, #97	; 0x61
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b07      	cmp	r3, #7
 80026f2:	d119      	bne.n	8002728 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	335c      	adds	r3, #92	; 0x5c
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	202c      	movs	r0, #44	; 0x2c
 800270c:	fb00 f303 	mul.w	r3, r0, r3
 8002710:	440b      	add	r3, r1
 8002712:	335c      	adds	r3, #92	; 0x5c
 8002714:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3360      	adds	r3, #96	; 0x60
 8002724:	2204      	movs	r2, #4
 8002726:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002734:	461a      	mov	r2, r3
 8002736:	2302      	movs	r3, #2
 8002738:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	b2d9      	uxtb	r1, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	202c      	movs	r0, #44	; 0x2c
 8002744:	fb00 f303 	mul.w	r3, r0, r3
 8002748:	4413      	add	r3, r2
 800274a:	3360      	adds	r3, #96	; 0x60
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f006 fad3 	bl	8008cfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002756:	e061      	b.n	800281c <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	2b10      	cmp	r3, #16
 800276c:	d156      	bne.n	800281c <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	333f      	adds	r3, #63	; 0x3f
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d111      	bne.n	80027a6 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	335c      	adds	r3, #92	; 0x5c
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 f809 	bl	80067b6 <USB_HC_Halt>
 80027a4:	e031      	b.n	800280a <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	333f      	adds	r3, #63	; 0x3f
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d009      	beq.n	80027ce <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	212c      	movs	r1, #44	; 0x2c
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	4413      	add	r3, r2
 80027c6:	333f      	adds	r3, #63	; 0x3f
 80027c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d11d      	bne.n	800280a <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	212c      	movs	r1, #44	; 0x2c
 80027d4:	fb01 f303 	mul.w	r3, r1, r3
 80027d8:	4413      	add	r3, r2
 80027da:	335c      	adds	r3, #92	; 0x5c
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d110      	bne.n	800280a <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	212c      	movs	r1, #44	; 0x2c
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	4413      	add	r3, r2
 80027f4:	3361      	adds	r3, #97	; 0x61
 80027f6:	2203      	movs	r2, #3
 80027f8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f003 ffd6 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	015a      	lsls	r2, r3, #5
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4413      	add	r3, r2
 8002812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002816:	461a      	mov	r2, r3
 8002818:	2310      	movs	r3, #16
 800281a:	6093      	str	r3, [r2, #8]
}
 800281c:	bf00      	nop
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	015a      	lsls	r2, r3, #5
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	4413      	add	r3, r2
 8002846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b04      	cmp	r3, #4
 8002852:	d11a      	bne.n	800288a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	4413      	add	r3, r2
 800285c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002860:	461a      	mov	r2, r3
 8002862:	2304      	movs	r3, #4
 8002864:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3361      	adds	r3, #97	; 0x61
 8002874:	2206      	movs	r2, #6
 8002876:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f003 ff97 	bl	80067b6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002888:	e331      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b20      	cmp	r3, #32
 800289e:	d12e      	bne.n	80028fe <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	2320      	movs	r3, #32
 80028b0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	212c      	movs	r1, #44	; 0x2c
 80028b8:	fb01 f303 	mul.w	r3, r1, r3
 80028bc:	4413      	add	r3, r2
 80028be:	333d      	adds	r3, #61	; 0x3d
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	f040 8313 	bne.w	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	333d      	adds	r3, #61	; 0x3d
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3360      	adds	r3, #96	; 0x60
 80028e8:	2202      	movs	r2, #2
 80028ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 ff5d 	bl	80067b6 <USB_HC_Halt>
}
 80028fc:	e2f7      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002914:	d112      	bne.n	800293c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	461a      	mov	r2, r3
 8002924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002928:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f003 ff3e 	bl	80067b6 <USB_HC_Halt>
}
 800293a:	e2d8      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b01      	cmp	r3, #1
 8002950:	d140      	bne.n	80029d4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	335c      	adds	r3, #92	; 0x5c
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d111      	bne.n	800299e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	333d      	adds	r3, #61	; 0x3d
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002998:	461a      	mov	r2, r3
 800299a:	2340      	movs	r3, #64	; 0x40
 800299c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029aa:	461a      	mov	r2, r3
 80029ac:	2301      	movs	r3, #1
 80029ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	fb01 f303 	mul.w	r3, r1, r3
 80029ba:	4413      	add	r3, r2
 80029bc:	3361      	adds	r3, #97	; 0x61
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fef2 	bl	80067b6 <USB_HC_Halt>
}
 80029d2:	e28c      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	015a      	lsls	r2, r3, #5
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d12c      	bne.n	8002a44 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	212c      	movs	r1, #44	; 0x2c
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3361      	adds	r3, #97	; 0x61
 80029f8:	2204      	movs	r2, #4
 80029fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	212c      	movs	r1, #44	; 0x2c
 8002a02:	fb01 f303 	mul.w	r3, r1, r3
 8002a06:	4413      	add	r3, r2
 8002a08:	333d      	adds	r3, #61	; 0x3d
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	212c      	movs	r1, #44	; 0x2c
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	335c      	adds	r3, #92	; 0x5c
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	4611      	mov	r1, r2
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 fec3 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	2340      	movs	r3, #64	; 0x40
 8002a40:	6093      	str	r3, [r2, #8]
}
 8002a42:	e254      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d11a      	bne.n	8002a90 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a66:	461a      	mov	r2, r3
 8002a68:	2308      	movs	r3, #8
 8002a6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	212c      	movs	r1, #44	; 0x2c
 8002a72:	fb01 f303 	mul.w	r3, r1, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	3361      	adds	r3, #97	; 0x61
 8002a7a:	2205      	movs	r2, #5
 8002a7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fe94 	bl	80067b6 <USB_HC_Halt>
}
 8002a8e:	e22e      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d140      	bne.n	8002b28 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	335c      	adds	r3, #92	; 0x5c
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3361      	adds	r3, #97	; 0x61
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	212c      	movs	r1, #44	; 0x2c
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	333d      	adds	r3, #61	; 0x3d
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d112      	bne.n	8002b04 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	333c      	adds	r3, #60	; 0x3c
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d108      	bne.n	8002b04 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	333d      	adds	r3, #61	; 0x3d
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	b2d2      	uxtb	r2, r2
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f003 fe51 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	461a      	mov	r2, r3
 8002b22:	2310      	movs	r3, #16
 8002b24:	6093      	str	r3, [r2, #8]
}
 8002b26:	e1e2      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b80      	cmp	r3, #128	; 0x80
 8002b3c:	d164      	bne.n	8002c08 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d111      	bne.n	8002b6a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	212c      	movs	r1, #44	; 0x2c
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	3361      	adds	r3, #97	; 0x61
 8002b54:	2206      	movs	r2, #6
 8002b56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fe27 	bl	80067b6 <USB_HC_Halt>
 8002b68:	e044      	b.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	335c      	adds	r3, #92	; 0x5c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	202c      	movs	r0, #44	; 0x2c
 8002b82:	fb00 f303 	mul.w	r3, r0, r3
 8002b86:	440b      	add	r3, r1
 8002b88:	335c      	adds	r3, #92	; 0x5c
 8002b8a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	335c      	adds	r3, #92	; 0x5c
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d920      	bls.n	8002be2 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	212c      	movs	r1, #44	; 0x2c
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	4413      	add	r3, r2
 8002bac:	335c      	adds	r3, #92	; 0x5c
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3360      	adds	r3, #96	; 0x60
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	b2d9      	uxtb	r1, r3
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	202c      	movs	r0, #44	; 0x2c
 8002bce:	fb00 f303 	mul.w	r3, r0, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3360      	adds	r3, #96	; 0x60
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f006 f88e 	bl	8008cfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002be0:	e008      	b.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3360      	adds	r3, #96	; 0x60
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	461a      	mov	r2, r3
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	6093      	str	r3, [r2, #8]
}
 8002c06:	e172      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	015a      	lsls	r2, r3, #5
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1e:	d11b      	bne.n	8002c58 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	212c      	movs	r1, #44	; 0x2c
 8002c26:	fb01 f303 	mul.w	r3, r1, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3361      	adds	r3, #97	; 0x61
 8002c2e:	2208      	movs	r2, #8
 8002c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fdba 	bl	80067b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c54:	6093      	str	r3, [r2, #8]
}
 8002c56:	e14a      	b.n	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	f040 813f 	bne.w	8002eee <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	212c      	movs	r1, #44	; 0x2c
 8002c76:	fb01 f303 	mul.w	r3, r1, r3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3361      	adds	r3, #97	; 0x61
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d17d      	bne.n	8002d80 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3360      	adds	r3, #96	; 0x60
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	333f      	adds	r3, #63	; 0x3f
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d00a      	beq.n	8002cc0 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	333f      	adds	r3, #63	; 0x3f
 8002cb8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	f040 8100 	bne.w	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d113      	bne.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	212c      	movs	r1, #44	; 0x2c
 8002cce:	fb01 f303 	mul.w	r3, r1, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3355      	adds	r3, #85	; 0x55
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	f083 0301 	eor.w	r3, r3, #1
 8002cdc:	b2d8      	uxtb	r0, r3
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	212c      	movs	r1, #44	; 0x2c
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	4413      	add	r3, r2
 8002cea:	3355      	adds	r3, #85	; 0x55
 8002cec:	4602      	mov	r2, r0
 8002cee:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	f040 80e3 	bne.w	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	334c      	adds	r3, #76	; 0x4c
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 80d8 	beq.w	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	334c      	adds	r3, #76	; 0x4c
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	202c      	movs	r0, #44	; 0x2c
 8002d26:	fb00 f202 	mul.w	r2, r0, r2
 8002d2a:	440a      	add	r2, r1
 8002d2c:	3240      	adds	r2, #64	; 0x40
 8002d2e:	8812      	ldrh	r2, [r2, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	697a      	ldr	r2, [r7, #20]
 8002d38:	202c      	movs	r0, #44	; 0x2c
 8002d3a:	fb00 f202 	mul.w	r2, r0, r2
 8002d3e:	440a      	add	r2, r1
 8002d40:	3240      	adds	r2, #64	; 0x40
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80b5 	beq.w	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3355      	adds	r3, #85	; 0x55
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2d8      	uxtb	r0, r3
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	3355      	adds	r3, #85	; 0x55
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	e09f      	b.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	212c      	movs	r1, #44	; 0x2c
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3361      	adds	r3, #97	; 0x61
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d109      	bne.n	8002da8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	212c      	movs	r1, #44	; 0x2c
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3360      	adds	r3, #96	; 0x60
 8002da2:	2202      	movs	r2, #2
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e08b      	b.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3361      	adds	r3, #97	; 0x61
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d109      	bne.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3360      	adds	r3, #96	; 0x60
 8002dca:	2202      	movs	r2, #2
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e077      	b.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3361      	adds	r3, #97	; 0x61
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	d109      	bne.n	8002df8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3360      	adds	r3, #96	; 0x60
 8002df2:	2205      	movs	r2, #5
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e063      	b.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d009      	beq.n	8002e20 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3361      	adds	r3, #97	; 0x61
 8002e1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d14f      	bne.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	335c      	adds	r3, #92	; 0x5c
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	202c      	movs	r0, #44	; 0x2c
 8002e38:	fb00 f303 	mul.w	r3, r0, r3
 8002e3c:	440b      	add	r3, r1
 8002e3e:	335c      	adds	r3, #92	; 0x5c
 8002e40:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	212c      	movs	r1, #44	; 0x2c
 8002e48:	fb01 f303 	mul.w	r3, r1, r3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	335c      	adds	r3, #92	; 0x5c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d912      	bls.n	8002e7c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	212c      	movs	r1, #44	; 0x2c
 8002e5c:	fb01 f303 	mul.w	r3, r1, r3
 8002e60:	4413      	add	r3, r2
 8002e62:	335c      	adds	r3, #92	; 0x5c
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e021      	b.n	8002ec0 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3360      	adds	r3, #96	; 0x60
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	015a      	lsls	r2, r3, #5
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4413      	add	r3, r2
 8002e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ea4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002eac:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eba:	461a      	mov	r2, r3
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ecc:	461a      	mov	r2, r3
 8002ece:	2302      	movs	r3, #2
 8002ed0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	b2d9      	uxtb	r1, r3
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	202c      	movs	r0, #44	; 0x2c
 8002edc:	fb00 f303 	mul.w	r3, r0, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3360      	adds	r3, #96	; 0x60
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f005 ff07 	bl	8008cfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002eee:	bf00      	nop
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b08a      	sub	sp, #40	; 0x28
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f06:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	0c5b      	lsrs	r3, r3, #17
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f2a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d004      	beq.n	8002f3c <HCD_RXQLVL_IRQHandler+0x46>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b05      	cmp	r3, #5
 8002f36:	f000 80a9 	beq.w	800308c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002f3a:	e0aa      	b.n	8003092 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f000 80a6 	beq.w	8003090 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	212c      	movs	r1, #44	; 0x2c
 8002f4a:	fb01 f303 	mul.w	r3, r1, r3
 8002f4e:	4413      	add	r3, r2
 8002f50:	3344      	adds	r3, #68	; 0x44
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 809b 	beq.w	8003090 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3350      	adds	r3, #80	; 0x50
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	441a      	add	r2, r3
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	202c      	movs	r0, #44	; 0x2c
 8002f74:	fb00 f303 	mul.w	r3, r0, r3
 8002f78:	440b      	add	r3, r1
 8002f7a:	334c      	adds	r3, #76	; 0x4c
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d87a      	bhi.n	8003078 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	212c      	movs	r1, #44	; 0x2c
 8002f8c:	fb01 f303 	mul.w	r3, r1, r3
 8002f90:	4413      	add	r3, r2
 8002f92:	3344      	adds	r3, #68	; 0x44
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	b292      	uxth	r2, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	f002 ff62 	bl	8005e64 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	212c      	movs	r1, #44	; 0x2c
 8002fa6:	fb01 f303 	mul.w	r3, r1, r3
 8002faa:	4413      	add	r3, r2
 8002fac:	3344      	adds	r3, #68	; 0x44
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	202c      	movs	r0, #44	; 0x2c
 8002fba:	fb00 f303 	mul.w	r3, r0, r3
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3344      	adds	r3, #68	; 0x44
 8002fc2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3350      	adds	r3, #80	; 0x50
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	202c      	movs	r0, #44	; 0x2c
 8002fde:	fb00 f303 	mul.w	r3, r0, r3
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3350      	adds	r3, #80	; 0x50
 8002fe6:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	0cdb      	lsrs	r3, r3, #19
 8002ff8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ffc:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3340      	adds	r3, #64	; 0x40
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4293      	cmp	r3, r2
 8003014:	d13c      	bne.n	8003090 <HCD_RXQLVL_IRQHandler+0x19a>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d039      	beq.n	8003090 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	4413      	add	r3, r2
 8003024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003032:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800303a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	015a      	lsls	r2, r3, #5
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	4413      	add	r3, r2
 8003044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003048:	461a      	mov	r2, r3
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3354      	adds	r3, #84	; 0x54
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	b2d8      	uxtb	r0, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3354      	adds	r3, #84	; 0x54
 8003072:	4602      	mov	r2, r0
 8003074:	701a      	strb	r2, [r3, #0]
      break;
 8003076:	e00b      	b.n	8003090 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	212c      	movs	r1, #44	; 0x2c
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3360      	adds	r3, #96	; 0x60
 8003086:	2204      	movs	r2, #4
 8003088:	701a      	strb	r2, [r3, #0]
      break;
 800308a:	e001      	b.n	8003090 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800308c:	bf00      	nop
 800308e:	e000      	b.n	8003092 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003090:	bf00      	nop
  }
}
 8003092:	bf00      	nop
 8003094:	3728      	adds	r7, #40	; 0x28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030c6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d10b      	bne.n	80030ea <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d102      	bne.n	80030e2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f005 fdf1 	bl	8008cc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d132      	bne.n	800315a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f043 0308 	orr.w	r3, r3, #8
 80030fa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d126      	bne.n	8003154 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d113      	bne.n	8003136 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003114:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003118:	d106      	bne.n	8003128 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2102      	movs	r1, #2
 8003120:	4618      	mov	r0, r3
 8003122:	f003 f80d 	bl	8006140 <USB_InitFSLSPClkSel>
 8003126:	e011      	b.n	800314c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f003 f806 	bl	8006140 <USB_InitFSLSPClkSel>
 8003134:	e00a      	b.n	800314c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d106      	bne.n	800314c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003144:	461a      	mov	r2, r3
 8003146:	f64e 2360 	movw	r3, #60000	; 0xea60
 800314a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f005 fde3 	bl	8008d18 <HAL_HCD_PortEnabled_Callback>
 8003152:	e002      	b.n	800315a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f005 fded 	bl	8008d34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b20      	cmp	r3, #32
 8003162:	d103      	bne.n	800316c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f043 0320 	orr.w	r3, r3, #32
 800316a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003172:	461a      	mov	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e12b      	b.n	80033ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fd fdf6 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0201 	bic.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e4:	f001 fa20 	bl	8004628 <HAL_RCC_GetPCLK1Freq>
 80031e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4a81      	ldr	r2, [pc, #516]	; (80033f4 <HAL_I2C_Init+0x274>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d807      	bhi.n	8003204 <HAL_I2C_Init+0x84>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4a80      	ldr	r2, [pc, #512]	; (80033f8 <HAL_I2C_Init+0x278>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	bf94      	ite	ls
 80031fc:	2301      	movls	r3, #1
 80031fe:	2300      	movhi	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e006      	b.n	8003212 <HAL_I2C_Init+0x92>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a7d      	ldr	r2, [pc, #500]	; (80033fc <HAL_I2C_Init+0x27c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	bf94      	ite	ls
 800320c:	2301      	movls	r3, #1
 800320e:	2300      	movhi	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e0e7      	b.n	80033ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a78      	ldr	r2, [pc, #480]	; (8003400 <HAL_I2C_Init+0x280>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0c9b      	lsrs	r3, r3, #18
 8003224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	4a6a      	ldr	r2, [pc, #424]	; (80033f4 <HAL_I2C_Init+0x274>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d802      	bhi.n	8003254 <HAL_I2C_Init+0xd4>
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3301      	adds	r3, #1
 8003252:	e009      	b.n	8003268 <HAL_I2C_Init+0xe8>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	4a69      	ldr	r2, [pc, #420]	; (8003404 <HAL_I2C_Init+0x284>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	099b      	lsrs	r3, r3, #6
 8003266:	3301      	adds	r3, #1
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	430b      	orrs	r3, r1
 800326e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800327a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	495c      	ldr	r1, [pc, #368]	; (80033f4 <HAL_I2C_Init+0x274>)
 8003284:	428b      	cmp	r3, r1
 8003286:	d819      	bhi.n	80032bc <HAL_I2C_Init+0x13c>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e59      	subs	r1, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	fbb1 f3f3 	udiv	r3, r1, r3
 8003296:	1c59      	adds	r1, r3, #1
 8003298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800329c:	400b      	ands	r3, r1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_I2C_Init+0x138>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1e59      	subs	r1, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b0:	3301      	adds	r3, #1
 80032b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032b6:	e051      	b.n	800335c <HAL_I2C_Init+0x1dc>
 80032b8:	2304      	movs	r3, #4
 80032ba:	e04f      	b.n	800335c <HAL_I2C_Init+0x1dc>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d111      	bne.n	80032e8 <HAL_I2C_Init+0x168>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	440b      	add	r3, r1
 80032d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032d6:	3301      	adds	r3, #1
 80032d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e012      	b.n	800330e <HAL_I2C_Init+0x18e>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1e58      	subs	r0, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	460b      	mov	r3, r1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	0099      	lsls	r1, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80032fe:	3301      	adds	r3, #1
 8003300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf0c      	ite	eq
 8003308:	2301      	moveq	r3, #1
 800330a:	2300      	movne	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_I2C_Init+0x196>
 8003312:	2301      	movs	r3, #1
 8003314:	e022      	b.n	800335c <HAL_I2C_Init+0x1dc>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10e      	bne.n	800333c <HAL_I2C_Init+0x1bc>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1e58      	subs	r0, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	440b      	add	r3, r1
 800332c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800333a:	e00f      	b.n	800335c <HAL_I2C_Init+0x1dc>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1e58      	subs	r0, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	0099      	lsls	r1, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003352:	3301      	adds	r3, #1
 8003354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	6809      	ldr	r1, [r1, #0]
 8003360:	4313      	orrs	r3, r2
 8003362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69da      	ldr	r2, [r3, #28]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800338a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6911      	ldr	r1, [r2, #16]
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6812      	ldr	r2, [r2, #0]
 800339c:	430b      	orrs	r3, r1
 800339e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695a      	ldr	r2, [r3, #20]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	430a      	orrs	r2, r1
 80033ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	000186a0 	.word	0x000186a0
 80033f8:	001e847f 	.word	0x001e847f
 80033fc:	003d08ff 	.word	0x003d08ff
 8003400:	431bde83 	.word	0x431bde83
 8003404:	10624dd3 	.word	0x10624dd3

08003408 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e128      	b.n	800366c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a90      	ldr	r2, [pc, #576]	; (8003674 <HAL_I2S_Init+0x26c>)
 8003432:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7fd fcf7 	bl	8000e28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003450:	f023 030f 	bic.w	r3, r3, #15
 8003454:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2202      	movs	r2, #2
 800345c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d060      	beq.n	8003528 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800346e:	2310      	movs	r3, #16
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	e001      	b.n	8003478 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003474:	2320      	movs	r3, #32
 8003476:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b20      	cmp	r3, #32
 800347e:	d802      	bhi.n	8003486 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003486:	2001      	movs	r0, #1
 8003488:	f001 f9c4 	bl	8004814 <HAL_RCCEx_GetPeriphCLKFreq>
 800348c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003496:	d125      	bne.n	80034e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d010      	beq.n	80034c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034bc:	3305      	adds	r3, #5
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	e01f      	b.n	8003502 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	461a      	mov	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	3305      	adds	r3, #5
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	e00e      	b.n	8003502 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	461a      	mov	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fe:	3305      	adds	r3, #5
 8003500:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4a5c      	ldr	r2, [pc, #368]	; (8003678 <HAL_I2S_Init+0x270>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	08db      	lsrs	r3, r3, #3
 800350c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	021b      	lsls	r3, r3, #8
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	e003      	b.n	8003530 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003528:	2302      	movs	r3, #2
 800352a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d902      	bls.n	800353c <HAL_I2S_Init+0x134>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	2bff      	cmp	r3, #255	; 0xff
 800353a:	d907      	bls.n	800354c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f043 0210 	orr.w	r2, r3, #16
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e08f      	b.n	800366c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	ea42 0103 	orr.w	r1, r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	430a      	orrs	r2, r1
 800355e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800356a:	f023 030f 	bic.w	r3, r3, #15
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6851      	ldr	r1, [r2, #4]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6892      	ldr	r2, [r2, #8]
 8003576:	4311      	orrs	r1, r2
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	68d2      	ldr	r2, [r2, #12]
 800357c:	4311      	orrs	r1, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6992      	ldr	r2, [r2, #24]
 8003582:	430a      	orrs	r2, r1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800358e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d161      	bne.n	800365c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a38      	ldr	r2, [pc, #224]	; (800367c <HAL_I2S_Init+0x274>)
 800359c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a37      	ldr	r2, [pc, #220]	; (8003680 <HAL_I2S_Init+0x278>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_I2S_Init+0x1a4>
 80035a8:	4b36      	ldr	r3, [pc, #216]	; (8003684 <HAL_I2S_Init+0x27c>)
 80035aa:	e001      	b.n	80035b0 <HAL_I2S_Init+0x1a8>
 80035ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	4932      	ldr	r1, [pc, #200]	; (8003680 <HAL_I2S_Init+0x278>)
 80035b8:	428a      	cmp	r2, r1
 80035ba:	d101      	bne.n	80035c0 <HAL_I2S_Init+0x1b8>
 80035bc:	4a31      	ldr	r2, [pc, #196]	; (8003684 <HAL_I2S_Init+0x27c>)
 80035be:	e001      	b.n	80035c4 <HAL_I2S_Init+0x1bc>
 80035c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80035c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035c8:	f023 030f 	bic.w	r3, r3, #15
 80035cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a2b      	ldr	r2, [pc, #172]	; (8003680 <HAL_I2S_Init+0x278>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_I2S_Init+0x1d4>
 80035d8:	4b2a      	ldr	r3, [pc, #168]	; (8003684 <HAL_I2S_Init+0x27c>)
 80035da:	e001      	b.n	80035e0 <HAL_I2S_Init+0x1d8>
 80035dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e0:	2202      	movs	r2, #2
 80035e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a25      	ldr	r2, [pc, #148]	; (8003680 <HAL_I2S_Init+0x278>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d101      	bne.n	80035f2 <HAL_I2S_Init+0x1ea>
 80035ee:	4b25      	ldr	r3, [pc, #148]	; (8003684 <HAL_I2S_Init+0x27c>)
 80035f0:	e001      	b.n	80035f6 <HAL_I2S_Init+0x1ee>
 80035f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f6:	69db      	ldr	r3, [r3, #28]
 80035f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003602:	d003      	beq.n	800360c <HAL_I2S_Init+0x204>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d103      	bne.n	8003614 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800360c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e001      	b.n	8003618 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003622:	4313      	orrs	r3, r2
 8003624:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800362c:	4313      	orrs	r3, r2
 800362e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003636:	4313      	orrs	r3, r2
 8003638:	b29a      	uxth	r2, r3
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	4313      	orrs	r3, r2
 800363e:	b29b      	uxth	r3, r3
 8003640:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003644:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a0d      	ldr	r2, [pc, #52]	; (8003680 <HAL_I2S_Init+0x278>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_I2S_Init+0x24c>
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_I2S_Init+0x27c>)
 8003652:	e001      	b.n	8003658 <HAL_I2S_Init+0x250>
 8003654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003658:	897a      	ldrh	r2, [r7, #10]
 800365a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	0800377f 	.word	0x0800377f
 8003678:	cccccccd 	.word	0xcccccccd
 800367c:	08003895 	.word	0x08003895
 8003680:	40003800 	.word	0x40003800
 8003684:	40003400 	.word	0x40003400

08003688 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	1c9a      	adds	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10e      	bne.n	8003718 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003708:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ffb8 	bl	8003688 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003732:	b292      	uxth	r2, r2
 8003734:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	1c9a      	adds	r2, r3, #2
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10e      	bne.n	8003776 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003766:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7ff ff93 	bl	800369c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b086      	sub	sp, #24
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b04      	cmp	r3, #4
 8003798:	d13a      	bne.n	8003810 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d109      	bne.n	80037b8 <I2S_IRQHandler+0x3a>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ae:	2b40      	cmp	r3, #64	; 0x40
 80037b0:	d102      	bne.n	80037b8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ffb4 	bl	8003720 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d126      	bne.n	8003810 <I2S_IRQHandler+0x92>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d11f      	bne.n	8003810 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f043 0202 	orr.w	r2, r3, #2
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ff50 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b03      	cmp	r3, #3
 800381a:	d136      	bne.n	800388a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d109      	bne.n	800383a <I2S_IRQHandler+0xbc>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003830:	2b80      	cmp	r3, #128	; 0x80
 8003832:	d102      	bne.n	800383a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff45 	bl	80036c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b08      	cmp	r3, #8
 8003842:	d122      	bne.n	800388a <I2S_IRQHandler+0x10c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	2b20      	cmp	r3, #32
 8003850:	d11b      	bne.n	800388a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003860:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387c:	f043 0204 	orr.w	r2, r3, #4
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff ff13 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800388a:	bf00      	nop
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a92      	ldr	r2, [pc, #584]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80038ae:	4b92      	ldr	r3, [pc, #584]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038b0:	e001      	b.n	80038b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80038b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a8b      	ldr	r2, [pc, #556]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d101      	bne.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80038cc:	4b8a      	ldr	r3, [pc, #552]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ce:	e001      	b.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80038d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e0:	d004      	beq.n	80038ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 8099 	bne.w	8003a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d107      	bne.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f925 	bl	8003b50 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d107      	bne.n	8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f9c8 	bl	8003cb0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003926:	2b40      	cmp	r3, #64	; 0x40
 8003928:	d13a      	bne.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d035      	beq.n	80039a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6e      	ldr	r2, [pc, #440]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800393e:	4b6e      	ldr	r3, [pc, #440]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003940:	e001      	b.n	8003946 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003942:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4969      	ldr	r1, [pc, #420]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800394e:	428b      	cmp	r3, r1
 8003950:	d101      	bne.n	8003956 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003952:	4b69      	ldr	r3, [pc, #420]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003954:	e001      	b.n	800395a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003956:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800395a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800395e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800396e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f043 0202 	orr.w	r2, r3, #2
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fe88 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0308 	and.w	r3, r3, #8
 80039a6:	2b08      	cmp	r3, #8
 80039a8:	f040 80c3 	bne.w	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80bd 	beq.w	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a49      	ldr	r2, [pc, #292]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80039d2:	4b49      	ldr	r3, [pc, #292]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039d4:	e001      	b.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80039d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4944      	ldr	r1, [pc, #272]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039e2:	428b      	cmp	r3, r1
 80039e4:	d101      	bne.n	80039ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80039e6:	4b44      	ldr	r3, [pc, #272]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039e8:	e001      	b.n	80039ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80039ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039f4:	2300      	movs	r3, #0
 80039f6:	60bb      	str	r3, [r7, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	60bb      	str	r3, [r7, #8]
 8003a00:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fe4a 	bl	80036b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a1c:	e089      	b.n	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d107      	bne.n	8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f8be 	bl	8003bb4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d107      	bne.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f8fd 	bl	8003c4c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d12f      	bne.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d02a      	beq.n	8003abc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a74:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a82:	e001      	b.n	8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003a84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4919      	ldr	r1, [pc, #100]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a90:	428b      	cmp	r3, r1
 8003a92:	d101      	bne.n	8003a98 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003a94:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a96:	e001      	b.n	8003a9c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aa0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f043 0202 	orr.w	r2, r3, #2
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fdfa 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d136      	bne.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d031      	beq.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003adc:	e001      	b.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4902      	ldr	r1, [pc, #8]	; (8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aea:	428b      	cmp	r3, r1
 8003aec:	d106      	bne.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003aee:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003af0:	e006      	b.n	8003b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003af2:	bf00      	nop
 8003af4:	40003800 	.word	0x40003800
 8003af8:	40003400 	.word	0x40003400
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b04:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b14:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f043 0204 	orr.w	r2, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff fdc0 	bl	80036b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b30:	e000      	b.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b32:	bf00      	nop
}
 8003b34:	bf00      	nop
 8003b36:	3720      	adds	r7, #32
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1c99      	adds	r1, r3, #2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6251      	str	r1, [r2, #36]	; 0x24
 8003b62:	881a      	ldrh	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d113      	bne.n	8003baa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f7ff ffc9 	bl	8003b3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	1c99      	adds	r1, r3, #2
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6251      	str	r1, [r2, #36]	; 0x24
 8003bc6:	8819      	ldrh	r1, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <I2SEx_TxISR_I2SExt+0x90>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <I2SEx_TxISR_I2SExt+0x22>
 8003bd2:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <I2SEx_TxISR_I2SExt+0x94>)
 8003bd4:	e001      	b.n	8003bda <I2SEx_TxISR_I2SExt+0x26>
 8003bd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bda:	460a      	mov	r2, r1
 8003bdc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d121      	bne.n	8003c3a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <I2SEx_TxISR_I2SExt+0x90>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <I2SEx_TxISR_I2SExt+0x50>
 8003c00:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <I2SEx_TxISR_I2SExt+0x94>)
 8003c02:	e001      	b.n	8003c08 <I2SEx_TxISR_I2SExt+0x54>
 8003c04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	490d      	ldr	r1, [pc, #52]	; (8003c44 <I2SEx_TxISR_I2SExt+0x90>)
 8003c10:	428b      	cmp	r3, r1
 8003c12:	d101      	bne.n	8003c18 <I2SEx_TxISR_I2SExt+0x64>
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <I2SEx_TxISR_I2SExt+0x94>)
 8003c16:	e001      	b.n	8003c1c <I2SEx_TxISR_I2SExt+0x68>
 8003c18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff81 	bl	8003b3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40003800 	.word	0x40003800
 8003c48:	40003400 	.word	0x40003400

08003c4c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68d8      	ldr	r0, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	1c99      	adds	r1, r3, #2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c64:	b282      	uxth	r2, r0
 8003c66:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d113      	bne.n	8003ca8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c8e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ff4a 	bl	8003b3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a20      	ldr	r2, [pc, #128]	; (8003d40 <I2SEx_RxISR_I2SExt+0x90>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <I2SEx_RxISR_I2SExt+0x16>
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <I2SEx_RxISR_I2SExt+0x94>)
 8003cc4:	e001      	b.n	8003cca <I2SEx_RxISR_I2SExt+0x1a>
 8003cc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cca:	68d8      	ldr	r0, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	1c99      	adds	r1, r3, #2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cd6:	b282      	uxth	r2, r0
 8003cd8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d121      	bne.n	8003d36 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a12      	ldr	r2, [pc, #72]	; (8003d40 <I2SEx_RxISR_I2SExt+0x90>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d101      	bne.n	8003d00 <I2SEx_RxISR_I2SExt+0x50>
 8003cfc:	4b11      	ldr	r3, [pc, #68]	; (8003d44 <I2SEx_RxISR_I2SExt+0x94>)
 8003cfe:	e001      	b.n	8003d04 <I2SEx_RxISR_I2SExt+0x54>
 8003d00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	490d      	ldr	r1, [pc, #52]	; (8003d40 <I2SEx_RxISR_I2SExt+0x90>)
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d101      	bne.n	8003d14 <I2SEx_RxISR_I2SExt+0x64>
 8003d10:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <I2SEx_RxISR_I2SExt+0x94>)
 8003d12:	e001      	b.n	8003d18 <I2SEx_RxISR_I2SExt+0x68>
 8003d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d18:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d1c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d106      	bne.n	8003d36 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff03 	bl	8003b3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40003800 	.word	0x40003800
 8003d44:	40003400 	.word	0x40003400

08003d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e267      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d075      	beq.n	8003e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d66:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d00c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d72:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d112      	bne.n	8003da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7e:	4b82      	ldr	r3, [pc, #520]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8a:	d10b      	bne.n	8003da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05b      	beq.n	8003e50 <HAL_RCC_OscConfig+0x108>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d157      	bne.n	8003e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e242      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d106      	bne.n	8003dbc <HAL_RCC_OscConfig+0x74>
 8003dae:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a75      	ldr	r2, [pc, #468]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e01d      	b.n	8003df8 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x98>
 8003dc6:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6f      	ldr	r2, [pc, #444]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a6c      	ldr	r2, [pc, #432]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e00b      	b.n	8003df8 <HAL_RCC_OscConfig+0xb0>
 8003de0:	4b69      	ldr	r3, [pc, #420]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a68      	ldr	r2, [pc, #416]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d013      	beq.n	8003e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fd fabc 	bl	800137c <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fd fab8 	bl	800137c <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e207      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0xc0>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fd faa8 	bl	800137c <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fd faa4 	bl	800137c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1f3      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0xe8>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d063      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d11c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d116      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_RCC_OscConfig+0x152>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d001      	beq.n	8003e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e1c7      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4937      	ldr	r1, [pc, #220]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eae:	e03a      	b.n	8003f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb8:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <HAL_RCC_OscConfig+0x244>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fa5d 	bl	800137c <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec6:	f7fd fa59 	bl	800137c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e1a8      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee4:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4925      	ldr	r1, [pc, #148]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]
 8003ef8:	e015      	b.n	8003f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x244>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fd fa3c 	bl	800137c <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f08:	f7fd fa38 	bl	800137c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e187      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d036      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_RCC_OscConfig+0x248>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fd fa1c 	bl	800137c <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f48:	f7fd fa18 	bl	800137c <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e167      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x200>
 8003f66:	e01b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_OscConfig+0x248>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fd fa05 	bl	800137c <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	e00e      	b.n	8003f94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f76:	f7fd fa01 	bl	800137c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d907      	bls.n	8003f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e150      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	42470000 	.word	0x42470000
 8003f90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ea      	bne.n	8003f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8097 	beq.w	80040dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb2:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	4b7d      	ldr	r3, [pc, #500]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	4a7c      	ldr	r2, [pc, #496]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fce:	4b7a      	ldr	r3, [pc, #488]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b77      	ldr	r3, [pc, #476]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fea:	4b74      	ldr	r3, [pc, #464]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a73      	ldr	r2, [pc, #460]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff6:	f7fd f9c1 	bl	800137c <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffe:	f7fd f9bd 	bl	800137c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e10c      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004010:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d106      	bne.n	8004032 <HAL_RCC_OscConfig+0x2ea>
 8004024:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a63      	ldr	r2, [pc, #396]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	e01c      	b.n	800406c <HAL_RCC_OscConfig+0x324>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b05      	cmp	r3, #5
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x30c>
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a5e      	ldr	r2, [pc, #376]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 0304 	orr.w	r3, r3, #4
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a5b      	ldr	r2, [pc, #364]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0x324>
 8004054:	4b58      	ldr	r3, [pc, #352]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a57      	ldr	r2, [pc, #348]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
 8004060:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4a54      	ldr	r2, [pc, #336]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004066:	f023 0304 	bic.w	r3, r3, #4
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fd f982 	bl	800137c <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fd f97e 	bl	800137c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0cb      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004092:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ee      	beq.n	800407c <HAL_RCC_OscConfig+0x334>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a0:	f7fd f96c 	bl	800137c <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a6:	e00a      	b.n	80040be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fd f968 	bl	800137c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0b5      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040be:	4b3e      	ldr	r3, [pc, #248]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ee      	bne.n	80040a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	4a38      	ldr	r2, [pc, #224]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80a1 	beq.w	8004228 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e6:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d05c      	beq.n	80041ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d141      	bne.n	800417e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fd f93c 	bl	800137c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004108:	f7fd f938 	bl	800137c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e087      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	019b      	lsls	r3, r3, #6
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	3b01      	subs	r3, #1
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	061b      	lsls	r3, r3, #24
 800414a:	491b      	ldr	r1, [pc, #108]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fd f911 	bl	800137c <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415e:	f7fd f90d 	bl	800137c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e05c      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x416>
 800417c:	e054      	b.n	8004228 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd f8fa 	bl	800137c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418c:	f7fd f8f6 	bl	800137c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e045      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x444>
 80041aa:	e03d      	b.n	8004228 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e038      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40007000 	.word	0x40007000
 80041c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x4ec>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d028      	beq.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d121      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d11a      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	3b01      	subs	r3, #1
 800420e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0cc      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d90c      	bls.n	8004274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b8      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800428c:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a52      	ldr	r2, [pc, #328]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	494d      	ldr	r1, [pc, #308]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d044      	beq.n	8004358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d119      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d003      	beq.n	80042f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e067      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4934      	ldr	r1, [pc, #208]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004328:	f7fd f828 	bl	800137c <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fd f824 	bl	800137c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e04f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 020c 	and.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1eb      	bne.n	8004330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d20c      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e032      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4916      	ldr	r1, [pc, #88]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043be:	f000 f821 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	490a      	ldr	r1, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	5ccb      	ldrb	r3, [r1, r3]
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc ff88 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023c00 	.word	0x40023c00
 80043f4:	40023800 	.word	0x40023800
 80043f8:	080093d4 	.word	0x080093d4
 80043fc:	20000000 	.word	0x20000000
 8004400:	20000004 	.word	0x20000004

08004404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004408:	b094      	sub	sp, #80	; 0x50
 800440a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	647b      	str	r3, [r7, #68]	; 0x44
 8004410:	2300      	movs	r3, #0
 8004412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004414:	2300      	movs	r3, #0
 8004416:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800441c:	4b79      	ldr	r3, [pc, #484]	; (8004604 <HAL_RCC_GetSysClockFreq+0x200>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b08      	cmp	r3, #8
 8004426:	d00d      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x40>
 8004428:	2b08      	cmp	r3, #8
 800442a:	f200 80e1 	bhi.w	80045f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x34>
 8004432:	2b04      	cmp	r3, #4
 8004434:	d003      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0x3a>
 8004436:	e0db      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004438:	4b73      	ldr	r3, [pc, #460]	; (8004608 <HAL_RCC_GetSysClockFreq+0x204>)
 800443a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800443c:	e0db      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800443e:	4b73      	ldr	r3, [pc, #460]	; (800460c <HAL_RCC_GetSysClockFreq+0x208>)
 8004440:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004442:	e0d8      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004444:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCC_GetSysClockFreq+0x200>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800444e:	4b6d      	ldr	r3, [pc, #436]	; (8004604 <HAL_RCC_GetSysClockFreq+0x200>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d063      	beq.n	8004522 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445a:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCC_GetSysClockFreq+0x200>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	2200      	movs	r2, #0
 8004462:	63bb      	str	r3, [r7, #56]	; 0x38
 8004464:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
 800446e:	2300      	movs	r3, #0
 8004470:	637b      	str	r3, [r7, #52]	; 0x34
 8004472:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004476:	4622      	mov	r2, r4
 8004478:	462b      	mov	r3, r5
 800447a:	f04f 0000 	mov.w	r0, #0
 800447e:	f04f 0100 	mov.w	r1, #0
 8004482:	0159      	lsls	r1, r3, #5
 8004484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004488:	0150      	lsls	r0, r2, #5
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	4621      	mov	r1, r4
 8004490:	1a51      	subs	r1, r2, r1
 8004492:	6139      	str	r1, [r7, #16]
 8004494:	4629      	mov	r1, r5
 8004496:	eb63 0301 	sbc.w	r3, r3, r1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044a8:	4659      	mov	r1, fp
 80044aa:	018b      	lsls	r3, r1, #6
 80044ac:	4651      	mov	r1, sl
 80044ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044b2:	4651      	mov	r1, sl
 80044b4:	018a      	lsls	r2, r1, #6
 80044b6:	4651      	mov	r1, sl
 80044b8:	ebb2 0801 	subs.w	r8, r2, r1
 80044bc:	4659      	mov	r1, fp
 80044be:	eb63 0901 	sbc.w	r9, r3, r1
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044d6:	4690      	mov	r8, r2
 80044d8:	4699      	mov	r9, r3
 80044da:	4623      	mov	r3, r4
 80044dc:	eb18 0303 	adds.w	r3, r8, r3
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	462b      	mov	r3, r5
 80044e4:	eb49 0303 	adc.w	r3, r9, r3
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044f6:	4629      	mov	r1, r5
 80044f8:	024b      	lsls	r3, r1, #9
 80044fa:	4621      	mov	r1, r4
 80044fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004500:	4621      	mov	r1, r4
 8004502:	024a      	lsls	r2, r1, #9
 8004504:	4610      	mov	r0, r2
 8004506:	4619      	mov	r1, r3
 8004508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450a:	2200      	movs	r2, #0
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
 800450e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004514:	f7fb fe58 	bl	80001c8 <__aeabi_uldivmod>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4613      	mov	r3, r2
 800451e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004520:	e058      	b.n	80045d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004522:	4b38      	ldr	r3, [pc, #224]	; (8004604 <HAL_RCC_GetSysClockFreq+0x200>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	2200      	movs	r2, #0
 800452a:	4618      	mov	r0, r3
 800452c:	4611      	mov	r1, r2
 800452e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004532:	623b      	str	r3, [r7, #32]
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
 8004538:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800453c:	4642      	mov	r2, r8
 800453e:	464b      	mov	r3, r9
 8004540:	f04f 0000 	mov.w	r0, #0
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	0159      	lsls	r1, r3, #5
 800454a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454e:	0150      	lsls	r0, r2, #5
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4641      	mov	r1, r8
 8004556:	ebb2 0a01 	subs.w	sl, r2, r1
 800455a:	4649      	mov	r1, r9
 800455c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800456c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004570:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004574:	ebb2 040a 	subs.w	r4, r2, sl
 8004578:	eb63 050b 	sbc.w	r5, r3, fp
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	00eb      	lsls	r3, r5, #3
 8004586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800458a:	00e2      	lsls	r2, r4, #3
 800458c:	4614      	mov	r4, r2
 800458e:	461d      	mov	r5, r3
 8004590:	4643      	mov	r3, r8
 8004592:	18e3      	adds	r3, r4, r3
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	464b      	mov	r3, r9
 8004598:	eb45 0303 	adc.w	r3, r5, r3
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045aa:	4629      	mov	r1, r5
 80045ac:	028b      	lsls	r3, r1, #10
 80045ae:	4621      	mov	r1, r4
 80045b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045b4:	4621      	mov	r1, r4
 80045b6:	028a      	lsls	r2, r1, #10
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045be:	2200      	movs	r2, #0
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	61fa      	str	r2, [r7, #28]
 80045c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c8:	f7fb fdfe 	bl	80001c8 <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_RCC_GetSysClockFreq+0x200>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	3301      	adds	r3, #1
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80045e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCC_GetSysClockFreq+0x204>)
 80045f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3750      	adds	r7, #80	; 0x50
 80045fc:	46bd      	mov	sp, r7
 80045fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800
 8004608:	00f42400 	.word	0x00f42400
 800460c:	007a1200 	.word	0x007a1200

08004610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <HAL_RCC_GetHCLKFreq+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000000 	.word	0x20000000

08004628 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800462c:	f7ff fff0 	bl	8004610 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0a9b      	lsrs	r3, r3, #10
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4903      	ldr	r1, [pc, #12]	; (800464c <HAL_RCC_GetPCLK1Freq+0x24>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	080093e4 	.word	0x080093e4

08004650 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d105      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004674:	2b00      	cmp	r3, #0
 8004676:	d035      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004678:	4b62      	ldr	r3, [pc, #392]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800467e:	f7fc fe7d 	bl	800137c <HAL_GetTick>
 8004682:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004684:	e008      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004686:	f7fc fe79 	bl	800137c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0b0      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004698:	4b5b      	ldr	r3, [pc, #364]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	019a      	lsls	r2, r3, #6
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	071b      	lsls	r3, r3, #28
 80046b0:	4955      	ldr	r1, [pc, #340]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046b8:	4b52      	ldr	r3, [pc, #328]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046be:	f7fc fe5d 	bl	800137c <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046c6:	f7fc fe59 	bl	800137c <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e090      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d8:	4b4b      	ldr	r3, [pc, #300]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8083 	beq.w	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
 80046f6:	4b44      	ldr	r3, [pc, #272]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	4a43      	ldr	r2, [pc, #268]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004700:	6413      	str	r3, [r2, #64]	; 0x40
 8004702:	4b41      	ldr	r3, [pc, #260]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800470e:	4b3f      	ldr	r3, [pc, #252]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a3e      	ldr	r2, [pc, #248]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004718:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800471a:	f7fc fe2f 	bl	800137c <HAL_GetTick>
 800471e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004720:	e008      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fc fe2b 	bl	800137c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e062      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004734:	4b35      	ldr	r3, [pc, #212]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004740:	4b31      	ldr	r3, [pc, #196]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004744:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004748:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02f      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d028      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800475e:	4b2a      	ldr	r3, [pc, #168]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004766:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004768:	4b29      	ldr	r3, [pc, #164]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800476e:	4b28      	ldr	r3, [pc, #160]	; (8004810 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004774:	4a24      	ldr	r2, [pc, #144]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800477a:	4b23      	ldr	r3, [pc, #140]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b01      	cmp	r3, #1
 8004784:	d114      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004786:	f7fc fdf9 	bl	800137c <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478c:	e00a      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478e:	f7fc fdf5 	bl	800137c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	f241 3288 	movw	r2, #5000	; 0x1388
 800479c:	4293      	cmp	r3, r2
 800479e:	d901      	bls.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e02a      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	4b18      	ldr	r3, [pc, #96]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d0ee      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047bc:	d10d      	bne.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d2:	490d      	ldr	r1, [pc, #52]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
 80047d8:	e005      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047e4:	6093      	str	r3, [r2, #8]
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f2:	4905      	ldr	r1, [pc, #20]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	42470068 	.word	0x42470068
 8004808:	40023800 	.word	0x40023800
 800480c:	40007000 	.word	0x40007000
 8004810:	42470e40 	.word	0x42470e40

08004814 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d13e      	bne.n	80048b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004832:	4b23      	ldr	r3, [pc, #140]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d12f      	bne.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800484a:	617b      	str	r3, [r7, #20]
          break;
 800484c:	e02f      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800484e:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004856:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800485a:	d108      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800485c:	4b18      	ldr	r3, [pc, #96]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004864:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	e007      	b.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004876:	4a15      	ldr	r2, [pc, #84]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800487e:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004884:	099b      	lsrs	r3, r3, #6
 8004886:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	fb02 f303 	mul.w	r3, r2, r3
 8004890:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004898:	0f1b      	lsrs	r3, r3, #28
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a4:	617b      	str	r3, [r7, #20]
          break;
 80048a6:	e002      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]
          break;
 80048ac:	bf00      	nop
        }
      }
      break;
 80048ae:	bf00      	nop
    }
  }
  return frequency;
 80048b0:	697b      	ldr	r3, [r7, #20]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40023800 	.word	0x40023800
 80048c4:	00bb8000 	.word	0x00bb8000
 80048c8:	007a1200 	.word	0x007a1200
 80048cc:	00f42400 	.word	0x00f42400

080048d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e07b      	b.n	80049da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d108      	bne.n	80048fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048f2:	d009      	beq.n	8004908 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	61da      	str	r2, [r3, #28]
 80048fa:	e005      	b.n	8004908 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fb00 	bl	8000f28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800493e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	ea42 0103 	orr.w	r1, r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004994:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	f003 0104 	and.w	r1, r3, #4
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0210 	and.w	r2, r3, #16
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e041      	b.n	8004a78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d106      	bne.n	8004a0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7fc fad5 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f000 fc3f 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e041      	b.n	8004b16 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f839 	bl	8004b1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 fbf0 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e041      	b.n	8004bc8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f839 	bl	8004bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 fb97 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x24>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e022      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d109      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x3e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	e015      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d109      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x58>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e008      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e07c      	b.n	8004d50 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Start+0x82>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c64:	e013      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0x92>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c74:	e00b      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0xa2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c84:	e003      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fe7f 	bl	800599a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a2d      	ldr	r2, [pc, #180]	; (8004d58 <HAL_TIM_PWM_Start+0x174>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d004      	beq.n	8004cb0 <HAL_TIM_PWM_Start+0xcc>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <HAL_TIM_PWM_Start+0x178>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIM_PWM_Start+0xd0>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e000      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xd2>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a22      	ldr	r2, [pc, #136]	; (8004d58 <HAL_TIM_PWM_Start+0x174>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d022      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x136>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cdc:	d01d      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x136>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <HAL_TIM_PWM_Start+0x17c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d018      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x136>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_TIM_PWM_Start+0x180>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x136>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1c      	ldr	r2, [pc, #112]	; (8004d68 <HAL_TIM_PWM_Start+0x184>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d00e      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x136>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a16      	ldr	r2, [pc, #88]	; (8004d5c <HAL_TIM_PWM_Start+0x178>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d009      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x136>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_TIM_PWM_Start+0x188>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d004      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x136>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a16      	ldr	r2, [pc, #88]	; (8004d70 <HAL_TIM_PWM_Start+0x18c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d111      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b06      	cmp	r3, #6
 8004d2a:	d010      	beq.n	8004d4e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3c:	e007      	b.n	8004d4e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0201 	orr.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40010400 	.word	0x40010400
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40001800 	.word	0x40001800

08004d74 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2200      	movs	r2, #0
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fe07 	bl	800599a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a2e      	ldr	r2, [pc, #184]	; (8004e4c <HAL_TIM_PWM_Stop+0xd8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_TIM_PWM_Stop+0x2c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2d      	ldr	r2, [pc, #180]	; (8004e50 <HAL_TIM_PWM_Stop+0xdc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d101      	bne.n	8004da4 <HAL_TIM_PWM_Stop+0x30>
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <HAL_TIM_PWM_Stop+0x32>
 8004da4:	2300      	movs	r3, #0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d017      	beq.n	8004dda <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6a1a      	ldr	r2, [r3, #32]
 8004db0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10f      	bne.n	8004dda <HAL_TIM_PWM_Stop+0x66>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	f240 4344 	movw	r3, #1092	; 0x444
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d107      	bne.n	8004dda <HAL_TIM_PWM_Stop+0x66>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	f241 1311 	movw	r3, #4369	; 0x1111
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10f      	bne.n	8004e0a <HAL_TIM_PWM_Stop+0x96>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1a      	ldr	r2, [r3, #32]
 8004df0:	f240 4344 	movw	r3, #1092	; 0x444
 8004df4:	4013      	ands	r3, r2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d107      	bne.n	8004e0a <HAL_TIM_PWM_Stop+0x96>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Stop+0xa6>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e18:	e013      	b.n	8004e42 <HAL_TIM_PWM_Stop+0xce>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d104      	bne.n	8004e2a <HAL_TIM_PWM_Stop+0xb6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e28:	e00b      	b.n	8004e42 <HAL_TIM_PWM_Stop+0xce>
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Stop+0xc6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e38:	e003      	b.n	8004e42 <HAL_TIM_PWM_Stop+0xce>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40010000 	.word	0x40010000
 8004e50:	40010400 	.word	0x40010400

08004e54 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d101      	bne.n	8004e72 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e048      	b.n	8004f04 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b0c      	cmp	r3, #12
 8004e7e:	d839      	bhi.n	8004ef4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004ebd 	.word	0x08004ebd
 8004e8c:	08004ef5 	.word	0x08004ef5
 8004e90:	08004ef5 	.word	0x08004ef5
 8004e94:	08004ef5 	.word	0x08004ef5
 8004e98:	08004ecb 	.word	0x08004ecb
 8004e9c:	08004ef5 	.word	0x08004ef5
 8004ea0:	08004ef5 	.word	0x08004ef5
 8004ea4:	08004ef5 	.word	0x08004ef5
 8004ea8:	08004ed9 	.word	0x08004ed9
 8004eac:	08004ef5 	.word	0x08004ef5
 8004eb0:	08004ef5 	.word	0x08004ef5
 8004eb4:	08004ef5 	.word	0x08004ef5
 8004eb8:	08004ee7 	.word	0x08004ee7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68b9      	ldr	r1, [r7, #8]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fa8e 	bl	80053e4 <TIM_OC1_SetConfig>
      break;
 8004ec8:	e017      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 faf7 	bl	80054c4 <TIM_OC2_SetConfig>
      break;
 8004ed6:	e010      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fb66 	bl	80055b0 <TIM_OC3_SetConfig>
      break;
 8004ee4:	e009      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f000 fbd3 	bl	8005698 <TIM_OC4_SetConfig>
      break;
 8004ef2:	e002      	b.n	8004efa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8004ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b086      	sub	sp, #24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0ae      	b.n	8005088 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	f200 809f 	bhi.w	8005078 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08005079 	.word	0x08005079
 8004f48:	08005079 	.word	0x08005079
 8004f4c:	08005079 	.word	0x08005079
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08005079 	.word	0x08005079
 8004f58:	08005079 	.word	0x08005079
 8004f5c:	08005079 	.word	0x08005079
 8004f60:	08004ff7 	.word	0x08004ff7
 8004f64:	08005079 	.word	0x08005079
 8004f68:	08005079 	.word	0x08005079
 8004f6c:	08005079 	.word	0x08005079
 8004f70:	08005037 	.word	0x08005037
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fa32 	bl	80053e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0208 	orr.w	r2, r2, #8
 8004f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0204 	bic.w	r2, r2, #4
 8004f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6999      	ldr	r1, [r3, #24]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	619a      	str	r2, [r3, #24]
      break;
 8004fb2:	e064      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fa82 	bl	80054c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6999      	ldr	r1, [r3, #24]
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	021a      	lsls	r2, r3, #8
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	619a      	str	r2, [r3, #24]
      break;
 8004ff4:	e043      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fad7 	bl	80055b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f042 0208 	orr.w	r2, r2, #8
 8005010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0204 	bic.w	r2, r2, #4
 8005020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69d9      	ldr	r1, [r3, #28]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	691a      	ldr	r2, [r3, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	61da      	str	r2, [r3, #28]
      break;
 8005034:	e023      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68b9      	ldr	r1, [r7, #8]
 800503c:	4618      	mov	r0, r3
 800503e:	f000 fb2b 	bl	8005698 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69da      	ldr	r2, [r3, #28]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69d9      	ldr	r1, [r3, #28]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	021a      	lsls	r2, r3, #8
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	61da      	str	r2, [r3, #28]
      break;
 8005076:	e002      	b.n	800507e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
      break;
 800507c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_TIM_ConfigClockSource+0x1c>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e0b4      	b.n	8005216 <HAL_TIM_ConfigClockSource+0x186>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050e4:	d03e      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xd4>
 80050e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ea:	f200 8087 	bhi.w	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	f000 8086 	beq.w	8005202 <HAL_TIM_ConfigClockSource+0x172>
 80050f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fa:	d87f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b70      	cmp	r3, #112	; 0x70
 80050fe:	d01a      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xa6>
 8005100:	2b70      	cmp	r3, #112	; 0x70
 8005102:	d87b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005104:	2b60      	cmp	r3, #96	; 0x60
 8005106:	d050      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x11a>
 8005108:	2b60      	cmp	r3, #96	; 0x60
 800510a:	d877      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800510c:	2b50      	cmp	r3, #80	; 0x50
 800510e:	d03c      	beq.n	800518a <HAL_TIM_ConfigClockSource+0xfa>
 8005110:	2b50      	cmp	r3, #80	; 0x50
 8005112:	d873      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d058      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x13a>
 8005118:	2b40      	cmp	r3, #64	; 0x40
 800511a:	d86f      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800511c:	2b30      	cmp	r3, #48	; 0x30
 800511e:	d064      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005120:	2b30      	cmp	r3, #48	; 0x30
 8005122:	d86b      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 8005124:	2b20      	cmp	r3, #32
 8005126:	d060      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005128:	2b20      	cmp	r3, #32
 800512a:	d867      	bhi.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d05c      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005130:	2b10      	cmp	r3, #16
 8005132:	d05a      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x15a>
 8005134:	e062      	b.n	80051fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 fc08 	bl	800595a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005158:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	609a      	str	r2, [r3, #8]
      break;
 8005162:	e04f      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 fbf1 	bl	800595a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005186:	609a      	str	r2, [r3, #8]
      break;
 8005188:	e03c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	f000 fb65 	bl	8005866 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2150      	movs	r1, #80	; 0x50
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fbbe 	bl	8005924 <TIM_ITRx_SetConfig>
      break;
 80051a8:	e02c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 fb84 	bl	80058c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2160      	movs	r1, #96	; 0x60
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fbae 	bl	8005924 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e01c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 fb45 	bl	8005866 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2140      	movs	r1, #64	; 0x40
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fb9e 	bl	8005924 <TIM_ITRx_SetConfig>
      break;
 80051e8:	e00c      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f000 fb95 	bl	8005924 <TIM_ITRx_SetConfig>
      break;
 80051fa:	e003      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005200:	e000      	b.n	8005204 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005202:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005232:	2302      	movs	r3, #2
 8005234:	e031      	b.n	800529a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fa7b 	bl	8005744 <TIM_SlaveTimer_SetConfig>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d009      	beq.n	8005268 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e018      	b.n	800529a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005276:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005286:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a40      	ldr	r2, [pc, #256]	; (80053b8 <TIM_Base_SetConfig+0x114>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c2:	d00f      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3d      	ldr	r2, [pc, #244]	; (80053bc <TIM_Base_SetConfig+0x118>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <TIM_Base_SetConfig+0x11c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3b      	ldr	r2, [pc, #236]	; (80053c4 <TIM_Base_SetConfig+0x120>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3a      	ldr	r2, [pc, #232]	; (80053c8 <TIM_Base_SetConfig+0x124>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d108      	bne.n	80052f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2f      	ldr	r2, [pc, #188]	; (80053b8 <TIM_Base_SetConfig+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005304:	d027      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <TIM_Base_SetConfig+0x118>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d023      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <TIM_Base_SetConfig+0x11c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01f      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <TIM_Base_SetConfig+0x120>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a29      	ldr	r2, [pc, #164]	; (80053c8 <TIM_Base_SetConfig+0x124>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d017      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a28      	ldr	r2, [pc, #160]	; (80053cc <TIM_Base_SetConfig+0x128>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a27      	ldr	r2, [pc, #156]	; (80053d0 <TIM_Base_SetConfig+0x12c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <TIM_Base_SetConfig+0x130>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <TIM_Base_SetConfig+0x134>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a24      	ldr	r2, [pc, #144]	; (80053dc <TIM_Base_SetConfig+0x138>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a23      	ldr	r2, [pc, #140]	; (80053e0 <TIM_Base_SetConfig+0x13c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a0a      	ldr	r2, [pc, #40]	; (80053b8 <TIM_Base_SetConfig+0x114>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0xf8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <TIM_Base_SetConfig+0x124>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	615a      	str	r2, [r3, #20]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40010400 	.word	0x40010400
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800
 80053d8:	40001800 	.word	0x40001800
 80053dc:	40001c00 	.word	0x40001c00
 80053e0:	40002000 	.word	0x40002000

080053e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f023 0201 	bic.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 0302 	bic.w	r3, r3, #2
 800542c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a20      	ldr	r2, [pc, #128]	; (80054bc <TIM_OC1_SetConfig+0xd8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_OC1_SetConfig+0x64>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <TIM_OC1_SetConfig+0xdc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10c      	bne.n	8005462 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0308 	bic.w	r3, r3, #8
 800544e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0304 	bic.w	r3, r3, #4
 8005460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a15      	ldr	r2, [pc, #84]	; (80054bc <TIM_OC1_SetConfig+0xd8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_OC1_SetConfig+0x8e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a14      	ldr	r2, [pc, #80]	; (80054c0 <TIM_OC1_SetConfig+0xdc>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d111      	bne.n	8005496 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	40010000 	.word	0x40010000
 80054c0:	40010400 	.word	0x40010400

080054c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f023 0210 	bic.w	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a1b      	ldr	r3, [r3, #32]
 80054de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 0320 	bic.w	r3, r3, #32
 800550e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	4313      	orrs	r3, r2
 800551a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <TIM_OC2_SetConfig+0xe4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d003      	beq.n	800552c <TIM_OC2_SetConfig+0x68>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a21      	ldr	r2, [pc, #132]	; (80055ac <TIM_OC2_SetConfig+0xe8>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10d      	bne.n	8005548 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a17      	ldr	r2, [pc, #92]	; (80055a8 <TIM_OC2_SetConfig+0xe4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_OC2_SetConfig+0x94>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a16      	ldr	r2, [pc, #88]	; (80055ac <TIM_OC2_SetConfig+0xe8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d113      	bne.n	8005580 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800555e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005566:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	621a      	str	r2, [r3, #32]
}
 800559a:	bf00      	nop
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40010000 	.word	0x40010000
 80055ac:	40010400 	.word	0x40010400

080055b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69db      	ldr	r3, [r3, #28]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a21      	ldr	r2, [pc, #132]	; (8005690 <TIM_OC3_SetConfig+0xe0>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d003      	beq.n	8005616 <TIM_OC3_SetConfig+0x66>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a20      	ldr	r2, [pc, #128]	; (8005694 <TIM_OC3_SetConfig+0xe4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d10d      	bne.n	8005632 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800561c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	021b      	lsls	r3, r3, #8
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a16      	ldr	r2, [pc, #88]	; (8005690 <TIM_OC3_SetConfig+0xe0>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d003      	beq.n	8005642 <TIM_OC3_SetConfig+0x92>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a15      	ldr	r2, [pc, #84]	; (8005694 <TIM_OC3_SetConfig+0xe4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d113      	bne.n	800566a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	621a      	str	r2, [r3, #32]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400

08005698 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	031b      	lsls	r3, r3, #12
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a12      	ldr	r2, [pc, #72]	; (800573c <TIM_OC4_SetConfig+0xa4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_OC4_SetConfig+0x68>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a11      	ldr	r2, [pc, #68]	; (8005740 <TIM_OC4_SetConfig+0xa8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d109      	bne.n	8005714 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	019b      	lsls	r3, r3, #6
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	693a      	ldr	r2, [r7, #16]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40010000 	.word	0x40010000
 8005740:	40010400 	.word	0x40010400

08005744 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005760:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b70      	cmp	r3, #112	; 0x70
 800578c:	d01a      	beq.n	80057c4 <TIM_SlaveTimer_SetConfig+0x80>
 800578e:	2b70      	cmp	r3, #112	; 0x70
 8005790:	d860      	bhi.n	8005854 <TIM_SlaveTimer_SetConfig+0x110>
 8005792:	2b60      	cmp	r3, #96	; 0x60
 8005794:	d054      	beq.n	8005840 <TIM_SlaveTimer_SetConfig+0xfc>
 8005796:	2b60      	cmp	r3, #96	; 0x60
 8005798:	d85c      	bhi.n	8005854 <TIM_SlaveTimer_SetConfig+0x110>
 800579a:	2b50      	cmp	r3, #80	; 0x50
 800579c:	d046      	beq.n	800582c <TIM_SlaveTimer_SetConfig+0xe8>
 800579e:	2b50      	cmp	r3, #80	; 0x50
 80057a0:	d858      	bhi.n	8005854 <TIM_SlaveTimer_SetConfig+0x110>
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d019      	beq.n	80057da <TIM_SlaveTimer_SetConfig+0x96>
 80057a6:	2b40      	cmp	r3, #64	; 0x40
 80057a8:	d854      	bhi.n	8005854 <TIM_SlaveTimer_SetConfig+0x110>
 80057aa:	2b30      	cmp	r3, #48	; 0x30
 80057ac:	d055      	beq.n	800585a <TIM_SlaveTimer_SetConfig+0x116>
 80057ae:	2b30      	cmp	r3, #48	; 0x30
 80057b0:	d850      	bhi.n	8005854 <TIM_SlaveTimer_SetConfig+0x110>
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d051      	beq.n	800585a <TIM_SlaveTimer_SetConfig+0x116>
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d84c      	bhi.n	8005854 <TIM_SlaveTimer_SetConfig+0x110>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d04d      	beq.n	800585a <TIM_SlaveTimer_SetConfig+0x116>
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d04b      	beq.n	800585a <TIM_SlaveTimer_SetConfig+0x116>
 80057c2:	e047      	b.n	8005854 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6818      	ldr	r0, [r3, #0]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68d9      	ldr	r1, [r3, #12]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f000 f8c1 	bl	800595a <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80057d8:	e040      	b.n	800585c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d101      	bne.n	80057e6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e03b      	b.n	800585e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0201 	bic.w	r2, r2, #1
 80057fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800580c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	4313      	orrs	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
      break;
 800582a:	e017      	b.n	800585c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6899      	ldr	r1, [r3, #8]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	461a      	mov	r2, r3
 800583a:	f000 f814 	bl	8005866 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800583e:	e00d      	b.n	800585c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6899      	ldr	r1, [r3, #8]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	461a      	mov	r2, r3
 800584e:	f000 f839 	bl	80058c4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005852:	e003      	b.n	800585c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]
      break;
 8005858:	e000      	b.n	800585c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800585a:	bf00      	nop
  }

  return status;
 800585c:	7dfb      	ldrb	r3, [r7, #23]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005866:	b480      	push	{r7}
 8005868:	b087      	sub	sp, #28
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f023 0201 	bic.w	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	011b      	lsls	r3, r3, #4
 8005896:	693a      	ldr	r2, [r7, #16]
 8005898:	4313      	orrs	r3, r2
 800589a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 030a 	bic.w	r3, r3, #10
 80058a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	621a      	str	r2, [r3, #32]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f023 0210 	bic.w	r2, r3, #16
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	031b      	lsls	r3, r3, #12
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005900:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4313      	orrs	r3, r2
 8005942:	f043 0307 	orr.w	r3, r3, #7
 8005946:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]
}
 800594e:	bf00      	nop
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800595a:	b480      	push	{r7}
 800595c:	b087      	sub	sp, #28
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	021a      	lsls	r2, r3, #8
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	431a      	orrs	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	4313      	orrs	r3, r2
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	4313      	orrs	r3, r2
 8005986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	609a      	str	r2, [r3, #8]
}
 800598e:	bf00      	nop
 8005990:	371c      	adds	r7, #28
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800599a:	b480      	push	{r7}
 800599c:	b087      	sub	sp, #28
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f003 031f 	and.w	r3, r3, #31
 80059ac:	2201      	movs	r2, #1
 80059ae:	fa02 f303 	lsl.w	r3, r2, r3
 80059b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	43db      	mvns	r3, r3
 80059bc:	401a      	ands	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1a      	ldr	r2, [r3, #32]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f003 031f 	and.w	r3, r3, #31
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	fa01 f303 	lsl.w	r3, r1, r3
 80059d2:	431a      	orrs	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	621a      	str	r2, [r3, #32]
}
 80059d8:	bf00      	nop
 80059da:	371c      	adds	r7, #28
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e05a      	b.n	8005ab2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d022      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a48:	d01d      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a1a      	ldr	r2, [pc, #104]	; (8005acc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a17      	ldr	r2, [pc, #92]	; (8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a15      	ldr	r2, [pc, #84]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10c      	bne.n	8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	40010000 	.word	0x40010000
 8005ac4:	40000400 	.word	0x40000400
 8005ac8:	40000800 	.word	0x40000800
 8005acc:	40000c00 	.word	0x40000c00
 8005ad0:	40010400 	.word	0x40010400
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40001800 	.word	0x40001800

08005adc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e03d      	b.n	8005b74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	695b      	ldr	r3, [r3, #20]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3714      	adds	r7, #20
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b80:	b084      	sub	sp, #16
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
 8005b8a:	f107 001c 	add.w	r0, r7, #28
 8005b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d122      	bne.n	8005bde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d105      	bne.n	8005bd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f9c0 	bl	8005f58 <USB_CoreReset>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
 8005bdc:	e01a      	b.n	8005c14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f9b4 	bl	8005f58 <USB_CoreReset>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
 8005c06:	e005      	b.n	8005c14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d10b      	bne.n	8005c32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f043 0206 	orr.w	r2, r3, #6
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f043 0220 	orr.w	r2, r3, #32
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c3e:	b004      	add	sp, #16
 8005c40:	4770      	bx	lr

08005c42 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f043 0201 	orr.w	r2, r3, #1
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f023 0201 	bic.w	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d115      	bne.n	8005cd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cb4:	2001      	movs	r0, #1
 8005cb6:	f7fb fb6d 	bl	8001394 <HAL_Delay>
      ms++;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f93a 	bl	8005f3a <USB_GetMode>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d01e      	beq.n	8005d0a <USB_SetCurrentMode+0x84>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b31      	cmp	r3, #49	; 0x31
 8005cd0:	d9f0      	bls.n	8005cb4 <USB_SetCurrentMode+0x2e>
 8005cd2:	e01a      	b.n	8005d0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d115      	bne.n	8005d06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ce6:	2001      	movs	r0, #1
 8005ce8:	f7fb fb54 	bl	8001394 <HAL_Delay>
      ms++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f921 	bl	8005f3a <USB_GetMode>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <USB_SetCurrentMode+0x84>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b31      	cmp	r3, #49	; 0x31
 8005d02:	d9f0      	bls.n	8005ce6 <USB_SetCurrentMode+0x60>
 8005d04:	e001      	b.n	8005d0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e005      	b.n	8005d16 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b32      	cmp	r3, #50	; 0x32
 8005d0e:	d101      	bne.n	8005d14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3301      	adds	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <USB_FlushTxFifo+0x64>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d901      	bls.n	8005d40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e01b      	b.n	8005d78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	daf2      	bge.n	8005d2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	019b      	lsls	r3, r3, #6
 8005d50:	f043 0220 	orr.w	r2, r3, #32
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4a08      	ldr	r2, [pc, #32]	; (8005d84 <USB_FlushTxFifo+0x64>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d901      	bls.n	8005d6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e006      	b.n	8005d78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b20      	cmp	r3, #32
 8005d74:	d0f0      	beq.n	8005d58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	00030d40 	.word	0x00030d40

08005d88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4a11      	ldr	r2, [pc, #68]	; (8005de4 <USB_FlushRxFifo+0x5c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d901      	bls.n	8005da6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e018      	b.n	8005dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	daf2      	bge.n	8005d94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2210      	movs	r2, #16
 8005db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a08      	ldr	r2, [pc, #32]	; (8005de4 <USB_FlushRxFifo+0x5c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e006      	b.n	8005dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0310 	and.w	r3, r3, #16
 8005dd2:	2b10      	cmp	r3, #16
 8005dd4:	d0f0      	beq.n	8005db8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	00030d40 	.word	0x00030d40

08005de8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b089      	sub	sp, #36	; 0x24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4611      	mov	r1, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	460b      	mov	r3, r1
 8005df8:	71fb      	strb	r3, [r7, #7]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d123      	bne.n	8005e56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e0e:	88bb      	ldrh	r3, [r7, #4]
 8005e10:	3303      	adds	r3, #3
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
 8005e1a:	e018      	b.n	8005e4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	031a      	lsls	r2, r3, #12
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e28:	461a      	mov	r2, r3
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	3301      	adds	r3, #1
 8005e34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	3301      	adds	r3, #1
 8005e46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	69ba      	ldr	r2, [r7, #24]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d3e2      	bcc.n	8005e1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3724      	adds	r7, #36	; 0x24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b08b      	sub	sp, #44	; 0x2c
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	089b      	lsrs	r3, r3, #2
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	f003 0303 	and.w	r3, r3, #3
 8005e88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	623b      	str	r3, [r7, #32]
 8005e8e:	e014      	b.n	8005eba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	3301      	adds	r3, #1
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	6a3a      	ldr	r2, [r7, #32]
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d3e6      	bcc.n	8005e90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ec2:	8bfb      	ldrh	r3, [r7, #30]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01e      	beq.n	8005f06 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	701a      	strb	r2, [r3, #0]
      i++;
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005efa:	8bfb      	ldrh	r3, [r7, #30]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1ea      	bne.n	8005edc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	372c      	adds	r7, #44	; 0x2c
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	f003 0301 	and.w	r3, r3, #1
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
	...

08005f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <USB_CoreReset+0x64>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e01b      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	daf2      	bge.n	8005f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f043 0201 	orr.w	r2, r3, #1
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3301      	adds	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <USB_CoreReset+0x64>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e006      	b.n	8005fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d0f0      	beq.n	8005f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	00030d40 	.word	0x00030d40

08005fc0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b086      	sub	sp, #24
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
 8005fca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006002:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d018      	beq.n	8006048 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10a      	bne.n	8006032 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800602a:	f043 0304 	orr.w	r3, r3, #4
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	e014      	b.n	800605c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006040:	f023 0304 	bic.w	r3, r3, #4
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e009      	b.n	800605c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006056:	f023 0304 	bic.w	r3, r3, #4
 800605a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800605c:	2110      	movs	r1, #16
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff fe5e 	bl	8005d20 <USB_FlushTxFifo>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff fe8a 	bl	8005d88 <USB_FlushRxFifo>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800607e:	2300      	movs	r3, #0
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	e015      	b.n	80060b0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006090:	461a      	mov	r2, r3
 8006092:	f04f 33ff 	mov.w	r3, #4294967295
 8006096:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	3301      	adds	r3, #1
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d3e5      	bcc.n	8006084 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f04f 32ff 	mov.w	r2, #4294967295
 80060c4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <USB_HostInit+0x16c>)
 80060de:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a13      	ldr	r2, [pc, #76]	; (8006130 <USB_HostInit+0x170>)
 80060e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80060e8:	e009      	b.n	80060fe <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2280      	movs	r2, #128	; 0x80
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a10      	ldr	r2, [pc, #64]	; (8006134 <USB_HostInit+0x174>)
 80060f4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a0f      	ldr	r2, [pc, #60]	; (8006138 <USB_HostInit+0x178>)
 80060fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	2b00      	cmp	r3, #0
 8006102:	d105      	bne.n	8006110 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f043 0210 	orr.w	r2, r3, #16
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	4b09      	ldr	r3, [pc, #36]	; (800613c <USB_HostInit+0x17c>)
 8006116:	4313      	orrs	r3, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800611c:	7dfb      	ldrb	r3, [r7, #23]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006128:	b004      	add	sp, #16
 800612a:	4770      	bx	lr
 800612c:	01000200 	.word	0x01000200
 8006130:	00e00300 	.word	0x00e00300
 8006134:	00600080 	.word	0x00600080
 8006138:	004000e0 	.word	0x004000e0
 800613c:	a3200008 	.word	0xa3200008

08006140 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006178:	4313      	orrs	r3, r2
 800617a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d107      	bne.n	8006192 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006188:	461a      	mov	r2, r3
 800618a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800618e:	6053      	str	r3, [r2, #4]
 8006190:	e009      	b.n	80061a6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d106      	bne.n	80061a6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800619e:	461a      	mov	r2, r3
 80061a0:	f241 7370 	movw	r3, #6000	; 0x1770
 80061a4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061d4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80061e4:	2064      	movs	r0, #100	; 0x64
 80061e6:	f7fb f8d5 	bl	8001394 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80061f8:	200a      	movs	r0, #10
 80061fa:	f7fb f8cb 	bl	8001394 <HAL_Delay>

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800622c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d109      	bne.n	800624c <USB_DriveVbus+0x44>
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d106      	bne.n	800624c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800624a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006256:	d109      	bne.n	800626c <USB_DriveVbus+0x64>
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800626a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr

0800627a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	0c5b      	lsrs	r3, r3, #17
 8006298:	f003 0303 	and.w	r3, r3, #3
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	b29b      	uxth	r3, r3
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	4608      	mov	r0, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	461a      	mov	r2, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	70fb      	strb	r3, [r7, #3]
 80062de:	460b      	mov	r3, r1
 80062e0:	70bb      	strb	r3, [r7, #2]
 80062e2:	4613      	mov	r3, r2
 80062e4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fa:	461a      	mov	r2, r3
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006300:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006302:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006306:	2b03      	cmp	r3, #3
 8006308:	d87e      	bhi.n	8006408 <USB_HC_Init+0x13c>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <USB_HC_Init+0x44>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006321 	.word	0x08006321
 8006314:	080063cb 	.word	0x080063cb
 8006318:	08006321 	.word	0x08006321
 800631c:	0800638d 	.word	0x0800638d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006320:	78fb      	ldrb	r3, [r7, #3]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632c:	461a      	mov	r2, r3
 800632e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006332:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006334:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006338:	2b00      	cmp	r3, #0
 800633a:	da10      	bge.n	800635e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800635c:	e057      	b.n	800640e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006366:	2b00      	cmp	r3, #0
 8006368:	d051      	beq.n	800640e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800636a:	78fb      	ldrb	r3, [r7, #3]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	78fa      	ldrb	r2, [r7, #3]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	440a      	add	r2, r1
 8006380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006384:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006388:	60d3      	str	r3, [r2, #12]
      break;
 800638a:	e040      	b.n	800640e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	4413      	add	r3, r2
 8006394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006398:	461a      	mov	r2, r3
 800639a:	f240 639d 	movw	r3, #1693	; 0x69d
 800639e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da34      	bge.n	8006412 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80063a8:	78fb      	ldrb	r3, [r7, #3]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	78fa      	ldrb	r2, [r7, #3]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80063c8:	e023      	b.n	8006412 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	461a      	mov	r2, r3
 80063d8:	f240 2325 	movw	r3, #549	; 0x225
 80063dc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80063de:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	da17      	bge.n	8006416 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80063e6:	78fb      	ldrb	r3, [r7, #3]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	0151      	lsls	r1, r2, #5
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	440a      	add	r2, r1
 80063fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006400:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006404:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006406:	e006      	b.n	8006416 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	77fb      	strb	r3, [r7, #31]
      break;
 800640c:	e004      	b.n	8006418 <USB_HC_Init+0x14c>
      break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <USB_HC_Init+0x14c>
      break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <USB_HC_Init+0x14c>
      break;
 8006416:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006418:	78fb      	ldrb	r3, [r7, #3]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	78fa      	ldrb	r2, [r7, #3]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006432:	f043 0302 	orr.w	r3, r3, #2
 8006436:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800643e:	699a      	ldr	r2, [r3, #24]
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	f003 030f 	and.w	r3, r3, #15
 8006446:	2101      	movs	r1, #1
 8006448:	fa01 f303 	lsl.w	r3, r1, r3
 800644c:	6939      	ldr	r1, [r7, #16]
 800644e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006452:	4313      	orrs	r3, r2
 8006454:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006462:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da03      	bge.n	8006472 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800646a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	e001      	b.n	8006476 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff feff 	bl	800627a <USB_GetHostSpeed>
 800647c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800647e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006482:	2b02      	cmp	r3, #2
 8006484:	d106      	bne.n	8006494 <USB_HC_Init+0x1c8>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d003      	beq.n	8006494 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800648c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e001      	b.n	8006498 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006498:	787b      	ldrb	r3, [r7, #1]
 800649a:	059b      	lsls	r3, r3, #22
 800649c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064a0:	78bb      	ldrb	r3, [r7, #2]
 80064a2:	02db      	lsls	r3, r3, #11
 80064a4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064a8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064ae:	049b      	lsls	r3, r3, #18
 80064b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80064b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80064b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80064bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064c2:	78fb      	ldrb	r3, [r7, #3]
 80064c4:	0159      	lsls	r1, r3, #5
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	440b      	add	r3, r1
 80064ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ce:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80064d4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80064d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d003      	beq.n	80064e6 <USB_HC_Init+0x21a>
 80064de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d10f      	bne.n	8006506 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80064e6:	78fb      	ldrb	r3, [r7, #3]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	78fa      	ldrb	r2, [r7, #3]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006504:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006506:	7ffb      	ldrb	r3, [r7, #31]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08c      	sub	sp, #48	; 0x30
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	785b      	ldrb	r3, [r3, #1]
 8006526:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800652c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006536:	2b00      	cmp	r3, #0
 8006538:	d02d      	beq.n	8006596 <USB_HC_StartXfer+0x86>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	791b      	ldrb	r3, [r3, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d129      	bne.n	8006596 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d117      	bne.n	8006578 <USB_HC_StartXfer+0x68>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	79db      	ldrb	r3, [r3, #7]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <USB_HC_StartXfer+0x48>
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	79db      	ldrb	r3, [r3, #7]
 8006554:	2b02      	cmp	r3, #2
 8006556:	d10f      	bne.n	8006578 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	69fa      	ldr	r2, [r7, #28]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	440a      	add	r2, r1
 800656e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006576:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <USB_HC_StartXfer+0x86>
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	795b      	ldrb	r3, [r3, #5]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d107      	bne.n	8006596 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	4619      	mov	r1, r3
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fa0f 	bl	80069b0 <USB_DoPing>
      return HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	e0f8      	b.n	8006788 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	8912      	ldrh	r2, [r2, #8]
 80065a6:	4413      	add	r3, r2
 80065a8:	3b01      	subs	r3, #1
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	8912      	ldrh	r2, [r2, #8]
 80065ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80065b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80065b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80065b6:	8b7b      	ldrh	r3, [r7, #26]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d90b      	bls.n	80065d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80065bc:	8b7b      	ldrh	r3, [r7, #26]
 80065be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	8912      	ldrh	r2, [r2, #8]
 80065c6:	fb03 f202 	mul.w	r2, r3, r2
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	611a      	str	r2, [r3, #16]
 80065ce:	e001      	b.n	80065d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80065d0:	2301      	movs	r3, #1
 80065d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	78db      	ldrb	r3, [r3, #3]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80065dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	8912      	ldrh	r2, [r2, #8]
 80065e2:	fb03 f202 	mul.w	r2, r3, r2
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	611a      	str	r2, [r3, #16]
 80065ea:	e003      	b.n	80065f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	695a      	ldr	r2, [r3, #20]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065fe:	04d9      	lsls	r1, r3, #19
 8006600:	4b63      	ldr	r3, [pc, #396]	; (8006790 <USB_HC_StartXfer+0x280>)
 8006602:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006604:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	7a9b      	ldrb	r3, [r3, #10]
 800660a:	075b      	lsls	r3, r3, #29
 800660c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006610:	69f9      	ldr	r1, [r7, #28]
 8006612:	0148      	lsls	r0, r1, #5
 8006614:	6a39      	ldr	r1, [r7, #32]
 8006616:	4401      	add	r1, r0
 8006618:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800661c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800661e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006620:	79fb      	ldrb	r3, [r7, #7]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d009      	beq.n	800663a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	68d9      	ldr	r1, [r3, #12]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	6a3b      	ldr	r3, [r7, #32]
 8006630:	4413      	add	r3, r2
 8006632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006636:	460a      	mov	r2, r1
 8006638:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	bf0c      	ite	eq
 800664a:	2301      	moveq	r3, #1
 800664c:	2300      	movne	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	4413      	add	r3, r2
 800665a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	69fa      	ldr	r2, [r7, #28]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	6a3a      	ldr	r2, [r7, #32]
 8006666:	440a      	add	r2, r1
 8006668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800666c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006670:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	7e7b      	ldrb	r3, [r7, #25]
 8006682:	075b      	lsls	r3, r3, #29
 8006684:	69f9      	ldr	r1, [r7, #28]
 8006686:	0148      	lsls	r0, r1, #5
 8006688:	6a39      	ldr	r1, [r7, #32]
 800668a:	4401      	add	r1, r0
 800668c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006690:	4313      	orrs	r3, r2
 8006692:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80066aa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066ba:	613b      	str	r3, [r7, #16]
 80066bc:	e003      	b.n	80066c6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066c4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066cc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e04e      	b.n	8006788 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	78db      	ldrb	r3, [r3, #3]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d149      	bne.n	8006786 <USB_HC_StartXfer+0x276>
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d045      	beq.n	8006786 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	79db      	ldrb	r3, [r3, #7]
 80066fe:	2b03      	cmp	r3, #3
 8006700:	d830      	bhi.n	8006764 <USB_HC_StartXfer+0x254>
 8006702:	a201      	add	r2, pc, #4	; (adr r2, 8006708 <USB_HC_StartXfer+0x1f8>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	08006719 	.word	0x08006719
 800670c:	0800673d 	.word	0x0800673d
 8006710:	08006719 	.word	0x08006719
 8006714:	0800673d 	.word	0x0800673d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	3303      	adds	r3, #3
 800671e:	089b      	lsrs	r3, r3, #2
 8006720:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006722:	8afa      	ldrh	r2, [r7, #22]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	b29b      	uxth	r3, r3
 800672a:	429a      	cmp	r2, r3
 800672c:	d91c      	bls.n	8006768 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f043 0220 	orr.w	r2, r3, #32
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	619a      	str	r2, [r3, #24]
        }
        break;
 800673a:	e015      	b.n	8006768 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	3303      	adds	r3, #3
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006746:	8afa      	ldrh	r2, [r7, #22]
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	b29b      	uxth	r3, r3
 8006752:	429a      	cmp	r2, r3
 8006754:	d90a      	bls.n	800676c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	619a      	str	r2, [r3, #24]
        }
        break;
 8006762:	e003      	b.n	800676c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006764:	bf00      	nop
 8006766:	e002      	b.n	800676e <USB_HC_StartXfer+0x25e>
        break;
 8006768:	bf00      	nop
 800676a:	e000      	b.n	800676e <USB_HC_StartXfer+0x25e>
        break;
 800676c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	68d9      	ldr	r1, [r3, #12]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	785a      	ldrb	r2, [r3, #1]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	b29b      	uxth	r3, r3
 800677c:	2000      	movs	r0, #0
 800677e:	9000      	str	r0, [sp, #0]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff fb31 	bl	8005de8 <USB_WritePacket>
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3728      	adds	r7, #40	; 0x28
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	1ff80000 	.word	0x1ff80000

08006794 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	b29b      	uxth	r3, r3
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b089      	sub	sp, #36	; 0x24
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
 80067be:	460b      	mov	r3, r1
 80067c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	0c9b      	lsrs	r3, r3, #18
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	0fdb      	lsrs	r3, r3, #31
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b20      	cmp	r3, #32
 8006804:	d104      	bne.n	8006810 <USB_HC_Halt+0x5a>
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	e0c8      	b.n	80069a2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <USB_HC_Halt+0x66>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d163      	bne.n	80068e4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	0151      	lsls	r1, r2, #5
 800682e:	69fa      	ldr	r2, [r7, #28]
 8006830:	440a      	add	r2, r1
 8006832:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006836:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800683a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b00      	cmp	r3, #0
 8006846:	f040 80ab 	bne.w	80069a0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d133      	bne.n	80068be <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	015a      	lsls	r2, r3, #5
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	4413      	add	r3, r2
 800685e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	0151      	lsls	r1, r2, #5
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	440a      	add	r2, r1
 800686c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006870:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006874:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	440a      	add	r2, r1
 800688c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006890:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006894:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3301      	adds	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068a2:	d81d      	bhi.n	80068e0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ba:	d0ec      	beq.n	8006896 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068bc:	e070      	b.n	80069a0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068dc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068de:	e05f      	b.n	80069a0 <USB_HC_Halt+0x1ea>
            break;
 80068e0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068e2:	e05d      	b.n	80069a0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	015a      	lsls	r2, r3, #5
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	4413      	add	r3, r2
 80068ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69ba      	ldr	r2, [r7, #24]
 80068f4:	0151      	lsls	r1, r2, #5
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	440a      	add	r2, r1
 80068fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006902:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d133      	bne.n	800697c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	4413      	add	r3, r2
 800691c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	0151      	lsls	r1, r2, #5
 8006926:	69fa      	ldr	r2, [r7, #28]
 8006928:	440a      	add	r2, r1
 800692a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800692e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006932:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	440a      	add	r2, r1
 800694a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006952:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3301      	adds	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006960:	d81d      	bhi.n	800699e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006978:	d0ec      	beq.n	8006954 <USB_HC_Halt+0x19e>
 800697a:	e011      	b.n	80069a0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	440a      	add	r2, r1
 8006992:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	e000      	b.n	80069a0 <USB_HC_Halt+0x1ea>
          break;
 800699e:	bf00      	nop
    }
  }

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3724      	adds	r7, #36	; 0x24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b087      	sub	sp, #28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80069c0:	78fb      	ldrb	r3, [r7, #3]
 80069c2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80069c4:	2301      	movs	r3, #1
 80069c6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	04da      	lsls	r2, r3, #19
 80069cc:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <USB_DoPing+0x74>)
 80069ce:	4013      	ands	r3, r2
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	0151      	lsls	r1, r2, #5
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	440a      	add	r2, r1
 80069d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069e0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069f8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a00:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	015a      	lsls	r2, r3, #5
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	1ff80000 	.word	0x1ff80000

08006a28 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff f911 	bl	8005c64 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a42:	2110      	movs	r1, #16
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff f96b 	bl	8005d20 <USB_FlushTxFifo>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff f997 	bl	8005d88 <USB_FlushRxFifo>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e01f      	b.n	8006aaa <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b0f      	cmp	r3, #15
 8006aae:	d9dc      	bls.n	8006a6a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e034      	b.n	8006b20 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006acc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006adc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	015a      	lsls	r2, r3, #5
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aea:	461a      	mov	r2, r3
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006afc:	d80c      	bhi.n	8006b18 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b14:	d0ec      	beq.n	8006af0 <USB_StopHost+0xc8>
 8006b16:	e000      	b.n	8006b1a <USB_StopHost+0xf2>
        break;
 8006b18:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b0f      	cmp	r3, #15
 8006b24:	d9c7      	bls.n	8006ab6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b32:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f04f 32ff 	mov.w	r2, #4294967295
 8006b3a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff f880 	bl	8005c42 <USB_EnableGlobalInt>

  return ret;
 8006b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b4c:	b590      	push	{r4, r7, lr}
 8006b4e:	b089      	sub	sp, #36	; 0x24
 8006b50:	af04      	add	r7, sp, #16
 8006b52:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b54:	2301      	movs	r3, #1
 8006b56:	2202      	movs	r2, #2
 8006b58:	2102      	movs	r1, #2
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fc66 	bl	800742c <USBH_FindInterface>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
 8006b66:	2bff      	cmp	r3, #255	; 0xff
 8006b68:	d002      	beq.n	8006b70 <USBH_CDC_InterfaceInit+0x24>
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d901      	bls.n	8006b74 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b70:	2302      	movs	r3, #2
 8006b72:	e13d      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
 8006b76:	4619      	mov	r1, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 fc3b 	bl	80073f4 <USBH_SelectInterface>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	e131      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b92:	2050      	movs	r0, #80	; 0x50
 8006b94:	f002 fafa 	bl	800918c <malloc>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006bac:	2302      	movs	r3, #2
 8006bae:	e11f      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006bb0:	2250      	movs	r2, #80	; 0x50
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	68b8      	ldr	r0, [r7, #8]
 8006bb6:	f002 faf9 	bl	80091ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	211a      	movs	r1, #26
 8006bc0:	fb01 f303 	mul.w	r3, r1, r3
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	b25b      	sxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da15      	bge.n	8006bfe <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	211a      	movs	r1, #26
 8006bd8:	fb01 f303 	mul.w	r3, r1, r3
 8006bdc:	4413      	add	r3, r2
 8006bde:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	211a      	movs	r1, #26
 8006bee:	fb01 f303 	mul.w	r3, r1, r3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bf8:	881a      	ldrh	r2, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	785b      	ldrb	r3, [r3, #1]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f001 ff2c 	bl	8008a62 <USBH_AllocPipe>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	7819      	ldrb	r1, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	7858      	ldrb	r0, [r3, #1]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	8952      	ldrh	r2, [r2, #10]
 8006c2a:	9202      	str	r2, [sp, #8]
 8006c2c:	2203      	movs	r2, #3
 8006c2e:	9201      	str	r2, [sp, #4]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	4623      	mov	r3, r4
 8006c34:	4602      	mov	r2, r0
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 fee4 	bl	8008a04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2200      	movs	r2, #0
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f002 f9f3 	bl	8009030 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	210a      	movs	r1, #10
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fbeb 	bl	800742c <USBH_FindInterface>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2bff      	cmp	r3, #255	; 0xff
 8006c5e:	d002      	beq.n	8006c66 <USBH_CDC_InterfaceInit+0x11a>
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d901      	bls.n	8006c6a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c66:	2302      	movs	r3, #2
 8006c68:	e0c2      	b.n	8006df0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	211a      	movs	r1, #26
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	4413      	add	r3, r2
 8006c76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	da16      	bge.n	8006cb0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	211a      	movs	r1, #26
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	211a      	movs	r1, #26
 8006c9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ca8:	881a      	ldrh	r2, [r3, #0]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	835a      	strh	r2, [r3, #26]
 8006cae:	e015      	b.n	8006cdc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	211a      	movs	r1, #26
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	211a      	movs	r1, #26
 8006ccc:	fb01 f303 	mul.w	r3, r1, r3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006cd6:	881a      	ldrh	r2, [r3, #0]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	211a      	movs	r1, #26
 8006ce2:	fb01 f303 	mul.w	r3, r1, r3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	b25b      	sxtb	r3, r3
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	da16      	bge.n	8006d22 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	687a      	ldr	r2, [r7, #4]
 8006cf8:	211a      	movs	r1, #26
 8006cfa:	fb01 f303 	mul.w	r3, r1, r3
 8006cfe:	4413      	add	r3, r2
 8006d00:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	211a      	movs	r1, #26
 8006d10:	fb01 f303 	mul.w	r3, r1, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d1a:	881a      	ldrh	r2, [r3, #0]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	835a      	strh	r2, [r3, #26]
 8006d20:	e015      	b.n	8006d4e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	211a      	movs	r1, #26
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006d32:	781a      	ldrb	r2, [r3, #0]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	211a      	movs	r1, #26
 8006d3e:	fb01 f303 	mul.w	r3, r1, r3
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006d48:	881a      	ldrh	r2, [r3, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	7b9b      	ldrb	r3, [r3, #14]
 8006d52:	4619      	mov	r1, r3
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 fe84 	bl	8008a62 <USBH_AllocPipe>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	7bdb      	ldrb	r3, [r3, #15]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 fe7a 	bl	8008a62 <USBH_AllocPipe>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	461a      	mov	r2, r3
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	7b59      	ldrb	r1, [r3, #13]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	7b98      	ldrb	r0, [r3, #14]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	8b12      	ldrh	r2, [r2, #24]
 8006d8e:	9202      	str	r2, [sp, #8]
 8006d90:	2202      	movs	r2, #2
 8006d92:	9201      	str	r2, [sp, #4]
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4623      	mov	r3, r4
 8006d98:	4602      	mov	r2, r0
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fe32 	bl	8008a04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	7b19      	ldrb	r1, [r3, #12]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	7bd8      	ldrb	r0, [r3, #15]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	8b52      	ldrh	r2, [r2, #26]
 8006db8:	9202      	str	r2, [sp, #8]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	9201      	str	r2, [sp, #4]
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f001 fe1d 	bl	8008a04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	7b5b      	ldrb	r3, [r3, #13]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 f928 	bl	8009030 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	7b1b      	ldrb	r3, [r3, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f002 f921 	bl	8009030 <USBH_LL_SetToggle>

  return USBH_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3714      	adds	r7, #20
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd90      	pop	{r4, r7, pc}

08006df8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 fe12 	bl	8008a42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fe3d 	bl	8008aa4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	7b1b      	ldrb	r3, [r3, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00e      	beq.n	8006e56 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	7b1b      	ldrb	r3, [r3, #12]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f001 fdff 	bl	8008a42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	7b1b      	ldrb	r3, [r3, #12]
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f001 fe2a 	bl	8008aa4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	7b5b      	ldrb	r3, [r3, #13]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00e      	beq.n	8006e7c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	7b5b      	ldrb	r3, [r3, #13]
 8006e62:	4619      	mov	r1, r3
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fdec 	bl	8008a42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	7b5b      	ldrb	r3, [r3, #13]
 8006e6e:	4619      	mov	r1, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 fe17 	bl	8008aa4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f002 f983 	bl	800919c <free>
    phost->pActiveClass->pData = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3340      	adds	r3, #64	; 0x40
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f8b1 	bl	800702a <GetLineCoding>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ecc:	7afb      	ldrb	r3, [r7, #11]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d105      	bne.n	8006ede <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ed8:	2102      	movs	r1, #2
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ede:	7afb      	ldrb	r3, [r7, #11]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006f08:	2b04      	cmp	r3, #4
 8006f0a:	d877      	bhi.n	8006ffc <USBH_CDC_Process+0x114>
 8006f0c:	a201      	add	r2, pc, #4	; (adr r2, 8006f14 <USBH_CDC_Process+0x2c>)
 8006f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f12:	bf00      	nop
 8006f14:	08006f29 	.word	0x08006f29
 8006f18:	08006f2f 	.word	0x08006f2f
 8006f1c:	08006f5f 	.word	0x08006f5f
 8006f20:	08006fd3 	.word	0x08006fd3
 8006f24:	08006fe1 	.word	0x08006fe1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2c:	e06d      	b.n	800700a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f897 	bl	8007068 <SetLineCoding>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d104      	bne.n	8006f4e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f4c:	e058      	b.n	8007000 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d055      	beq.n	8007000 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2204      	movs	r2, #4
 8006f58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f5c:	e050      	b.n	8007000 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	3340      	adds	r3, #64	; 0x40
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f860 	bl	800702a <GetLineCoding>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d126      	bne.n	8006fc2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	791b      	ldrb	r3, [r3, #4]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d13b      	bne.n	8007004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d133      	bne.n	8007004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d12b      	bne.n	8007004 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d124      	bne.n	8007004 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f958 	bl	8007270 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fc0:	e020      	b.n	8007004 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d01d      	beq.n	8007004 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2204      	movs	r2, #4
 8006fcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006fd0:	e018      	b.n	8007004 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f867 	bl	80070a6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f8da 	bl	8007192 <CDC_ProcessReception>
      break;
 8006fde:	e014      	b.n	800700a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 ffef 	bl	8007fc6 <USBH_ClrFeature>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10a      	bne.n	8007008 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006ffa:	e005      	b.n	8007008 <USBH_CDC_Process+0x120>

    default:
      break;
 8006ffc:	bf00      	nop
 8006ffe:	e004      	b.n	800700a <USBH_CDC_Process+0x122>
      break;
 8007000:	bf00      	nop
 8007002:	e002      	b.n	800700a <USBH_CDC_Process+0x122>
      break;
 8007004:	bf00      	nop
 8007006:	e000      	b.n	800700a <USBH_CDC_Process+0x122>
      break;
 8007008:	bf00      	nop

  }

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	22a1      	movs	r2, #161	; 0xa1
 8007038:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2221      	movs	r2, #33	; 0x21
 800703e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2207      	movs	r2, #7
 8007050:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2207      	movs	r2, #7
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f001 fa81 	bl	8008560 <USBH_CtlReq>
 800705e:	4603      	mov	r3, r0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2221      	movs	r2, #33	; 0x21
 8007076:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2207      	movs	r2, #7
 800708e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2207      	movs	r2, #7
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f001 fa62 	bl	8008560 <USBH_CtlReq>
 800709c:	4603      	mov	r3, r0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b086      	sub	sp, #24
 80070aa:	af02      	add	r7, sp, #8
 80070ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070b4:	69db      	ldr	r3, [r3, #28]
 80070b6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d002      	beq.n	80070cc <CDC_ProcessTransmission+0x26>
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d023      	beq.n	8007112 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80070ca:	e05e      	b.n	800718a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	8b12      	ldrh	r2, [r2, #24]
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d90b      	bls.n	80070f0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	69d9      	ldr	r1, [r3, #28]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8b1a      	ldrh	r2, [r3, #24]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	7b5b      	ldrb	r3, [r3, #13]
 80070e4:	2001      	movs	r0, #1
 80070e6:	9000      	str	r0, [sp, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fc48 	bl	800897e <USBH_BulkSendData>
 80070ee:	e00b      	b.n	8007108 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80070f8:	b29a      	uxth	r2, r3
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	7b5b      	ldrb	r3, [r3, #13]
 80070fe:	2001      	movs	r0, #1
 8007100:	9000      	str	r0, [sp, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 fc3b 	bl	800897e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007110:	e03b      	b.n	800718a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	7b5b      	ldrb	r3, [r3, #13]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 ff5f 	bl	8008fdc <USBH_LL_GetURBState>
 800711e:	4603      	mov	r3, r0
 8007120:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007122:	7afb      	ldrb	r3, [r7, #11]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d128      	bne.n	800717a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	8b12      	ldrh	r2, [r2, #24]
 8007130:	4293      	cmp	r3, r2
 8007132:	d90e      	bls.n	8007152 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	8b12      	ldrh	r2, [r2, #24]
 800713c:	1a9a      	subs	r2, r3, r2
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	8b12      	ldrh	r2, [r2, #24]
 800714a:	441a      	add	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	61da      	str	r2, [r3, #28]
 8007150:	e002      	b.n	8007158 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2200      	movs	r2, #0
 8007156:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007168:	e00e      	b.n	8007188 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f868 	bl	8007248 <USBH_CDC_TransmitCallback>
      break;
 8007178:	e006      	b.n	8007188 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800717a:	7afb      	ldrb	r3, [r7, #11]
 800717c:	2b02      	cmp	r3, #2
 800717e:	d103      	bne.n	8007188 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007188:	bf00      	nop
  }
}
 800718a:	bf00      	nop
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071a4:	2300      	movs	r3, #0
 80071a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d002      	beq.n	80071b8 <CDC_ProcessReception+0x26>
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d00e      	beq.n	80071d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80071b6:	e043      	b.n	8007240 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	6a19      	ldr	r1, [r3, #32]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	8b5a      	ldrh	r2, [r3, #26]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	7b1b      	ldrb	r3, [r3, #12]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f001 fbff 	bl	80089c8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2204      	movs	r2, #4
 80071ce:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071d2:	e035      	b.n	8007240 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	7b1b      	ldrb	r3, [r3, #12]
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 fefe 	bl	8008fdc <USBH_LL_GetURBState>
 80071e0:	4603      	mov	r3, r0
 80071e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80071e4:	7cfb      	ldrb	r3, [r7, #19]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d129      	bne.n	800723e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	7b1b      	ldrb	r3, [r3, #12]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fe61 	bl	8008eb8 <USBH_LL_GetLastXferSize>
 80071f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d016      	beq.n	8007230 <CDC_ProcessReception+0x9e>
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	8b5b      	ldrh	r3, [r3, #26]
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4293      	cmp	r3, r2
 800720c:	d910      	bls.n	8007230 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad2      	subs	r2, r2, r3
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6a1a      	ldr	r2, [r3, #32]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	441a      	add	r2, r3
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2203      	movs	r2, #3
 800722a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800722e:	e006      	b.n	800723e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f80f 	bl	800725c <USBH_CDC_ReceiveCallback>
      break;
 800723e:	bf00      	nop
  }
}
 8007240:	bf00      	nop
 8007242:	3718      	adds	r7, #24
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007298:	2302      	movs	r3, #2
 800729a:	e029      	b.n	80072f0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	79fa      	ldrb	r2, [r7, #7]
 80072a0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 f81f 	bl	80072f8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f001 fd31 	bl	8008d50 <USBH_LL_Init>

  return USBH_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e009      	b.n	800731e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	33e0      	adds	r3, #224	; 0xe0
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	2200      	movs	r2, #0
 8007316:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	3301      	adds	r3, #1
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2b0f      	cmp	r3, #15
 8007322:	d9f2      	bls.n	800730a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	e009      	b.n	800733e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007344:	d3f1      	bcc.n	800732a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2240      	movs	r2, #64	; 0x40
 800736a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d016      	beq.n	80073e2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10e      	bne.n	80073dc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80073c4:	1c59      	adds	r1, r3, #1
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	33de      	adds	r3, #222	; 0xde
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]
 80073da:	e004      	b.n	80073e6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80073dc:	2302      	movs	r3, #2
 80073de:	73fb      	strb	r3, [r7, #15]
 80073e0:	e001      	b.n	80073e6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80073e2:	2302      	movs	r3, #2
 80073e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b085      	sub	sp, #20
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	460b      	mov	r3, r1
 80073fe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800740a:	78fa      	ldrb	r2, [r7, #3]
 800740c:	429a      	cmp	r2, r3
 800740e:	d204      	bcs.n	800741a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	78fa      	ldrb	r2, [r7, #3]
 8007414:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007418:	e001      	b.n	800741e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800741a:	2302      	movs	r3, #2
 800741c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800741e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	4608      	mov	r0, r1
 8007436:	4611      	mov	r1, r2
 8007438:	461a      	mov	r2, r3
 800743a:	4603      	mov	r3, r0
 800743c:	70fb      	strb	r3, [r7, #3]
 800743e:	460b      	mov	r3, r1
 8007440:	70bb      	strb	r3, [r7, #2]
 8007442:	4613      	mov	r3, r2
 8007444:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007454:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007456:	e025      	b.n	80074a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	221a      	movs	r2, #26
 800745c:	fb02 f303 	mul.w	r3, r2, r3
 8007460:	3308      	adds	r3, #8
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	3302      	adds	r3, #2
 8007468:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	795b      	ldrb	r3, [r3, #5]
 800746e:	78fa      	ldrb	r2, [r7, #3]
 8007470:	429a      	cmp	r2, r3
 8007472:	d002      	beq.n	800747a <USBH_FindInterface+0x4e>
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	2bff      	cmp	r3, #255	; 0xff
 8007478:	d111      	bne.n	800749e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800747e:	78ba      	ldrb	r2, [r7, #2]
 8007480:	429a      	cmp	r2, r3
 8007482:	d002      	beq.n	800748a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007484:	78bb      	ldrb	r3, [r7, #2]
 8007486:	2bff      	cmp	r3, #255	; 0xff
 8007488:	d109      	bne.n	800749e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800748e:	787a      	ldrb	r2, [r7, #1]
 8007490:	429a      	cmp	r2, r3
 8007492:	d002      	beq.n	800749a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007494:	787b      	ldrb	r3, [r7, #1]
 8007496:	2bff      	cmp	r3, #255	; 0xff
 8007498:	d101      	bne.n	800749e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	e006      	b.n	80074ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	3301      	adds	r3, #1
 80074a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d9d6      	bls.n	8007458 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80074aa:	23ff      	movs	r3, #255	; 0xff
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 fc81 	bl	8008dc8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80074c6:	2101      	movs	r1, #1
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fd9a 	bl	8009002 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3708      	adds	r7, #8
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b088      	sub	sp, #32
 80074dc:	af04      	add	r7, sp, #16
 80074de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80074e0:	2302      	movs	r3, #2
 80074e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d102      	bne.n	80074fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2203      	movs	r2, #3
 80074f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b0b      	cmp	r3, #11
 8007502:	f200 81be 	bhi.w	8007882 <USBH_Process+0x3aa>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <USBH_Process+0x34>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	0800753d 	.word	0x0800753d
 8007510:	0800756f 	.word	0x0800756f
 8007514:	080075d7 	.word	0x080075d7
 8007518:	0800781d 	.word	0x0800781d
 800751c:	08007883 	.word	0x08007883
 8007520:	0800767b 	.word	0x0800767b
 8007524:	080077c3 	.word	0x080077c3
 8007528:	080076b1 	.word	0x080076b1
 800752c:	080076d1 	.word	0x080076d1
 8007530:	080076f1 	.word	0x080076f1
 8007534:	08007735 	.word	0x08007735
 8007538:	08007805 	.word	0x08007805
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 819e 	beq.w	8007886 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007550:	20c8      	movs	r0, #200	; 0xc8
 8007552:	f001 fd9d 	bl	8009090 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fc93 	bl	8008e82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800756c:	e18b      	b.n	8007886 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007574:	2b01      	cmp	r3, #1
 8007576:	d107      	bne.n	8007588 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2202      	movs	r2, #2
 8007584:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007586:	e18d      	b.n	80078a4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800758e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007592:	d914      	bls.n	80075be <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800759a:	3301      	adds	r3, #1
 800759c:	b2da      	uxtb	r2, r3
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d903      	bls.n	80075b6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	220d      	movs	r2, #13
 80075b2:	701a      	strb	r2, [r3, #0]
      break;
 80075b4:	e176      	b.n	80078a4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
      break;
 80075bc:	e172      	b.n	80078a4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80075c4:	f103 020a 	add.w	r2, r3, #10
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80075ce:	200a      	movs	r0, #10
 80075d0:	f001 fd5e 	bl	8009090 <USBH_Delay>
      break;
 80075d4:	e166      	b.n	80078a4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80075e6:	2104      	movs	r1, #4
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80075ec:	2064      	movs	r0, #100	; 0x64
 80075ee:	f001 fd4f 	bl	8009090 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f001 fc1e 	bl	8008e34 <USBH_LL_GetSpeed>
 80075f8:	4603      	mov	r3, r0
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2205      	movs	r2, #5
 8007606:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007608:	2100      	movs	r1, #0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 fa29 	bl	8008a62 <USBH_AllocPipe>
 8007610:	4603      	mov	r3, r0
 8007612:	461a      	mov	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007618:	2180      	movs	r1, #128	; 0x80
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 fa21 	bl	8008a62 <USBH_AllocPipe>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	7919      	ldrb	r1, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800763c:	b292      	uxth	r2, r2
 800763e:	9202      	str	r2, [sp, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	9201      	str	r2, [sp, #4]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4603      	mov	r3, r0
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 f9da 	bl	8008a04 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7959      	ldrb	r1, [r3, #5]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007664:	b292      	uxth	r2, r2
 8007666:	9202      	str	r2, [sp, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	9201      	str	r2, [sp, #4]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	4603      	mov	r3, r0
 8007670:	2200      	movs	r2, #0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f001 f9c6 	bl	8008a04 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007678:	e114      	b.n	80078a4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f918 	bl	80078b0 <USBH_HandleEnum>
 8007680:	4603      	mov	r3, r0
 8007682:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	f040 80fe 	bne.w	800788a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800769c:	2b01      	cmp	r3, #1
 800769e:	d103      	bne.n	80076a8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2208      	movs	r2, #8
 80076a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076a6:	e0f0      	b.n	800788a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2207      	movs	r2, #7
 80076ac:	701a      	strb	r2, [r3, #0]
      break;
 80076ae:	e0ec      	b.n	800788a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 80e9 	beq.w	800788e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076c2:	2101      	movs	r1, #1
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2208      	movs	r2, #8
 80076cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80076ce:	e0de      	b.n	800788e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	4619      	mov	r1, r3
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fc2c 	bl	8007f38 <USBH_SetCfg>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f040 80d5 	bne.w	8007892 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2209      	movs	r2, #9
 80076ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076ee:	e0d0      	b.n	8007892 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d016      	beq.n	800772c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80076fe:	2101      	movs	r1, #1
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fc3c 	bl	8007f7e <USBH_SetFeature>
 8007706:	4603      	mov	r3, r0
 8007708:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800770a:	7bbb      	ldrb	r3, [r7, #14]
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d103      	bne.n	800771a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	220a      	movs	r2, #10
 8007716:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007718:	e0bd      	b.n	8007896 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b03      	cmp	r3, #3
 8007720:	f040 80b9 	bne.w	8007896 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	220a      	movs	r2, #10
 8007728:	701a      	strb	r2, [r3, #0]
      break;
 800772a:	e0b4      	b.n	8007896 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	220a      	movs	r2, #10
 8007730:	701a      	strb	r2, [r3, #0]
      break;
 8007732:	e0b0      	b.n	8007896 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 80ad 	beq.w	800789a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
 800774c:	e016      	b.n	800777c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800774e:	7bfa      	ldrb	r2, [r7, #15]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	32de      	adds	r2, #222	; 0xde
 8007754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007758:	791a      	ldrb	r2, [r3, #4]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007760:	429a      	cmp	r2, r3
 8007762:	d108      	bne.n	8007776 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007764:	7bfa      	ldrb	r2, [r7, #15]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	32de      	adds	r2, #222	; 0xde
 800776a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007774:	e005      	b.n	8007782 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	3301      	adds	r3, #1
 800777a:	73fb      	strb	r3, [r7, #15]
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d0e5      	beq.n	800774e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d016      	beq.n	80077ba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2206      	movs	r2, #6
 80077a2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077aa:	2103      	movs	r1, #3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077b0:	e073      	b.n	800789a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	220d      	movs	r2, #13
 80077b6:	701a      	strb	r2, [r3, #0]
      break;
 80077b8:	e06f      	b.n	800789a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	220d      	movs	r2, #13
 80077be:	701a      	strb	r2, [r3, #0]
      break;
 80077c0:	e06b      	b.n	800789a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d017      	beq.n	80077fc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	4798      	blx	r3
 80077d8:	4603      	mov	r3, r0
 80077da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	220b      	movs	r2, #11
 80077e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077ea:	e058      	b.n	800789e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d154      	bne.n	800789e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	220d      	movs	r2, #13
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e050      	b.n	800789e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	220d      	movs	r2, #13
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e04c      	b.n	800789e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800780a:	2b00      	cmp	r3, #0
 800780c:	d049      	beq.n	80078a2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
      }
      break;
 800781a:	e042      	b.n	80078a2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff fd67 	bl	80072f8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d005      	beq.n	800785e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007858:	2105      	movs	r1, #5
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	d107      	bne.n	800787a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7ff fe20 	bl	80074b8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007878:	e014      	b.n	80078a4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f001 faa4 	bl	8008dc8 <USBH_LL_Start>
      break;
 8007880:	e010      	b.n	80078a4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007882:	bf00      	nop
 8007884:	e00e      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 8007886:	bf00      	nop
 8007888:	e00c      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 800788a:	bf00      	nop
 800788c:	e00a      	b.n	80078a4 <USBH_Process+0x3cc>
    break;
 800788e:	bf00      	nop
 8007890:	e008      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 8007892:	bf00      	nop
 8007894:	e006      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <USBH_Process+0x3cc>
      break;
 80078a2:	bf00      	nop
  }
  return USBH_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop

080078b0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af04      	add	r7, sp, #16
 80078b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80078b8:	2301      	movs	r3, #1
 80078ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80078bc:	2301      	movs	r3, #1
 80078be:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	785b      	ldrb	r3, [r3, #1]
 80078c4:	2b07      	cmp	r3, #7
 80078c6:	f200 81c1 	bhi.w	8007c4c <USBH_HandleEnum+0x39c>
 80078ca:	a201      	add	r2, pc, #4	; (adr r2, 80078d0 <USBH_HandleEnum+0x20>)
 80078cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d0:	080078f1 	.word	0x080078f1
 80078d4:	080079af 	.word	0x080079af
 80078d8:	08007a19 	.word	0x08007a19
 80078dc:	08007aa7 	.word	0x08007aa7
 80078e0:	08007b11 	.word	0x08007b11
 80078e4:	08007b81 	.word	0x08007b81
 80078e8:	08007bc7 	.word	0x08007bc7
 80078ec:	08007c0d 	.word	0x08007c0d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80078f0:	2108      	movs	r1, #8
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa50 	bl	8007d98 <USBH_Get_DevDesc>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d130      	bne.n	8007964 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7919      	ldrb	r1, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007926:	b292      	uxth	r2, r2
 8007928:	9202      	str	r2, [sp, #8]
 800792a:	2200      	movs	r2, #0
 800792c:	9201      	str	r2, [sp, #4]
 800792e:	9300      	str	r3, [sp, #0]
 8007930:	4603      	mov	r3, r0
 8007932:	2280      	movs	r2, #128	; 0x80
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 f865 	bl	8008a04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	7959      	ldrb	r1, [r3, #5]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800794e:	b292      	uxth	r2, r2
 8007950:	9202      	str	r2, [sp, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	9201      	str	r2, [sp, #4]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4603      	mov	r3, r0
 800795a:	2200      	movs	r2, #0
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 f851 	bl	8008a04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007962:	e175      	b.n	8007c50 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b03      	cmp	r3, #3
 8007968:	f040 8172 	bne.w	8007c50 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007972:	3301      	adds	r3, #1
 8007974:	b2da      	uxtb	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007982:	2b03      	cmp	r3, #3
 8007984:	d903      	bls.n	800798e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	220d      	movs	r2, #13
 800798a:	701a      	strb	r2, [r3, #0]
      break;
 800798c:	e160      	b.n	8007c50 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	795b      	ldrb	r3, [r3, #5]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 f885 	bl	8008aa4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	791b      	ldrb	r3, [r3, #4]
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 f87f 	bl	8008aa4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
      break;
 80079ac:	e150      	b.n	8007c50 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80079ae:	2112      	movs	r1, #18
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 f9f1 	bl	8007d98 <USBH_Get_DevDesc>
 80079b6:	4603      	mov	r3, r0
 80079b8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d103      	bne.n	80079c8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80079c6:	e145      	b.n	8007c54 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	f040 8142 	bne.w	8007c54 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079d6:	3301      	adds	r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d903      	bls.n	80079f2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	220d      	movs	r2, #13
 80079ee:	701a      	strb	r2, [r3, #0]
      break;
 80079f0:	e130      	b.n	8007c54 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	795b      	ldrb	r3, [r3, #5]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f853 	bl	8008aa4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	791b      	ldrb	r3, [r3, #4]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f84d 	bl	8008aa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	701a      	strb	r2, [r3, #0]
      break;
 8007a16:	e11d      	b.n	8007c54 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007a18:	2101      	movs	r1, #1
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fa68 	bl	8007ef0 <USBH_SetAddress>
 8007a20:	4603      	mov	r3, r0
 8007a22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d132      	bne.n	8007a90 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007a2a:	2002      	movs	r0, #2
 8007a2c:	f001 fb30 	bl	8009090 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2203      	movs	r2, #3
 8007a3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7919      	ldrb	r1, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007a52:	b292      	uxth	r2, r2
 8007a54:	9202      	str	r2, [sp, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	9201      	str	r2, [sp, #4]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2280      	movs	r2, #128	; 0x80
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 ffcf 	bl	8008a04 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	7959      	ldrb	r1, [r3, #5]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	9202      	str	r2, [sp, #8]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	9201      	str	r2, [sp, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4603      	mov	r3, r0
 8007a86:	2200      	movs	r2, #0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 ffbb 	bl	8008a04 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a8e:	e0e3      	b.n	8007c58 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	f040 80e0 	bne.w	8007c58 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	220d      	movs	r2, #13
 8007a9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	705a      	strb	r2, [r3, #1]
      break;
 8007aa4:	e0d8      	b.n	8007c58 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007aa6:	2109      	movs	r1, #9
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f99d 	bl	8007de8 <USBH_Get_CfgDesc>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d103      	bne.n	8007ac0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2204      	movs	r2, #4
 8007abc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007abe:	e0cd      	b.n	8007c5c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	f040 80ca 	bne.w	8007c5c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ace:	3301      	adds	r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d903      	bls.n	8007aea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	220d      	movs	r2, #13
 8007ae6:	701a      	strb	r2, [r3, #0]
      break;
 8007ae8:	e0b8      	b.n	8007c5c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	795b      	ldrb	r3, [r3, #5]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 ffd7 	bl	8008aa4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	791b      	ldrb	r3, [r3, #4]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 ffd1 	bl	8008aa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	701a      	strb	r2, [r3, #0]
      break;
 8007b0e:	e0a5      	b.n	8007c5c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 f965 	bl	8007de8 <USBH_Get_CfgDesc>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2205      	movs	r2, #5
 8007b2c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b2e:	e097      	b.n	8007c60 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	f040 8094 	bne.w	8007c60 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b3e:	3301      	adds	r3, #1
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d903      	bls.n	8007b5a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	220d      	movs	r2, #13
 8007b56:	701a      	strb	r2, [r3, #0]
      break;
 8007b58:	e082      	b.n	8007c60 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	795b      	ldrb	r3, [r3, #5]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 ff9f 	bl	8008aa4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	791b      	ldrb	r3, [r3, #4]
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 ff99 	bl	8008aa4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	701a      	strb	r2, [r3, #0]
      break;
 8007b7e:	e06f      	b.n	8007c60 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d019      	beq.n	8007bbe <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007b96:	23ff      	movs	r3, #255	; 0xff
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 f949 	bl	8007e30 <USBH_Get_StringDesc>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d103      	bne.n	8007bb0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2206      	movs	r2, #6
 8007bac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bae:	e059      	b.n	8007c64 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d156      	bne.n	8007c64 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2206      	movs	r2, #6
 8007bba:	705a      	strb	r2, [r3, #1]
      break;
 8007bbc:	e052      	b.n	8007c64 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2206      	movs	r2, #6
 8007bc2:	705a      	strb	r2, [r3, #1]
      break;
 8007bc4:	e04e      	b.n	8007c64 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d019      	beq.n	8007c04 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007bdc:	23ff      	movs	r3, #255	; 0xff
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f926 	bl	8007e30 <USBH_Get_StringDesc>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d103      	bne.n	8007bf6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2207      	movs	r2, #7
 8007bf2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007bf4:	e038      	b.n	8007c68 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d135      	bne.n	8007c68 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2207      	movs	r2, #7
 8007c00:	705a      	strb	r2, [r3, #1]
      break;
 8007c02:	e031      	b.n	8007c68 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2207      	movs	r2, #7
 8007c08:	705a      	strb	r2, [r3, #1]
      break;
 8007c0a:	e02d      	b.n	8007c68 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d017      	beq.n	8007c46 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007c22:	23ff      	movs	r3, #255	; 0xff
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f903 	bl	8007e30 <USBH_Get_StringDesc>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d102      	bne.n	8007c3a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007c38:	e018      	b.n	8007c6c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b03      	cmp	r3, #3
 8007c3e:	d115      	bne.n	8007c6c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
      break;
 8007c44:	e012      	b.n	8007c6c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4a:	e00f      	b.n	8007c6c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e00e      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c50:	bf00      	nop
 8007c52:	e00c      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c54:	bf00      	nop
 8007c56:	e00a      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c58:	bf00      	nop
 8007c5a:	e008      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e006      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c60:	bf00      	nop
 8007c62:	e004      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c64:	bf00      	nop
 8007c66:	e002      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c68:	bf00      	nop
 8007c6a:	e000      	b.n	8007c6e <USBH_HandleEnum+0x3be>
      break;
 8007c6c:	bf00      	nop
  }
  return Status;
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b082      	sub	sp, #8
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f804 	bl	8007cba <USBH_HandleSof>
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b0b      	cmp	r3, #11
 8007cca:	d10a      	bne.n	8007ce2 <USBH_HandleSof+0x28>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
  }
}
 8007ce2:	bf00      	nop
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007cfa:	bf00      	nop
}
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007d16:	bf00      	nop
}
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 f844 	bl	8008dfe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	791b      	ldrb	r3, [r3, #4]
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fe91 	bl	8008aa4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	795b      	ldrb	r3, [r3, #5]
 8007d86:	4619      	mov	r1, r3
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fe8b 	bl	8008aa4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007db6:	2100      	movs	r1, #0
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f864 	bl	8007e86 <USBH_GetDescriptor>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10a      	bne.n	8007dde <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007dd4:	78fa      	ldrb	r2, [r7, #3]
 8007dd6:	b292      	uxth	r2, r2
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f000 f918 	bl	800800e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af02      	add	r7, sp, #8
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	460b      	mov	r3, r1
 8007df2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	331c      	adds	r3, #28
 8007df8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007dfa:	887b      	ldrh	r3, [r7, #2]
 8007dfc:	9300      	str	r3, [sp, #0]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e04:	2100      	movs	r1, #0
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 f83d 	bl	8007e86 <USBH_GetDescriptor>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007e16:	887b      	ldrh	r3, [r7, #2]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f987 	bl	8008130 <USBH_ParseCfgDesc>
 8007e22:	4603      	mov	r3, r0
 8007e24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af02      	add	r7, sp, #8
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	607a      	str	r2, [r7, #4]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	72fb      	strb	r3, [r7, #11]
 8007e40:	4613      	mov	r3, r2
 8007e42:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007e4c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007e54:	893b      	ldrh	r3, [r7, #8]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f812 	bl	8007e86 <USBH_GetDescriptor>
 8007e62:	4603      	mov	r3, r0
 8007e64:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d107      	bne.n	8007e7c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e72:	893a      	ldrh	r2, [r7, #8]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 fb24 	bl	80084c4 <USBH_ParseStringDesc>
  }

  return status;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	60f8      	str	r0, [r7, #12]
 8007e8e:	607b      	str	r3, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	72fb      	strb	r3, [r7, #11]
 8007e94:	4613      	mov	r3, r2
 8007e96:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	789b      	ldrb	r3, [r3, #2]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d11c      	bne.n	8007eda <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ea0:	7afb      	ldrb	r3, [r7, #11]
 8007ea2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2206      	movs	r2, #6
 8007eb0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	893a      	ldrh	r2, [r7, #8]
 8007eb6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007eb8:	893b      	ldrh	r3, [r7, #8]
 8007eba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec2:	d104      	bne.n	8007ece <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f240 4209 	movw	r2, #1033	; 0x409
 8007eca:	829a      	strh	r2, [r3, #20]
 8007ecc:	e002      	b.n	8007ed4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8b3a      	ldrh	r2, [r7, #24]
 8007ed8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007eda:	8b3b      	ldrh	r3, [r7, #24]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 fb3d 	bl	8008560 <USBH_CtlReq>
 8007ee6:	4603      	mov	r3, r0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	789b      	ldrb	r3, [r3, #2]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d10f      	bne.n	8007f24 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2205      	movs	r2, #5
 8007f0e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f10:	78fb      	ldrb	r3, [r7, #3]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f24:	2200      	movs	r2, #0
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fb19 	bl	8008560 <USBH_CtlReq>
 8007f2e:	4603      	mov	r3, r0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	789b      	ldrb	r3, [r3, #2]
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d10e      	bne.n	8007f6a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2209      	movs	r2, #9
 8007f56:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	887a      	ldrh	r2, [r7, #2]
 8007f5c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 faf6 	bl	8008560 <USBH_CtlReq>
 8007f74:	4603      	mov	r3, r0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	789b      	ldrb	r3, [r3, #2]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d10f      	bne.n	8007fb2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2203      	movs	r2, #3
 8007f9c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007f9e:	78fb      	ldrb	r3, [r7, #3]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fad2 	bl	8008560 <USBH_CtlReq>
 8007fbc:	4603      	mov	r3, r0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b082      	sub	sp, #8
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	789b      	ldrb	r3, [r3, #2]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d10f      	bne.n	8007ffa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 faae 	bl	8008560 <USBH_CtlReq>
 8008004:	4603      	mov	r3, r0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800800e:	b480      	push	{r7}
 8008010:	b085      	sub	sp, #20
 8008012:	af00      	add	r7, sp, #0
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	4613      	mov	r3, r2
 800801a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	781a      	ldrb	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	785a      	ldrb	r2, [r3, #1]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	3302      	adds	r3, #2
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	b29a      	uxth	r2, r3
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	3303      	adds	r3, #3
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	b29b      	uxth	r3, r3
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	b29b      	uxth	r3, r3
 8008040:	4313      	orrs	r3, r2
 8008042:	b29a      	uxth	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	791a      	ldrb	r2, [r3, #4]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	795a      	ldrb	r2, [r3, #5]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	799a      	ldrb	r2, [r3, #6]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	79da      	ldrb	r2, [r3, #7]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	79db      	ldrb	r3, [r3, #7]
 800806c:	2b20      	cmp	r3, #32
 800806e:	dc11      	bgt.n	8008094 <USBH_ParseDevDesc+0x86>
 8008070:	2b08      	cmp	r3, #8
 8008072:	db16      	blt.n	80080a2 <USBH_ParseDevDesc+0x94>
 8008074:	3b08      	subs	r3, #8
 8008076:	2201      	movs	r2, #1
 8008078:	fa02 f303 	lsl.w	r3, r2, r3
 800807c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008084:	2b00      	cmp	r3, #0
 8008086:	bf14      	ite	ne
 8008088:	2301      	movne	r3, #1
 800808a:	2300      	moveq	r3, #0
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	d102      	bne.n	8008098 <USBH_ParseDevDesc+0x8a>
 8008092:	e006      	b.n	80080a2 <USBH_ParseDevDesc+0x94>
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d104      	bne.n	80080a2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	79da      	ldrb	r2, [r3, #7]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	71da      	strb	r2, [r3, #7]
      break;
 80080a0:	e003      	b.n	80080aa <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2240      	movs	r2, #64	; 0x40
 80080a6:	71da      	strb	r2, [r3, #7]
      break;
 80080a8:	bf00      	nop
  }

  if (length > 8U)
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d939      	bls.n	8008124 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	3308      	adds	r3, #8
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	3309      	adds	r3, #9
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	021b      	lsls	r3, r3, #8
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4313      	orrs	r3, r2
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	330a      	adds	r3, #10
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	330b      	adds	r3, #11
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	b29b      	uxth	r3, r3
 80080e0:	4313      	orrs	r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	330c      	adds	r3, #12
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	330d      	adds	r3, #13
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	4313      	orrs	r3, r2
 80080fe:	b29a      	uxth	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	7b9a      	ldrb	r2, [r3, #14]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	7bda      	ldrb	r2, [r3, #15]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	7c1a      	ldrb	r2, [r3, #16]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	7c5a      	ldrb	r2, [r3, #17]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	745a      	strb	r2, [r3, #17]
  }
}
 8008124:	bf00      	nop
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08c      	sub	sp, #48	; 0x30
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	4613      	mov	r3, r2
 800813c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008144:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	781a      	ldrb	r2, [r3, #0]
 8008164:	6a3b      	ldr	r3, [r7, #32]
 8008166:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	785a      	ldrb	r2, [r3, #1]
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	3302      	adds	r3, #2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	b29a      	uxth	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	3303      	adds	r3, #3
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	021b      	lsls	r3, r3, #8
 8008182:	b29b      	uxth	r3, r3
 8008184:	4313      	orrs	r3, r2
 8008186:	b29b      	uxth	r3, r3
 8008188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800818c:	bf28      	it	cs
 800818e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008192:	b29a      	uxth	r2, r3
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	791a      	ldrb	r2, [r3, #4]
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	795a      	ldrb	r2, [r3, #5]
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	799a      	ldrb	r2, [r3, #6]
 80081ac:	6a3b      	ldr	r3, [r7, #32]
 80081ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	79da      	ldrb	r2, [r3, #7]
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	7a1a      	ldrb	r2, [r3, #8]
 80081bc:	6a3b      	ldr	r3, [r7, #32]
 80081be:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b09      	cmp	r3, #9
 80081c6:	d002      	beq.n	80081ce <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	2209      	movs	r2, #9
 80081cc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80081ce:	88fb      	ldrh	r3, [r7, #6]
 80081d0:	2b09      	cmp	r3, #9
 80081d2:	f240 809d 	bls.w	8008310 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80081d6:	2309      	movs	r3, #9
 80081d8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80081de:	e081      	b.n	80082e4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80081e0:	f107 0316 	add.w	r3, r7, #22
 80081e4:	4619      	mov	r1, r3
 80081e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081e8:	f000 f99f 	bl	800852a <USBH_GetNextDesc>
 80081ec:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80081ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f0:	785b      	ldrb	r3, [r3, #1]
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d176      	bne.n	80082e4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b09      	cmp	r3, #9
 80081fc:	d002      	beq.n	8008204 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80081fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008200:	2209      	movs	r2, #9
 8008202:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008208:	221a      	movs	r2, #26
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	3308      	adds	r3, #8
 8008210:	6a3a      	ldr	r2, [r7, #32]
 8008212:	4413      	add	r3, r2
 8008214:	3302      	adds	r3, #2
 8008216:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800821a:	69f8      	ldr	r0, [r7, #28]
 800821c:	f000 f87e 	bl	800831c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800822a:	e043      	b.n	80082b4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800822c:	f107 0316 	add.w	r3, r7, #22
 8008230:	4619      	mov	r1, r3
 8008232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008234:	f000 f979 	bl	800852a <USBH_GetNextDesc>
 8008238:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823c:	785b      	ldrb	r3, [r3, #1]
 800823e:	2b05      	cmp	r3, #5
 8008240:	d138      	bne.n	80082b4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d10f      	bne.n	800826a <USBH_ParseCfgDesc+0x13a>
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	799b      	ldrb	r3, [r3, #6]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d10b      	bne.n	800826a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	79db      	ldrb	r3, [r3, #7]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10f      	bne.n	800827a <USBH_ParseCfgDesc+0x14a>
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b09      	cmp	r3, #9
 8008260:	d00b      	beq.n	800827a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	2209      	movs	r2, #9
 8008266:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008268:	e007      	b.n	800827a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b07      	cmp	r3, #7
 8008270:	d004      	beq.n	800827c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	2207      	movs	r2, #7
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e000      	b.n	800827c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800827a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800827c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008280:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008284:	3201      	adds	r2, #1
 8008286:	00d2      	lsls	r2, r2, #3
 8008288:	211a      	movs	r1, #26
 800828a:	fb01 f303 	mul.w	r3, r1, r3
 800828e:	4413      	add	r3, r2
 8008290:	3308      	adds	r3, #8
 8008292:	6a3a      	ldr	r2, [r7, #32]
 8008294:	4413      	add	r3, r2
 8008296:	3304      	adds	r3, #4
 8008298:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800829a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800829c:	69b9      	ldr	r1, [r7, #24]
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 f86b 	bl	800837a <USBH_ParseEPDesc>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80082aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80082ae:	3301      	adds	r3, #1
 80082b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	791b      	ldrb	r3, [r3, #4]
 80082b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082bc:	429a      	cmp	r2, r3
 80082be:	d204      	bcs.n	80082ca <USBH_ParseCfgDesc+0x19a>
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	885a      	ldrh	r2, [r3, #2]
 80082c4:	8afb      	ldrh	r3, [r7, #22]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d8b0      	bhi.n	800822c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	791b      	ldrb	r3, [r3, #4]
 80082ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d201      	bcs.n	80082da <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e01c      	b.n	8008314 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80082da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082de:	3301      	adds	r3, #1
 80082e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d805      	bhi.n	80082f8 <USBH_ParseCfgDesc+0x1c8>
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	885a      	ldrh	r2, [r3, #2]
 80082f0:	8afb      	ldrh	r3, [r7, #22]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	f63f af74 	bhi.w	80081e0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80082f8:	6a3b      	ldr	r3, [r7, #32]
 80082fa:	791b      	ldrb	r3, [r3, #4]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	bf28      	it	cs
 8008300:	2302      	movcs	r3, #2
 8008302:	b2db      	uxtb	r3, r3
 8008304:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008308:	429a      	cmp	r2, r3
 800830a:	d201      	bcs.n	8008310 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800830c:	2303      	movs	r3, #3
 800830e:	e001      	b.n	8008314 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008314:	4618      	mov	r0, r3
 8008316:	3730      	adds	r7, #48	; 0x30
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781a      	ldrb	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	785a      	ldrb	r2, [r3, #1]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	789a      	ldrb	r2, [r3, #2]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	78da      	ldrb	r2, [r3, #3]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	791a      	ldrb	r2, [r3, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	795a      	ldrb	r2, [r3, #5]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	799a      	ldrb	r2, [r3, #6]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	79da      	ldrb	r2, [r3, #7]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	7a1a      	ldrb	r2, [r3, #8]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	721a      	strb	r2, [r3, #8]
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800837a:	b480      	push	{r7}
 800837c:	b087      	sub	sp, #28
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	60b9      	str	r1, [r7, #8]
 8008384:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	781a      	ldrb	r2, [r3, #0]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	785a      	ldrb	r2, [r3, #1]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	789a      	ldrb	r2, [r3, #2]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	78da      	ldrb	r2, [r3, #3]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	3304      	adds	r3, #4
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	3305      	adds	r3, #5
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	021b      	lsls	r3, r3, #8
 80083bc:	b29b      	uxth	r3, r3
 80083be:	4313      	orrs	r3, r2
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	799a      	ldrb	r2, [r3, #6]
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	889b      	ldrh	r3, [r3, #4]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d102      	bne.n	80083dc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80083d6:	2303      	movs	r3, #3
 80083d8:	75fb      	strb	r3, [r7, #23]
 80083da:	e033      	b.n	8008444 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	889b      	ldrh	r3, [r3, #4]
 80083e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80083e4:	f023 0307 	bic.w	r3, r3, #7
 80083e8:	b29a      	uxth	r2, r3
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	889b      	ldrh	r3, [r3, #4]
 80083f2:	b21a      	sxth	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3304      	adds	r3, #4
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	b299      	uxth	r1, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3305      	adds	r3, #5
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	b29b      	uxth	r3, r3
 8008408:	430b      	orrs	r3, r1
 800840a:	b29b      	uxth	r3, r3
 800840c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008410:	2b00      	cmp	r3, #0
 8008412:	d110      	bne.n	8008436 <USBH_ParseEPDesc+0xbc>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b299      	uxth	r1, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3305      	adds	r3, #5
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	b29b      	uxth	r3, r3
 8008428:	430b      	orrs	r3, r1
 800842a:	b29b      	uxth	r3, r3
 800842c:	b21b      	sxth	r3, r3
 800842e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008432:	b21b      	sxth	r3, r3
 8008434:	e001      	b.n	800843a <USBH_ParseEPDesc+0xc0>
 8008436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800843a:	4313      	orrs	r3, r2
 800843c:	b21b      	sxth	r3, r3
 800843e:	b29a      	uxth	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800844a:	2b00      	cmp	r3, #0
 800844c:	d116      	bne.n	800847c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	78db      	ldrb	r3, [r3, #3]
 8008452:	f003 0303 	and.w	r3, r3, #3
 8008456:	2b01      	cmp	r3, #1
 8008458:	d005      	beq.n	8008466 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	78db      	ldrb	r3, [r3, #3]
 800845e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008462:	2b03      	cmp	r3, #3
 8008464:	d127      	bne.n	80084b6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	799b      	ldrb	r3, [r3, #6]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <USBH_ParseEPDesc+0xfc>
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	799b      	ldrb	r3, [r3, #6]
 8008472:	2b10      	cmp	r3, #16
 8008474:	d91f      	bls.n	80084b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008476:	2303      	movs	r3, #3
 8008478:	75fb      	strb	r3, [r7, #23]
 800847a:	e01c      	b.n	80084b6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	78db      	ldrb	r3, [r3, #3]
 8008480:	f003 0303 	and.w	r3, r3, #3
 8008484:	2b01      	cmp	r3, #1
 8008486:	d10a      	bne.n	800849e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	799b      	ldrb	r3, [r3, #6]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <USBH_ParseEPDesc+0x11e>
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	799b      	ldrb	r3, [r3, #6]
 8008494:	2b10      	cmp	r3, #16
 8008496:	d90e      	bls.n	80084b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008498:	2303      	movs	r3, #3
 800849a:	75fb      	strb	r3, [r7, #23]
 800849c:	e00b      	b.n	80084b6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	78db      	ldrb	r3, [r3, #3]
 80084a2:	f003 0303 	and.w	r3, r3, #3
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d105      	bne.n	80084b6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	799b      	ldrb	r3, [r3, #6]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d101      	bne.n	80084b6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80084b2:	2303      	movs	r3, #3
 80084b4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	371c      	adds	r7, #28
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3301      	adds	r3, #1
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d120      	bne.n	800851e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	1e9a      	subs	r2, r3, #2
 80084e2:	88fb      	ldrh	r3, [r7, #6]
 80084e4:	4293      	cmp	r3, r2
 80084e6:	bf28      	it	cs
 80084e8:	4613      	movcs	r3, r2
 80084ea:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	3302      	adds	r3, #2
 80084f0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80084f2:	2300      	movs	r3, #0
 80084f4:	82fb      	strh	r3, [r7, #22]
 80084f6:	e00b      	b.n	8008510 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80084f8:	8afb      	ldrh	r3, [r7, #22]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4413      	add	r3, r2
 80084fe:	781a      	ldrb	r2, [r3, #0]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3301      	adds	r3, #1
 8008508:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800850a:	8afb      	ldrh	r3, [r7, #22]
 800850c:	3302      	adds	r3, #2
 800850e:	82fb      	strh	r3, [r7, #22]
 8008510:	8afa      	ldrh	r2, [r7, #22]
 8008512:	8abb      	ldrh	r3, [r7, #20]
 8008514:	429a      	cmp	r2, r3
 8008516:	d3ef      	bcc.n	80084f8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2200      	movs	r2, #0
 800851c:	701a      	strb	r2, [r3, #0]
  }
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800852a:	b480      	push	{r7}
 800852c:	b085      	sub	sp, #20
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	881a      	ldrh	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	b29b      	uxth	r3, r3
 800853e:	4413      	add	r3, r2
 8008540:	b29a      	uxth	r2, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4413      	add	r3, r2
 8008550:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008552:	68fb      	ldr	r3, [r7, #12]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	4613      	mov	r3, r2
 800856c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800856e:	2301      	movs	r3, #1
 8008570:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	789b      	ldrb	r3, [r3, #2]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d002      	beq.n	8008580 <USBH_CtlReq+0x20>
 800857a:	2b02      	cmp	r3, #2
 800857c:	d00f      	beq.n	800859e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800857e:	e027      	b.n	80085d0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	88fa      	ldrh	r2, [r7, #6]
 800858a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2201      	movs	r2, #1
 8008590:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2202      	movs	r2, #2
 8008596:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008598:	2301      	movs	r3, #1
 800859a:	75fb      	strb	r3, [r7, #23]
      break;
 800859c:	e018      	b.n	80085d0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f81c 	bl	80085dc <USBH_HandleControl>
 80085a4:	4603      	mov	r3, r0
 80085a6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <USBH_CtlReq+0x54>
 80085ae:	7dfb      	ldrb	r3, [r7, #23]
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d106      	bne.n	80085c2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2201      	movs	r2, #1
 80085b8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	761a      	strb	r2, [r3, #24]
      break;
 80085c0:	e005      	b.n	80085ce <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80085c2:	7dfb      	ldrb	r3, [r7, #23]
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d102      	bne.n	80085ce <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	2201      	movs	r2, #1
 80085cc:	709a      	strb	r2, [r3, #2]
      break;
 80085ce:	bf00      	nop
  }
  return status;
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80085e4:	2301      	movs	r3, #1
 80085e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	7e1b      	ldrb	r3, [r3, #24]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	2b0a      	cmp	r3, #10
 80085f4:	f200 8156 	bhi.w	80088a4 <USBH_HandleControl+0x2c8>
 80085f8:	a201      	add	r2, pc, #4	; (adr r2, 8008600 <USBH_HandleControl+0x24>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	0800862d 	.word	0x0800862d
 8008604:	08008647 	.word	0x08008647
 8008608:	080086b1 	.word	0x080086b1
 800860c:	080086d7 	.word	0x080086d7
 8008610:	0800870f 	.word	0x0800870f
 8008614:	08008739 	.word	0x08008739
 8008618:	0800878b 	.word	0x0800878b
 800861c:	080087ad 	.word	0x080087ad
 8008620:	080087e9 	.word	0x080087e9
 8008624:	0800880f 	.word	0x0800880f
 8008628:	0800884d 	.word	0x0800884d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f103 0110 	add.w	r1, r3, #16
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	795b      	ldrb	r3, [r3, #5]
 8008636:	461a      	mov	r2, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f943 	bl	80088c4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2202      	movs	r2, #2
 8008642:	761a      	strb	r2, [r3, #24]
      break;
 8008644:	e139      	b.n	80088ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	795b      	ldrb	r3, [r3, #5]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fcc5 	bl	8008fdc <USBH_LL_GetURBState>
 8008652:	4603      	mov	r3, r0
 8008654:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d11e      	bne.n	800869a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	7c1b      	ldrb	r3, [r3, #16]
 8008660:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008664:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	8adb      	ldrh	r3, [r3, #22]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800866e:	7b7b      	ldrb	r3, [r7, #13]
 8008670:	2b80      	cmp	r3, #128	; 0x80
 8008672:	d103      	bne.n	800867c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2203      	movs	r2, #3
 8008678:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800867a:	e115      	b.n	80088a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2205      	movs	r2, #5
 8008680:	761a      	strb	r2, [r3, #24]
      break;
 8008682:	e111      	b.n	80088a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008684:	7b7b      	ldrb	r3, [r7, #13]
 8008686:	2b80      	cmp	r3, #128	; 0x80
 8008688:	d103      	bne.n	8008692 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2209      	movs	r2, #9
 800868e:	761a      	strb	r2, [r3, #24]
      break;
 8008690:	e10a      	b.n	80088a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2207      	movs	r2, #7
 8008696:	761a      	strb	r2, [r3, #24]
      break;
 8008698:	e106      	b.n	80088a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b04      	cmp	r3, #4
 800869e:	d003      	beq.n	80086a8 <USBH_HandleControl+0xcc>
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	f040 8100 	bne.w	80088a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	220b      	movs	r2, #11
 80086ac:	761a      	strb	r2, [r3, #24]
      break;
 80086ae:	e0fb      	b.n	80088a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6899      	ldr	r1, [r3, #8]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	899a      	ldrh	r2, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	791b      	ldrb	r3, [r3, #4]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f93a 	bl	8008942 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2204      	movs	r2, #4
 80086d2:	761a      	strb	r2, [r3, #24]
      break;
 80086d4:	e0f1      	b.n	80088ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	791b      	ldrb	r3, [r3, #4]
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fc7d 	bl	8008fdc <USBH_LL_GetURBState>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d102      	bne.n	80086f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2209      	movs	r2, #9
 80086f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b05      	cmp	r3, #5
 80086f6:	d102      	bne.n	80086fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80086f8:	2303      	movs	r3, #3
 80086fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086fc:	e0d6      	b.n	80088ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80086fe:	7bbb      	ldrb	r3, [r7, #14]
 8008700:	2b04      	cmp	r3, #4
 8008702:	f040 80d3 	bne.w	80088ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	220b      	movs	r2, #11
 800870a:	761a      	strb	r2, [r3, #24]
      break;
 800870c:	e0ce      	b.n	80088ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6899      	ldr	r1, [r3, #8]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	899a      	ldrh	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	795b      	ldrb	r3, [r3, #5]
 800871a:	2001      	movs	r0, #1
 800871c:	9000      	str	r0, [sp, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f8ea 	bl	80088f8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800872a:	b29a      	uxth	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2206      	movs	r2, #6
 8008734:	761a      	strb	r2, [r3, #24]
      break;
 8008736:	e0c0      	b.n	80088ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	795b      	ldrb	r3, [r3, #5]
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fc4c 	bl	8008fdc <USBH_LL_GetURBState>
 8008744:	4603      	mov	r3, r0
 8008746:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008748:	7bbb      	ldrb	r3, [r7, #14]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d103      	bne.n	8008756 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2207      	movs	r2, #7
 8008752:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008754:	e0ac      	b.n	80088b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	2b05      	cmp	r3, #5
 800875a:	d105      	bne.n	8008768 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	220c      	movs	r2, #12
 8008760:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008762:	2303      	movs	r3, #3
 8008764:	73fb      	strb	r3, [r7, #15]
      break;
 8008766:	e0a3      	b.n	80088b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d103      	bne.n	8008776 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2205      	movs	r2, #5
 8008772:	761a      	strb	r2, [r3, #24]
      break;
 8008774:	e09c      	b.n	80088b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b04      	cmp	r3, #4
 800877a:	f040 8099 	bne.w	80088b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	220b      	movs	r2, #11
 8008782:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008784:	2302      	movs	r3, #2
 8008786:	73fb      	strb	r3, [r7, #15]
      break;
 8008788:	e092      	b.n	80088b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	791b      	ldrb	r3, [r3, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f8d5 	bl	8008942 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800879e:	b29a      	uxth	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2208      	movs	r2, #8
 80087a8:	761a      	strb	r2, [r3, #24]

      break;
 80087aa:	e086      	b.n	80088ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	791b      	ldrb	r3, [r3, #4]
 80087b0:	4619      	mov	r1, r3
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fc12 	bl	8008fdc <USBH_LL_GetURBState>
 80087b8:	4603      	mov	r3, r0
 80087ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d105      	bne.n	80087ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	220d      	movs	r2, #13
 80087c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80087c8:	2300      	movs	r3, #0
 80087ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087cc:	e072      	b.n	80088b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b04      	cmp	r3, #4
 80087d2:	d103      	bne.n	80087dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	220b      	movs	r2, #11
 80087d8:	761a      	strb	r2, [r3, #24]
      break;
 80087da:	e06b      	b.n	80088b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80087dc:	7bbb      	ldrb	r3, [r7, #14]
 80087de:	2b05      	cmp	r3, #5
 80087e0:	d168      	bne.n	80088b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80087e2:	2303      	movs	r3, #3
 80087e4:	73fb      	strb	r3, [r7, #15]
      break;
 80087e6:	e065      	b.n	80088b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	795b      	ldrb	r3, [r3, #5]
 80087ec:	2201      	movs	r2, #1
 80087ee:	9200      	str	r2, [sp, #0]
 80087f0:	2200      	movs	r2, #0
 80087f2:	2100      	movs	r1, #0
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f87f 	bl	80088f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008800:	b29a      	uxth	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	220a      	movs	r2, #10
 800880a:	761a      	strb	r2, [r3, #24]
      break;
 800880c:	e055      	b.n	80088ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	795b      	ldrb	r3, [r3, #5]
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fbe1 	bl	8008fdc <USBH_LL_GetURBState>
 800881a:	4603      	mov	r3, r0
 800881c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d105      	bne.n	8008830 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	220d      	movs	r2, #13
 800882c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800882e:	e043      	b.n	80088b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	2b02      	cmp	r3, #2
 8008834:	d103      	bne.n	800883e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2209      	movs	r2, #9
 800883a:	761a      	strb	r2, [r3, #24]
      break;
 800883c:	e03c      	b.n	80088b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b04      	cmp	r3, #4
 8008842:	d139      	bne.n	80088b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	220b      	movs	r2, #11
 8008848:	761a      	strb	r2, [r3, #24]
      break;
 800884a:	e035      	b.n	80088b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	7e5b      	ldrb	r3, [r3, #25]
 8008850:	3301      	adds	r3, #1
 8008852:	b2da      	uxtb	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	765a      	strb	r2, [r3, #25]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7e5b      	ldrb	r3, [r3, #25]
 800885c:	2b02      	cmp	r3, #2
 800885e:	d806      	bhi.n	800886e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2201      	movs	r2, #1
 800886a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800886c:	e025      	b.n	80088ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008874:	2106      	movs	r1, #6
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	795b      	ldrb	r3, [r3, #5]
 8008884:	4619      	mov	r1, r3
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f90c 	bl	8008aa4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	791b      	ldrb	r3, [r3, #4]
 8008890:	4619      	mov	r1, r3
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f906 	bl	8008aa4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800889e:	2302      	movs	r3, #2
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	e00a      	b.n	80088ba <USBH_HandleControl+0x2de>

    default:
      break;
 80088a4:	bf00      	nop
 80088a6:	e008      	b.n	80088ba <USBH_HandleControl+0x2de>
      break;
 80088a8:	bf00      	nop
 80088aa:	e006      	b.n	80088ba <USBH_HandleControl+0x2de>
      break;
 80088ac:	bf00      	nop
 80088ae:	e004      	b.n	80088ba <USBH_HandleControl+0x2de>
      break;
 80088b0:	bf00      	nop
 80088b2:	e002      	b.n	80088ba <USBH_HandleControl+0x2de>
      break;
 80088b4:	bf00      	nop
 80088b6:	e000      	b.n	80088ba <USBH_HandleControl+0x2de>
      break;
 80088b8:	bf00      	nop
  }

  return status;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3710      	adds	r7, #16
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af04      	add	r7, sp, #16
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088d2:	79f9      	ldrb	r1, [r7, #7]
 80088d4:	2300      	movs	r3, #0
 80088d6:	9303      	str	r3, [sp, #12]
 80088d8:	2308      	movs	r3, #8
 80088da:	9302      	str	r3, [sp, #8]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	9301      	str	r3, [sp, #4]
 80088e0:	2300      	movs	r3, #0
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	2300      	movs	r3, #0
 80088e6:	2200      	movs	r2, #0
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 fb46 	bl	8008f7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af04      	add	r7, sp, #16
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4611      	mov	r1, r2
 8008904:	461a      	mov	r2, r3
 8008906:	460b      	mov	r3, r1
 8008908:	80fb      	strh	r3, [r7, #6]
 800890a:	4613      	mov	r3, r2
 800890c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008914:	2b00      	cmp	r3, #0
 8008916:	d001      	beq.n	800891c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800891c:	7979      	ldrb	r1, [r7, #5]
 800891e:	7e3b      	ldrb	r3, [r7, #24]
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	88fb      	ldrh	r3, [r7, #6]
 8008924:	9302      	str	r3, [sp, #8]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	9301      	str	r3, [sp, #4]
 800892a:	2301      	movs	r3, #1
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	2300      	movs	r3, #0
 8008930:	2200      	movs	r2, #0
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 fb21 	bl	8008f7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b088      	sub	sp, #32
 8008946:	af04      	add	r7, sp, #16
 8008948:	60f8      	str	r0, [r7, #12]
 800894a:	60b9      	str	r1, [r7, #8]
 800894c:	4611      	mov	r1, r2
 800894e:	461a      	mov	r2, r3
 8008950:	460b      	mov	r3, r1
 8008952:	80fb      	strh	r3, [r7, #6]
 8008954:	4613      	mov	r3, r2
 8008956:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008958:	7979      	ldrb	r1, [r7, #5]
 800895a:	2300      	movs	r3, #0
 800895c:	9303      	str	r3, [sp, #12]
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	9302      	str	r3, [sp, #8]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	9301      	str	r3, [sp, #4]
 8008966:	2301      	movs	r3, #1
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	2300      	movs	r3, #0
 800896c:	2201      	movs	r2, #1
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 fb03 	bl	8008f7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008974:	2300      	movs	r3, #0

}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b088      	sub	sp, #32
 8008982:	af04      	add	r7, sp, #16
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	4611      	mov	r1, r2
 800898a:	461a      	mov	r2, r3
 800898c:	460b      	mov	r3, r1
 800898e:	80fb      	strh	r3, [r7, #6]
 8008990:	4613      	mov	r3, r2
 8008992:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800899e:	2300      	movs	r3, #0
 80089a0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089a2:	7979      	ldrb	r1, [r7, #5]
 80089a4:	7e3b      	ldrb	r3, [r7, #24]
 80089a6:	9303      	str	r3, [sp, #12]
 80089a8:	88fb      	ldrh	r3, [r7, #6]
 80089aa:	9302      	str	r3, [sp, #8]
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	9301      	str	r3, [sp, #4]
 80089b0:	2301      	movs	r3, #1
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	2302      	movs	r3, #2
 80089b6:	2200      	movs	r2, #0
 80089b8:	68f8      	ldr	r0, [r7, #12]
 80089ba:	f000 fade 	bl	8008f7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af04      	add	r7, sp, #16
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	4611      	mov	r1, r2
 80089d4:	461a      	mov	r2, r3
 80089d6:	460b      	mov	r3, r1
 80089d8:	80fb      	strh	r3, [r7, #6]
 80089da:	4613      	mov	r3, r2
 80089dc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089de:	7979      	ldrb	r1, [r7, #5]
 80089e0:	2300      	movs	r3, #0
 80089e2:	9303      	str	r3, [sp, #12]
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	9302      	str	r3, [sp, #8]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	9301      	str	r3, [sp, #4]
 80089ec:	2301      	movs	r3, #1
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	2302      	movs	r3, #2
 80089f2:	2201      	movs	r2, #1
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 fac0 	bl	8008f7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3710      	adds	r7, #16
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af04      	add	r7, sp, #16
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	4611      	mov	r1, r2
 8008a10:	461a      	mov	r2, r3
 8008a12:	4603      	mov	r3, r0
 8008a14:	70fb      	strb	r3, [r7, #3]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70bb      	strb	r3, [r7, #2]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a1e:	7878      	ldrb	r0, [r7, #1]
 8008a20:	78ba      	ldrb	r2, [r7, #2]
 8008a22:	78f9      	ldrb	r1, [r7, #3]
 8008a24:	8b3b      	ldrh	r3, [r7, #24]
 8008a26:	9302      	str	r3, [sp, #8]
 8008a28:	7d3b      	ldrb	r3, [r7, #20]
 8008a2a:	9301      	str	r3, [sp, #4]
 8008a2c:	7c3b      	ldrb	r3, [r7, #16]
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	4603      	mov	r3, r0
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa53 	bl	8008ede <USBH_LL_OpenPipe>

  return USBH_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a4e:	78fb      	ldrb	r3, [r7, #3]
 8008a50:	4619      	mov	r1, r3
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa72 	bl	8008f3c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b084      	sub	sp, #16
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f836 	bl	8008ae0 <USBH_GetFreePipe>
 8008a74:	4603      	mov	r3, r0
 8008a76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a78:	89fb      	ldrh	r3, [r7, #14]
 8008a7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d00a      	beq.n	8008a98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	89fb      	ldrh	r3, [r7, #14]
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a8e:	6879      	ldr	r1, [r7, #4]
 8008a90:	33e0      	adds	r3, #224	; 0xe0
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	440b      	add	r3, r1
 8008a96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a98:	89fb      	ldrh	r3, [r7, #14]
 8008a9a:	b2db      	uxtb	r3, r3
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3710      	adds	r7, #16
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008ab0:	78fb      	ldrb	r3, [r7, #3]
 8008ab2:	2b0f      	cmp	r3, #15
 8008ab4:	d80d      	bhi.n	8008ad2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	33e0      	adds	r3, #224	; 0xe0
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	685a      	ldr	r2, [r3, #4]
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008ac8:	6879      	ldr	r1, [r7, #4]
 8008aca:	33e0      	adds	r3, #224	; 0xe0
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
 8008af0:	e00f      	b.n	8008b12 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	33e0      	adds	r3, #224	; 0xe0
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	e007      	b.n	8008b1c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	73fb      	strb	r3, [r7, #15]
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	2b0f      	cmp	r3, #15
 8008b16:	d9ec      	bls.n	8008af2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008b18:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	490e      	ldr	r1, [pc, #56]	; (8008b68 <MX_USB_HOST_Init+0x40>)
 8008b30:	480e      	ldr	r0, [pc, #56]	; (8008b6c <MX_USB_HOST_Init+0x44>)
 8008b32:	f7fe fba7 	bl	8007284 <USBH_Init>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008b3c:	f7f8 f8fe 	bl	8000d3c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008b40:	490b      	ldr	r1, [pc, #44]	; (8008b70 <MX_USB_HOST_Init+0x48>)
 8008b42:	480a      	ldr	r0, [pc, #40]	; (8008b6c <MX_USB_HOST_Init+0x44>)
 8008b44:	f7fe fc2c 	bl	80073a0 <USBH_RegisterClass>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008b4e:	f7f8 f8f5 	bl	8000d3c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008b52:	4806      	ldr	r0, [pc, #24]	; (8008b6c <MX_USB_HOST_Init+0x44>)
 8008b54:	f7fe fcb0 	bl	80074b8 <USBH_Start>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008b5e:	f7f8 f8ed 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008b62:	bf00      	nop
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	08008b89 	.word	0x08008b89
 8008b6c:	20000280 	.word	0x20000280
 8008b70:	2000000c 	.word	0x2000000c

08008b74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008b78:	4802      	ldr	r0, [pc, #8]	; (8008b84 <MX_USB_HOST_Process+0x10>)
 8008b7a:	f7fe fcad 	bl	80074d8 <USBH_Process>
}
 8008b7e:	bf00      	nop
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	20000280 	.word	0x20000280

08008b88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008b94:	78fb      	ldrb	r3, [r7, #3]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b04      	cmp	r3, #4
 8008b9a:	d819      	bhi.n	8008bd0 <USBH_UserProcess+0x48>
 8008b9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ba4 <USBH_UserProcess+0x1c>)
 8008b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba2:	bf00      	nop
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	08008bc1 	.word	0x08008bc1
 8008bac:	08008bd1 	.word	0x08008bd1
 8008bb0:	08008bc9 	.word	0x08008bc9
 8008bb4:	08008bb9 	.word	0x08008bb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008bb8:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <USBH_UserProcess+0x58>)
 8008bba:	2203      	movs	r2, #3
 8008bbc:	701a      	strb	r2, [r3, #0]
  break;
 8008bbe:	e008      	b.n	8008bd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <USBH_UserProcess+0x58>)
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	701a      	strb	r2, [r3, #0]
  break;
 8008bc6:	e004      	b.n	8008bd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008bc8:	4b05      	ldr	r3, [pc, #20]	; (8008be0 <USBH_UserProcess+0x58>)
 8008bca:	2201      	movs	r2, #1
 8008bcc:	701a      	strb	r2, [r3, #0]
  break;
 8008bce:	e000      	b.n	8008bd2 <USBH_UserProcess+0x4a>

  default:
  break;
 8008bd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20000658 	.word	0x20000658

08008be4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08a      	sub	sp, #40	; 0x28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bec:	f107 0314 	add.w	r3, r7, #20
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	601a      	str	r2, [r3, #0]
 8008bf4:	605a      	str	r2, [r3, #4]
 8008bf6:	609a      	str	r2, [r3, #8]
 8008bf8:	60da      	str	r2, [r3, #12]
 8008bfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c04:	d147      	bne.n	8008c96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c06:	2300      	movs	r3, #0
 8008c08:	613b      	str	r3, [r7, #16]
 8008c0a:	4b25      	ldr	r3, [pc, #148]	; (8008ca0 <HAL_HCD_MspInit+0xbc>)
 8008c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0e:	4a24      	ldr	r2, [pc, #144]	; (8008ca0 <HAL_HCD_MspInit+0xbc>)
 8008c10:	f043 0301 	orr.w	r3, r3, #1
 8008c14:	6313      	str	r3, [r2, #48]	; 0x30
 8008c16:	4b22      	ldr	r3, [pc, #136]	; (8008ca0 <HAL_HCD_MspInit+0xbc>)
 8008c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	613b      	str	r3, [r7, #16]
 8008c20:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008c30:	f107 0314 	add.w	r3, r7, #20
 8008c34:	4619      	mov	r1, r3
 8008c36:	481b      	ldr	r0, [pc, #108]	; (8008ca4 <HAL_HCD_MspInit+0xc0>)
 8008c38:	f7f8 fce2 	bl	8001600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008c3c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c42:	2302      	movs	r3, #2
 8008c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008c4e:	230a      	movs	r3, #10
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c52:	f107 0314 	add.w	r3, r7, #20
 8008c56:	4619      	mov	r1, r3
 8008c58:	4812      	ldr	r0, [pc, #72]	; (8008ca4 <HAL_HCD_MspInit+0xc0>)
 8008c5a:	f7f8 fcd1 	bl	8001600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008c5e:	4b10      	ldr	r3, [pc, #64]	; (8008ca0 <HAL_HCD_MspInit+0xbc>)
 8008c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c62:	4a0f      	ldr	r2, [pc, #60]	; (8008ca0 <HAL_HCD_MspInit+0xbc>)
 8008c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c68:	6353      	str	r3, [r2, #52]	; 0x34
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <HAL_HCD_MspInit+0xbc>)
 8008c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c72:	4a0b      	ldr	r2, [pc, #44]	; (8008ca0 <HAL_HCD_MspInit+0xbc>)
 8008c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c78:	6453      	str	r3, [r2, #68]	; 0x44
 8008c7a:	4b09      	ldr	r3, [pc, #36]	; (8008ca0 <HAL_HCD_MspInit+0xbc>)
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c86:	2200      	movs	r2, #0
 8008c88:	2100      	movs	r1, #0
 8008c8a:	2043      	movs	r0, #67	; 0x43
 8008c8c:	f7f8 fc81 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c90:	2043      	movs	r0, #67	; 0x43
 8008c92:	f7f8 fc9a 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c96:	bf00      	nop
 8008c98:	3728      	adds	r7, #40	; 0x28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	40023800 	.word	0x40023800
 8008ca4:	40020000 	.word	0x40020000

08008ca8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe ffed 	bl	8007c96 <USBH_LL_IncTimer>
}
 8008cbc:	bf00      	nop
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff f825 	bl	8007d22 <USBH_LL_Connect>
}
 8008cd8:	bf00      	nop
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff f82e 	bl	8007d50 <USBH_LL_Disconnect>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70fb      	strb	r3, [r7, #3]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe ffdf 	bl	8007cea <USBH_LL_PortEnabled>
}
 8008d2c:	bf00      	nop
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fe ffdf 	bl	8007d06 <USBH_LL_PortDisabled>
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d12a      	bne.n	8008db8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d62:	4a18      	ldr	r2, [pc, #96]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a15      	ldr	r2, [pc, #84]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d6e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d72:	4b14      	ldr	r3, [pc, #80]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008d7a:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d7c:	2208      	movs	r2, #8
 8008d7e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d80:	4b10      	ldr	r3, [pc, #64]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d82:	2201      	movs	r2, #1
 8008d84:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d86:	4b0f      	ldr	r3, [pc, #60]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d8c:	4b0d      	ldr	r3, [pc, #52]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d8e:	2202      	movs	r2, #2
 8008d90:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d92:	4b0c      	ldr	r3, [pc, #48]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d98:	480a      	ldr	r0, [pc, #40]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008d9a:	f7f8 fde6 	bl	800196a <HAL_HCD_Init>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008da4:	f7f7 ffca 	bl	8000d3c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008da8:	4806      	ldr	r0, [pc, #24]	; (8008dc4 <USBH_LL_Init+0x74>)
 8008daa:	f7f9 f9ca 	bl	8002142 <HAL_HCD_GetCurrentFrame>
 8008dae:	4603      	mov	r3, r0
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7fe ff60 	bl	8007c78 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	2000065c 	.word	0x2000065c

08008dc8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7f9 f939 	bl	8002056 <HAL_HCD_Start>
 8008de4:	4603      	mov	r3, r0
 8008de6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 f95c 	bl	80090a8 <USBH_Get_USB_Status>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e14:	4618      	mov	r0, r3
 8008e16:	f7f9 f941 	bl	800209c <HAL_HCD_Stop>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 f941 	bl	80090a8 <USBH_Get_USB_Status>
 8008e26:	4603      	mov	r3, r0
 8008e28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f9 f989 	bl	800215e <HAL_HCD_GetCurrentSpeed>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d00c      	beq.n	8008e6c <USBH_LL_GetSpeed+0x38>
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d80d      	bhi.n	8008e72 <USBH_LL_GetSpeed+0x3e>
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d002      	beq.n	8008e60 <USBH_LL_GetSpeed+0x2c>
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d003      	beq.n	8008e66 <USBH_LL_GetSpeed+0x32>
 8008e5e:	e008      	b.n	8008e72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
    break;
 8008e64:	e008      	b.n	8008e78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e66:	2301      	movs	r3, #1
 8008e68:	73fb      	strb	r3, [r7, #15]
    break;
 8008e6a:	e005      	b.n	8008e78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e70:	e002      	b.n	8008e78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e72:	2301      	movs	r3, #1
 8008e74:	73fb      	strb	r3, [r7, #15]
    break;
 8008e76:	bf00      	nop
  }
  return  speed;
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3710      	adds	r7, #16
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}

08008e82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e82:	b580      	push	{r7, lr}
 8008e84:	b084      	sub	sp, #16
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7f9 f91c 	bl	80020d6 <HAL_HCD_ResetPort>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f000 f8ff 	bl	80090a8 <USBH_Get_USB_Status>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7f9 f923 	bl	800211a <HAL_HCD_HC_GetXferCount>
 8008ed4:	4603      	mov	r3, r0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ede:	b590      	push	{r4, r7, lr}
 8008ee0:	b089      	sub	sp, #36	; 0x24
 8008ee2:	af04      	add	r7, sp, #16
 8008ee4:	6078      	str	r0, [r7, #4]
 8008ee6:	4608      	mov	r0, r1
 8008ee8:	4611      	mov	r1, r2
 8008eea:	461a      	mov	r2, r3
 8008eec:	4603      	mov	r3, r0
 8008eee:	70fb      	strb	r3, [r7, #3]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70bb      	strb	r3, [r7, #2]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008f06:	787c      	ldrb	r4, [r7, #1]
 8008f08:	78ba      	ldrb	r2, [r7, #2]
 8008f0a:	78f9      	ldrb	r1, [r7, #3]
 8008f0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f0e:	9302      	str	r3, [sp, #8]
 8008f10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f14:	9301      	str	r3, [sp, #4]
 8008f16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	f7f8 fd86 	bl	8001a2e <HAL_HCD_HC_Init>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 f8bd 	bl	80090a8 <USBH_Get_USB_Status>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd90      	pop	{r4, r7, pc}

08008f3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	4611      	mov	r1, r2
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7f8 fdf6 	bl	8001b4c <HAL_HCD_HC_Halt>
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f89e 	bl	80090a8 <USBH_Get_USB_Status>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f7a:	b590      	push	{r4, r7, lr}
 8008f7c:	b089      	sub	sp, #36	; 0x24
 8008f7e:	af04      	add	r7, sp, #16
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	4608      	mov	r0, r1
 8008f84:	4611      	mov	r1, r2
 8008f86:	461a      	mov	r2, r3
 8008f88:	4603      	mov	r3, r0
 8008f8a:	70fb      	strb	r3, [r7, #3]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70bb      	strb	r3, [r7, #2]
 8008f90:	4613      	mov	r3, r2
 8008f92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008fa2:	787c      	ldrb	r4, [r7, #1]
 8008fa4:	78ba      	ldrb	r2, [r7, #2]
 8008fa6:	78f9      	ldrb	r1, [r7, #3]
 8008fa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008fac:	9303      	str	r3, [sp, #12]
 8008fae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008fb0:	9302      	str	r3, [sp, #8]
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	4623      	mov	r3, r4
 8008fbe:	f7f8 fde9 	bl	8001b94 <HAL_HCD_HC_SubmitRequest>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 f86d 	bl	80090a8 <USBH_Get_USB_Status>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd90      	pop	{r4, r7, pc}

08008fdc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7f9 f87d 	bl	80020f2 <HAL_HCD_HC_GetURBState>
 8008ff8:	4603      	mov	r3, r0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	460b      	mov	r3, r1
 800900c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009014:	2b01      	cmp	r3, #1
 8009016:	d103      	bne.n	8009020 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f870 	bl	8009100 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009020:	20c8      	movs	r0, #200	; 0xc8
 8009022:	f7f8 f9b7 	bl	8001394 <HAL_Delay>
  return USBH_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
 800903c:	4613      	mov	r3, r2
 800903e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009046:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009048:	78fb      	ldrb	r3, [r7, #3]
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	212c      	movs	r1, #44	; 0x2c
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	4413      	add	r3, r2
 8009054:	333b      	adds	r3, #59	; 0x3b
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d009      	beq.n	8009070 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800905c:	78fb      	ldrb	r3, [r7, #3]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	212c      	movs	r1, #44	; 0x2c
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	4413      	add	r3, r2
 8009068:	3354      	adds	r3, #84	; 0x54
 800906a:	78ba      	ldrb	r2, [r7, #2]
 800906c:	701a      	strb	r2, [r3, #0]
 800906e:	e008      	b.n	8009082 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	212c      	movs	r1, #44	; 0x2c
 8009076:	fb01 f303 	mul.w	r3, r1, r3
 800907a:	4413      	add	r3, r2
 800907c:	3355      	adds	r3, #85	; 0x55
 800907e:	78ba      	ldrb	r2, [r7, #2]
 8009080:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7f8 f97b 	bl	8001394 <HAL_Delay>
}
 800909e:	bf00      	nop
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	2b03      	cmp	r3, #3
 80090ba:	d817      	bhi.n	80090ec <USBH_Get_USB_Status+0x44>
 80090bc:	a201      	add	r2, pc, #4	; (adr r2, 80090c4 <USBH_Get_USB_Status+0x1c>)
 80090be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c2:	bf00      	nop
 80090c4:	080090d5 	.word	0x080090d5
 80090c8:	080090db 	.word	0x080090db
 80090cc:	080090e1 	.word	0x080090e1
 80090d0:	080090e7 	.word	0x080090e7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	73fb      	strb	r3, [r7, #15]
    break;
 80090d8:	e00b      	b.n	80090f2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80090da:	2302      	movs	r3, #2
 80090dc:	73fb      	strb	r3, [r7, #15]
    break;
 80090de:	e008      	b.n	80090f2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80090e0:	2301      	movs	r3, #1
 80090e2:	73fb      	strb	r3, [r7, #15]
    break;
 80090e4:	e005      	b.n	80090f2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80090e6:	2302      	movs	r3, #2
 80090e8:	73fb      	strb	r3, [r7, #15]
    break;
 80090ea:	e002      	b.n	80090f2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80090ec:	2302      	movs	r3, #2
 80090ee:	73fb      	strb	r3, [r7, #15]
    break;
 80090f0:	bf00      	nop
  }
  return usb_status;
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800910a:	79fb      	ldrb	r3, [r7, #7]
 800910c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009114:	2300      	movs	r3, #0
 8009116:	73fb      	strb	r3, [r7, #15]
 8009118:	e001      	b.n	800911e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800911a:	2301      	movs	r3, #1
 800911c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	461a      	mov	r2, r3
 8009122:	2101      	movs	r1, #1
 8009124:	4803      	ldr	r0, [pc, #12]	; (8009134 <MX_DriverVbusFS+0x34>)
 8009126:	f7f8 fc07 	bl	8001938 <HAL_GPIO_WritePin>
}
 800912a:	bf00      	nop
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	40020800 	.word	0x40020800

08009138 <__errno>:
 8009138:	4b01      	ldr	r3, [pc, #4]	; (8009140 <__errno+0x8>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	2000002c 	.word	0x2000002c

08009144 <__libc_init_array>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4d0d      	ldr	r5, [pc, #52]	; (800917c <__libc_init_array+0x38>)
 8009148:	4c0d      	ldr	r4, [pc, #52]	; (8009180 <__libc_init_array+0x3c>)
 800914a:	1b64      	subs	r4, r4, r5
 800914c:	10a4      	asrs	r4, r4, #2
 800914e:	2600      	movs	r6, #0
 8009150:	42a6      	cmp	r6, r4
 8009152:	d109      	bne.n	8009168 <__libc_init_array+0x24>
 8009154:	4d0b      	ldr	r5, [pc, #44]	; (8009184 <__libc_init_array+0x40>)
 8009156:	4c0c      	ldr	r4, [pc, #48]	; (8009188 <__libc_init_array+0x44>)
 8009158:	f000 f92e 	bl	80093b8 <_init>
 800915c:	1b64      	subs	r4, r4, r5
 800915e:	10a4      	asrs	r4, r4, #2
 8009160:	2600      	movs	r6, #0
 8009162:	42a6      	cmp	r6, r4
 8009164:	d105      	bne.n	8009172 <__libc_init_array+0x2e>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	f855 3b04 	ldr.w	r3, [r5], #4
 800916c:	4798      	blx	r3
 800916e:	3601      	adds	r6, #1
 8009170:	e7ee      	b.n	8009150 <__libc_init_array+0xc>
 8009172:	f855 3b04 	ldr.w	r3, [r5], #4
 8009176:	4798      	blx	r3
 8009178:	3601      	adds	r6, #1
 800917a:	e7f2      	b.n	8009162 <__libc_init_array+0x1e>
 800917c:	080093f4 	.word	0x080093f4
 8009180:	080093f4 	.word	0x080093f4
 8009184:	080093f4 	.word	0x080093f4
 8009188:	080093f8 	.word	0x080093f8

0800918c <malloc>:
 800918c:	4b02      	ldr	r3, [pc, #8]	; (8009198 <malloc+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f000 b87f 	b.w	8009294 <_malloc_r>
 8009196:	bf00      	nop
 8009198:	2000002c 	.word	0x2000002c

0800919c <free>:
 800919c:	4b02      	ldr	r3, [pc, #8]	; (80091a8 <free+0xc>)
 800919e:	4601      	mov	r1, r0
 80091a0:	6818      	ldr	r0, [r3, #0]
 80091a2:	f000 b80b 	b.w	80091bc <_free_r>
 80091a6:	bf00      	nop
 80091a8:	2000002c 	.word	0x2000002c

080091ac <memset>:
 80091ac:	4402      	add	r2, r0
 80091ae:	4603      	mov	r3, r0
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d100      	bne.n	80091b6 <memset+0xa>
 80091b4:	4770      	bx	lr
 80091b6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ba:	e7f9      	b.n	80091b0 <memset+0x4>

080091bc <_free_r>:
 80091bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091be:	2900      	cmp	r1, #0
 80091c0:	d044      	beq.n	800924c <_free_r+0x90>
 80091c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c6:	9001      	str	r0, [sp, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f1a1 0404 	sub.w	r4, r1, #4
 80091ce:	bfb8      	it	lt
 80091d0:	18e4      	addlt	r4, r4, r3
 80091d2:	f000 f8e3 	bl	800939c <__malloc_lock>
 80091d6:	4a1e      	ldr	r2, [pc, #120]	; (8009250 <_free_r+0x94>)
 80091d8:	9801      	ldr	r0, [sp, #4]
 80091da:	6813      	ldr	r3, [r2, #0]
 80091dc:	b933      	cbnz	r3, 80091ec <_free_r+0x30>
 80091de:	6063      	str	r3, [r4, #4]
 80091e0:	6014      	str	r4, [r2, #0]
 80091e2:	b003      	add	sp, #12
 80091e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e8:	f000 b8de 	b.w	80093a8 <__malloc_unlock>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d908      	bls.n	8009202 <_free_r+0x46>
 80091f0:	6825      	ldr	r5, [r4, #0]
 80091f2:	1961      	adds	r1, r4, r5
 80091f4:	428b      	cmp	r3, r1
 80091f6:	bf01      	itttt	eq
 80091f8:	6819      	ldreq	r1, [r3, #0]
 80091fa:	685b      	ldreq	r3, [r3, #4]
 80091fc:	1949      	addeq	r1, r1, r5
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	e7ed      	b.n	80091de <_free_r+0x22>
 8009202:	461a      	mov	r2, r3
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	b10b      	cbz	r3, 800920c <_free_r+0x50>
 8009208:	42a3      	cmp	r3, r4
 800920a:	d9fa      	bls.n	8009202 <_free_r+0x46>
 800920c:	6811      	ldr	r1, [r2, #0]
 800920e:	1855      	adds	r5, r2, r1
 8009210:	42a5      	cmp	r5, r4
 8009212:	d10b      	bne.n	800922c <_free_r+0x70>
 8009214:	6824      	ldr	r4, [r4, #0]
 8009216:	4421      	add	r1, r4
 8009218:	1854      	adds	r4, r2, r1
 800921a:	42a3      	cmp	r3, r4
 800921c:	6011      	str	r1, [r2, #0]
 800921e:	d1e0      	bne.n	80091e2 <_free_r+0x26>
 8009220:	681c      	ldr	r4, [r3, #0]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	6053      	str	r3, [r2, #4]
 8009226:	4421      	add	r1, r4
 8009228:	6011      	str	r1, [r2, #0]
 800922a:	e7da      	b.n	80091e2 <_free_r+0x26>
 800922c:	d902      	bls.n	8009234 <_free_r+0x78>
 800922e:	230c      	movs	r3, #12
 8009230:	6003      	str	r3, [r0, #0]
 8009232:	e7d6      	b.n	80091e2 <_free_r+0x26>
 8009234:	6825      	ldr	r5, [r4, #0]
 8009236:	1961      	adds	r1, r4, r5
 8009238:	428b      	cmp	r3, r1
 800923a:	bf04      	itt	eq
 800923c:	6819      	ldreq	r1, [r3, #0]
 800923e:	685b      	ldreq	r3, [r3, #4]
 8009240:	6063      	str	r3, [r4, #4]
 8009242:	bf04      	itt	eq
 8009244:	1949      	addeq	r1, r1, r5
 8009246:	6021      	streq	r1, [r4, #0]
 8009248:	6054      	str	r4, [r2, #4]
 800924a:	e7ca      	b.n	80091e2 <_free_r+0x26>
 800924c:	b003      	add	sp, #12
 800924e:	bd30      	pop	{r4, r5, pc}
 8009250:	20000960 	.word	0x20000960

08009254 <sbrk_aligned>:
 8009254:	b570      	push	{r4, r5, r6, lr}
 8009256:	4e0e      	ldr	r6, [pc, #56]	; (8009290 <sbrk_aligned+0x3c>)
 8009258:	460c      	mov	r4, r1
 800925a:	6831      	ldr	r1, [r6, #0]
 800925c:	4605      	mov	r5, r0
 800925e:	b911      	cbnz	r1, 8009266 <sbrk_aligned+0x12>
 8009260:	f000 f88c 	bl	800937c <_sbrk_r>
 8009264:	6030      	str	r0, [r6, #0]
 8009266:	4621      	mov	r1, r4
 8009268:	4628      	mov	r0, r5
 800926a:	f000 f887 	bl	800937c <_sbrk_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d00a      	beq.n	8009288 <sbrk_aligned+0x34>
 8009272:	1cc4      	adds	r4, r0, #3
 8009274:	f024 0403 	bic.w	r4, r4, #3
 8009278:	42a0      	cmp	r0, r4
 800927a:	d007      	beq.n	800928c <sbrk_aligned+0x38>
 800927c:	1a21      	subs	r1, r4, r0
 800927e:	4628      	mov	r0, r5
 8009280:	f000 f87c 	bl	800937c <_sbrk_r>
 8009284:	3001      	adds	r0, #1
 8009286:	d101      	bne.n	800928c <sbrk_aligned+0x38>
 8009288:	f04f 34ff 	mov.w	r4, #4294967295
 800928c:	4620      	mov	r0, r4
 800928e:	bd70      	pop	{r4, r5, r6, pc}
 8009290:	20000964 	.word	0x20000964

08009294 <_malloc_r>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	1ccd      	adds	r5, r1, #3
 800929a:	f025 0503 	bic.w	r5, r5, #3
 800929e:	3508      	adds	r5, #8
 80092a0:	2d0c      	cmp	r5, #12
 80092a2:	bf38      	it	cc
 80092a4:	250c      	movcc	r5, #12
 80092a6:	2d00      	cmp	r5, #0
 80092a8:	4607      	mov	r7, r0
 80092aa:	db01      	blt.n	80092b0 <_malloc_r+0x1c>
 80092ac:	42a9      	cmp	r1, r5
 80092ae:	d905      	bls.n	80092bc <_malloc_r+0x28>
 80092b0:	230c      	movs	r3, #12
 80092b2:	603b      	str	r3, [r7, #0]
 80092b4:	2600      	movs	r6, #0
 80092b6:	4630      	mov	r0, r6
 80092b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092bc:	4e2e      	ldr	r6, [pc, #184]	; (8009378 <_malloc_r+0xe4>)
 80092be:	f000 f86d 	bl	800939c <__malloc_lock>
 80092c2:	6833      	ldr	r3, [r6, #0]
 80092c4:	461c      	mov	r4, r3
 80092c6:	bb34      	cbnz	r4, 8009316 <_malloc_r+0x82>
 80092c8:	4629      	mov	r1, r5
 80092ca:	4638      	mov	r0, r7
 80092cc:	f7ff ffc2 	bl	8009254 <sbrk_aligned>
 80092d0:	1c43      	adds	r3, r0, #1
 80092d2:	4604      	mov	r4, r0
 80092d4:	d14d      	bne.n	8009372 <_malloc_r+0xde>
 80092d6:	6834      	ldr	r4, [r6, #0]
 80092d8:	4626      	mov	r6, r4
 80092da:	2e00      	cmp	r6, #0
 80092dc:	d140      	bne.n	8009360 <_malloc_r+0xcc>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	4631      	mov	r1, r6
 80092e2:	4638      	mov	r0, r7
 80092e4:	eb04 0803 	add.w	r8, r4, r3
 80092e8:	f000 f848 	bl	800937c <_sbrk_r>
 80092ec:	4580      	cmp	r8, r0
 80092ee:	d13a      	bne.n	8009366 <_malloc_r+0xd2>
 80092f0:	6821      	ldr	r1, [r4, #0]
 80092f2:	3503      	adds	r5, #3
 80092f4:	1a6d      	subs	r5, r5, r1
 80092f6:	f025 0503 	bic.w	r5, r5, #3
 80092fa:	3508      	adds	r5, #8
 80092fc:	2d0c      	cmp	r5, #12
 80092fe:	bf38      	it	cc
 8009300:	250c      	movcc	r5, #12
 8009302:	4629      	mov	r1, r5
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff ffa5 	bl	8009254 <sbrk_aligned>
 800930a:	3001      	adds	r0, #1
 800930c:	d02b      	beq.n	8009366 <_malloc_r+0xd2>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	442b      	add	r3, r5
 8009312:	6023      	str	r3, [r4, #0]
 8009314:	e00e      	b.n	8009334 <_malloc_r+0xa0>
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	1b52      	subs	r2, r2, r5
 800931a:	d41e      	bmi.n	800935a <_malloc_r+0xc6>
 800931c:	2a0b      	cmp	r2, #11
 800931e:	d916      	bls.n	800934e <_malloc_r+0xba>
 8009320:	1961      	adds	r1, r4, r5
 8009322:	42a3      	cmp	r3, r4
 8009324:	6025      	str	r5, [r4, #0]
 8009326:	bf18      	it	ne
 8009328:	6059      	strne	r1, [r3, #4]
 800932a:	6863      	ldr	r3, [r4, #4]
 800932c:	bf08      	it	eq
 800932e:	6031      	streq	r1, [r6, #0]
 8009330:	5162      	str	r2, [r4, r5]
 8009332:	604b      	str	r3, [r1, #4]
 8009334:	4638      	mov	r0, r7
 8009336:	f104 060b 	add.w	r6, r4, #11
 800933a:	f000 f835 	bl	80093a8 <__malloc_unlock>
 800933e:	f026 0607 	bic.w	r6, r6, #7
 8009342:	1d23      	adds	r3, r4, #4
 8009344:	1af2      	subs	r2, r6, r3
 8009346:	d0b6      	beq.n	80092b6 <_malloc_r+0x22>
 8009348:	1b9b      	subs	r3, r3, r6
 800934a:	50a3      	str	r3, [r4, r2]
 800934c:	e7b3      	b.n	80092b6 <_malloc_r+0x22>
 800934e:	6862      	ldr	r2, [r4, #4]
 8009350:	42a3      	cmp	r3, r4
 8009352:	bf0c      	ite	eq
 8009354:	6032      	streq	r2, [r6, #0]
 8009356:	605a      	strne	r2, [r3, #4]
 8009358:	e7ec      	b.n	8009334 <_malloc_r+0xa0>
 800935a:	4623      	mov	r3, r4
 800935c:	6864      	ldr	r4, [r4, #4]
 800935e:	e7b2      	b.n	80092c6 <_malloc_r+0x32>
 8009360:	4634      	mov	r4, r6
 8009362:	6876      	ldr	r6, [r6, #4]
 8009364:	e7b9      	b.n	80092da <_malloc_r+0x46>
 8009366:	230c      	movs	r3, #12
 8009368:	603b      	str	r3, [r7, #0]
 800936a:	4638      	mov	r0, r7
 800936c:	f000 f81c 	bl	80093a8 <__malloc_unlock>
 8009370:	e7a1      	b.n	80092b6 <_malloc_r+0x22>
 8009372:	6025      	str	r5, [r4, #0]
 8009374:	e7de      	b.n	8009334 <_malloc_r+0xa0>
 8009376:	bf00      	nop
 8009378:	20000960 	.word	0x20000960

0800937c <_sbrk_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d06      	ldr	r5, [pc, #24]	; (8009398 <_sbrk_r+0x1c>)
 8009380:	2300      	movs	r3, #0
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7f7 ff20 	bl	80011cc <_sbrk>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_sbrk_r+0x1a>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_sbrk_r+0x1a>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	20000968 	.word	0x20000968

0800939c <__malloc_lock>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__malloc_lock+0x8>)
 800939e:	f000 b809 	b.w	80093b4 <__retarget_lock_acquire_recursive>
 80093a2:	bf00      	nop
 80093a4:	2000096c 	.word	0x2000096c

080093a8 <__malloc_unlock>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__malloc_unlock+0x8>)
 80093aa:	f000 b804 	b.w	80093b6 <__retarget_lock_release_recursive>
 80093ae:	bf00      	nop
 80093b0:	2000096c 	.word	0x2000096c

080093b4 <__retarget_lock_acquire_recursive>:
 80093b4:	4770      	bx	lr

080093b6 <__retarget_lock_release_recursive>:
 80093b6:	4770      	bx	lr

080093b8 <_init>:
 80093b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ba:	bf00      	nop
 80093bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093be:	bc08      	pop	{r3}
 80093c0:	469e      	mov	lr, r3
 80093c2:	4770      	bx	lr

080093c4 <_fini>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

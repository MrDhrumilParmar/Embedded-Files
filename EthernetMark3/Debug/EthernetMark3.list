
EthernetMark3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08008b60  08008b60  00018b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c24  08008c24  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  08008c24  08008c24  00018c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c2c  08008c2c  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c2c  08008c2c  00018c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c30  08008c30  00018c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08008c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200bc  2**0
                  CONTENTS
 10 .bss          000007b4  200000bc  200000bc  000200bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000870  20000870  000200bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015024  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d90  00000000  00000000  00035110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d8  00000000  00000000  00038ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f20  00000000  00000000  00039f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024eeb  00000000  00000000  0003ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015772  00000000  00000000  0005fd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccd5b  00000000  00000000  000754f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00142250  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a90  00000000  00000000  001422a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b48 	.word	0x08008b48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	08008b48 	.word	0x08008b48

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f001 f8ea 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f80e 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8dc 	bl	8000694 <MX_GPIO_Init>
  MX_I2S3_Init();
 80004dc:	f000 f874 	bl	80005c8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f8a2 	bl	8000628 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f007 fae8 	bl	8007ab8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  w5100Init();
 80004e8:	f000 fd4c 	bl	8000f84 <w5100Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004ec:	f007 fb0a 	bl	8007b04 <MX_USB_HOST_Process>
 80004f0:	e7fc      	b.n	80004ec <main+0x20>
	...

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f007 fe1a 	bl	800813c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xcc>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a27      	ldr	r2, [pc, #156]	; (80005c0 <SystemClock_Config+0xcc>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b25      	ldr	r3, [pc, #148]	; (80005c0 <SystemClock_Config+0xcc>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <SystemClock_Config+0xd0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <SystemClock_Config+0xd0>)
 800053e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000550:	2301      	movs	r3, #1
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055a:	2302      	movs	r3, #2
 800055c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000564:	2308      	movs	r3, #8
 8000566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000568:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800056c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000572:	2307      	movs	r3, #7
 8000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fc9c 	bl	8003eb8 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000586:	f000 f961 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2302      	movs	r3, #2
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	2105      	movs	r1, #5
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fefd 	bl	80043a8 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005b4:	f000 f94a 	bl	800084c <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3750      	adds	r7, #80	; 0x50
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <MX_I2S3_Init+0x54>)
 80005ce:	4a14      	ldr	r2, [pc, #80]	; (8000620 <MX_I2S3_Init+0x58>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80005d2:	4b12      	ldr	r3, [pc, #72]	; (800061c <MX_I2S3_Init+0x54>)
 80005d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <MX_I2S3_Init+0x54>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <MX_I2S3_Init+0x54>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <MX_I2S3_Init+0x54>)
 80005e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <MX_I2S3_Init+0x54>)
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <MX_I2S3_Init+0x5c>)
 80005f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <MX_I2S3_Init+0x54>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80005fa:	4b08      	ldr	r3, [pc, #32]	; (800061c <MX_I2S3_Init+0x54>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <MX_I2S3_Init+0x54>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <MX_I2S3_Init+0x54>)
 8000608:	f002 ffb6 	bl	8003578 <HAL_I2S_Init>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000612:	f000 f91b 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000d8 	.word	0x200000d8
 8000620:	40003c00 	.word	0x40003c00
 8000624:	00017700 	.word	0x00017700

08000628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_SPI1_Init+0x64>)
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_SPI1_Init+0x68>)
 8000630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_SPI1_Init+0x64>)
 8000634:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_SPI1_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_SPI1_Init+0x64>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_SPI1_Init+0x64>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_SPI1_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_SPI1_Init+0x64>)
 8000654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000658:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_SPI1_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <MX_SPI1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_SPI1_Init+0x64>)
 8000668:	2200      	movs	r2, #0
 800066a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_SPI1_Init+0x64>)
 800066e:	2200      	movs	r2, #0
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_SPI1_Init+0x64>)
 8000674:	220a      	movs	r2, #10
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	; (800068c <MX_SPI1_Init+0x64>)
 800067a:	f004 f9c1 	bl	8004a00 <HAL_SPI_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000684:	f000 f8e2 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000120 	.word	0x20000120
 8000690:	40013000 	.word	0x40013000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	4b61      	ldr	r3, [pc, #388]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a60      	ldr	r2, [pc, #384]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006b4:	f043 0310 	orr.w	r3, r3, #16
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b5e      	ldr	r3, [pc, #376]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0310 	and.w	r3, r3, #16
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	4b5a      	ldr	r3, [pc, #360]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a59      	ldr	r2, [pc, #356]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b57      	ldr	r3, [pc, #348]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a52      	ldr	r2, [pc, #328]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b50      	ldr	r3, [pc, #320]	; (8000834 <MX_GPIO_Init+0x1a0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <MX_GPIO_Init+0x1a0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a4b      	ldr	r2, [pc, #300]	; (8000834 <MX_GPIO_Init+0x1a0>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b49      	ldr	r3, [pc, #292]	; (8000834 <MX_GPIO_Init+0x1a0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b45      	ldr	r3, [pc, #276]	; (8000834 <MX_GPIO_Init+0x1a0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a44      	ldr	r2, [pc, #272]	; (8000834 <MX_GPIO_Init+0x1a0>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b42      	ldr	r3, [pc, #264]	; (8000834 <MX_GPIO_Init+0x1a0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <MX_GPIO_Init+0x1a0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a3d      	ldr	r2, [pc, #244]	; (8000834 <MX_GPIO_Init+0x1a0>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <MX_GPIO_Init+0x1a0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2138      	movs	r1, #56	; 0x38
 8000756:	4838      	ldr	r0, [pc, #224]	; (8000838 <MX_GPIO_Init+0x1a4>)
 8000758:	f001 faea 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	4836      	ldr	r0, [pc, #216]	; (800083c <MX_GPIO_Init+0x1a8>)
 8000762:	f001 fae5 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000766:	2200      	movs	r2, #0
 8000768:	f24f 0110 	movw	r1, #61456	; 0xf010
 800076c:	4834      	ldr	r0, [pc, #208]	; (8000840 <MX_GPIO_Init+0x1ac>)
 800076e:	f001 fadf 	bl	8001d30 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE4 PE5 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8000772:	2338      	movs	r3, #56	; 0x38
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	482b      	ldr	r0, [pc, #172]	; (8000838 <MX_GPIO_Init+0x1a4>)
 800078a:	f001 f935 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800078e:	2301      	movs	r3, #1
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4825      	ldr	r0, [pc, #148]	; (800083c <MX_GPIO_Init+0x1a8>)
 80007a6:	f001 f927 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4821      	ldr	r0, [pc, #132]	; (8000844 <MX_GPIO_Init+0x1b0>)
 80007c0:	f001 f91a 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c4:	2304      	movs	r3, #4
 80007c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c8:	2300      	movs	r3, #0
 80007ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 031c 	add.w	r3, r7, #28
 80007d4:	4619      	mov	r1, r3
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_GPIO_Init+0x1b4>)
 80007d8:	f001 f90e 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007dc:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007e0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	4619      	mov	r1, r3
 80007f4:	4812      	ldr	r0, [pc, #72]	; (8000840 <MX_GPIO_Init+0x1ac>)
 80007f6:	f001 f8ff 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007fa:	2320      	movs	r3, #32
 80007fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fe:	2300      	movs	r3, #0
 8000800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_GPIO_Init+0x1ac>)
 800080e:	f001 f8f3 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000812:	2302      	movs	r3, #2
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000816:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_GPIO_Init+0x1a4>)
 8000828:	f001 f8e6 	bl	80019f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	; 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40021000 	.word	0x40021000
 800083c:	40020800 	.word	0x40020800
 8000840:	40020c00 	.word	0x40020c00
 8000844:	40020000 	.word	0x40020000
 8000848:	40020400 	.word	0x40020400

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000896:	2007      	movs	r0, #7
 8000898:	f001 f86c 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089c:	bf00      	nop
 800089e:	3708      	adds	r7, #8
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a31      	ldr	r2, [pc, #196]	; (8000998 <HAL_I2S_MspInit+0xf0>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d15a      	bne.n	800098e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008d8:	2301      	movs	r3, #1
 80008da:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008dc:	23c0      	movs	r3, #192	; 0xc0
 80008de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 ff49 	bl	8004780 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80008f4:	f7ff ffaa 	bl	800084c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	4b27      	ldr	r3, [pc, #156]	; (800099c <HAL_I2S_MspInit+0xf4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	4a26      	ldr	r2, [pc, #152]	; (800099c <HAL_I2S_MspInit+0xf4>)
 8000902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000906:	6413      	str	r3, [r2, #64]	; 0x40
 8000908:	4b24      	ldr	r3, [pc, #144]	; (800099c <HAL_I2S_MspInit+0xf4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b20      	ldr	r3, [pc, #128]	; (800099c <HAL_I2S_MspInit+0xf4>)
 800091a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091c:	4a1f      	ldr	r2, [pc, #124]	; (800099c <HAL_I2S_MspInit+0xf4>)
 800091e:	f043 0301 	orr.w	r3, r3, #1
 8000922:	6313      	str	r3, [r2, #48]	; 0x30
 8000924:	4b1d      	ldr	r3, [pc, #116]	; (800099c <HAL_I2S_MspInit+0xf4>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_I2S_MspInit+0xf4>)
 8000936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000938:	4a18      	ldr	r2, [pc, #96]	; (800099c <HAL_I2S_MspInit+0xf4>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6313      	str	r3, [r2, #48]	; 0x30
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_I2S_MspInit+0xf4>)
 8000942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800094c:	2310      	movs	r3, #16
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800095c:	2306      	movs	r3, #6
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000964:	4619      	mov	r1, r3
 8000966:	480e      	ldr	r0, [pc, #56]	; (80009a0 <HAL_I2S_MspInit+0xf8>)
 8000968:	f001 f846 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800096c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800097e:	2306      	movs	r3, #6
 8000980:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <HAL_I2S_MspInit+0xfc>)
 800098a:	f001 f835 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3738      	adds	r7, #56	; 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40003c00 	.word	0x40003c00
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000
 80009a4:	40020800 	.word	0x40020800

080009a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	; (8000a2c <HAL_SPI_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_SPI_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a02:	2338      	movs	r3, #56	; 0x38
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a12:	2305      	movs	r3, #5
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	; (8000a34 <HAL_SPI_MspInit+0x8c>)
 8000a1e:	f000 ffeb 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40013000 	.word	0x40013000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020400 	.word	0x40020400

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <NMI_Handler+0x4>

08000a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <HardFault_Handler+0x4>

08000a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <MemManage_Handler+0x4>

08000a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a84:	f000 fe62 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <OTG_FS_IRQHandler+0x10>)
 8000a92:	f001 fbd1 	bl	8002238 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000055c 	.word	0x2000055c

08000aa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	e00a      	b.n	8000ac8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ab2:	f3af 8000 	nop.w
 8000ab6:	4601      	mov	r1, r0
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	1c5a      	adds	r2, r3, #1
 8000abc:	60ba      	str	r2, [r7, #8]
 8000abe:	b2ca      	uxtb	r2, r1
 8000ac0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf0      	blt.n	8000ab2 <_read+0x12>
  }

  return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	e009      	b.n	8000b00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	60ba      	str	r2, [r7, #8]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3301      	adds	r3, #1
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	dbf1      	blt.n	8000aec <_write+0x12>
  }
  return len;
 8000b08:	687b      	ldr	r3, [r7, #4]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_close>:

int _close(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <_isatty>:

int _isatty(int file)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3714      	adds	r7, #20
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b84:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <_sbrk+0x5c>)
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <_sbrk+0x60>)
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b90:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <_sbrk+0x64>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d102      	bne.n	8000b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <_sbrk+0x64>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <_sbrk+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d207      	bcs.n	8000bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bac:	f007 fa8c 	bl	80080c8 <__errno>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	e009      	b.n	8000bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bbc:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <_sbrk+0x64>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a05      	ldr	r2, [pc, #20]	; (8000be0 <_sbrk+0x64>)
 8000bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bce:	68fb      	ldr	r3, [r7, #12]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20020000 	.word	0x20020000
 8000bdc:	00000400 	.word	0x00000400
 8000be0:	20000178 	.word	0x20000178
 8000be4:	20000870 	.word	0x20000870

08000be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <SystemInit+0x20>)
 8000bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <SystemInit+0x20>)
 8000bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5100 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <WIZCHIP_WRITE+0x58>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <WIZCHIP_WRITE+0x58>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <WIZCHIP_WRITE+0x58>)
 8000c26:	6a1b      	ldr	r3, [r3, #32]
 8000c28:	20f0      	movs	r0, #240	; 0xf0
 8000c2a:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <WIZCHIP_WRITE+0x58>)
 8000c2e:	6a1b      	ldr	r3, [r3, #32]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	0a12      	lsrs	r2, r2, #8
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	4610      	mov	r0, r2
 8000c38:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <WIZCHIP_WRITE+0x58>)
 8000c3c:	6a1b      	ldr	r3, [r3, #32]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	4610      	mov	r0, r2
 8000c44:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <WIZCHIP_WRITE+0x58>)
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	78fa      	ldrb	r2, [r7, #3]
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <WIZCHIP_WRITE+0x58>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000c56:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <WIZCHIP_WRITE+0x58>)
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	4798      	blx	r3
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000004 	.word	0x20000004

08000c68 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <WIZCHIP_READ+0x58>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <WIZCHIP_READ+0x58>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <WIZCHIP_READ+0x58>)
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	200f      	movs	r0, #15
 8000c82:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <WIZCHIP_READ+0x58>)
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	0a12      	lsrs	r2, r2, #8
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <WIZCHIP_READ+0x58>)
 8000c94:	6a1b      	ldr	r3, [r3, #32]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <WIZCHIP_READ+0x58>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4798      	blx	r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <WIZCHIP_READ+0x58>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <WIZCHIP_READ+0x58>)
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	4798      	blx	r3
   return ret;
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000cd8:	68db      	ldr	r3, [r3, #12]
 8000cda:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	82fb      	strh	r3, [r7, #22]
 8000ce6:	e02a      	b.n	8000d3e <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 8000cee:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	20f0      	movs	r0, #240	; 0xf0
 8000cf4:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000cf8:	6a1b      	ldr	r3, [r3, #32]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	b291      	uxth	r1, r2
 8000cfe:	8afa      	ldrh	r2, [r7, #22]
 8000d00:	440a      	add	r2, r1
 8000d02:	b292      	uxth	r2, r2
 8000d04:	0a12      	lsrs	r2, r2, #8
 8000d06:	b292      	uxth	r2, r2
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	4610      	mov	r0, r2
 8000d0c:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000d10:	6a1b      	ldr	r3, [r3, #32]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	b2d1      	uxtb	r1, r2
 8000d16:	8afa      	ldrh	r2, [r7, #22]
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440a      	add	r2, r1
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	4610      	mov	r0, r2
 8000d20:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	8afa      	ldrh	r2, [r7, #22]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	440a      	add	r2, r1
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	4610      	mov	r0, r2
 8000d30:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4798      	blx	r3
  for(i = 0; i < len; i++)
 8000d38:	8afb      	ldrh	r3, [r7, #22]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	82fb      	strh	r3, [r7, #22]
 8000d3e:	8afa      	ldrh	r2, [r7, #22]
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3d0      	bcc.n	8000ce8 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <WIZCHIP_WRITE_BUF+0x98>)
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	4798      	blx	r3
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000004 	.word	0x20000004

08000d60 <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	82fb      	strh	r3, [r7, #22]
 8000d82:	e02a      	b.n	8000dda <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	200f      	movs	r0, #15
 8000d90:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000d94:	6a1b      	ldr	r3, [r3, #32]
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	b291      	uxth	r1, r2
 8000d9a:	8afa      	ldrh	r2, [r7, #22]
 8000d9c:	440a      	add	r2, r1
 8000d9e:	b292      	uxth	r2, r2
 8000da0:	0a12      	lsrs	r2, r2, #8
 8000da2:	b292      	uxth	r2, r2
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	4610      	mov	r0, r2
 8000da8:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000dac:	6a1b      	ldr	r3, [r3, #32]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	b2d1      	uxtb	r1, r2
 8000db2:	8afa      	ldrh	r2, [r7, #22]
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440a      	add	r2, r1
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	8afa      	ldrh	r2, [r7, #22]
 8000dc4:	68b9      	ldr	r1, [r7, #8]
 8000dc6:	188c      	adds	r4, r1, r2
 8000dc8:	4798      	blx	r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000dd4:	8afb      	ldrh	r3, [r7, #22]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	82fb      	strh	r3, [r7, #22]
 8000dda:	8afa      	ldrh	r2, [r7, #22]
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d3d0      	bcc.n	8000d84 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <WIZCHIP_READ_BUF+0x98>)
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	4798      	blx	r3
}
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000004 	.word	0x20000004

08000dfc <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	while((hspi1.Instance->SR & SPI_FLAG_TXE )!= SPI_FLAG_TXE);
 8000e06:	bf00      	nop
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <SPIReadWrite+0x4c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d1f8      	bne.n	8000e08 <SPIReadWrite+0xc>

	*(__IO uint8_t *)&hspi1.Instance->DR=data;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <SPIReadWrite+0x4c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	330c      	adds	r3, #12
 8000e1c:	79fa      	ldrb	r2, [r7, #7]
 8000e1e:	701a      	strb	r2, [r3, #0]

	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!= SPI_FLAG_RXNE);
 8000e20:	bf00      	nop
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <SPIReadWrite+0x4c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d1f8      	bne.n	8000e22 <SPIReadWrite+0x26>

	return*((__IO uint8_t *)&hspi1.Instance->DR);
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SPIReadWrite+0x4c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	330c      	adds	r3, #12
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b2db      	uxtb	r3, r3

}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000120 	.word	0x20000120

08000e4c <wizchip_select>:

void wizchip_select(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2102      	movs	r1, #2
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <wizchip_select+0x14>)
 8000e56:	f000 ff6b 	bl	8001d30 <HAL_GPIO_WritePin>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <wizchip_deselect>:

void wizchip_deselect(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2102      	movs	r1, #2
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <wizchip_deselect+0x14>)
 8000e6e:	f000 ff5f 	bl	8001d30 <HAL_GPIO_WritePin>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <wizchip_read>:

uint8_t wizchip_read()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff ffba 	bl	8000dfc <SPIReadWrite>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	71fb      	strb	r3, [r7, #7]
	return rb;
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <wizchip_write>:

void wizchip_write(uint8_t wb)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ffaa 	bl	8000dfc <SPIReadWrite>
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	81fb      	strh	r3, [r7, #14]
 8000ec0:	e00c      	b.n	8000edc <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0X00);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff ff9a 	bl	8000dfc <SPIReadWrite>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	461a      	mov	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8000ed6:	89fb      	ldrh	r3, [r7, #14]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	81fb      	strh	r3, [r7, #14]
 8000edc:	89fa      	ldrh	r2, [r7, #14]
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d3ee      	bcc.n	8000ec2 <wizchip_readburst+0x12>
	}
}
 8000ee4:	bf00      	nop
 8000ee6:	bf00      	nop
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <wizchip_writeburst>:

void wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	81fb      	strh	r3, [r7, #14]
 8000efe:	e00a      	b.n	8000f16 <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff79 	bl	8000dfc <SPIReadWrite>
		pBuf++;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	3301      	adds	r3, #1
 8000f14:	81fb      	strh	r3, [r7, #14]
 8000f16:	89fa      	ldrh	r2, [r7, #14]
 8000f18:	887b      	ldrh	r3, [r7, #2]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d3f0      	bcc.n	8000f00 <wizchip_writeburst+0x12>
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <w5100IOInit>:

void w5100IOInit()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
 8000f40:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <w5100IOInit+0x54>)
 8000f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <w5100IOInit+0x54>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <w5100IOInit+0x54>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f64:	2302      	movs	r3, #2
 8000f66:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4804      	ldr	r0, [pc, #16]	; (8000f80 <w5100IOInit+0x58>)
 8000f6e:	f000 fd43 	bl	80019f8 <HAL_GPIO_Init>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40021000 	.word	0x40021000

08000f84 <w5100Init>:

void w5100Init()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][4] = {{2,2,2,2},{2,2,2,2}};
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <w5100Init+0x84>)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f92:	e883 0003 	stmia.w	r3, {r0, r1}

	w5100IOInit();
 8000f96:	f7ff ffc7 	bl	8000f28 <w5100IOInit>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	481b      	ldr	r0, [pc, #108]	; (800100c <w5100Init+0x88>)
 8000fa0:	f000 fec6 	bl	8001d30 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <w5100Init+0x88>)
 8000faa:	f000 fec1 	bl	8001d30 <HAL_GPIO_WritePin>
	tmp=0xFF;
 8000fae:	23ff      	movs	r3, #255	; 0xff
 8000fb0:	73fb      	strb	r3, [r7, #15]
	while(tmp--);
 8000fb2:	bf00      	nop
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	1e5a      	subs	r2, r3, #1
 8000fb8:	73fa      	strb	r2, [r7, #15]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1fa      	bne.n	8000fb4 <w5100Init+0x30>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	4812      	ldr	r0, [pc, #72]	; (800100c <w5100Init+0x88>)
 8000fc4:	f000 feb4 	bl	8001d30 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000fc8:	4911      	ldr	r1, [pc, #68]	; (8001010 <w5100Init+0x8c>)
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <w5100Init+0x90>)
 8000fcc:	f000 f894 	bl	80010f8 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8000fd0:	4911      	ldr	r1, [pc, #68]	; (8001018 <w5100Init+0x94>)
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <w5100Init+0x98>)
 8000fd4:	f000 f8b6 	bl	8001144 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8000fd8:	4911      	ldr	r1, [pc, #68]	; (8001020 <w5100Init+0x9c>)
 8000fda:	4812      	ldr	r0, [pc, #72]	; (8001024 <w5100Init+0xa0>)
 8000fdc:	f000 f8de 	bl	800119c <reg_wizchip_spiburst_cbfunc>


	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1)
 8000fe0:	1d3b      	adds	r3, r7, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 f905 	bl	80011f4 <ctlwizchip>
 8000fea:	4603      	mov	r3, r0
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d103      	bne.n	8000ffa <w5100Init+0x76>
	{
		printf("Wizchip initialization failed.\r\n");
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <w5100Init+0xa4>)
 8000ff4:	f007 f9f8 	bl	80083e8 <puts>
		while(1);
 8000ff8:	e7fe      	b.n	8000ff8 <w5100Init+0x74>
	}
	printf("Wizchip initialization successful.\r\n");
 8000ffa:	480c      	ldr	r0, [pc, #48]	; (800102c <w5100Init+0xa8>)
 8000ffc:	f007 f9f4 	bl	80083e8 <puts>

}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	08008ba4 	.word	0x08008ba4
 800100c:	40021000 	.word	0x40021000
 8001010:	08000e65 	.word	0x08000e65
 8001014:	08000e4d 	.word	0x08000e4d
 8001018:	08000e97 	.word	0x08000e97
 800101c:	08000e7d 	.word	0x08000e7d
 8001020:	08000eef 	.word	0x08000eef
 8001024:	08000eb1 	.word	0x08000eb1
 8001028:	08008b60 	.word	0x08008b60
 800102c:	08008b80 	.word	0x08008b80

08001030 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	78fa      	ldrb	r2, [r7, #3]
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	2300      	movs	r3, #0
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	460b      	mov	r3, r1
 80010d0:	807b      	strh	r3, [r7, #2]
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	460b      	mov	r3, r1
 80010e8:	807b      	strh	r3, [r7, #2]
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <reg_wizchip_cs_cbfunc+0x16>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <reg_wizchip_cs_cbfunc+0x40>)
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <reg_wizchip_cs_cbfunc+0x44>)
 8001112:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <reg_wizchip_cs_cbfunc+0x40>)
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <reg_wizchip_cs_cbfunc+0x48>)
 8001118:	619a      	str	r2, [r3, #24]
 800111a:	e006      	b.n	800112a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <reg_wizchip_cs_cbfunc+0x40>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <reg_wizchip_cs_cbfunc+0x40>)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	6193      	str	r3, [r2, #24]
   }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000004 	.word	0x20000004
 800113c:	0800104d 	.word	0x0800104d
 8001140:	0800105b 	.word	0x0800105b

08001144 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800114e:	bf00      	nop
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <reg_wizchip_spi_cbfunc+0x4c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001158:	2b00      	cmp	r3, #0
 800115a:	d0f9      	beq.n	8001150 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <reg_wizchip_spi_cbfunc+0x24>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d106      	bne.n	8001176 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <reg_wizchip_spi_cbfunc+0x4c>)
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <reg_wizchip_spi_cbfunc+0x50>)
 800116c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <reg_wizchip_spi_cbfunc+0x4c>)
 8001170:	4a09      	ldr	r2, [pc, #36]	; (8001198 <reg_wizchip_spi_cbfunc+0x54>)
 8001172:	621a      	str	r2, [r3, #32]
 8001174:	e006      	b.n	8001184 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001176:	4a06      	ldr	r2, [pc, #24]	; (8001190 <reg_wizchip_spi_cbfunc+0x4c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <reg_wizchip_spi_cbfunc+0x4c>)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6213      	str	r3, [r2, #32]
   }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20000004 	.word	0x20000004
 8001194:	080010a1 	.word	0x080010a1
 8001198:	080010b1 	.word	0x080010b1

0800119c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80011a6:	bf00      	nop
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f9      	beq.n	80011a8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <reg_wizchip_spiburst_cbfunc+0x24>
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d106      	bne.n	80011ce <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <reg_wizchip_spiburst_cbfunc+0x50>)
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011c8:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <reg_wizchip_spiburst_cbfunc+0x54>)
 80011ca:	629a      	str	r2, [r3, #40]	; 0x28
 80011cc:	e006      	b.n	80011dc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80011ce:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80011da:	bf00      	nop
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000004 	.word	0x20000004
 80011ec:	080010c7 	.word	0x080010c7
 80011f0:	080010df 	.word	0x080010df

080011f4 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b08      	cmp	r3, #8
 800120c:	d863      	bhi.n	80012d6 <ctlwizchip+0xe2>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <ctlwizchip+0x20>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001239 	.word	0x08001239
 8001218:	0800123f 	.word	0x0800123f
 800121c:	0800126b 	.word	0x0800126b
 8001220:	0800125f 	.word	0x0800125f
 8001224:	08001279 	.word	0x08001279
 8001228:	08001285 	.word	0x08001285
 800122c:	080012d7 	.word	0x080012d7
 8001230:	080012d7 	.word	0x080012d7
 8001234:	08001293 	.word	0x08001293
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8001238:	f000 f858 	bl	80012ec <wizchip_sw_reset>
         break;
 800123c:	e04e      	b.n	80012dc <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d004      	beq.n	800124e <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	3304      	adds	r3, #4
 800124c:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f000 f88d 	bl	8001374 <wizchip_init>
 800125a:	4603      	mov	r3, r0
 800125c:	e03f      	b.n	80012de <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f968 	bl	8001538 <wizchip_clrinterrupt>
         break;
 8001268:	e038      	b.n	80012dc <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 800126a:	f000 f988 	bl	800157e <wizchip_getinterrupt>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	801a      	strh	r2, [r3, #0]
         break;
 8001276:	e031      	b.n	80012dc <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f9a4 	bl	80015ca <wizchip_setinterruptmask>
         break;         
 8001282:	e02b      	b.n	80012dc <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8001284:	f000 f9c1 	bl	800160a <wizchip_getinterruptmask>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
         break;
 8001290:	e024      	b.n	80012dc <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <ctlwizchip+0xf4>)
 8001294:	789a      	ldrb	r2, [r3, #2]
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <ctlwizchip+0xf4>)
 80012a0:	78d2      	ldrb	r2, [r2, #3]
 80012a2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3302      	adds	r3, #2
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <ctlwizchip+0xf4>)
 80012aa:	7912      	ldrb	r2, [r2, #4]
 80012ac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3303      	adds	r3, #3
 80012b2:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <ctlwizchip+0xf4>)
 80012b4:	7952      	ldrb	r2, [r2, #5]
 80012b6:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	3304      	adds	r3, #4
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <ctlwizchip+0xf4>)
 80012be:	7992      	ldrb	r2, [r2, #6]
 80012c0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	3305      	adds	r3, #5
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <ctlwizchip+0xf4>)
 80012c8:	79d2      	ldrb	r2, [r2, #7]
 80012ca:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	3306      	adds	r3, #6
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
         break;
 80012d4:	e002      	b.n	80012dc <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e000      	b.n	80012de <ctlwizchip+0xea>
   }
   return 0;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000004 	.word	0x20000004

080012ec <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2206      	movs	r2, #6
 80012f6:	4619      	mov	r1, r3
 80012f8:	2009      	movs	r0, #9
 80012fa:	f7ff fd31 	bl	8000d60 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	2204      	movs	r2, #4
 8001304:	4619      	mov	r1, r3
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff fd2a 	bl	8000d60 <WIZCHIP_READ_BUF>
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2204      	movs	r2, #4
 8001312:	4619      	mov	r1, r3
 8001314:	2005      	movs	r0, #5
 8001316:	f7ff fd23 	bl	8000d60 <WIZCHIP_READ_BUF>
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2204      	movs	r2, #4
 8001320:	4619      	mov	r1, r3
 8001322:	200f      	movs	r0, #15
 8001324:	f7ff fd1c 	bl	8000d60 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fc6e 	bl	8000c0c <WIZCHIP_WRITE>
   getMR(); // for delay
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fc99 	bl	8000c68 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2206      	movs	r2, #6
 800133a:	4619      	mov	r1, r3
 800133c:	2009      	movs	r0, #9
 800133e:	f7ff fcc1 	bl	8000cc4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2204      	movs	r2, #4
 8001348:	4619      	mov	r1, r3
 800134a:	2001      	movs	r0, #1
 800134c:	f7ff fcba 	bl	8000cc4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2204      	movs	r2, #4
 8001356:	4619      	mov	r1, r3
 8001358:	2005      	movs	r0, #5
 800135a:	f7ff fcb3 	bl	8000cc4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2204      	movs	r2, #4
 8001364:	4619      	mov	r1, r3
 8001366:	200f      	movs	r0, #15
 8001368:	f7ff fcac 	bl	8000cc4 <WIZCHIP_WRITE_BUF>
}
 800136c:	bf00      	nop
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	737b      	strb	r3, [r7, #13]
   wizchip_sw_reset();
 8001382:	f7ff ffb3 	bl	80012ec <wizchip_sw_reset>
   if(txsize)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d066      	beq.n	800145a <wizchip_init+0xe6>
   {
      tmp = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	737b      	strb	r3, [r7, #13]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e015      	b.n	80013c2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	781a      	ldrb	r2, [r3, #0]
 80013a0:	7b7b      	ldrb	r3, [r7, #13]
 80013a2:	4413      	add	r3, r2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	737b      	strb	r3, [r7, #13]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 80013a8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	dd02      	ble.n	80013b6 <wizchip_init+0x42>
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	e0bc      	b.n	8001530 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80013b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	3301      	adds	r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	dde5      	ble.n	8001396 <wizchip_init+0x22>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	e040      	b.n	8001452 <wizchip_init+0xde>
		{
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73bb      	strb	r3, [r7, #14]
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 80013d4:	e005      	b.n	80013e2 <wizchip_init+0x6e>
 80013d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	3301      	adds	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	73bb      	strb	r3, [r7, #14]
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013f2:	fa42 f303 	asr.w	r3, r2, r3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d006      	beq.n	8001408 <wizchip_init+0x94>
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1e6      	bne.n	80013d6 <wizchip_init+0x62>
			setSn_TXBUF_SIZE(i, j);
 8001408:	201b      	movs	r0, #27
 800140a:	f7ff fc2d 	bl	8000c68 <WIZCHIP_READ>
 800140e:	4603      	mov	r3, r0
 8001410:	b25a      	sxtb	r2, r3
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2103      	movs	r1, #3
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	b25b      	sxtb	r3, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	b25b      	sxtb	r3, r3
 8001424:	4013      	ands	r3, r2
 8001426:	b25a      	sxtb	r2, r3
 8001428:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800142c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b25b      	sxtb	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	4619      	mov	r1, r3
 8001440:	201b      	movs	r0, #27
 8001442:	f7ff fbe3 	bl	8000c0c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	3301      	adds	r3, #1
 800144e:	b2db      	uxtb	r3, r3
 8001450:	73fb      	strb	r3, [r7, #15]
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	2b03      	cmp	r3, #3
 8001458:	ddba      	ble.n	80013d0 <wizchip_init+0x5c>
			setSn_TXBUF_SIZE(i, txsize[i]);
#endif
		}	
   }

   if(rxsize)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d066      	beq.n	800152e <wizchip_init+0x1ba>
   {
      tmp = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	737b      	strb	r3, [r7, #13]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e015      	b.n	8001496 <wizchip_init+0x122>
		{
			tmp += rxsize[i];
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	4413      	add	r3, r2
 8001472:	781a      	ldrb	r2, [r3, #0]
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	4413      	add	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	737b      	strb	r3, [r7, #13]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 800147c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001480:	2b08      	cmp	r3, #8
 8001482:	dd02      	ble.n	800148a <wizchip_init+0x116>
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	e052      	b.n	8001530 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800148a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3301      	adds	r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	2b03      	cmp	r3, #3
 800149c:	dde5      	ble.n	800146a <wizchip_init+0xf6>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e040      	b.n	8001526 <wizchip_init+0x1b2>
		{
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73bb      	strb	r3, [r7, #14]
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 80014a8:	e005      	b.n	80014b6 <wizchip_init+0x142>
 80014aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	3301      	adds	r3, #1
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	73bb      	strb	r3, [r7, #14]
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	683a      	ldr	r2, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014c6:	fa42 f303 	asr.w	r3, r2, r3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d006      	beq.n	80014dc <wizchip_init+0x168>
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1e6      	bne.n	80014aa <wizchip_init+0x136>
			setSn_RXBUF_SIZE(i, j);
 80014dc:	201a      	movs	r0, #26
 80014de:	f7ff fbc3 	bl	8000c68 <WIZCHIP_READ>
 80014e2:	4603      	mov	r3, r0
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2103      	movs	r1, #3
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	b25a      	sxtb	r2, r3
 80014fc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b25b      	sxtb	r3, r3
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4619      	mov	r1, r3
 8001514:	201a      	movs	r0, #26
 8001516:	f7ff fb79 	bl	8000c0c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800151a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151e:	b2db      	uxtb	r3, r3
 8001520:	3301      	adds	r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	2b03      	cmp	r3, #3
 800152c:	ddba      	ble.n	80014a4 <wizchip_init+0x130>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	f043 0310 	orr.w	r3, r3, #16
 8001554:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   ir |= (1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   sir &= 0x0F;
 8001556:	7bbb      	ldrb	r3, [r7, #14]
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	73bb      	strb	r3, [r7, #14]
#endif

#if _WIZCHIP_ <= W5100S
   ir |= sir;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	4313      	orrs	r3, r2
 8001564:	73fb      	strb	r3, [r7, #15]
   setIR(ir);
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800156c:	b2db      	uxtb	r3, r3
 800156e:	4619      	mov	r1, r3
 8001570:	2015      	movs	r0, #21
 8001572:	f7ff fb4b 	bl	8000c0c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 8001590:	2015      	movs	r0, #21
 8001592:	f7ff fb69 	bl	8000c68 <WIZCHIP_READ>
 8001596:	4603      	mov	r3, r0
 8001598:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 800159c:	71fb      	strb	r3, [r7, #7]
   sir = ir & 0x0F;
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 030f 	and.w	r3, r3, #15
 80015a4:	71bb      	strb	r3, [r7, #6]
#endif         

//M20150601 : For Integrating with W5300
//#if _WIZCHIP_ < W5500
#if _WIZCHIP_ < W5200
   ir &= ~(1<<4); // IK_WOL
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f023 0310 	bic.w	r3, r3, #16
 80015ac:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80015b2:	88bb      	ldrh	r3, [r7, #4]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	4413      	add	r3, r2
 80015be:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80015c0:	88bb      	ldrh	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	f023 0310 	bic.w	r3, r3, #16
 80015e6:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
 80015e8:	7bbb      	ldrb	r3, [r7, #14]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	73bb      	strb	r3, [r7, #14]
   imr |= simr;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	73fb      	strb	r3, [r7, #15]
   setIMR(imr);
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	4619      	mov	r1, r3
 80015fc:	2016      	movs	r0, #22
 80015fe:	f7ff fb05 	bl	8000c0c <WIZCHIP_WRITE>
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 800161c:	2016      	movs	r0, #22
 800161e:	f7ff fb23 	bl	8000c68 <WIZCHIP_READ>
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
   simr = imr & 0x0F;
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f023 0310 	bic.w	r3, r3, #16
 8001634:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001636:	79bb      	ldrb	r3, [r7, #6]
 8001638:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	021b      	lsls	r3, r3, #8
 800163e:	b29a      	uxth	r2, r3
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	b29b      	uxth	r3, r3
 8001644:	4413      	add	r3, r2
 8001646:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001648:	88bb      	ldrh	r3, [r7, #4]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800168c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165a:	490e      	ldr	r1, [pc, #56]	; (8001694 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001670:	4c0b      	ldr	r4, [pc, #44]	; (80016a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800167e:	f7ff fab3 	bl	8000be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001682:	f006 fd27 	bl	80080d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7fe ff21 	bl	80004cc <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001698:	08008c34 	.word	0x08008c34
  ldr r2, =_sbss
 800169c:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80016a0:	20000870 	.word	0x20000870

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	; (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 f94f 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff f8bc 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f967 	bl	80019de <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 f92f 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000034 	.word	0x20000034
 8001748:	20000030 	.word	0x20000030

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000034 	.word	0x20000034
 8001770:	2000017c 	.word	0x2000017c

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	2000017c 	.word	0x2000017c

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000034 	.word	0x20000034

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e16b      	b.n	8001cec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 815a 	bne.w	8001ce6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80b4 	beq.w	8001ce6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b60      	ldr	r3, [pc, #384]	; (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a5f      	ldr	r2, [pc, #380]	; (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	; (8001d04 <HAL_GPIO_Init+0x30c>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a5b      	ldr	r2, [pc, #364]	; (8001d08 <HAL_GPIO_Init+0x310>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_GPIO_Init+0x314>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02b      	beq.n	8001c1e <HAL_GPIO_Init+0x226>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a51      	ldr	r2, [pc, #324]	; (8001d10 <HAL_GPIO_Init+0x318>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x222>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_GPIO_Init+0x31c>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x21e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4f      	ldr	r2, [pc, #316]	; (8001d18 <HAL_GPIO_Init+0x320>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x21a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4e      	ldr	r2, [pc, #312]	; (8001d1c <HAL_GPIO_Init+0x324>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x216>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <HAL_GPIO_Init+0x328>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x212>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4c      	ldr	r2, [pc, #304]	; (8001d24 <HAL_GPIO_Init+0x32c>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x20e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4b      	ldr	r2, [pc, #300]	; (8001d28 <HAL_GPIO_Init+0x330>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x20a>
 8001bfe:	2307      	movs	r3, #7
 8001c00:	e00e      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c02:	2308      	movs	r3, #8
 8001c04:	e00c      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c06:	2306      	movs	r3, #6
 8001c08:	e00a      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c0a:	2305      	movs	r3, #5
 8001c0c:	e008      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c12:	2303      	movs	r3, #3
 8001c14:	e004      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e002      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_GPIO_Init+0x228>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	69fa      	ldr	r2, [r7, #28]
 8001c22:	f002 0203 	and.w	r2, r2, #3
 8001c26:	0092      	lsls	r2, r2, #2
 8001c28:	4093      	lsls	r3, r2
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c30:	4935      	ldr	r1, [pc, #212]	; (8001d08 <HAL_GPIO_Init+0x310>)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	089b      	lsrs	r3, r3, #2
 8001c36:	3302      	adds	r3, #2
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c62:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb6:	4a1d      	ldr	r2, [pc, #116]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ce0:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	2b0f      	cmp	r3, #15
 8001cf0:	f67f ae90 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40021400 	.word	0x40021400
 8001d24:	40021800 	.word	0x40021800
 8001d28:	40021c00 	.word	0x40021c00
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d64:	b08f      	sub	sp, #60	; 0x3c
 8001d66:	af0a      	add	r7, sp, #40	; 0x28
 8001d68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e054      	b.n	8001e1e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f005 fef0 	bl	8007b74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2203      	movs	r2, #3
 8001d98:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 ff1f 	bl	8004bf6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	687e      	ldr	r6, [r7, #4]
 8001dc0:	466d      	mov	r5, sp
 8001dc2:	f106 0410 	add.w	r4, r6, #16
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dd6:	1d33      	adds	r3, r6, #4
 8001dd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dda:	6838      	ldr	r0, [r7, #0]
 8001ddc:	f002 fe99 	bl	8004b12 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 ff16 	bl	8004c18 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	603b      	str	r3, [r7, #0]
 8001df2:	687e      	ldr	r6, [r7, #4]
 8001df4:	466d      	mov	r5, sp
 8001df6:	f106 0410 	add.w	r4, r6, #16
 8001dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e0a:	1d33      	adds	r3, r6, #4
 8001e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0e:	6838      	ldr	r0, [r7, #0]
 8001e10:	f003 f89e 	bl	8004f50 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e26 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e26:	b590      	push	{r4, r7, lr}
 8001e28:	b089      	sub	sp, #36	; 0x24
 8001e2a:	af04      	add	r7, sp, #16
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	4608      	mov	r0, r1
 8001e30:	4611      	mov	r1, r2
 8001e32:	461a      	mov	r2, r3
 8001e34:	4603      	mov	r3, r0
 8001e36:	70fb      	strb	r3, [r7, #3]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70bb      	strb	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_HCD_HC_Init+0x28>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e076      	b.n	8001f3c <HAL_HCD_HC_Init+0x116>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e56:	78fb      	ldrb	r3, [r7, #3]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	212c      	movs	r1, #44	; 0x2c
 8001e5c:	fb01 f303 	mul.w	r3, r1, r3
 8001e60:	4413      	add	r3, r2
 8001e62:	333d      	adds	r3, #61	; 0x3d
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e68:	78fb      	ldrb	r3, [r7, #3]
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3338      	adds	r3, #56	; 0x38
 8001e76:	787a      	ldrb	r2, [r7, #1]
 8001e78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001e7a:	78fb      	ldrb	r3, [r7, #3]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	212c      	movs	r1, #44	; 0x2c
 8001e80:	fb01 f303 	mul.w	r3, r1, r3
 8001e84:	4413      	add	r3, r2
 8001e86:	3340      	adds	r3, #64	; 0x40
 8001e88:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e8a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	212c      	movs	r1, #44	; 0x2c
 8001e92:	fb01 f303 	mul.w	r3, r1, r3
 8001e96:	4413      	add	r3, r2
 8001e98:	3339      	adds	r3, #57	; 0x39
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	333f      	adds	r3, #63	; 0x3f
 8001eac:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001eb0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	78ba      	ldrb	r2, [r7, #2]
 8001eb6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001eba:	b2d0      	uxtb	r0, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	212c      	movs	r1, #44	; 0x2c
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	333a      	adds	r3, #58	; 0x3a
 8001ec8:	4602      	mov	r2, r0
 8001eca:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ecc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da09      	bge.n	8001ee8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ed4:	78fb      	ldrb	r3, [r7, #3]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	212c      	movs	r1, #44	; 0x2c
 8001eda:	fb01 f303 	mul.w	r3, r1, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	333b      	adds	r3, #59	; 0x3b
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	e008      	b.n	8001efa <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	333b      	adds	r3, #59	; 0x3b
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001efa:	78fb      	ldrb	r3, [r7, #3]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	212c      	movs	r1, #44	; 0x2c
 8001f00:	fb01 f303 	mul.w	r3, r1, r3
 8001f04:	4413      	add	r3, r2
 8001f06:	333c      	adds	r3, #60	; 0x3c
 8001f08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f0c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	787c      	ldrb	r4, [r7, #1]
 8001f14:	78ba      	ldrb	r2, [r7, #2]
 8001f16:	78f9      	ldrb	r1, [r7, #3]
 8001f18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f20:	9301      	str	r3, [sp, #4]
 8001f22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f26:	9300      	str	r3, [sp, #0]
 8001f28:	4623      	mov	r3, r4
 8001f2a:	f003 f997 	bl	800525c <USB_HC_Init>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd90      	pop	{r4, r7, pc}

08001f44 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_HCD_HC_Halt+0x1e>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e00f      	b.n	8001f82 <HAL_HCD_HC_Halt+0x3e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 fbe7 	bl	8005746 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
	...

08001f8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	4608      	mov	r0, r1
 8001f96:	4611      	mov	r1, r2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	70fb      	strb	r3, [r7, #3]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	70bb      	strb	r3, [r7, #2]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	333b      	adds	r3, #59	; 0x3b
 8001fb4:	78ba      	ldrb	r2, [r7, #2]
 8001fb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	212c      	movs	r1, #44	; 0x2c
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	333f      	adds	r3, #63	; 0x3f
 8001fc6:	787a      	ldrb	r2, [r7, #1]
 8001fc8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fca:	7c3b      	ldrb	r3, [r7, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d112      	bne.n	8001ff6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3342      	adds	r3, #66	; 0x42
 8001fde:	2203      	movs	r2, #3
 8001fe0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	333d      	adds	r3, #61	; 0x3d
 8001ff0:	7f3a      	ldrb	r2, [r7, #28]
 8001ff2:	701a      	strb	r2, [r3, #0]
 8001ff4:	e008      	b.n	8002008 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	3342      	adds	r3, #66	; 0x42
 8002004:	2202      	movs	r2, #2
 8002006:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b03      	cmp	r3, #3
 800200c:	f200 80c6 	bhi.w	800219c <HAL_HCD_HC_SubmitRequest+0x210>
 8002010:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	08002029 	.word	0x08002029
 800201c:	08002189 	.word	0x08002189
 8002020:	0800208d 	.word	0x0800208d
 8002024:	0800210b 	.word	0x0800210b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002028:	7c3b      	ldrb	r3, [r7, #16]
 800202a:	2b01      	cmp	r3, #1
 800202c:	f040 80b8 	bne.w	80021a0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002030:	78bb      	ldrb	r3, [r7, #2]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f040 80b4 	bne.w	80021a0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002038:	8b3b      	ldrh	r3, [r7, #24]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d108      	bne.n	8002050 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	212c      	movs	r1, #44	; 0x2c
 8002044:	fb01 f303 	mul.w	r3, r1, r3
 8002048:	4413      	add	r3, r2
 800204a:	3355      	adds	r3, #85	; 0x55
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	212c      	movs	r1, #44	; 0x2c
 8002056:	fb01 f303 	mul.w	r3, r1, r3
 800205a:	4413      	add	r3, r2
 800205c:	3355      	adds	r3, #85	; 0x55
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	3342      	adds	r3, #66	; 0x42
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002076:	e093      	b.n	80021a0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	212c      	movs	r1, #44	; 0x2c
 800207e:	fb01 f303 	mul.w	r3, r1, r3
 8002082:	4413      	add	r3, r2
 8002084:	3342      	adds	r3, #66	; 0x42
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
      break;
 800208a:	e089      	b.n	80021a0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800208c:	78bb      	ldrb	r3, [r7, #2]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11d      	bne.n	80020ce <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3355      	adds	r3, #85	; 0x55
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3342      	adds	r3, #66	; 0x42
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80020b8:	e073      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	212c      	movs	r1, #44	; 0x2c
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	4413      	add	r3, r2
 80020c6:	3342      	adds	r3, #66	; 0x42
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
      break;
 80020cc:	e069      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	212c      	movs	r1, #44	; 0x2c
 80020d4:	fb01 f303 	mul.w	r3, r1, r3
 80020d8:	4413      	add	r3, r2
 80020da:	3354      	adds	r3, #84	; 0x54
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d109      	bne.n	80020f6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	212c      	movs	r1, #44	; 0x2c
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	3342      	adds	r3, #66	; 0x42
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
      break;
 80020f4:	e055      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	212c      	movs	r1, #44	; 0x2c
 80020fc:	fb01 f303 	mul.w	r3, r1, r3
 8002100:	4413      	add	r3, r2
 8002102:	3342      	adds	r3, #66	; 0x42
 8002104:	2202      	movs	r2, #2
 8002106:	701a      	strb	r2, [r3, #0]
      break;
 8002108:	e04b      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800210a:	78bb      	ldrb	r3, [r7, #2]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d11d      	bne.n	800214c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3355      	adds	r3, #85	; 0x55
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d109      	bne.n	8002138 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3342      	adds	r3, #66	; 0x42
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002136:	e034      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3342      	adds	r3, #66	; 0x42
 8002146:	2202      	movs	r2, #2
 8002148:	701a      	strb	r2, [r3, #0]
      break;
 800214a:	e02a      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3354      	adds	r3, #84	; 0x54
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d109      	bne.n	8002174 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3342      	adds	r3, #66	; 0x42
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
      break;
 8002172:	e016      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3342      	adds	r3, #66	; 0x42
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
      break;
 8002186:	e00c      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002188:	78fb      	ldrb	r3, [r7, #3]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3342      	adds	r3, #66	; 0x42
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
      break;
 800219a:	e002      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800219c:	bf00      	nop
 800219e:	e000      	b.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80021a0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3344      	adds	r3, #68	; 0x44
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	8b3a      	ldrh	r2, [r7, #24]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	202c      	movs	r0, #44	; 0x2c
 80021bc:	fb00 f303 	mul.w	r3, r0, r3
 80021c0:	440b      	add	r3, r1
 80021c2:	334c      	adds	r3, #76	; 0x4c
 80021c4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	212c      	movs	r1, #44	; 0x2c
 80021cc:	fb01 f303 	mul.w	r3, r1, r3
 80021d0:	4413      	add	r3, r2
 80021d2:	3360      	adds	r3, #96	; 0x60
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	3350      	adds	r3, #80	; 0x50
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	212c      	movs	r1, #44	; 0x2c
 80021f0:	fb01 f303 	mul.w	r3, r1, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	3339      	adds	r3, #57	; 0x39
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3361      	adds	r3, #97	; 0x61
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	222c      	movs	r2, #44	; 0x2c
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	3338      	adds	r3, #56	; 0x38
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	18d1      	adds	r1, r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	f003 f93a 	bl	80054a0 <USB_HC_StartXfer>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fe3b 	bl	8004eca <USB_GetMode>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	f040 80f6 	bne.w	8002448 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f002 fe1f 	bl	8004ea4 <USB_ReadInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80ec 	beq.w	8002446 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f002 fe16 	bl	8004ea4 <USB_ReadInterrupts>
 8002278:	4603      	mov	r3, r0
 800227a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002282:	d104      	bne.n	800228e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800228c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f002 fe06 	bl	8004ea4 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022a2:	d104      	bne.n	80022ae <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f002 fdf6 	bl	8004ea4 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c2:	d104      	bne.n	80022ce <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80022cc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fde6 	bl	8004ea4 <USB_ReadInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d103      	bne.n	80022ea <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2202      	movs	r2, #2
 80022e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 fdd8 	bl	8004ea4 <USB_ReadInterrupts>
 80022f4:	4603      	mov	r3, r0
 80022f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022fe:	d11c      	bne.n	800233a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002308:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800231a:	2110      	movs	r1, #16
 800231c:	6938      	ldr	r0, [r7, #16]
 800231e:	f002 fcc7 	bl	8004cb0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002322:	6938      	ldr	r0, [r7, #16]
 8002324:	f002 fcf8 	bl	8004d18 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fece 	bl	80050d0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f005 fc9b 	bl	8007c70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f002 fdb0 	bl	8004ea4 <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800234a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234e:	d102      	bne.n	8002356 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f001 f89e 	bl	8003492 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f002 fda2 	bl	8004ea4 <USB_ReadInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b08      	cmp	r3, #8
 8002368:	d106      	bne.n	8002378 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f005 fc64 	bl	8007c38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2208      	movs	r2, #8
 8002376:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fd91 	bl	8004ea4 <USB_ReadInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b10      	cmp	r3, #16
 800238a:	d101      	bne.n	8002390 <HAL_HCD_IRQHandler+0x158>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_HCD_IRQHandler+0x15a>
 8002390:	2300      	movs	r3, #0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d012      	beq.n	80023bc <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699a      	ldr	r2, [r3, #24]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0210 	bic.w	r2, r2, #16
 80023a4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 ffa1 	bl	80032ee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0210 	orr.w	r2, r2, #16
 80023ba:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fd6f 	bl	8004ea4 <USB_ReadInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80023d0:	d13a      	bne.n	8002448 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f003 f9a4 	bl	8005724 <USB_HC_ReadInterrupt>
 80023dc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	e025      	b.n	8002430 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d018      	beq.n	800242a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800240e:	d106      	bne.n	800241e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f8ab 	bl	8002572 <HCD_HC_IN_IRQHandler>
 800241c:	e005      	b.n	800242a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	b2db      	uxtb	r3, r3
 8002422:	4619      	mov	r1, r3
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fbf9 	bl	8002c1c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	3301      	adds	r3, #1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	429a      	cmp	r2, r3
 8002438:	d3d4      	bcc.n	80023e4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002442:	615a      	str	r2, [r3, #20]
 8002444:	e000      	b.n	8002448 <HAL_HCD_IRQHandler+0x210>
      return;
 8002446:	bf00      	nop
    }
  }
}
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_HCD_Start+0x16>
 8002460:	2302      	movs	r3, #2
 8002462:	e013      	b.n	800248c <HAL_HCD_Start+0x3e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2101      	movs	r1, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f002 fe90 	bl	8005198 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f002 fba9 	bl	8004bd4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_HCD_Stop+0x16>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e00d      	b.n	80024c6 <HAL_HCD_Stop+0x32>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f003 fa7e 	bl	80059b8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f002 fe32 	bl	8005144 <USB_ResetPort>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
 80024f2:	460b      	mov	r3, r1
 80024f4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024f6:	78fb      	ldrb	r3, [r7, #3]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	212c      	movs	r1, #44	; 0x2c
 80024fc:	fb01 f303 	mul.w	r3, r1, r3
 8002500:	4413      	add	r3, r2
 8002502:	3360      	adds	r3, #96	; 0x60
 8002504:	781b      	ldrb	r3, [r3, #0]
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	212c      	movs	r1, #44	; 0x2c
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	4413      	add	r3, r2
 800252a:	3350      	adds	r3, #80	; 0x50
 800252c:	681b      	ldr	r3, [r3, #0]
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fe76 	bl	8005238 <USB_GetCurrentFrame>
 800254c:	4603      	mov	r3, r0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f002 fe51 	bl	800520a <USB_GetHostSpeed>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4413      	add	r3, r2
 8002594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d11a      	bne.n	80025d8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	461a      	mov	r2, r3
 80025b0:	2304      	movs	r3, #4
 80025b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3361      	adds	r3, #97	; 0x61
 80025c2:	2206      	movs	r2, #6
 80025c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f003 f8b8 	bl	8005746 <USB_HC_Halt>
 80025d6:	e0af      	b.n	8002738 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	015a      	lsls	r2, r3, #5
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4413      	add	r3, r2
 80025e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ee:	d11b      	bne.n	8002628 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	461a      	mov	r2, r3
 80025fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002602:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3361      	adds	r3, #97	; 0x61
 8002612:	2207      	movs	r2, #7
 8002614:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	b2d2      	uxtb	r2, r2
 800261e:	4611      	mov	r1, r2
 8002620:	4618      	mov	r0, r3
 8002622:	f003 f890 	bl	8005746 <USB_HC_Halt>
 8002626:	e087      	b.n	8002738 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b20      	cmp	r3, #32
 800263c:	d109      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800264a:	461a      	mov	r2, r3
 800264c:	2320      	movs	r3, #32
 800264e:	6093      	str	r3, [r2, #8]
 8002650:	e072      	b.n	8002738 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0308 	and.w	r3, r3, #8
 8002664:	2b08      	cmp	r3, #8
 8002666:	d11a      	bne.n	800269e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2308      	movs	r3, #8
 8002678:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	212c      	movs	r1, #44	; 0x2c
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	3361      	adds	r3, #97	; 0x61
 8002688:	2205      	movs	r2, #5
 800268a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	4611      	mov	r1, r2
 8002696:	4618      	mov	r0, r3
 8002698:	f003 f855 	bl	8005746 <USB_HC_Halt>
 800269c:	e04c      	b.n	8002738 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	015a      	lsls	r2, r3, #5
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4413      	add	r3, r2
 80026a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d11b      	bne.n	80026ee <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	015a      	lsls	r2, r3, #5
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4413      	add	r3, r2
 80026be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c2:	461a      	mov	r2, r3
 80026c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	212c      	movs	r1, #44	; 0x2c
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	3361      	adds	r3, #97	; 0x61
 80026d8:	2208      	movs	r2, #8
 80026da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 f82d 	bl	8005746 <USB_HC_Halt>
 80026ec:	e024      	b.n	8002738 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	015a      	lsls	r2, r3, #5
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4413      	add	r3, r2
 80026f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002700:	2b80      	cmp	r3, #128	; 0x80
 8002702:	d119      	bne.n	8002738 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	4413      	add	r3, r2
 800270c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002710:	461a      	mov	r2, r3
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	212c      	movs	r1, #44	; 0x2c
 800271c:	fb01 f303 	mul.w	r3, r1, r3
 8002720:	4413      	add	r3, r2
 8002722:	3361      	adds	r3, #97	; 0x61
 8002724:	2206      	movs	r2, #6
 8002726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f003 f807 	bl	8005746 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800274e:	d112      	bne.n	8002776 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	4611      	mov	r1, r2
 800275a:	4618      	mov	r0, r3
 800275c:	f002 fff3 	bl	8005746 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002772:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002774:	e24e      	b.n	8002c14 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b01      	cmp	r3, #1
 800278a:	f040 80df 	bne.w	800294c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d019      	beq.n	80027ca <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3348      	adds	r3, #72	; 0x48
 80027a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	0159      	lsls	r1, r3, #5
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	202c      	movs	r0, #44	; 0x2c
 80027c0:	fb00 f303 	mul.w	r3, r0, r3
 80027c4:	440b      	add	r3, r1
 80027c6:	3350      	adds	r3, #80	; 0x50
 80027c8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3361      	adds	r3, #97	; 0x61
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	212c      	movs	r1, #44	; 0x2c
 80027e2:	fb01 f303 	mul.w	r3, r1, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	335c      	adds	r3, #92	; 0x5c
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	461a      	mov	r2, r3
 80027fc:	2301      	movs	r3, #1
 80027fe:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	333f      	adds	r3, #63	; 0x3f
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d009      	beq.n	8002828 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	333f      	adds	r3, #63	; 0x3f
 8002822:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002824:	2b02      	cmp	r3, #2
 8002826:	d111      	bne.n	800284c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f002 ff87 	bl	8005746 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	461a      	mov	r2, r3
 8002846:	2310      	movs	r3, #16
 8002848:	6093      	str	r3, [r2, #8]
 800284a:	e03a      	b.n	80028c2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	333f      	adds	r3, #63	; 0x3f
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d009      	beq.n	8002874 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	333f      	adds	r3, #63	; 0x3f
 800286e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002870:	2b01      	cmp	r3, #1
 8002872:	d126      	bne.n	80028c2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4413      	add	r3, r2
 800287c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	0151      	lsls	r1, r2, #5
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	440a      	add	r2, r1
 800288a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800288e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002892:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	212c      	movs	r1, #44	; 0x2c
 800289a:	fb01 f303 	mul.w	r3, r1, r3
 800289e:	4413      	add	r3, r2
 80028a0:	3360      	adds	r3, #96	; 0x60
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	b2d9      	uxtb	r1, r3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	202c      	movs	r0, #44	; 0x2c
 80028b0:	fb00 f303 	mul.w	r3, r0, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	3360      	adds	r3, #96	; 0x60
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	461a      	mov	r2, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f005 f9e5 	bl	8007c8c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d12b      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	212c      	movs	r1, #44	; 0x2c
 80028d0:	fb01 f303 	mul.w	r3, r1, r3
 80028d4:	4413      	add	r3, r2
 80028d6:	3348      	adds	r3, #72	; 0x48
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	202c      	movs	r0, #44	; 0x2c
 80028e0:	fb00 f202 	mul.w	r2, r0, r2
 80028e4:	440a      	add	r2, r1
 80028e6:	3240      	adds	r2, #64	; 0x40
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 818e 	beq.w	8002c14 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	3354      	adds	r3, #84	; 0x54
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	f083 0301 	eor.w	r3, r3, #1
 800290c:	b2d8      	uxtb	r0, r3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	212c      	movs	r1, #44	; 0x2c
 8002914:	fb01 f303 	mul.w	r3, r1, r3
 8002918:	4413      	add	r3, r2
 800291a:	3354      	adds	r3, #84	; 0x54
 800291c:	4602      	mov	r2, r0
 800291e:	701a      	strb	r2, [r3, #0]
}
 8002920:	e178      	b.n	8002c14 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	3354      	adds	r3, #84	; 0x54
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	f083 0301 	eor.w	r3, r3, #1
 8002936:	b2d8      	uxtb	r0, r3
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	212c      	movs	r1, #44	; 0x2c
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	3354      	adds	r3, #84	; 0x54
 8002946:	4602      	mov	r2, r0
 8002948:	701a      	strb	r2, [r3, #0]
}
 800294a:	e163      	b.n	8002c14 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4413      	add	r3, r2
 8002954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b02      	cmp	r3, #2
 8002960:	f040 80f6 	bne.w	8002b50 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d109      	bne.n	800298c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	212c      	movs	r1, #44	; 0x2c
 800297e:	fb01 f303 	mul.w	r3, r1, r3
 8002982:	4413      	add	r3, r2
 8002984:	3360      	adds	r3, #96	; 0x60
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e0c9      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3361      	adds	r3, #97	; 0x61
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b05      	cmp	r3, #5
 800299e:	d109      	bne.n	80029b4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	2205      	movs	r2, #5
 80029b0:	701a      	strb	r2, [r3, #0]
 80029b2:	e0b5      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	212c      	movs	r1, #44	; 0x2c
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	4413      	add	r3, r2
 80029c0:	3361      	adds	r3, #97	; 0x61
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d009      	beq.n	80029dc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3361      	adds	r3, #97	; 0x61
 80029d6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d150      	bne.n	8002a7e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	335c      	adds	r3, #92	; 0x5c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	202c      	movs	r0, #44	; 0x2c
 80029f4:	fb00 f303 	mul.w	r3, r0, r3
 80029f8:	440b      	add	r3, r1
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	212c      	movs	r1, #44	; 0x2c
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	335c      	adds	r3, #92	; 0x5c
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d912      	bls.n	8002a38 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	212c      	movs	r1, #44	; 0x2c
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	335c      	adds	r3, #92	; 0x5c
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	2204      	movs	r2, #4
 8002a34:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a36:	e073      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3360      	adds	r3, #96	; 0x60
 8002a46:	2202      	movs	r2, #2
 8002a48:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	015a      	lsls	r2, r3, #5
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4413      	add	r3, r2
 8002a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a60:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a68:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	015a      	lsls	r2, r3, #5
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a7c:	e050      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3361      	adds	r3, #97	; 0x61
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	d122      	bne.n	8002ad8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	212c      	movs	r1, #44	; 0x2c
 8002a98:	fb01 f303 	mul.w	r3, r1, r3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3360      	adds	r3, #96	; 0x60
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002aba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6013      	str	r3, [r2, #0]
 8002ad6:	e023      	b.n	8002b20 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	212c      	movs	r1, #44	; 0x2c
 8002ade:	fb01 f303 	mul.w	r3, r1, r3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	3361      	adds	r3, #97	; 0x61
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b07      	cmp	r3, #7
 8002aea:	d119      	bne.n	8002b20 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	335c      	adds	r3, #92	; 0x5c
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	202c      	movs	r0, #44	; 0x2c
 8002b04:	fb00 f303 	mul.w	r3, r0, r3
 8002b08:	440b      	add	r3, r1
 8002b0a:	335c      	adds	r3, #92	; 0x5c
 8002b0c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	212c      	movs	r1, #44	; 0x2c
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	3360      	adds	r3, #96	; 0x60
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	2302      	movs	r3, #2
 8002b30:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	b2d9      	uxtb	r1, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	202c      	movs	r0, #44	; 0x2c
 8002b3c:	fb00 f303 	mul.w	r3, r0, r3
 8002b40:	4413      	add	r3, r2
 8002b42:	3360      	adds	r3, #96	; 0x60
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f005 f89f 	bl	8007c8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b4e:	e061      	b.n	8002c14 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d156      	bne.n	8002c14 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	333f      	adds	r3, #63	; 0x3f
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d111      	bne.n	8002b9e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	335c      	adds	r3, #92	; 0x5c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	4611      	mov	r1, r2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fdd5 	bl	8005746 <USB_HC_Halt>
 8002b9c:	e031      	b.n	8002c02 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	333f      	adds	r3, #63	; 0x3f
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	333f      	adds	r3, #63	; 0x3f
 8002bc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d11d      	bne.n	8002c02 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	335c      	adds	r3, #92	; 0x5c
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d110      	bne.n	8002c02 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3361      	adds	r3, #97	; 0x61
 8002bee:	2203      	movs	r2, #3
 8002bf0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f002 fda2 	bl	8005746 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2310      	movs	r3, #16
 8002c12:	6093      	str	r3, [r2, #8]
}
 8002c14:	bf00      	nop
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d11a      	bne.n	8002c82 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	015a      	lsls	r2, r3, #5
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	4413      	add	r3, r2
 8002c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c58:	461a      	mov	r2, r3
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3361      	adds	r3, #97	; 0x61
 8002c6c:	2206      	movs	r2, #6
 8002c6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fd63 	bl	8005746 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002c80:	e331      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0320 	and.w	r3, r3, #32
 8002c94:	2b20      	cmp	r3, #32
 8002c96:	d12e      	bne.n	8002cf6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	333d      	adds	r3, #61	; 0x3d
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	f040 8313 	bne.w	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	333d      	adds	r3, #61	; 0x3d
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3360      	adds	r3, #96	; 0x60
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	b2d2      	uxtb	r2, r2
 8002cec:	4611      	mov	r1, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f002 fd29 	bl	8005746 <USB_HC_Halt>
}
 8002cf4:	e2f7      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0c:	d112      	bne.n	8002d34 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d20:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fd0a 	bl	8005746 <USB_HC_Halt>
}
 8002d32:	e2d8      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d140      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	212c      	movs	r1, #44	; 0x2c
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	335c      	adds	r3, #92	; 0x5c
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d111      	bne.n	8002d96 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	333d      	adds	r3, #61	; 0x3d
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d90:	461a      	mov	r2, r3
 8002d92:	2340      	movs	r3, #64	; 0x40
 8002d94:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2301      	movs	r3, #1
 8002da6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	212c      	movs	r1, #44	; 0x2c
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	4413      	add	r3, r2
 8002db4:	3361      	adds	r3, #97	; 0x61
 8002db6:	2201      	movs	r2, #1
 8002db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 fcbe 	bl	8005746 <USB_HC_Halt>
}
 8002dca:	e28c      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dde:	2b40      	cmp	r3, #64	; 0x40
 8002de0:	d12c      	bne.n	8002e3c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3361      	adds	r3, #97	; 0x61
 8002df0:	2204      	movs	r2, #4
 8002df2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	212c      	movs	r1, #44	; 0x2c
 8002dfa:	fb01 f303 	mul.w	r3, r1, r3
 8002dfe:	4413      	add	r3, r2
 8002e00:	333d      	adds	r3, #61	; 0x3d
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	212c      	movs	r1, #44	; 0x2c
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	4413      	add	r3, r2
 8002e12:	335c      	adds	r3, #92	; 0x5c
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f002 fc8f 	bl	8005746 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2340      	movs	r3, #64	; 0x40
 8002e38:	6093      	str	r3, [r2, #8]
}
 8002e3a:	e254      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b08      	cmp	r3, #8
 8002e50:	d11a      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2308      	movs	r3, #8
 8002e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	212c      	movs	r1, #44	; 0x2c
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	3361      	adds	r3, #97	; 0x61
 8002e72:	2205      	movs	r2, #5
 8002e74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fc60 	bl	8005746 <USB_HC_Halt>
}
 8002e86:	e22e      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0310 	and.w	r3, r3, #16
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d140      	bne.n	8002f20 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	335c      	adds	r3, #92	; 0x5c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	212c      	movs	r1, #44	; 0x2c
 8002eb6:	fb01 f303 	mul.w	r3, r1, r3
 8002eba:	4413      	add	r3, r2
 8002ebc:	3361      	adds	r3, #97	; 0x61
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	212c      	movs	r1, #44	; 0x2c
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	4413      	add	r3, r2
 8002ece:	333d      	adds	r3, #61	; 0x3d
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d112      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	212c      	movs	r1, #44	; 0x2c
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	333c      	adds	r3, #60	; 0x3c
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	212c      	movs	r1, #44	; 0x2c
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	333d      	adds	r3, #61	; 0x3d
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fc1d 	bl	8005746 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	015a      	lsls	r2, r3, #5
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	4413      	add	r3, r2
 8002f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f18:	461a      	mov	r2, r3
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	6093      	str	r3, [r2, #8]
}
 8002f1e:	e1e2      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d164      	bne.n	8003000 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d111      	bne.n	8002f62 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	212c      	movs	r1, #44	; 0x2c
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3361      	adds	r3, #97	; 0x61
 8002f4c:	2206      	movs	r2, #6
 8002f4e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fbf3 	bl	8005746 <USB_HC_Halt>
 8002f60:	e044      	b.n	8002fec <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	212c      	movs	r1, #44	; 0x2c
 8002f68:	fb01 f303 	mul.w	r3, r1, r3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	335c      	adds	r3, #92	; 0x5c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	202c      	movs	r0, #44	; 0x2c
 8002f7a:	fb00 f303 	mul.w	r3, r0, r3
 8002f7e:	440b      	add	r3, r1
 8002f80:	335c      	adds	r3, #92	; 0x5c
 8002f82:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	335c      	adds	r3, #92	; 0x5c
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d920      	bls.n	8002fda <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	335c      	adds	r3, #92	; 0x5c
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3360      	adds	r3, #96	; 0x60
 8002fb8:	2204      	movs	r2, #4
 8002fba:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	b2d9      	uxtb	r1, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	202c      	movs	r0, #44	; 0x2c
 8002fc6:	fb00 f303 	mul.w	r3, r0, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	3360      	adds	r3, #96	; 0x60
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f004 fe5a 	bl	8007c8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fd8:	e008      	b.n	8002fec <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	212c      	movs	r1, #44	; 0x2c
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3360      	adds	r3, #96	; 0x60
 8002fe8:	2202      	movs	r2, #2
 8002fea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	015a      	lsls	r2, r3, #5
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	6093      	str	r3, [r2, #8]
}
 8002ffe:	e172      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003016:	d11b      	bne.n	8003050 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3361      	adds	r3, #97	; 0x61
 8003026:	2208      	movs	r2, #8
 8003028:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f002 fb86 	bl	8005746 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4413      	add	r3, r2
 8003042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003046:	461a      	mov	r2, r3
 8003048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800304c:	6093      	str	r3, [r2, #8]
}
 800304e:	e14a      	b.n	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	f040 813f 	bne.w	80032e6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	212c      	movs	r1, #44	; 0x2c
 800306e:	fb01 f303 	mul.w	r3, r1, r3
 8003072:	4413      	add	r3, r2
 8003074:	3361      	adds	r3, #97	; 0x61
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d17d      	bne.n	8003178 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	212c      	movs	r1, #44	; 0x2c
 8003082:	fb01 f303 	mul.w	r3, r1, r3
 8003086:	4413      	add	r3, r2
 8003088:	3360      	adds	r3, #96	; 0x60
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	212c      	movs	r1, #44	; 0x2c
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	333f      	adds	r3, #63	; 0x3f
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d00a      	beq.n	80030b8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	212c      	movs	r1, #44	; 0x2c
 80030a8:	fb01 f303 	mul.w	r3, r1, r3
 80030ac:	4413      	add	r3, r2
 80030ae:	333f      	adds	r3, #63	; 0x3f
 80030b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	f040 8100 	bne.w	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d113      	bne.n	80030e8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	212c      	movs	r1, #44	; 0x2c
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	3355      	adds	r3, #85	; 0x55
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	f083 0301 	eor.w	r3, r3, #1
 80030d4:	b2d8      	uxtb	r0, r3
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	3355      	adds	r3, #85	; 0x55
 80030e4:	4602      	mov	r2, r0
 80030e6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 80e3 	bne.w	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	334c      	adds	r3, #76	; 0x4c
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80d8 	beq.w	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	334c      	adds	r3, #76	; 0x4c
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	202c      	movs	r0, #44	; 0x2c
 800311e:	fb00 f202 	mul.w	r2, r0, r2
 8003122:	440a      	add	r2, r1
 8003124:	3240      	adds	r2, #64	; 0x40
 8003126:	8812      	ldrh	r2, [r2, #0]
 8003128:	4413      	add	r3, r2
 800312a:	3b01      	subs	r3, #1
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	202c      	movs	r0, #44	; 0x2c
 8003132:	fb00 f202 	mul.w	r2, r0, r2
 8003136:	440a      	add	r2, r1
 8003138:	3240      	adds	r2, #64	; 0x40
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80b5 	beq.w	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	3355      	adds	r3, #85	; 0x55
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2d8      	uxtb	r0, r3
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	3355      	adds	r3, #85	; 0x55
 8003172:	4602      	mov	r2, r0
 8003174:	701a      	strb	r2, [r3, #0]
 8003176:	e09f      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	212c      	movs	r1, #44	; 0x2c
 800317e:	fb01 f303 	mul.w	r3, r1, r3
 8003182:	4413      	add	r3, r2
 8003184:	3361      	adds	r3, #97	; 0x61
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d109      	bne.n	80031a0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	212c      	movs	r1, #44	; 0x2c
 8003192:	fb01 f303 	mul.w	r3, r1, r3
 8003196:	4413      	add	r3, r2
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	2202      	movs	r2, #2
 800319c:	701a      	strb	r2, [r3, #0]
 800319e:	e08b      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3361      	adds	r3, #97	; 0x61
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d109      	bne.n	80031c8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3360      	adds	r3, #96	; 0x60
 80031c2:	2202      	movs	r2, #2
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e077      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	212c      	movs	r1, #44	; 0x2c
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3361      	adds	r3, #97	; 0x61
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d109      	bne.n	80031f0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	212c      	movs	r1, #44	; 0x2c
 80031e2:	fb01 f303 	mul.w	r3, r1, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	3360      	adds	r3, #96	; 0x60
 80031ea:	2205      	movs	r2, #5
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e063      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3361      	adds	r3, #97	; 0x61
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b06      	cmp	r3, #6
 8003202:	d009      	beq.n	8003218 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3361      	adds	r3, #97	; 0x61
 8003212:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003214:	2b08      	cmp	r3, #8
 8003216:	d14f      	bne.n	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	212c      	movs	r1, #44	; 0x2c
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	4413      	add	r3, r2
 8003224:	335c      	adds	r3, #92	; 0x5c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	202c      	movs	r0, #44	; 0x2c
 8003230:	fb00 f303 	mul.w	r3, r0, r3
 8003234:	440b      	add	r3, r1
 8003236:	335c      	adds	r3, #92	; 0x5c
 8003238:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	335c      	adds	r3, #92	; 0x5c
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d912      	bls.n	8003274 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	212c      	movs	r1, #44	; 0x2c
 8003254:	fb01 f303 	mul.w	r3, r1, r3
 8003258:	4413      	add	r3, r2
 800325a:	335c      	adds	r3, #92	; 0x5c
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3360      	adds	r3, #96	; 0x60
 800326e:	2204      	movs	r2, #4
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e021      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3360      	adds	r3, #96	; 0x60
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800329c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032a4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	461a      	mov	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	461a      	mov	r2, r3
 80032c6:	2302      	movs	r3, #2
 80032c8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	b2d9      	uxtb	r1, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	202c      	movs	r0, #44	; 0x2c
 80032d4:	fb00 f303 	mul.w	r3, r0, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3360      	adds	r3, #96	; 0x60
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f004 fcd3 	bl	8007c8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80032e6:	bf00      	nop
 80032e8:	3720      	adds	r7, #32
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b08a      	sub	sp, #40	; 0x28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	0c5b      	lsrs	r3, r3, #17
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003322:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d004      	beq.n	8003334 <HCD_RXQLVL_IRQHandler+0x46>
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b05      	cmp	r3, #5
 800332e:	f000 80a9 	beq.w	8003484 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003332:	e0aa      	b.n	800348a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	f000 80a6 	beq.w	8003488 <HCD_RXQLVL_IRQHandler+0x19a>
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	212c      	movs	r1, #44	; 0x2c
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	3344      	adds	r3, #68	; 0x44
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 809b 	beq.w	8003488 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3350      	adds	r3, #80	; 0x50
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	441a      	add	r2, r3
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	202c      	movs	r0, #44	; 0x2c
 800336c:	fb00 f303 	mul.w	r3, r0, r3
 8003370:	440b      	add	r3, r1
 8003372:	334c      	adds	r3, #76	; 0x4c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d87a      	bhi.n	8003470 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	3344      	adds	r3, #68	; 0x44
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	b292      	uxth	r2, r2
 8003392:	4619      	mov	r1, r3
 8003394:	f001 fd2e 	bl	8004df4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	212c      	movs	r1, #44	; 0x2c
 800339e:	fb01 f303 	mul.w	r3, r1, r3
 80033a2:	4413      	add	r3, r2
 80033a4:	3344      	adds	r3, #68	; 0x44
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	441a      	add	r2, r3
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	202c      	movs	r0, #44	; 0x2c
 80033b2:	fb00 f303 	mul.w	r3, r0, r3
 80033b6:	440b      	add	r3, r1
 80033b8:	3344      	adds	r3, #68	; 0x44
 80033ba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3350      	adds	r3, #80	; 0x50
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	441a      	add	r2, r3
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	202c      	movs	r0, #44	; 0x2c
 80033d6:	fb00 f303 	mul.w	r3, r0, r3
 80033da:	440b      	add	r3, r1
 80033dc:	3350      	adds	r3, #80	; 0x50
 80033de:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	0cdb      	lsrs	r3, r3, #19
 80033f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	3340      	adds	r3, #64	; 0x40
 8003404:	881b      	ldrh	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4293      	cmp	r3, r2
 800340c:	d13c      	bne.n	8003488 <HCD_RXQLVL_IRQHandler+0x19a>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d039      	beq.n	8003488 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800342a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003432:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003440:	461a      	mov	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	3354      	adds	r3, #84	; 0x54
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	b2d8      	uxtb	r0, r3
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	212c      	movs	r1, #44	; 0x2c
 8003462:	fb01 f303 	mul.w	r3, r1, r3
 8003466:	4413      	add	r3, r2
 8003468:	3354      	adds	r3, #84	; 0x54
 800346a:	4602      	mov	r2, r0
 800346c:	701a      	strb	r2, [r3, #0]
      break;
 800346e:	e00b      	b.n	8003488 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	212c      	movs	r1, #44	; 0x2c
 8003476:	fb01 f303 	mul.w	r3, r1, r3
 800347a:	4413      	add	r3, r2
 800347c:	3360      	adds	r3, #96	; 0x60
 800347e:	2204      	movs	r2, #4
 8003480:	701a      	strb	r2, [r3, #0]
      break;
 8003482:	e001      	b.n	8003488 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003484:	bf00      	nop
 8003486:	e000      	b.n	800348a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003488:	bf00      	nop
  }
}
 800348a:	bf00      	nop
 800348c:	3728      	adds	r7, #40	; 0x28
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b086      	sub	sp, #24
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80034be:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d10b      	bne.n	80034e2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d102      	bne.n	80034da <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f004 fbbd 	bl	8007c54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f043 0302 	orr.w	r3, r3, #2
 80034e0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d132      	bne.n	8003552 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f043 0308 	orr.w	r3, r3, #8
 80034f2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d126      	bne.n	800354c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d113      	bne.n	800352e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800350c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003510:	d106      	bne.n	8003520 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2102      	movs	r1, #2
 8003518:	4618      	mov	r0, r3
 800351a:	f001 fdd9 	bl	80050d0 <USB_InitFSLSPClkSel>
 800351e:	e011      	b.n	8003544 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2101      	movs	r1, #1
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fdd2 	bl	80050d0 <USB_InitFSLSPClkSel>
 800352c:	e00a      	b.n	8003544 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d106      	bne.n	8003544 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800353c:	461a      	mov	r2, r3
 800353e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003542:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f004 fbaf 	bl	8007ca8 <HAL_HCD_PortEnabled_Callback>
 800354a:	e002      	b.n	8003552 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f004 fbb9 	bl	8007cc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b20      	cmp	r3, #32
 800355a:	d103      	bne.n	8003564 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	f043 0320 	orr.w	r3, r3, #32
 8003562:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6013      	str	r3, [r2, #0]
}
 8003570:	bf00      	nop
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e128      	b.n	80037dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a90      	ldr	r2, [pc, #576]	; (80037e4 <HAL_I2S_Init+0x26c>)
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7fd f97f 	bl	80008a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2202      	movs	r2, #2
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035c0:	f023 030f 	bic.w	r3, r3, #15
 80035c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2202      	movs	r2, #2
 80035cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d060      	beq.n	8003698 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80035de:	2310      	movs	r3, #16
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e001      	b.n	80035e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b20      	cmp	r3, #32
 80035ee:	d802      	bhi.n	80035f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80035f6:	2001      	movs	r0, #1
 80035f8:	f001 f9a4 	bl	8004944 <HAL_RCCEx_GetPeriphCLKFreq>
 80035fc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003606:	d125      	bne.n	8003654 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	fbb2 f2f3 	udiv	r2, r2, r3
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	461a      	mov	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	3305      	adds	r3, #5
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	e01f      	b.n	8003672 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	fbb2 f2f3 	udiv	r2, r2, r3
 800363c:	4613      	mov	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	461a      	mov	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	3305      	adds	r3, #5
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e00e      	b.n	8003672 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	fbb2 f2f3 	udiv	r2, r2, r3
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	461a      	mov	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	fbb2 f3f3 	udiv	r3, r2, r3
 800366e:	3305      	adds	r3, #5
 8003670:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4a5c      	ldr	r2, [pc, #368]	; (80037e8 <HAL_I2S_Init+0x270>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	08db      	lsrs	r3, r3, #3
 800367c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	085b      	lsrs	r3, r3, #1
 800368e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	021b      	lsls	r3, r3, #8
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e003      	b.n	80036a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003698:	2302      	movs	r3, #2
 800369a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d902      	bls.n	80036ac <HAL_I2S_Init+0x134>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	2bff      	cmp	r3, #255	; 0xff
 80036aa:	d907      	bls.n	80036bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f043 0210 	orr.w	r2, r3, #16
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e08f      	b.n	80037dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	ea42 0103 	orr.w	r1, r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036da:	f023 030f 	bic.w	r3, r3, #15
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6851      	ldr	r1, [r2, #4]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6892      	ldr	r2, [r2, #8]
 80036e6:	4311      	orrs	r1, r2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	68d2      	ldr	r2, [r2, #12]
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6992      	ldr	r2, [r2, #24]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d161      	bne.n	80037cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a38      	ldr	r2, [pc, #224]	; (80037ec <HAL_I2S_Init+0x274>)
 800370c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a37      	ldr	r2, [pc, #220]	; (80037f0 <HAL_I2S_Init+0x278>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_I2S_Init+0x1a4>
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_I2S_Init+0x27c>)
 800371a:	e001      	b.n	8003720 <HAL_I2S_Init+0x1a8>
 800371c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	4932      	ldr	r1, [pc, #200]	; (80037f0 <HAL_I2S_Init+0x278>)
 8003728:	428a      	cmp	r2, r1
 800372a:	d101      	bne.n	8003730 <HAL_I2S_Init+0x1b8>
 800372c:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <HAL_I2S_Init+0x27c>)
 800372e:	e001      	b.n	8003734 <HAL_I2S_Init+0x1bc>
 8003730:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003734:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2b      	ldr	r2, [pc, #172]	; (80037f0 <HAL_I2S_Init+0x278>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_I2S_Init+0x1d4>
 8003748:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <HAL_I2S_Init+0x27c>)
 800374a:	e001      	b.n	8003750 <HAL_I2S_Init+0x1d8>
 800374c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003750:	2202      	movs	r2, #2
 8003752:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <HAL_I2S_Init+0x278>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_I2S_Init+0x1ea>
 800375e:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <HAL_I2S_Init+0x27c>)
 8003760:	e001      	b.n	8003766 <HAL_I2S_Init+0x1ee>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003772:	d003      	beq.n	800377c <HAL_I2S_Init+0x204>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d103      	bne.n	8003784 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800377c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	e001      	b.n	8003788 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003784:	2300      	movs	r3, #0
 8003786:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003792:	4313      	orrs	r3, r2
 8003794:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800379c:	4313      	orrs	r3, r2
 800379e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037a6:	4313      	orrs	r3, r2
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <HAL_I2S_Init+0x278>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_I2S_Init+0x24c>
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_I2S_Init+0x27c>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2S_Init+0x250>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	897a      	ldrh	r2, [r7, #10]
 80037ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	080038ef 	.word	0x080038ef
 80037e8:	cccccccd 	.word	0xcccccccd
 80037ec:	08003a05 	.word	0x08003a05
 80037f0:	40003800 	.word	0x40003800
 80037f4:	40003400 	.word	0x40003400

080037f8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10e      	bne.n	8003888 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003878:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ffb8 	bl	80037f8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	b292      	uxth	r2, r2
 80038a4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10e      	bne.n	80038e6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038d6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff93 	bl	800380c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b086      	sub	sp, #24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b04      	cmp	r3, #4
 8003908:	d13a      	bne.n	8003980 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b01      	cmp	r3, #1
 8003912:	d109      	bne.n	8003928 <I2S_IRQHandler+0x3a>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d102      	bne.n	8003928 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ffb4 	bl	8003890 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b40      	cmp	r3, #64	; 0x40
 8003930:	d126      	bne.n	8003980 <I2S_IRQHandler+0x92>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b20      	cmp	r3, #32
 800393e:	d11f      	bne.n	8003980 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800394e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff ff50 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b03      	cmp	r3, #3
 800398a:	d136      	bne.n	80039fa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b02      	cmp	r3, #2
 8003994:	d109      	bne.n	80039aa <I2S_IRQHandler+0xbc>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b80      	cmp	r3, #128	; 0x80
 80039a2:	d102      	bne.n	80039aa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f7ff ff45 	bl	8003834 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d122      	bne.n	80039fa <I2S_IRQHandler+0x10c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d11b      	bne.n	80039fa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff13 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a92      	ldr	r2, [pc, #584]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a1e:	4b92      	ldr	r3, [pc, #584]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a20:	e001      	b.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a8b      	ldr	r2, [pc, #556]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003a3c:	4b8a      	ldr	r3, [pc, #552]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a3e:	e001      	b.n	8003a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003a40:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a50:	d004      	beq.n	8003a5c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 8099 	bne.w	8003b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d107      	bne.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d002      	beq.n	8003a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f925 	bl	8003cc0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d107      	bne.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d002      	beq.n	8003a90 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f9c8 	bl	8003e20 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d13a      	bne.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d035      	beq.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6e      	ldr	r2, [pc, #440]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003aae:	4b6e      	ldr	r3, [pc, #440]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ab0:	e001      	b.n	8003ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4969      	ldr	r1, [pc, #420]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ac2:	4b69      	ldr	r3, [pc, #420]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ac4:	e001      	b.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ac6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ace:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ade:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fe88 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b08      	cmp	r3, #8
 8003b18:	f040 80c3 	bne.w	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 80bd 	beq.w	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a49      	ldr	r2, [pc, #292]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d101      	bne.n	8003b46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003b42:	4b49      	ldr	r3, [pc, #292]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b44:	e001      	b.n	8003b4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003b46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4944      	ldr	r1, [pc, #272]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b52:	428b      	cmp	r3, r1
 8003b54:	d101      	bne.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003b56:	4b44      	ldr	r3, [pc, #272]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b58:	e001      	b.n	8003b5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60bb      	str	r3, [r7, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	f043 0204 	orr.w	r2, r3, #4
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff fe4a 	bl	8003820 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b8c:	e089      	b.n	8003ca2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d107      	bne.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f8be 	bl	8003d24 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d107      	bne.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8fd 	bl	8003dbc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d12f      	bne.n	8003c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d02a      	beq.n	8003c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685a      	ldr	r2, [r3, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003be4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1e      	ldr	r2, [pc, #120]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003bf0:	4b1d      	ldr	r3, [pc, #116]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bf2:	e001      	b.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003bf4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4919      	ldr	r1, [pc, #100]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c00:	428b      	cmp	r3, r1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c04:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c06:	e001      	b.n	8003c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	f043 0202 	orr.w	r2, r3, #2
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fdfa 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d136      	bne.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d031      	beq.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a07      	ldr	r2, [pc, #28]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c4c:	e001      	b.n	8003c52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4902      	ldr	r1, [pc, #8]	; (8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c5a:	428b      	cmp	r3, r1
 8003c5c:	d106      	bne.n	8003c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003c5e:	4b02      	ldr	r3, [pc, #8]	; (8003c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c60:	e006      	b.n	8003c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003c62:	bf00      	nop
 8003c64:	40003800 	.word	0x40003800
 8003c68:	40003400 	.word	0x40003400
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c92:	f043 0204 	orr.w	r2, r3, #4
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fdc0 	bl	8003820 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ca2:	bf00      	nop
}
 8003ca4:	bf00      	nop
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	1c99      	adds	r1, r3, #2
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6251      	str	r1, [r2, #36]	; 0x24
 8003cd2:	881a      	ldrh	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d113      	bne.n	8003d1a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ffc9 	bl	8003cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	1c99      	adds	r1, r3, #2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6251      	str	r1, [r2, #36]	; 0x24
 8003d36:	8819      	ldrh	r1, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <I2SEx_TxISR_I2SExt+0x90>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <I2SEx_TxISR_I2SExt+0x22>
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <I2SEx_TxISR_I2SExt+0x94>)
 8003d44:	e001      	b.n	8003d4a <I2SEx_TxISR_I2SExt+0x26>
 8003d46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d121      	bne.n	8003daa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <I2SEx_TxISR_I2SExt+0x90>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <I2SEx_TxISR_I2SExt+0x50>
 8003d70:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <I2SEx_TxISR_I2SExt+0x94>)
 8003d72:	e001      	b.n	8003d78 <I2SEx_TxISR_I2SExt+0x54>
 8003d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	490d      	ldr	r1, [pc, #52]	; (8003db4 <I2SEx_TxISR_I2SExt+0x90>)
 8003d80:	428b      	cmp	r3, r1
 8003d82:	d101      	bne.n	8003d88 <I2SEx_TxISR_I2SExt+0x64>
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <I2SEx_TxISR_I2SExt+0x94>)
 8003d86:	e001      	b.n	8003d8c <I2SEx_TxISR_I2SExt+0x68>
 8003d88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d106      	bne.n	8003daa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff81 	bl	8003cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40003800 	.word	0x40003800
 8003db8:	40003400 	.word	0x40003400

08003dbc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68d8      	ldr	r0, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	1c99      	adds	r1, r3, #2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003dd4:	b282      	uxth	r2, r0
 8003dd6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d113      	bne.n	8003e18 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfe:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ff4a 	bl	8003cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	; (8003eb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d101      	bne.n	8003e36 <I2SEx_RxISR_I2SExt+0x16>
 8003e32:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003e34:	e001      	b.n	8003e3a <I2SEx_RxISR_I2SExt+0x1a>
 8003e36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e3a:	68d8      	ldr	r0, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	1c99      	adds	r1, r3, #2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e46:	b282      	uxth	r2, r0
 8003e48:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d121      	bne.n	8003ea6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d101      	bne.n	8003e70 <I2SEx_RxISR_I2SExt+0x50>
 8003e6c:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003e6e:	e001      	b.n	8003e74 <I2SEx_RxISR_I2SExt+0x54>
 8003e70:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	490d      	ldr	r1, [pc, #52]	; (8003eb0 <I2SEx_RxISR_I2SExt+0x90>)
 8003e7c:	428b      	cmp	r3, r1
 8003e7e:	d101      	bne.n	8003e84 <I2SEx_RxISR_I2SExt+0x64>
 8003e80:	4b0c      	ldr	r3, [pc, #48]	; (8003eb4 <I2SEx_RxISR_I2SExt+0x94>)
 8003e82:	e001      	b.n	8003e88 <I2SEx_RxISR_I2SExt+0x68>
 8003e84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e8c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ff03 	bl	8003cac <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40003800 	.word	0x40003800
 8003eb4:	40003400 	.word	0x40003400

08003eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e267      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d075      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00c      	beq.n	8003efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee2:	4b85      	ldr	r3, [pc, #532]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d112      	bne.n	8003f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eee:	4b82      	ldr	r3, [pc, #520]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efa:	d10b      	bne.n	8003f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	4b7e      	ldr	r3, [pc, #504]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05b      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x108>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d157      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e242      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d106      	bne.n	8003f2c <HAL_RCC_OscConfig+0x74>
 8003f1e:	4b76      	ldr	r3, [pc, #472]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a75      	ldr	r2, [pc, #468]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e01d      	b.n	8003f68 <HAL_RCC_OscConfig+0xb0>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x98>
 8003f36:	4b70      	ldr	r3, [pc, #448]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a6f      	ldr	r2, [pc, #444]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b6d      	ldr	r3, [pc, #436]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6c      	ldr	r2, [pc, #432]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0xb0>
 8003f50:	4b69      	ldr	r3, [pc, #420]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a68      	ldr	r2, [pc, #416]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b66      	ldr	r3, [pc, #408]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a65      	ldr	r2, [pc, #404]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fd fc00 	bl	8001774 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fd fbfc 	bl	8001774 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e207      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b5b      	ldr	r3, [pc, #364]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0xc0>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fd fbec 	bl	8001774 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7fd fbe8 	bl	8001774 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e1f3      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb2:	4b51      	ldr	r3, [pc, #324]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xe8>
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d063      	beq.n	8004096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fce:	4b4a      	ldr	r3, [pc, #296]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d11c      	bne.n	8004020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe6:	4b44      	ldr	r3, [pc, #272]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_RCC_OscConfig+0x152>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e1c7      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400a:	4b3b      	ldr	r3, [pc, #236]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4937      	ldr	r1, [pc, #220]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401e:	e03a      	b.n	8004096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004028:	4b34      	ldr	r3, [pc, #208]	; (80040fc <HAL_RCC_OscConfig+0x244>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fd fba1 	bl	8001774 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004036:	f7fd fb9d 	bl	8001774 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1a8      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004048:	4b2b      	ldr	r3, [pc, #172]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004054:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4925      	ldr	r1, [pc, #148]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]
 8004068:	e015      	b.n	8004096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800406a:	4b24      	ldr	r3, [pc, #144]	; (80040fc <HAL_RCC_OscConfig+0x244>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd fb80 	bl	8001774 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004078:	f7fd fb7c 	bl	8001774 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e187      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d036      	beq.n	8004110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040aa:	4b15      	ldr	r3, [pc, #84]	; (8004100 <HAL_RCC_OscConfig+0x248>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fd fb60 	bl	8001774 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fd fb5c 	bl	8001774 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e167      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ca:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_OscConfig+0x240>)
 80040cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x200>
 80040d6:	e01b      	b.n	8004110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d8:	4b09      	ldr	r3, [pc, #36]	; (8004100 <HAL_RCC_OscConfig+0x248>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040de:	f7fd fb49 	bl	8001774 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	e00e      	b.n	8004104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e6:	f7fd fb45 	bl	8001774 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d907      	bls.n	8004104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e150      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
 80040f8:	40023800 	.word	0x40023800
 80040fc:	42470000 	.word	0x42470000
 8004100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004104:	4b88      	ldr	r3, [pc, #544]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ea      	bne.n	80040e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 8097 	beq.w	800424c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800411e:	2300      	movs	r3, #0
 8004120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004122:	4b81      	ldr	r3, [pc, #516]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	4b7d      	ldr	r3, [pc, #500]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	4a7c      	ldr	r2, [pc, #496]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800413c:	6413      	str	r3, [r2, #64]	; 0x40
 800413e:	4b7a      	ldr	r3, [pc, #488]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004146:	60bb      	str	r3, [r7, #8]
 8004148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800414a:	2301      	movs	r3, #1
 800414c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414e:	4b77      	ldr	r3, [pc, #476]	; (800432c <HAL_RCC_OscConfig+0x474>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d118      	bne.n	800418c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800415a:	4b74      	ldr	r3, [pc, #464]	; (800432c <HAL_RCC_OscConfig+0x474>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a73      	ldr	r2, [pc, #460]	; (800432c <HAL_RCC_OscConfig+0x474>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004166:	f7fd fb05 	bl	8001774 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416e:	f7fd fb01 	bl	8001774 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e10c      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004180:	4b6a      	ldr	r3, [pc, #424]	; (800432c <HAL_RCC_OscConfig+0x474>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d106      	bne.n	80041a2 <HAL_RCC_OscConfig+0x2ea>
 8004194:	4b64      	ldr	r3, [pc, #400]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	4a63      	ldr	r2, [pc, #396]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 800419a:	f043 0301 	orr.w	r3, r3, #1
 800419e:	6713      	str	r3, [r2, #112]	; 0x70
 80041a0:	e01c      	b.n	80041dc <HAL_RCC_OscConfig+0x324>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b05      	cmp	r3, #5
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x30c>
 80041aa:	4b5f      	ldr	r3, [pc, #380]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	4a5e      	ldr	r2, [pc, #376]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80041b0:	f043 0304 	orr.w	r3, r3, #4
 80041b4:	6713      	str	r3, [r2, #112]	; 0x70
 80041b6:	4b5c      	ldr	r3, [pc, #368]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	4a5b      	ldr	r2, [pc, #364]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	6713      	str	r3, [r2, #112]	; 0x70
 80041c2:	e00b      	b.n	80041dc <HAL_RCC_OscConfig+0x324>
 80041c4:	4b58      	ldr	r3, [pc, #352]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80041c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c8:	4a57      	ldr	r2, [pc, #348]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80041ca:	f023 0301 	bic.w	r3, r3, #1
 80041ce:	6713      	str	r3, [r2, #112]	; 0x70
 80041d0:	4b55      	ldr	r3, [pc, #340]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d4:	4a54      	ldr	r2, [pc, #336]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80041d6:	f023 0304 	bic.w	r3, r3, #4
 80041da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd fac6 	bl	8001774 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ec:	f7fd fac2 	bl	8001774 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e0cb      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004202:	4b49      	ldr	r3, [pc, #292]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0ee      	beq.n	80041ec <HAL_RCC_OscConfig+0x334>
 800420e:	e014      	b.n	800423a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004210:	f7fd fab0 	bl	8001774 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004216:	e00a      	b.n	800422e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004218:	f7fd faac 	bl	8001774 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e0b5      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800422e:	4b3e      	ldr	r3, [pc, #248]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ee      	bne.n	8004218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800423a:	7dfb      	ldrb	r3, [r7, #23]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d105      	bne.n	800424c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004240:	4b39      	ldr	r3, [pc, #228]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004244:	4a38      	ldr	r2, [pc, #224]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 80a1 	beq.w	8004398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004256:	4b34      	ldr	r3, [pc, #208]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b08      	cmp	r3, #8
 8004260:	d05c      	beq.n	800431c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d141      	bne.n	80042ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426a:	4b31      	ldr	r3, [pc, #196]	; (8004330 <HAL_RCC_OscConfig+0x478>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004270:	f7fd fa80 	bl	8001774 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004278:	f7fd fa7c 	bl	8001774 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e087      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428a:	4b27      	ldr	r3, [pc, #156]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	019b      	lsls	r3, r3, #6
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	3b01      	subs	r3, #1
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	061b      	lsls	r3, r3, #24
 80042ba:	491b      	ldr	r1, [pc, #108]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c0:	4b1b      	ldr	r3, [pc, #108]	; (8004330 <HAL_RCC_OscConfig+0x478>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fd fa55 	bl	8001774 <HAL_GetTick>
 80042ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ce:	f7fd fa51 	bl	8001774 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e05c      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e0:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x416>
 80042ec:	e054      	b.n	8004398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <HAL_RCC_OscConfig+0x478>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f4:	f7fd fa3e 	bl	8001774 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042fc:	f7fd fa3a 	bl	8001774 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e045      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_RCC_OscConfig+0x470>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x444>
 800431a:	e03d      	b.n	8004398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d107      	bne.n	8004334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e038      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
 8004328:	40023800 	.word	0x40023800
 800432c:	40007000 	.word	0x40007000
 8004330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x4ec>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d028      	beq.n	8004394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d121      	bne.n	8004394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d11a      	bne.n	8004394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004364:	4013      	ands	r3, r2
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800436a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800436c:	4293      	cmp	r3, r2
 800436e:	d111      	bne.n	8004394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	3b01      	subs	r3, #1
 800437e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004380:	429a      	cmp	r2, r3
 8004382:	d107      	bne.n	8004394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e000      	b.n	800439a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800

080043a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e0cc      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043bc:	4b68      	ldr	r3, [pc, #416]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d90c      	bls.n	80043e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ca:	4b65      	ldr	r3, [pc, #404]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d2:	4b63      	ldr	r3, [pc, #396]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d001      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0b8      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043fc:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	4a58      	ldr	r2, [pc, #352]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004414:	4b53      	ldr	r3, [pc, #332]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	4a52      	ldr	r2, [pc, #328]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800441a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800441e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004420:	4b50      	ldr	r3, [pc, #320]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	494d      	ldr	r1, [pc, #308]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d044      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d119      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e07f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d003      	beq.n	8004466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004462:	2b03      	cmp	r3, #3
 8004464:	d107      	bne.n	8004476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004466:	4b3f      	ldr	r3, [pc, #252]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d109      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e06f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e067      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f023 0203 	bic.w	r2, r3, #3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4934      	ldr	r1, [pc, #208]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004498:	f7fd f96c 	bl	8001774 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800449e:	e00a      	b.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fd f968 	bl	8001774 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e04f      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 020c 	and.w	r2, r3, #12
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d1eb      	bne.n	80044a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c8:	4b25      	ldr	r3, [pc, #148]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d20c      	bcs.n	80044f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044de:	4b20      	ldr	r3, [pc, #128]	; (8004560 <HAL_RCC_ClockConfig+0x1b8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d001      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e032      	b.n	8004556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d008      	beq.n	800450e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044fc:	4b19      	ldr	r3, [pc, #100]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	4916      	ldr	r1, [pc, #88]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	4313      	orrs	r3, r2
 800450c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d009      	beq.n	800452e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	490e      	ldr	r1, [pc, #56]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800452e:	f000 f821 	bl	8004574 <HAL_RCC_GetSysClockFreq>
 8004532:	4602      	mov	r2, r0
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	091b      	lsrs	r3, r3, #4
 800453a:	f003 030f 	and.w	r3, r3, #15
 800453e:	490a      	ldr	r1, [pc, #40]	; (8004568 <HAL_RCC_ClockConfig+0x1c0>)
 8004540:	5ccb      	ldrb	r3, [r1, r3]
 8004542:	fa22 f303 	lsr.w	r3, r2, r3
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <HAL_RCC_ClockConfig+0x1c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fd f8cc 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40023c00 	.word	0x40023c00
 8004564:	40023800 	.word	0x40023800
 8004568:	08008bb0 	.word	0x08008bb0
 800456c:	20000000 	.word	0x20000000
 8004570:	20000030 	.word	0x20000030

08004574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004578:	b094      	sub	sp, #80	; 0x50
 800457a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800457c:	2300      	movs	r3, #0
 800457e:	647b      	str	r3, [r7, #68]	; 0x44
 8004580:	2300      	movs	r3, #0
 8004582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004584:	2300      	movs	r3, #0
 8004586:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800458c:	4b79      	ldr	r3, [pc, #484]	; (8004774 <HAL_RCC_GetSysClockFreq+0x200>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	2b08      	cmp	r3, #8
 8004596:	d00d      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004598:	2b08      	cmp	r3, #8
 800459a:	f200 80e1 	bhi.w	8004760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_RCC_GetSysClockFreq+0x34>
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x3a>
 80045a6:	e0db      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045a8:	4b73      	ldr	r3, [pc, #460]	; (8004778 <HAL_RCC_GetSysClockFreq+0x204>)
 80045aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80045ac:	e0db      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045ae:	4b73      	ldr	r3, [pc, #460]	; (800477c <HAL_RCC_GetSysClockFreq+0x208>)
 80045b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045b2:	e0d8      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b4:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <HAL_RCC_GetSysClockFreq+0x200>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045be:	4b6d      	ldr	r3, [pc, #436]	; (8004774 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d063      	beq.n	8004692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045ca:	4b6a      	ldr	r3, [pc, #424]	; (8004774 <HAL_RCC_GetSysClockFreq+0x200>)
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	099b      	lsrs	r3, r3, #6
 80045d0:	2200      	movs	r2, #0
 80045d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80045d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045dc:	633b      	str	r3, [r7, #48]	; 0x30
 80045de:	2300      	movs	r3, #0
 80045e0:	637b      	str	r3, [r7, #52]	; 0x34
 80045e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80045e6:	4622      	mov	r2, r4
 80045e8:	462b      	mov	r3, r5
 80045ea:	f04f 0000 	mov.w	r0, #0
 80045ee:	f04f 0100 	mov.w	r1, #0
 80045f2:	0159      	lsls	r1, r3, #5
 80045f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f8:	0150      	lsls	r0, r2, #5
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4621      	mov	r1, r4
 8004600:	1a51      	subs	r1, r2, r1
 8004602:	6139      	str	r1, [r7, #16]
 8004604:	4629      	mov	r1, r5
 8004606:	eb63 0301 	sbc.w	r3, r3, r1
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004618:	4659      	mov	r1, fp
 800461a:	018b      	lsls	r3, r1, #6
 800461c:	4651      	mov	r1, sl
 800461e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004622:	4651      	mov	r1, sl
 8004624:	018a      	lsls	r2, r1, #6
 8004626:	4651      	mov	r1, sl
 8004628:	ebb2 0801 	subs.w	r8, r2, r1
 800462c:	4659      	mov	r1, fp
 800462e:	eb63 0901 	sbc.w	r9, r3, r1
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800463e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004646:	4690      	mov	r8, r2
 8004648:	4699      	mov	r9, r3
 800464a:	4623      	mov	r3, r4
 800464c:	eb18 0303 	adds.w	r3, r8, r3
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	462b      	mov	r3, r5
 8004654:	eb49 0303 	adc.w	r3, r9, r3
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	f04f 0300 	mov.w	r3, #0
 8004662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004666:	4629      	mov	r1, r5
 8004668:	024b      	lsls	r3, r1, #9
 800466a:	4621      	mov	r1, r4
 800466c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004670:	4621      	mov	r1, r4
 8004672:	024a      	lsls	r2, r1, #9
 8004674:	4610      	mov	r0, r2
 8004676:	4619      	mov	r1, r3
 8004678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467a:	2200      	movs	r2, #0
 800467c:	62bb      	str	r3, [r7, #40]	; 0x28
 800467e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004684:	f7fb fda0 	bl	80001c8 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4613      	mov	r3, r2
 800468e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004690:	e058      	b.n	8004744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004692:	4b38      	ldr	r3, [pc, #224]	; (8004774 <HAL_RCC_GetSysClockFreq+0x200>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	2200      	movs	r2, #0
 800469a:	4618      	mov	r0, r3
 800469c:	4611      	mov	r1, r2
 800469e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046a2:	623b      	str	r3, [r7, #32]
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
 80046a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80046ac:	4642      	mov	r2, r8
 80046ae:	464b      	mov	r3, r9
 80046b0:	f04f 0000 	mov.w	r0, #0
 80046b4:	f04f 0100 	mov.w	r1, #0
 80046b8:	0159      	lsls	r1, r3, #5
 80046ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046be:	0150      	lsls	r0, r2, #5
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4641      	mov	r1, r8
 80046c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80046ca:	4649      	mov	r1, r9
 80046cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80046dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80046e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80046e4:	ebb2 040a 	subs.w	r4, r2, sl
 80046e8:	eb63 050b 	sbc.w	r5, r3, fp
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	00eb      	lsls	r3, r5, #3
 80046f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046fa:	00e2      	lsls	r2, r4, #3
 80046fc:	4614      	mov	r4, r2
 80046fe:	461d      	mov	r5, r3
 8004700:	4643      	mov	r3, r8
 8004702:	18e3      	adds	r3, r4, r3
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	464b      	mov	r3, r9
 8004708:	eb45 0303 	adc.w	r3, r5, r3
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	f04f 0300 	mov.w	r3, #0
 8004716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800471a:	4629      	mov	r1, r5
 800471c:	028b      	lsls	r3, r1, #10
 800471e:	4621      	mov	r1, r4
 8004720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004724:	4621      	mov	r1, r4
 8004726:	028a      	lsls	r2, r1, #10
 8004728:	4610      	mov	r0, r2
 800472a:	4619      	mov	r1, r3
 800472c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472e:	2200      	movs	r2, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	61fa      	str	r2, [r7, #28]
 8004734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004738:	f7fb fd46 	bl	80001c8 <__aeabi_uldivmod>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4613      	mov	r3, r2
 8004742:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <HAL_RCC_GetSysClockFreq+0x200>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	3301      	adds	r3, #1
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004758:	fbb2 f3f3 	udiv	r3, r2, r3
 800475c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800475e:	e002      	b.n	8004766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetSysClockFreq+0x204>)
 8004762:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004768:	4618      	mov	r0, r3
 800476a:	3750      	adds	r7, #80	; 0x50
 800476c:	46bd      	mov	sp, r7
 800476e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004772:	bf00      	nop
 8004774:	40023800 	.word	0x40023800
 8004778:	00f42400 	.word	0x00f42400
 800477c:	007a1200 	.word	0x007a1200

08004780 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d035      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047a8:	4b62      	ldr	r3, [pc, #392]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ae:	f7fc ffe1 	bl	8001774 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047b6:	f7fc ffdd 	bl	8001774 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e0b0      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c8:	4b5b      	ldr	r3, [pc, #364]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	019a      	lsls	r2, r3, #6
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	071b      	lsls	r3, r3, #28
 80047e0:	4955      	ldr	r1, [pc, #340]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047e8:	4b52      	ldr	r3, [pc, #328]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ee:	f7fc ffc1 	bl	8001774 <HAL_GetTick>
 80047f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047f6:	f7fc ffbd 	bl	8001774 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e090      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004808:	4b4b      	ldr	r3, [pc, #300]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8083 	beq.w	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	4b44      	ldr	r3, [pc, #272]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	4a43      	ldr	r2, [pc, #268]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004830:	6413      	str	r3, [r2, #64]	; 0x40
 8004832:	4b41      	ldr	r3, [pc, #260]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800483e:	4b3f      	ldr	r3, [pc, #252]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a3e      	ldr	r2, [pc, #248]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004848:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800484a:	f7fc ff93 	bl	8001774 <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7fc ff8f 	bl	8001774 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e062      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004864:	4b35      	ldr	r3, [pc, #212]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004870:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004874:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004878:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02f      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	429a      	cmp	r2, r3
 800488c:	d028      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800488e:	4b2a      	ldr	r3, [pc, #168]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004896:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004898:	4b29      	ldr	r3, [pc, #164]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800489e:	4b28      	ldr	r3, [pc, #160]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048a4:	4a24      	ldr	r2, [pc, #144]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d114      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048b6:	f7fc ff5d 	bl	8001774 <HAL_GetTick>
 80048ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048bc:	e00a      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f7fc ff59 	bl	8001774 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e02a      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ee      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ec:	d10d      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048ee:	4b12      	ldr	r3, [pc, #72]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004902:	490d      	ldr	r1, [pc, #52]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]
 8004908:	e005      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4a0a      	ldr	r2, [pc, #40]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004910:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004914:	6093      	str	r3, [r2, #8]
 8004916:	4b08      	ldr	r3, [pc, #32]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004918:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004922:	4905      	ldr	r1, [pc, #20]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004924:	4313      	orrs	r3, r2
 8004926:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	42470068 	.word	0x42470068
 8004938:	40023800 	.word	0x40023800
 800493c:	40007000 	.word	0x40007000
 8004940:	42470e40 	.word	0x42470e40

08004944 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d13e      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004962:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d12f      	bne.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004978:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800497a:	617b      	str	r3, [r7, #20]
          break;
 800497c:	e02f      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800497e:	4b1c      	ldr	r3, [pc, #112]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800498a:	d108      	bne.n	800499e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800498c:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004994:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	e007      	b.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800499e:	4b14      	ldr	r3, [pc, #80]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a6:	4a15      	ldr	r2, [pc, #84]	; (80049fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049ae:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049b4:	099b      	lsrs	r3, r3, #6
 80049b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	fb02 f303 	mul.w	r3, r2, r3
 80049c0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80049c2:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80049c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049c8:	0f1b      	lsrs	r3, r3, #28
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	617b      	str	r3, [r7, #20]
          break;
 80049d6:	e002      	b.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	617b      	str	r3, [r7, #20]
          break;
 80049dc:	bf00      	nop
        }
      }
      break;
 80049de:	bf00      	nop
    }
  }
  return frequency;
 80049e0:	697b      	ldr	r3, [r7, #20]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800
 80049f4:	00bb8000 	.word	0x00bb8000
 80049f8:	007a1200 	.word	0x007a1200
 80049fc:	00f42400 	.word	0x00f42400

08004a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07b      	b.n	8004b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a22:	d009      	beq.n	8004a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	61da      	str	r2, [r3, #28]
 8004a2a:	e005      	b.n	8004a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d106      	bne.n	8004a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fb ffa8 	bl	80009a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	ea42 0103 	orr.w	r1, r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	f003 0104 	and.w	r1, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0210 	and.w	r2, r3, #16
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b12:	b084      	sub	sp, #16
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	f107 001c 	add.w	r0, r7, #28
 8004b20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d122      	bne.n	8004b70 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f9bf 	bl	8004ee8 <USB_CoreReset>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	73fb      	strb	r3, [r7, #15]
 8004b6e:	e01a      	b.n	8004ba6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f9b3 	bl	8004ee8 <USB_CoreReset>
 8004b82:	4603      	mov	r3, r0
 8004b84:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38
 8004b98:	e005      	b.n	8004ba6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d10b      	bne.n	8004bc4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f043 0206 	orr.w	r2, r3, #6
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bd0:	b004      	add	sp, #16
 8004bd2:	4770      	bx	lr

08004bd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f043 0201 	orr.w	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f023 0201 	bic.w	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c34:	78fb      	ldrb	r3, [r7, #3]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d115      	bne.n	8004c66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c46:	2001      	movs	r0, #1
 8004c48:	f7fc fda0 	bl	800178c <HAL_Delay>
      ms++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f939 	bl	8004eca <USB_GetMode>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d01e      	beq.n	8004c9c <USB_SetCurrentMode+0x84>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b31      	cmp	r3, #49	; 0x31
 8004c62:	d9f0      	bls.n	8004c46 <USB_SetCurrentMode+0x2e>
 8004c64:	e01a      	b.n	8004c9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d115      	bne.n	8004c98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c78:	2001      	movs	r0, #1
 8004c7a:	f7fc fd87 	bl	800178c <HAL_Delay>
      ms++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3301      	adds	r3, #1
 8004c82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f920 	bl	8004eca <USB_GetMode>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <USB_SetCurrentMode+0x84>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b31      	cmp	r3, #49	; 0x31
 8004c94:	d9f0      	bls.n	8004c78 <USB_SetCurrentMode+0x60>
 8004c96:	e001      	b.n	8004c9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e005      	b.n	8004ca8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2b32      	cmp	r3, #50	; 0x32
 8004ca0:	d101      	bne.n	8004ca6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4a13      	ldr	r2, [pc, #76]	; (8004d14 <USB_FlushTxFifo+0x64>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e01b      	b.n	8004d08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	daf2      	bge.n	8004cbe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	019b      	lsls	r3, r3, #6
 8004ce0:	f043 0220 	orr.w	r2, r3, #32
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a08      	ldr	r2, [pc, #32]	; (8004d14 <USB_FlushTxFifo+0x64>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e006      	b.n	8004d08 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b20      	cmp	r3, #32
 8004d04:	d0f0      	beq.n	8004ce8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	00030d40 	.word	0x00030d40

08004d18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	3301      	adds	r3, #1
 8004d28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4a11      	ldr	r2, [pc, #68]	; (8004d74 <USB_FlushRxFifo+0x5c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e018      	b.n	8004d68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	daf2      	bge.n	8004d24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2210      	movs	r2, #16
 8004d46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <USB_FlushRxFifo+0x5c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e006      	b.n	8004d68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0310 	and.w	r3, r3, #16
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d0f0      	beq.n	8004d48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3714      	adds	r7, #20
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	00030d40 	.word	0x00030d40

08004d78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	460b      	mov	r3, r1
 8004d88:	71fb      	strb	r3, [r7, #7]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d123      	bne.n	8004de6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d9e:	88bb      	ldrh	r3, [r7, #4]
 8004da0:	3303      	adds	r3, #3
 8004da2:	089b      	lsrs	r3, r3, #2
 8004da4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e018      	b.n	8004dde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	031a      	lsls	r2, r3, #12
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db8:	461a      	mov	r2, r3
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d3e2      	bcc.n	8004dac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3724      	adds	r7, #36	; 0x24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b08b      	sub	sp, #44	; 0x2c
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	089b      	lsrs	r3, r3, #2
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	623b      	str	r3, [r7, #32]
 8004e1e:	e014      	b.n	8004e4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	3301      	adds	r3, #1
 8004e30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	3301      	adds	r3, #1
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	3301      	adds	r3, #1
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	3301      	adds	r3, #1
 8004e48:	623b      	str	r3, [r7, #32]
 8004e4a:	6a3a      	ldr	r2, [r7, #32]
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d3e6      	bcc.n	8004e20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004e52:	8bfb      	ldrh	r3, [r7, #30]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01e      	beq.n	8004e96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e62:	461a      	mov	r2, r3
 8004e64:	f107 0310 	add.w	r3, r7, #16
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	fa22 f303 	lsr.w	r3, r2, r3
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	701a      	strb	r2, [r3, #0]
      i++;
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	3301      	adds	r3, #1
 8004e82:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	3301      	adds	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e8a:	8bfb      	ldrh	r3, [r7, #30]
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e90:	8bfb      	ldrh	r3, [r7, #30]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1ea      	bne.n	8004e6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	372c      	adds	r7, #44	; 0x2c
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
	...

08004ee8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <USB_CoreReset+0x64>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e01b      	b.n	8004f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	daf2      	bge.n	8004ef4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f043 0201 	orr.w	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <USB_CoreReset+0x64>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d901      	bls.n	8004f30 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e006      	b.n	8004f3e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d0f0      	beq.n	8004f1e <USB_CoreReset+0x36>

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	00030d40 	.word	0x00030d40

08004f50 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f50:	b084      	sub	sp, #16
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f70:	461a      	mov	r2, r3
 8004f72:	2300      	movs	r3, #0
 8004f74:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d018      	beq.n	8004fd8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d10a      	bne.n	8004fc2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fba:	f043 0304 	orr.w	r3, r3, #4
 8004fbe:	6013      	str	r3, [r2, #0]
 8004fc0:	e014      	b.n	8004fec <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	e009      	b.n	8004fec <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004fe6:	f023 0304 	bic.w	r3, r3, #4
 8004fea:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004fec:	2110      	movs	r1, #16
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7ff fe5e 	bl	8004cb0 <USB_FlushTxFifo>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7ff fe8a 	bl	8004d18 <USB_FlushRxFifo>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800500e:	2300      	movs	r3, #0
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	e015      	b.n	8005040 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005020:	461a      	mov	r2, r3
 8005022:	f04f 33ff 	mov.w	r3, #4294967295
 8005026:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4413      	add	r3, r2
 8005030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005034:	461a      	mov	r2, r3
 8005036:	2300      	movs	r3, #0
 8005038:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	3301      	adds	r3, #1
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	429a      	cmp	r2, r3
 8005046:	d3e5      	bcc.n	8005014 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00b      	beq.n	800507a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a13      	ldr	r2, [pc, #76]	; (80050bc <USB_HostInit+0x16c>)
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <USB_HostInit+0x170>)
 8005074:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005078:	e009      	b.n	800508e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2280      	movs	r2, #128	; 0x80
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a10      	ldr	r2, [pc, #64]	; (80050c4 <USB_HostInit+0x174>)
 8005084:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a0f      	ldr	r2, [pc, #60]	; (80050c8 <USB_HostInit+0x178>)
 800508a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800508e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f043 0210 	orr.w	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	699a      	ldr	r2, [r3, #24]
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <USB_HostInit+0x17c>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050b8:	b004      	add	sp, #16
 80050ba:	4770      	bx	lr
 80050bc:	01000200 	.word	0x01000200
 80050c0:	00e00300 	.word	0x00e00300
 80050c4:	00600080 	.word	0x00600080
 80050c8:	004000e0 	.word	0x004000e0
 80050cc:	a3200008 	.word	0xa3200008

080050d0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005108:	4313      	orrs	r3, r2
 800510a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d107      	bne.n	8005122 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005118:	461a      	mov	r2, r3
 800511a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800511e:	6053      	str	r3, [r2, #4]
 8005120:	e009      	b.n	8005136 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	2b02      	cmp	r3, #2
 8005126:	d106      	bne.n	8005136 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800512e:	461a      	mov	r2, r3
 8005130:	f241 7370 	movw	r3, #6000	; 0x1770
 8005134:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3714      	adds	r7, #20
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005164:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005174:	2064      	movs	r0, #100	; 0x64
 8005176:	f7fc fb09 	bl	800178c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005186:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005188:	200a      	movs	r0, #10
 800518a:	f7fc faff 	bl	800178c <HAL_Delay>

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80051bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d109      	bne.n	80051dc <USB_DriveVbus+0x44>
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d106      	bne.n	80051dc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80051da:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e6:	d109      	bne.n	80051fc <USB_DriveVbus+0x64>
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80051f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051fa:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	0c5b      	lsrs	r3, r3, #17
 8005228:	f003 0303 	and.w	r3, r3, #3
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	b29b      	uxth	r3, r3
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	4603      	mov	r3, r0
 800526c:	70fb      	strb	r3, [r7, #3]
 800526e:	460b      	mov	r3, r1
 8005270:	70bb      	strb	r3, [r7, #2]
 8005272:	4613      	mov	r3, r2
 8005274:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	4413      	add	r3, r2
 8005286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800528a:	461a      	mov	r2, r3
 800528c:	f04f 33ff 	mov.w	r3, #4294967295
 8005290:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005292:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005296:	2b03      	cmp	r3, #3
 8005298:	d87e      	bhi.n	8005398 <USB_HC_Init+0x13c>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <USB_HC_Init+0x44>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	0800535b 	.word	0x0800535b
 80052a8:	080052b1 	.word	0x080052b1
 80052ac:	0800531d 	.word	0x0800531d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052bc:	461a      	mov	r2, r3
 80052be:	f240 439d 	movw	r3, #1181	; 0x49d
 80052c2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80052c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	da10      	bge.n	80052ee <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	78fa      	ldrb	r2, [r7, #3]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052ea:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80052ec:	e057      	b.n	800539e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d051      	beq.n	800539e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80052fa:	78fb      	ldrb	r3, [r7, #3]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	440a      	add	r2, r1
 8005310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005314:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005318:	60d3      	str	r3, [r2, #12]
      break;
 800531a:	e040      	b.n	800539e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800531c:	78fb      	ldrb	r3, [r7, #3]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005328:	461a      	mov	r2, r3
 800532a:	f240 639d 	movw	r3, #1693	; 0x69d
 800532e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005330:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005334:	2b00      	cmp	r3, #0
 8005336:	da34      	bge.n	80053a2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4413      	add	r3, r2
 8005340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	78fa      	ldrb	r2, [r7, #3]
 8005348:	0151      	lsls	r1, r2, #5
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	440a      	add	r2, r1
 800534e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005356:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005358:	e023      	b.n	80053a2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005366:	461a      	mov	r2, r3
 8005368:	f240 2325 	movw	r3, #549	; 0x225
 800536c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800536e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005372:	2b00      	cmp	r3, #0
 8005374:	da17      	bge.n	80053a6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	440a      	add	r2, r1
 800538c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005390:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005394:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005396:	e006      	b.n	80053a6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	77fb      	strb	r3, [r7, #31]
      break;
 800539c:	e004      	b.n	80053a8 <USB_HC_Init+0x14c>
      break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <USB_HC_Init+0x14c>
      break;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <USB_HC_Init+0x14c>
      break;
 80053a6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c2:	f043 0302 	orr.w	r3, r3, #2
 80053c6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	f003 030f 	and.w	r3, r3, #15
 80053d6:	2101      	movs	r1, #1
 80053d8:	fa01 f303 	lsl.w	r3, r1, r3
 80053dc:	6939      	ldr	r1, [r7, #16]
 80053de:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053e2:	4313      	orrs	r3, r2
 80053e4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80053f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	da03      	bge.n	8005402 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80053fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	e001      	b.n	8005406 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7ff feff 	bl	800520a <USB_GetHostSpeed>
 800540c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800540e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005412:	2b02      	cmp	r3, #2
 8005414:	d106      	bne.n	8005424 <USB_HC_Init+0x1c8>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b02      	cmp	r3, #2
 800541a:	d003      	beq.n	8005424 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800541c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005420:	617b      	str	r3, [r7, #20]
 8005422:	e001      	b.n	8005428 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005428:	787b      	ldrb	r3, [r7, #1]
 800542a:	059b      	lsls	r3, r3, #22
 800542c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005430:	78bb      	ldrb	r3, [r7, #2]
 8005432:	02db      	lsls	r3, r3, #11
 8005434:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005438:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800543a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800543e:	049b      	lsls	r3, r3, #18
 8005440:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005444:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005446:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005448:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800544c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	0159      	lsls	r1, r3, #5
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	440b      	add	r3, r1
 800545a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800545e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005464:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005466:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800546a:	2b03      	cmp	r3, #3
 800546c:	d003      	beq.n	8005476 <USB_HC_Init+0x21a>
 800546e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005472:	2b01      	cmp	r3, #1
 8005474:	d10f      	bne.n	8005496 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005476:	78fb      	ldrb	r3, [r7, #3]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4413      	add	r3, r2
 800547e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	78fa      	ldrb	r2, [r7, #3]
 8005486:	0151      	lsls	r1, r2, #5
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	440a      	add	r2, r1
 800548c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005490:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005494:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005496:	7ffb      	ldrb	r3, [r7, #31]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08c      	sub	sp, #48	; 0x30
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	785b      	ldrb	r3, [r3, #1]
 80054b6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80054b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054bc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d02d      	beq.n	8005526 <USB_HC_StartXfer+0x86>
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	791b      	ldrb	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d129      	bne.n	8005526 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80054d2:	79fb      	ldrb	r3, [r7, #7]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d117      	bne.n	8005508 <USB_HC_StartXfer+0x68>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	79db      	ldrb	r3, [r3, #7]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <USB_HC_StartXfer+0x48>
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	79db      	ldrb	r3, [r3, #7]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d10f      	bne.n	8005508 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	69fa      	ldr	r2, [r7, #28]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	6a3a      	ldr	r2, [r7, #32]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005508:	79fb      	ldrb	r3, [r7, #7]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10b      	bne.n	8005526 <USB_HC_StartXfer+0x86>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	795b      	ldrb	r3, [r3, #5]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d107      	bne.n	8005526 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	785b      	ldrb	r3, [r3, #1]
 800551a:	4619      	mov	r1, r3
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fa0f 	bl	8005940 <USB_DoPing>
      return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e0f8      	b.n	8005718 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d018      	beq.n	8005560 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	8912      	ldrh	r2, [r2, #8]
 8005536:	4413      	add	r3, r2
 8005538:	3b01      	subs	r3, #1
 800553a:	68ba      	ldr	r2, [r7, #8]
 800553c:	8912      	ldrh	r2, [r2, #8]
 800553e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005542:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005544:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005546:	8b7b      	ldrh	r3, [r7, #26]
 8005548:	429a      	cmp	r2, r3
 800554a:	d90b      	bls.n	8005564 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800554c:	8b7b      	ldrh	r3, [r7, #26]
 800554e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005550:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	8912      	ldrh	r2, [r2, #8]
 8005556:	fb03 f202 	mul.w	r2, r3, r2
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	611a      	str	r2, [r3, #16]
 800555e:	e001      	b.n	8005564 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005560:	2301      	movs	r3, #1
 8005562:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	78db      	ldrb	r3, [r3, #3]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d007      	beq.n	800557c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800556c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	8912      	ldrh	r2, [r2, #8]
 8005572:	fb03 f202 	mul.w	r2, r3, r2
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	611a      	str	r2, [r3, #16]
 800557a:	e003      	b.n	8005584 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800558c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800558e:	04d9      	lsls	r1, r3, #19
 8005590:	4b63      	ldr	r3, [pc, #396]	; (8005720 <USB_HC_StartXfer+0x280>)
 8005592:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005594:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	7a9b      	ldrb	r3, [r3, #10]
 800559a:	075b      	lsls	r3, r3, #29
 800559c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055a0:	69f9      	ldr	r1, [r7, #28]
 80055a2:	0148      	lsls	r0, r1, #5
 80055a4:	6a39      	ldr	r1, [r7, #32]
 80055a6:	4401      	add	r1, r0
 80055a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80055ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80055ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80055b0:	79fb      	ldrb	r3, [r7, #7]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	68d9      	ldr	r1, [r3, #12]
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	015a      	lsls	r2, r3, #5
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	4413      	add	r3, r2
 80055c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c6:	460a      	mov	r2, r1
 80055c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	bf0c      	ite	eq
 80055da:	2301      	moveq	r3, #1
 80055dc:	2300      	movne	r3, #0
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	69fa      	ldr	r2, [r7, #28]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005600:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	4413      	add	r3, r2
 800560a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	7e7b      	ldrb	r3, [r7, #25]
 8005612:	075b      	lsls	r3, r3, #29
 8005614:	69f9      	ldr	r1, [r7, #28]
 8005616:	0148      	lsls	r0, r1, #5
 8005618:	6a39      	ldr	r1, [r7, #32]
 800561a:	4401      	add	r1, r0
 800561c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005620:	4313      	orrs	r3, r2
 8005622:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	4413      	add	r3, r2
 800562c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800563a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	78db      	ldrb	r3, [r3, #3]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800564a:	613b      	str	r3, [r7, #16]
 800564c:	e003      	b.n	8005656 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005654:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800565c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	015a      	lsls	r2, r3, #5
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	4413      	add	r3, r2
 8005666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566a:	461a      	mov	r2, r3
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005676:	2300      	movs	r3, #0
 8005678:	e04e      	b.n	8005718 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	78db      	ldrb	r3, [r3, #3]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d149      	bne.n	8005716 <USB_HC_StartXfer+0x276>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d045      	beq.n	8005716 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	79db      	ldrb	r3, [r3, #7]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d830      	bhi.n	80056f4 <USB_HC_StartXfer+0x254>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <USB_HC_StartXfer+0x1f8>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056a9 	.word	0x080056a9
 800569c:	080056cd 	.word	0x080056cd
 80056a0:	080056a9 	.word	0x080056a9
 80056a4:	080056cd 	.word	0x080056cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	3303      	adds	r3, #3
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80056b2:	8afa      	ldrh	r2, [r7, #22]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d91c      	bls.n	80056f8 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	f043 0220 	orr.w	r2, r3, #32
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80056ca:	e015      	b.n	80056f8 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	3303      	adds	r3, #3
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80056d6:	8afa      	ldrh	r2, [r7, #22]
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d90a      	bls.n	80056fc <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80056f2:	e003      	b.n	80056fc <USB_HC_StartXfer+0x25c>

      default:
        break;
 80056f4:	bf00      	nop
 80056f6:	e002      	b.n	80056fe <USB_HC_StartXfer+0x25e>
        break;
 80056f8:	bf00      	nop
 80056fa:	e000      	b.n	80056fe <USB_HC_StartXfer+0x25e>
        break;
 80056fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	68d9      	ldr	r1, [r3, #12]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	785a      	ldrb	r2, [r3, #1]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	b29b      	uxth	r3, r3
 800570c:	2000      	movs	r0, #0
 800570e:	9000      	str	r0, [sp, #0]
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7ff fb31 	bl	8004d78 <USB_WritePacket>
  }

  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3728      	adds	r7, #40	; 0x28
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	1ff80000 	.word	0x1ff80000

08005724 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	b29b      	uxth	r3, r3
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005746:	b480      	push	{r7}
 8005748:	b089      	sub	sp, #36	; 0x24
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	0c9b      	lsrs	r3, r3, #18
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	0fdb      	lsrs	r3, r3, #31
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d104      	bne.n	80057a0 <USB_HC_Halt+0x5a>
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e0c8      	b.n	8005932 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <USB_HC_Halt+0x66>
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d163      	bne.n	8005874 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057ca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f040 80ab 	bne.w	8005930 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d133      	bne.n	800584e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	0151      	lsls	r1, r2, #5
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	440a      	add	r2, r1
 80057fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005800:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005804:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	69fa      	ldr	r2, [r7, #28]
 800581a:	440a      	add	r2, r1
 800581c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005820:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005824:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3301      	adds	r3, #1
 800582a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005832:	d81d      	bhi.n	8005870 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	4413      	add	r3, r2
 800583c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584a:	d0ec      	beq.n	8005826 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800584c:	e070      	b.n	8005930 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	69fa      	ldr	r2, [r7, #28]
 8005862:	440a      	add	r2, r1
 8005864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005868:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800586c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800586e:	e05f      	b.n	8005930 <USB_HC_Halt+0x1ea>
            break;
 8005870:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005872:	e05d      	b.n	8005930 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	4413      	add	r3, r2
 800587c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	0151      	lsls	r1, r2, #5
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	440a      	add	r2, r1
 800588a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005892:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d133      	bne.n	800590c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058c2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	015a      	lsls	r2, r3, #5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	0151      	lsls	r1, r2, #5
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	440a      	add	r2, r1
 80058da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3301      	adds	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058f0:	d81d      	bhi.n	800592e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005908:	d0ec      	beq.n	80058e4 <USB_HC_Halt+0x19e>
 800590a:	e011      	b.n	8005930 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	69fa      	ldr	r2, [r7, #28]
 8005920:	440a      	add	r2, r1
 8005922:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800592a:	6013      	str	r3, [r2, #0]
 800592c:	e000      	b.n	8005930 <USB_HC_Halt+0x1ea>
          break;
 800592e:	bf00      	nop
    }
  }

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3724      	adds	r7, #36	; 0x24
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
	...

08005940 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005954:	2301      	movs	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	04da      	lsls	r2, r3, #19
 800595c:	4b15      	ldr	r3, [pc, #84]	; (80059b4 <USB_DoPing+0x74>)
 800595e:	4013      	ands	r3, r2
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	440a      	add	r2, r1
 8005968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800596c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005970:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4413      	add	r3, r2
 800597a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005988:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005990:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	4413      	add	r3, r2
 800599a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599e:	461a      	mov	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	1ff80000 	.word	0x1ff80000

080059b8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b088      	sub	sp, #32
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80059c0:	2300      	movs	r3, #0
 80059c2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7ff f912 	bl	8004bf6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059d2:	2110      	movs	r1, #16
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f7ff f96b 	bl	8004cb0 <USB_FlushTxFifo>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff f997 	bl	8004d18 <USB_FlushRxFifo>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80059f4:	2300      	movs	r3, #0
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e01f      	b.n	8005a3a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a20:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a2e:	461a      	mov	r2, r3
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	3301      	adds	r3, #1
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b0f      	cmp	r3, #15
 8005a3e:	d9dc      	bls.n	80059fa <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
 8005a44:	e034      	b.n	8005ab0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a5c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a8c:	d80c      	bhi.n	8005aa8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aa4:	d0ec      	beq.n	8005a80 <USB_StopHost+0xc8>
 8005aa6:	e000      	b.n	8005aaa <USB_StopHost+0xf2>
        break;
 8005aa8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	3301      	adds	r3, #1
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b0f      	cmp	r3, #15
 8005ab4:	d9c7      	bls.n	8005a46 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005abc:	461a      	mov	r2, r3
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff f881 	bl	8004bd4 <USB_EnableGlobalInt>

  return ret;
 8005ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005adc:	b590      	push	{r4, r7, lr}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af04      	add	r7, sp, #16
 8005ae2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	2102      	movs	r1, #2
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fc66 	bl	80063bc <USBH_FindInterface>
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	2bff      	cmp	r3, #255	; 0xff
 8005af8:	d002      	beq.n	8005b00 <USBH_CDC_InterfaceInit+0x24>
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d901      	bls.n	8005b04 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005b00:	2302      	movs	r3, #2
 8005b02:	e13d      	b.n	8005d80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc3b 	bl	8006384 <USBH_SelectInterface>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005b12:	7bbb      	ldrb	r3, [r7, #14]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e131      	b.n	8005d80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005b22:	2050      	movs	r0, #80	; 0x50
 8005b24:	f002 fafa 	bl	800811c <malloc>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e11f      	b.n	8005d80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005b40:	2250      	movs	r2, #80	; 0x50
 8005b42:	2100      	movs	r1, #0
 8005b44:	68b8      	ldr	r0, [r7, #8]
 8005b46:	f002 faf9 	bl	800813c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	211a      	movs	r1, #26
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b25b      	sxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da15      	bge.n	8005b8e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	211a      	movs	r1, #26
 8005b68:	fb01 f303 	mul.w	r3, r1, r3
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b72:	781a      	ldrb	r2, [r3, #0]
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	211a      	movs	r1, #26
 8005b7e:	fb01 f303 	mul.w	r3, r1, r3
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b88:	881a      	ldrh	r2, [r3, #0]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f001 ff2c 	bl	80079f2 <USBH_AllocPipe>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	7819      	ldrb	r1, [r3, #0]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	7858      	ldrb	r0, [r3, #1]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bb6:	68ba      	ldr	r2, [r7, #8]
 8005bb8:	8952      	ldrh	r2, [r2, #10]
 8005bba:	9202      	str	r2, [sp, #8]
 8005bbc:	2203      	movs	r2, #3
 8005bbe:	9201      	str	r2, [sp, #4]
 8005bc0:	9300      	str	r3, [sp, #0]
 8005bc2:	4623      	mov	r3, r4
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fee4 	bl	8007994 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f002 f9f3 	bl	8007fc0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2200      	movs	r2, #0
 8005bde:	210a      	movs	r1, #10
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 fbeb 	bl	80063bc <USBH_FindInterface>
 8005be6:	4603      	mov	r3, r0
 8005be8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005bea:	7bfb      	ldrb	r3, [r7, #15]
 8005bec:	2bff      	cmp	r3, #255	; 0xff
 8005bee:	d002      	beq.n	8005bf6 <USBH_CDC_InterfaceInit+0x11a>
 8005bf0:	7bfb      	ldrb	r3, [r7, #15]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d901      	bls.n	8005bfa <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	e0c2      	b.n	8005d80 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	211a      	movs	r1, #26
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	4413      	add	r3, r2
 8005c06:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	b25b      	sxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da16      	bge.n	8005c40 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c12:	7bfb      	ldrb	r3, [r7, #15]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	211a      	movs	r1, #26
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c22:	781a      	ldrb	r2, [r3, #0]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	211a      	movs	r1, #26
 8005c2e:	fb01 f303 	mul.w	r3, r1, r3
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c38:	881a      	ldrh	r2, [r3, #0]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	835a      	strh	r2, [r3, #26]
 8005c3e:	e015      	b.n	8005c6c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	211a      	movs	r1, #26
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005c50:	781a      	ldrb	r2, [r3, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	211a      	movs	r1, #26
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005c66:	881a      	ldrh	r2, [r3, #0]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	211a      	movs	r1, #26
 8005c72:	fb01 f303 	mul.w	r3, r1, r3
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	da16      	bge.n	8005cb2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	211a      	movs	r1, #26
 8005c8a:	fb01 f303 	mul.w	r3, r1, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005c94:	781a      	ldrb	r2, [r3, #0]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005c9a:	7bfb      	ldrb	r3, [r7, #15]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	211a      	movs	r1, #26
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005caa:	881a      	ldrh	r2, [r3, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	835a      	strh	r2, [r3, #26]
 8005cb0:	e015      	b.n	8005cde <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	211a      	movs	r1, #26
 8005cb8:	fb01 f303 	mul.w	r3, r1, r3
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005cc2:	781a      	ldrb	r2, [r3, #0]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	211a      	movs	r1, #26
 8005cce:	fb01 f303 	mul.w	r3, r1, r3
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005cd8:	881a      	ldrh	r2, [r3, #0]
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	7b9b      	ldrb	r3, [r3, #14]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fe84 	bl	80079f2 <USBH_AllocPipe>
 8005cea:	4603      	mov	r3, r0
 8005cec:	461a      	mov	r2, r3
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	7bdb      	ldrb	r3, [r3, #15]
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f001 fe7a 	bl	80079f2 <USBH_AllocPipe>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	461a      	mov	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	7b59      	ldrb	r1, [r3, #13]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	7b98      	ldrb	r0, [r3, #14]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	8b12      	ldrh	r2, [r2, #24]
 8005d1e:	9202      	str	r2, [sp, #8]
 8005d20:	2202      	movs	r2, #2
 8005d22:	9201      	str	r2, [sp, #4]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	4623      	mov	r3, r4
 8005d28:	4602      	mov	r2, r0
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f001 fe32 	bl	8007994 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	7b19      	ldrb	r1, [r3, #12]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	7bd8      	ldrb	r0, [r3, #15]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	8b52      	ldrh	r2, [r2, #26]
 8005d48:	9202      	str	r2, [sp, #8]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	9201      	str	r2, [sp, #4]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	4623      	mov	r3, r4
 8005d52:	4602      	mov	r2, r0
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 fe1d 	bl	8007994 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	7b5b      	ldrb	r3, [r3, #13]
 8005d66:	2200      	movs	r2, #0
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f002 f928 	bl	8007fc0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	7b1b      	ldrb	r3, [r3, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f002 f921 	bl	8007fc0 <USBH_LL_SetToggle>

  return USBH_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd90      	pop	{r4, r7, pc}

08005d88 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 fe12 	bl	80079d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 fe3d 	bl	8007a34 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	7b1b      	ldrb	r3, [r3, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00e      	beq.n	8005de6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	7b1b      	ldrb	r3, [r3, #12]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 fdff 	bl	80079d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	7b1b      	ldrb	r3, [r3, #12]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 fe2a 	bl	8007a34 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	7b5b      	ldrb	r3, [r3, #13]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	7b5b      	ldrb	r3, [r3, #13]
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 fdec 	bl	80079d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	7b5b      	ldrb	r3, [r3, #13]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 fe17 	bl	8007a34 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00b      	beq.n	8005e30 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f002 f983 	bl	800812c <free>
    phost->pActiveClass->pData = 0U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3340      	adds	r3, #64	; 0x40
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8b1 	bl	8005fba <GetLineCoding>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005e5c:	7afb      	ldrb	r3, [r7, #11]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d105      	bne.n	8005e6e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005e68:	2102      	movs	r1, #2
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005e6e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005e80:	2301      	movs	r3, #1
 8005e82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d877      	bhi.n	8005f8c <USBH_CDC_Process+0x114>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <USBH_CDC_Process+0x2c>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005eb9 	.word	0x08005eb9
 8005ea8:	08005ebf 	.word	0x08005ebf
 8005eac:	08005eef 	.word	0x08005eef
 8005eb0:	08005f63 	.word	0x08005f63
 8005eb4:	08005f71 	.word	0x08005f71
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebc:	e06d      	b.n	8005f9a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f897 	bl	8005ff8 <SetLineCoding>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005ece:	7bbb      	ldrb	r3, [r7, #14]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d104      	bne.n	8005ede <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005edc:	e058      	b.n	8005f90 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005ede:	7bbb      	ldrb	r3, [r7, #14]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d055      	beq.n	8005f90 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2204      	movs	r2, #4
 8005ee8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005eec:	e050      	b.n	8005f90 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3340      	adds	r3, #64	; 0x40
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f860 	bl	8005fba <GetLineCoding>
 8005efa:	4603      	mov	r3, r0
 8005efc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005efe:	7bbb      	ldrb	r3, [r7, #14]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d126      	bne.n	8005f52 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f16:	791b      	ldrb	r3, [r3, #4]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d13b      	bne.n	8005f94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f26:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d133      	bne.n	8005f94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f36:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d12b      	bne.n	8005f94 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f44:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d124      	bne.n	8005f94 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f958 	bl	8006200 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005f50:	e020      	b.n	8005f94 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005f52:	7bbb      	ldrb	r3, [r7, #14]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d01d      	beq.n	8005f94 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005f60:	e018      	b.n	8005f94 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f867 	bl	8006036 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f8da 	bl	8006122 <CDC_ProcessReception>
      break;
 8005f6e:	e014      	b.n	8005f9a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005f70:	2100      	movs	r1, #0
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 ffef 	bl	8006f56 <USBH_ClrFeature>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10a      	bne.n	8005f98 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005f8a:	e005      	b.n	8005f98 <USBH_CDC_Process+0x120>

    default:
      break;
 8005f8c:	bf00      	nop
 8005f8e:	e004      	b.n	8005f9a <USBH_CDC_Process+0x122>
      break;
 8005f90:	bf00      	nop
 8005f92:	e002      	b.n	8005f9a <USBH_CDC_Process+0x122>
      break;
 8005f94:	bf00      	nop
 8005f96:	e000      	b.n	8005f9a <USBH_CDC_Process+0x122>
      break;
 8005f98:	bf00      	nop

  }

  return status;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	22a1      	movs	r2, #161	; 0xa1
 8005fc8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2221      	movs	r2, #33	; 0x21
 8005fce:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2207      	movs	r2, #7
 8005fe0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2207      	movs	r2, #7
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 fa81 	bl	80074f0 <USBH_CtlReq>
 8005fee:	4603      	mov	r3, r0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2221      	movs	r2, #33	; 0x21
 8006006:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2207      	movs	r2, #7
 800601e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	2207      	movs	r2, #7
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f001 fa62 	bl	80074f0 <USBH_CtlReq>
 800602c:	4603      	mov	r3, r0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af02      	add	r7, sp, #8
 800603c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006044:	69db      	ldr	r3, [r3, #28]
 8006046:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006048:	2300      	movs	r3, #0
 800604a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006052:	2b01      	cmp	r3, #1
 8006054:	d002      	beq.n	800605c <CDC_ProcessTransmission+0x26>
 8006056:	2b02      	cmp	r3, #2
 8006058:	d023      	beq.n	80060a2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800605a:	e05e      	b.n	800611a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	8b12      	ldrh	r2, [r2, #24]
 8006064:	4293      	cmp	r3, r2
 8006066:	d90b      	bls.n	8006080 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	69d9      	ldr	r1, [r3, #28]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8b1a      	ldrh	r2, [r3, #24]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	7b5b      	ldrb	r3, [r3, #13]
 8006074:	2001      	movs	r0, #1
 8006076:	9000      	str	r0, [sp, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f001 fc48 	bl	800790e <USBH_BulkSendData>
 800607e:	e00b      	b.n	8006098 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	7b5b      	ldrb	r3, [r3, #13]
 800608e:	2001      	movs	r0, #1
 8006090:	9000      	str	r0, [sp, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fc3b 	bl	800790e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80060a0:	e03b      	b.n	800611a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	7b5b      	ldrb	r3, [r3, #13]
 80060a6:	4619      	mov	r1, r3
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f001 ff5f 	bl	8007f6c <USBH_LL_GetURBState>
 80060ae:	4603      	mov	r3, r0
 80060b0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d128      	bne.n	800610a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	8b12      	ldrh	r2, [r2, #24]
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d90e      	bls.n	80060e2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	8b12      	ldrh	r2, [r2, #24]
 80060cc:	1a9a      	subs	r2, r3, r2
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	8b12      	ldrh	r2, [r2, #24]
 80060da:	441a      	add	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	61da      	str	r2, [r3, #28]
 80060e0:	e002      	b.n	80060e8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80060f8:	e00e      	b.n	8006118 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f868 	bl	80061d8 <USBH_CDC_TransmitCallback>
      break;
 8006108:	e006      	b.n	8006118 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800610a:	7afb      	ldrb	r3, [r7, #11]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d103      	bne.n	8006118 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006118:	bf00      	nop
  }
}
 800611a:	bf00      	nop
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b086      	sub	sp, #24
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006134:	2300      	movs	r3, #0
 8006136:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800613e:	2b03      	cmp	r3, #3
 8006140:	d002      	beq.n	8006148 <CDC_ProcessReception+0x26>
 8006142:	2b04      	cmp	r3, #4
 8006144:	d00e      	beq.n	8006164 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006146:	e043      	b.n	80061d0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	6a19      	ldr	r1, [r3, #32]
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	8b5a      	ldrh	r2, [r3, #26]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	7b1b      	ldrb	r3, [r3, #12]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 fbff 	bl	8007958 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2204      	movs	r2, #4
 800615e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006162:	e035      	b.n	80061d0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	7b1b      	ldrb	r3, [r3, #12]
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f001 fefe 	bl	8007f6c <USBH_LL_GetURBState>
 8006170:	4603      	mov	r3, r0
 8006172:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006174:	7cfb      	ldrb	r3, [r7, #19]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d129      	bne.n	80061ce <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	7b1b      	ldrb	r3, [r3, #12]
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f001 fe61 	bl	8007e48 <USBH_LL_GetLastXferSize>
 8006186:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	429a      	cmp	r2, r3
 8006190:	d016      	beq.n	80061c0 <CDC_ProcessReception+0x9e>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	8b5b      	ldrh	r3, [r3, #26]
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4293      	cmp	r3, r2
 800619c:	d910      	bls.n	80061c0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	6a1a      	ldr	r2, [r3, #32]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	441a      	add	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2203      	movs	r2, #3
 80061ba:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80061be:	e006      	b.n	80061ce <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f80f 	bl	80061ec <USBH_CDC_ReceiveCallback>
      break;
 80061ce:	bf00      	nop
  }
}
 80061d0:	bf00      	nop
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	4613      	mov	r3, r2
 8006220:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006228:	2302      	movs	r3, #2
 800622a:	e029      	b.n	8006280 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	79fa      	ldrb	r2, [r7, #7]
 8006230:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 f81f 	bl	8006288 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f001 fd31 	bl	8007ce0 <USBH_LL_Init>

  return USBH_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006294:	2300      	movs	r3, #0
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e009      	b.n	80062ae <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	33e0      	adds	r3, #224	; 0xe0
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	2200      	movs	r2, #0
 80062a6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b0f      	cmp	r3, #15
 80062b2:	d9f2      	bls.n	800629a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	e009      	b.n	80062ce <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3301      	adds	r3, #1
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d4:	d3f1      	bcc.n	80062ba <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2240      	movs	r2, #64	; 0x40
 80062fa:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3714      	adds	r7, #20
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d016      	beq.n	8006372 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10e      	bne.n	800636c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006354:	1c59      	adds	r1, r3, #1
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	33de      	adds	r3, #222	; 0xde
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	73fb      	strb	r3, [r7, #15]
 800636a:	e004      	b.n	8006376 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800636c:	2302      	movs	r3, #2
 800636e:	73fb      	strb	r3, [r7, #15]
 8006370:	e001      	b.n	8006376 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006372:	2302      	movs	r3, #2
 8006374:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800639a:	78fa      	ldrb	r2, [r7, #3]
 800639c:	429a      	cmp	r2, r3
 800639e:	d204      	bcs.n	80063aa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	78fa      	ldrb	r2, [r7, #3]
 80063a4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80063a8:	e001      	b.n	80063ae <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80063aa:	2302      	movs	r3, #2
 80063ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3714      	adds	r7, #20
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	461a      	mov	r2, r3
 80063ca:	4603      	mov	r3, r0
 80063cc:	70fb      	strb	r3, [r7, #3]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70bb      	strb	r3, [r7, #2]
 80063d2:	4613      	mov	r3, r2
 80063d4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80063e4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80063e6:	e025      	b.n	8006434 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	221a      	movs	r2, #26
 80063ec:	fb02 f303 	mul.w	r3, r2, r3
 80063f0:	3308      	adds	r3, #8
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4413      	add	r3, r2
 80063f6:	3302      	adds	r3, #2
 80063f8:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	795b      	ldrb	r3, [r3, #5]
 80063fe:	78fa      	ldrb	r2, [r7, #3]
 8006400:	429a      	cmp	r2, r3
 8006402:	d002      	beq.n	800640a <USBH_FindInterface+0x4e>
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	2bff      	cmp	r3, #255	; 0xff
 8006408:	d111      	bne.n	800642e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800640e:	78ba      	ldrb	r2, [r7, #2]
 8006410:	429a      	cmp	r2, r3
 8006412:	d002      	beq.n	800641a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006414:	78bb      	ldrb	r3, [r7, #2]
 8006416:	2bff      	cmp	r3, #255	; 0xff
 8006418:	d109      	bne.n	800642e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800641e:	787a      	ldrb	r2, [r7, #1]
 8006420:	429a      	cmp	r2, r3
 8006422:	d002      	beq.n	800642a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006424:	787b      	ldrb	r3, [r7, #1]
 8006426:	2bff      	cmp	r3, #255	; 0xff
 8006428:	d101      	bne.n	800642e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	e006      	b.n	800643c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	3301      	adds	r3, #1
 8006432:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d9d6      	bls.n	80063e8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800643a:	23ff      	movs	r3, #255	; 0xff
}
 800643c:	4618      	mov	r0, r3
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 fc81 	bl	8007d58 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006456:	2101      	movs	r1, #1
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 fd9a 	bl	8007f92 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af04      	add	r7, sp, #16
 800646e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006470:	2302      	movs	r3, #2
 8006472:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b01      	cmp	r3, #1
 8006482:	d102      	bne.n	800648a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2203      	movs	r2, #3
 8006488:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b0b      	cmp	r3, #11
 8006492:	f200 81be 	bhi.w	8006812 <USBH_Process+0x3aa>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <USBH_Process+0x34>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064cd 	.word	0x080064cd
 80064a0:	080064ff 	.word	0x080064ff
 80064a4:	08006567 	.word	0x08006567
 80064a8:	080067ad 	.word	0x080067ad
 80064ac:	08006813 	.word	0x08006813
 80064b0:	0800660b 	.word	0x0800660b
 80064b4:	08006753 	.word	0x08006753
 80064b8:	08006641 	.word	0x08006641
 80064bc:	08006661 	.word	0x08006661
 80064c0:	08006681 	.word	0x08006681
 80064c4:	080066c5 	.word	0x080066c5
 80064c8:	08006795 	.word	0x08006795
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 819e 	beq.w	8006816 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80064e0:	20c8      	movs	r0, #200	; 0xc8
 80064e2:	f001 fd9d 	bl	8008020 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fc93 	bl	8007e12 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80064fc:	e18b      	b.n	8006816 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006504:	2b01      	cmp	r3, #1
 8006506:	d107      	bne.n	8006518 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006516:	e18d      	b.n	8006834 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800651e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006522:	d914      	bls.n	800654e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800652a:	3301      	adds	r3, #1
 800652c:	b2da      	uxtb	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800653a:	2b03      	cmp	r3, #3
 800653c:	d903      	bls.n	8006546 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	220d      	movs	r2, #13
 8006542:	701a      	strb	r2, [r3, #0]
      break;
 8006544:	e176      	b.n	8006834 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	701a      	strb	r2, [r3, #0]
      break;
 800654c:	e172      	b.n	8006834 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006554:	f103 020a 	add.w	r2, r3, #10
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800655e:	200a      	movs	r0, #10
 8006560:	f001 fd5e 	bl	8008020 <USBH_Delay>
      break;
 8006564:	e166      	b.n	8006834 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006576:	2104      	movs	r1, #4
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800657c:	2064      	movs	r0, #100	; 0x64
 800657e:	f001 fd4f 	bl	8008020 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fc1e 	bl	8007dc4 <USBH_LL_GetSpeed>
 8006588:	4603      	mov	r3, r0
 800658a:	461a      	mov	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2205      	movs	r2, #5
 8006596:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006598:	2100      	movs	r1, #0
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f001 fa29 	bl	80079f2 <USBH_AllocPipe>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80065a8:	2180      	movs	r1, #128	; 0x80
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 fa21 	bl	80079f2 <USBH_AllocPipe>
 80065b0:	4603      	mov	r3, r0
 80065b2:	461a      	mov	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	7919      	ldrb	r1, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80065cc:	b292      	uxth	r2, r2
 80065ce:	9202      	str	r2, [sp, #8]
 80065d0:	2200      	movs	r2, #0
 80065d2:	9201      	str	r2, [sp, #4]
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	4603      	mov	r3, r0
 80065d8:	2280      	movs	r2, #128	; 0x80
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f001 f9da 	bl	8007994 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	7959      	ldrb	r1, [r3, #5]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80065f4:	b292      	uxth	r2, r2
 80065f6:	9202      	str	r2, [sp, #8]
 80065f8:	2200      	movs	r2, #0
 80065fa:	9201      	str	r2, [sp, #4]
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4603      	mov	r3, r0
 8006600:	2200      	movs	r2, #0
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 f9c6 	bl	8007994 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006608:	e114      	b.n	8006834 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f918 	bl	8006840 <USBH_HandleEnum>
 8006610:	4603      	mov	r3, r0
 8006612:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	f040 80fe 	bne.w	800681a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800662c:	2b01      	cmp	r3, #1
 800662e:	d103      	bne.n	8006638 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2208      	movs	r2, #8
 8006634:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006636:	e0f0      	b.n	800681a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2207      	movs	r2, #7
 800663c:	701a      	strb	r2, [r3, #0]
      break;
 800663e:	e0ec      	b.n	800681a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 80e9 	beq.w	800681e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006652:	2101      	movs	r1, #1
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2208      	movs	r2, #8
 800665c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800665e:	e0de      	b.n	800681e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006666:	b29b      	uxth	r3, r3
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fc2c 	bl	8006ec8 <USBH_SetCfg>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	f040 80d5 	bne.w	8006822 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2209      	movs	r2, #9
 800667c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800667e:	e0d0      	b.n	8006822 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d016      	beq.n	80066bc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800668e:	2101      	movs	r1, #1
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fc3c 	bl	8006f0e <USBH_SetFeature>
 8006696:	4603      	mov	r3, r0
 8006698:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800669a:	7bbb      	ldrb	r3, [r7, #14]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d103      	bne.n	80066aa <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	220a      	movs	r2, #10
 80066a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80066a8:	e0bd      	b.n	8006826 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	f040 80b9 	bne.w	8006826 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	220a      	movs	r2, #10
 80066b8:	701a      	strb	r2, [r3, #0]
      break;
 80066ba:	e0b4      	b.n	8006826 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	220a      	movs	r2, #10
 80066c0:	701a      	strb	r2, [r3, #0]
      break;
 80066c2:	e0b0      	b.n	8006826 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 80ad 	beq.w	800682a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
 80066dc:	e016      	b.n	800670c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80066de:	7bfa      	ldrb	r2, [r7, #15]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	32de      	adds	r2, #222	; 0xde
 80066e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e8:	791a      	ldrb	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d108      	bne.n	8006706 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80066f4:	7bfa      	ldrb	r2, [r7, #15]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	32de      	adds	r2, #222	; 0xde
 80066fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006704:	e005      	b.n	8006712 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	3301      	adds	r3, #1
 800670a:	73fb      	strb	r3, [r7, #15]
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0e5      	beq.n	80066de <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d016      	beq.n	800674a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	4798      	blx	r3
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2206      	movs	r2, #6
 8006732:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800673a:	2103      	movs	r1, #3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006740:	e073      	b.n	800682a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	220d      	movs	r2, #13
 8006746:	701a      	strb	r2, [r3, #0]
      break;
 8006748:	e06f      	b.n	800682a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	220d      	movs	r2, #13
 800674e:	701a      	strb	r2, [r3, #0]
      break;
 8006750:	e06b      	b.n	800682a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d017      	beq.n	800678c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	4798      	blx	r3
 8006768:	4603      	mov	r3, r0
 800676a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800676c:	7bbb      	ldrb	r3, [r7, #14]
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d103      	bne.n	800677c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	220b      	movs	r2, #11
 8006778:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800677a:	e058      	b.n	800682e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d154      	bne.n	800682e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	220d      	movs	r2, #13
 8006788:	701a      	strb	r2, [r3, #0]
      break;
 800678a:	e050      	b.n	800682e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	220d      	movs	r2, #13
 8006790:	701a      	strb	r2, [r3, #0]
      break;
 8006792:	e04c      	b.n	800682e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d049      	beq.n	8006832 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
      }
      break;
 80067aa:	e042      	b.n	8006832 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fd67 	bl	8006288 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067e8:	2105      	movs	r1, #5
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d107      	bne.n	800680a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7ff fe20 	bl	8006448 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006808:	e014      	b.n	8006834 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f001 faa4 	bl	8007d58 <USBH_LL_Start>
      break;
 8006810:	e010      	b.n	8006834 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006812:	bf00      	nop
 8006814:	e00e      	b.n	8006834 <USBH_Process+0x3cc>
      break;
 8006816:	bf00      	nop
 8006818:	e00c      	b.n	8006834 <USBH_Process+0x3cc>
      break;
 800681a:	bf00      	nop
 800681c:	e00a      	b.n	8006834 <USBH_Process+0x3cc>
    break;
 800681e:	bf00      	nop
 8006820:	e008      	b.n	8006834 <USBH_Process+0x3cc>
      break;
 8006822:	bf00      	nop
 8006824:	e006      	b.n	8006834 <USBH_Process+0x3cc>
      break;
 8006826:	bf00      	nop
 8006828:	e004      	b.n	8006834 <USBH_Process+0x3cc>
      break;
 800682a:	bf00      	nop
 800682c:	e002      	b.n	8006834 <USBH_Process+0x3cc>
      break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <USBH_Process+0x3cc>
      break;
 8006832:	bf00      	nop
  }
  return USBH_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop

08006840 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af04      	add	r7, sp, #16
 8006846:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800684c:	2301      	movs	r3, #1
 800684e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b07      	cmp	r3, #7
 8006856:	f200 81c1 	bhi.w	8006bdc <USBH_HandleEnum+0x39c>
 800685a:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <USBH_HandleEnum+0x20>)
 800685c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006860:	08006881 	.word	0x08006881
 8006864:	0800693f 	.word	0x0800693f
 8006868:	080069a9 	.word	0x080069a9
 800686c:	08006a37 	.word	0x08006a37
 8006870:	08006aa1 	.word	0x08006aa1
 8006874:	08006b11 	.word	0x08006b11
 8006878:	08006b57 	.word	0x08006b57
 800687c:	08006b9d 	.word	0x08006b9d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006880:	2108      	movs	r1, #8
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa50 	bl	8006d28 <USBH_Get_DevDesc>
 8006888:	4603      	mov	r3, r0
 800688a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800688c:	7bbb      	ldrb	r3, [r7, #14]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d130      	bne.n	80068f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7919      	ldrb	r1, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80068b6:	b292      	uxth	r2, r2
 80068b8:	9202      	str	r2, [sp, #8]
 80068ba:	2200      	movs	r2, #0
 80068bc:	9201      	str	r2, [sp, #4]
 80068be:	9300      	str	r3, [sp, #0]
 80068c0:	4603      	mov	r3, r0
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f865 	bl	8007994 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7959      	ldrb	r1, [r3, #5]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80068de:	b292      	uxth	r2, r2
 80068e0:	9202      	str	r2, [sp, #8]
 80068e2:	2200      	movs	r2, #0
 80068e4:	9201      	str	r2, [sp, #4]
 80068e6:	9300      	str	r3, [sp, #0]
 80068e8:	4603      	mov	r3, r0
 80068ea:	2200      	movs	r2, #0
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 f851 	bl	8007994 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80068f2:	e175      	b.n	8006be0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068f4:	7bbb      	ldrb	r3, [r7, #14]
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	f040 8172 	bne.w	8006be0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006902:	3301      	adds	r3, #1
 8006904:	b2da      	uxtb	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006912:	2b03      	cmp	r3, #3
 8006914:	d903      	bls.n	800691e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	220d      	movs	r2, #13
 800691a:	701a      	strb	r2, [r3, #0]
      break;
 800691c:	e160      	b.n	8006be0 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	795b      	ldrb	r3, [r3, #5]
 8006922:	4619      	mov	r1, r3
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 f885 	bl	8007a34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	791b      	ldrb	r3, [r3, #4]
 800692e:	4619      	mov	r1, r3
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f001 f87f 	bl	8007a34 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
      break;
 800693c:	e150      	b.n	8006be0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800693e:	2112      	movs	r1, #18
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f9f1 	bl	8006d28 <USBH_Get_DevDesc>
 8006946:	4603      	mov	r3, r0
 8006948:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d103      	bne.n	8006958 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006956:	e145      	b.n	8006be4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	2b03      	cmp	r3, #3
 800695c:	f040 8142 	bne.w	8006be4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006966:	3301      	adds	r3, #1
 8006968:	b2da      	uxtb	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006976:	2b03      	cmp	r3, #3
 8006978:	d903      	bls.n	8006982 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	220d      	movs	r2, #13
 800697e:	701a      	strb	r2, [r3, #0]
      break;
 8006980:	e130      	b.n	8006be4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	795b      	ldrb	r3, [r3, #5]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 f853 	bl	8007a34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	791b      	ldrb	r3, [r3, #4]
 8006992:	4619      	mov	r1, r3
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f001 f84d 	bl	8007a34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	701a      	strb	r2, [r3, #0]
      break;
 80069a6:	e11d      	b.n	8006be4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80069a8:	2101      	movs	r1, #1
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa68 	bl	8006e80 <USBH_SetAddress>
 80069b0:	4603      	mov	r3, r0
 80069b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d132      	bne.n	8006a20 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80069ba:	2002      	movs	r0, #2
 80069bc:	f001 fb30 	bl	8008020 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2203      	movs	r2, #3
 80069cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7919      	ldrb	r1, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80069e2:	b292      	uxth	r2, r2
 80069e4:	9202      	str	r2, [sp, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	9201      	str	r2, [sp, #4]
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	4603      	mov	r3, r0
 80069ee:	2280      	movs	r2, #128	; 0x80
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 ffcf 	bl	8007994 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	7959      	ldrb	r1, [r3, #5]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006a0a:	b292      	uxth	r2, r2
 8006a0c:	9202      	str	r2, [sp, #8]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	9201      	str	r2, [sp, #4]
 8006a12:	9300      	str	r3, [sp, #0]
 8006a14:	4603      	mov	r3, r0
 8006a16:	2200      	movs	r2, #0
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 ffbb 	bl	8007994 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006a1e:	e0e3      	b.n	8006be8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	f040 80e0 	bne.w	8006be8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	220d      	movs	r2, #13
 8006a2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	705a      	strb	r2, [r3, #1]
      break;
 8006a34:	e0d8      	b.n	8006be8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006a36:	2109      	movs	r1, #9
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f99d 	bl	8006d78 <USBH_Get_CfgDesc>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d103      	bne.n	8006a50 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006a4e:	e0cd      	b.n	8006bec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	f040 80ca 	bne.w	8006bec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a5e:	3301      	adds	r3, #1
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d903      	bls.n	8006a7a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	220d      	movs	r2, #13
 8006a76:	701a      	strb	r2, [r3, #0]
      break;
 8006a78:	e0b8      	b.n	8006bec <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	795b      	ldrb	r3, [r3, #5]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 ffd7 	bl	8007a34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	791b      	ldrb	r3, [r3, #4]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 ffd1 	bl	8007a34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	701a      	strb	r2, [r3, #0]
      break;
 8006a9e:	e0a5      	b.n	8006bec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 f965 	bl	8006d78 <USBH_Get_CfgDesc>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2205      	movs	r2, #5
 8006abc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006abe:	e097      	b.n	8006bf0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	f040 8094 	bne.w	8006bf0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ace:	3301      	adds	r3, #1
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d903      	bls.n	8006aea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	220d      	movs	r2, #13
 8006ae6:	701a      	strb	r2, [r3, #0]
      break;
 8006ae8:	e082      	b.n	8006bf0 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	795b      	ldrb	r3, [r3, #5]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 ff9f 	bl	8007a34 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	791b      	ldrb	r3, [r3, #4]
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 ff99 	bl	8007a34 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
      break;
 8006b0e:	e06f      	b.n	8006bf0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d019      	beq.n	8006b4e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006b26:	23ff      	movs	r3, #255	; 0xff
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f949 	bl	8006dc0 <USBH_Get_StringDesc>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006b32:	7bbb      	ldrb	r3, [r7, #14]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2206      	movs	r2, #6
 8006b3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b3e:	e059      	b.n	8006bf4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d156      	bne.n	8006bf4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2206      	movs	r2, #6
 8006b4a:	705a      	strb	r2, [r3, #1]
      break;
 8006b4c:	e052      	b.n	8006bf4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2206      	movs	r2, #6
 8006b52:	705a      	strb	r2, [r3, #1]
      break;
 8006b54:	e04e      	b.n	8006bf4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d019      	beq.n	8006b94 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006b6c:	23ff      	movs	r3, #255	; 0xff
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f926 	bl	8006dc0 <USBH_Get_StringDesc>
 8006b74:	4603      	mov	r3, r0
 8006b76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2207      	movs	r2, #7
 8006b82:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b84:	e038      	b.n	8006bf8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d135      	bne.n	8006bf8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2207      	movs	r2, #7
 8006b90:	705a      	strb	r2, [r3, #1]
      break;
 8006b92:	e031      	b.n	8006bf8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2207      	movs	r2, #7
 8006b98:	705a      	strb	r2, [r3, #1]
      break;
 8006b9a:	e02d      	b.n	8006bf8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d017      	beq.n	8006bd6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006bb2:	23ff      	movs	r3, #255	; 0xff
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f903 	bl	8006dc0 <USBH_Get_StringDesc>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006bc8:	e018      	b.n	8006bfc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d115      	bne.n	8006bfc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	e012      	b.n	8006bfc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bda:	e00f      	b.n	8006bfc <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006bdc:	bf00      	nop
 8006bde:	e00e      	b.n	8006bfe <USBH_HandleEnum+0x3be>
      break;
 8006be0:	bf00      	nop
 8006be2:	e00c      	b.n	8006bfe <USBH_HandleEnum+0x3be>
      break;
 8006be4:	bf00      	nop
 8006be6:	e00a      	b.n	8006bfe <USBH_HandleEnum+0x3be>
      break;
 8006be8:	bf00      	nop
 8006bea:	e008      	b.n	8006bfe <USBH_HandleEnum+0x3be>
      break;
 8006bec:	bf00      	nop
 8006bee:	e006      	b.n	8006bfe <USBH_HandleEnum+0x3be>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e004      	b.n	8006bfe <USBH_HandleEnum+0x3be>
      break;
 8006bf4:	bf00      	nop
 8006bf6:	e002      	b.n	8006bfe <USBH_HandleEnum+0x3be>
      break;
 8006bf8:	bf00      	nop
 8006bfa:	e000      	b.n	8006bfe <USBH_HandleEnum+0x3be>
      break;
 8006bfc:	bf00      	nop
  }
  return Status;
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f804 	bl	8006c4a <USBH_HandleSof>
}
 8006c42:	bf00      	nop
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b0b      	cmp	r3, #11
 8006c5a:	d10a      	bne.n	8006c72 <USBH_HandleSof+0x28>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d005      	beq.n	8006c72 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	4798      	blx	r3
  }
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006c8a:	bf00      	nop
}
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006ca6:	bf00      	nop
}
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 f844 	bl	8007d8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	791b      	ldrb	r3, [r3, #4]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fe91 	bl	8007a34 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	795b      	ldrb	r3, [r3, #5]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fe8b 	bl	8007a34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	4613      	mov	r3, r2
 8006d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d46:	2100      	movs	r1, #0
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f864 	bl	8006e16 <USBH_GetDescriptor>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10a      	bne.n	8006d6e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	b292      	uxth	r2, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f000 f918 	bl	8006f9e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	331c      	adds	r3, #28
 8006d88:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006d8a:	887b      	ldrh	r3, [r7, #2]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d94:	2100      	movs	r1, #0
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f83d 	bl	8006e16 <USBH_GetDescriptor>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d107      	bne.n	8006db6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8006da6:	887b      	ldrh	r3, [r7, #2]
 8006da8:	461a      	mov	r2, r3
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f987 	bl	80070c0 <USBH_ParseCfgDesc>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	460b      	mov	r3, r1
 8006dce:	72fb      	strb	r3, [r7, #11]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8006dd4:	7afb      	ldrb	r3, [r7, #11]
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ddc:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006de4:	893b      	ldrh	r3, [r7, #8]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	460b      	mov	r3, r1
 8006dea:	2100      	movs	r1, #0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f812 	bl	8006e16 <USBH_GetDescriptor>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d107      	bne.n	8006e0c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006e02:	893a      	ldrh	r2, [r7, #8]
 8006e04:	6879      	ldr	r1, [r7, #4]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 fb24 	bl	8007454 <USBH_ParseStringDesc>
  }

  return status;
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	60f8      	str	r0, [r7, #12]
 8006e1e:	607b      	str	r3, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	72fb      	strb	r3, [r7, #11]
 8006e24:	4613      	mov	r3, r2
 8006e26:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	789b      	ldrb	r3, [r3, #2]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d11c      	bne.n	8006e6a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006e30:	7afb      	ldrb	r3, [r7, #11]
 8006e32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2206      	movs	r2, #6
 8006e40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	893a      	ldrh	r2, [r7, #8]
 8006e46:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006e48:	893b      	ldrh	r3, [r7, #8]
 8006e4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e52:	d104      	bne.n	8006e5e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f240 4209 	movw	r2, #1033	; 0x409
 8006e5a:	829a      	strh	r2, [r3, #20]
 8006e5c:	e002      	b.n	8006e64 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	8b3a      	ldrh	r2, [r7, #24]
 8006e68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006e6a:	8b3b      	ldrh	r3, [r7, #24]
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fb3d 	bl	80074f0 <USBH_CtlReq>
 8006e76:	4603      	mov	r3, r0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	789b      	ldrb	r3, [r3, #2]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d10f      	bne.n	8006eb4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2205      	movs	r2, #5
 8006e9e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	b29a      	uxth	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fb19 	bl	80074f0 <USBH_CtlReq>
 8006ebe:	4603      	mov	r3, r0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	789b      	ldrb	r3, [r3, #2]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d10e      	bne.n	8006efa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2209      	movs	r2, #9
 8006ee6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	887a      	ldrh	r2, [r7, #2]
 8006eec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006efa:	2200      	movs	r2, #0
 8006efc:	2100      	movs	r1, #0
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 faf6 	bl	80074f0 <USBH_CtlReq>
 8006f04:	4603      	mov	r3, r0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b082      	sub	sp, #8
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	789b      	ldrb	r3, [r3, #2]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d10f      	bne.n	8006f42 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2203      	movs	r2, #3
 8006f2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006f42:	2200      	movs	r2, #0
 8006f44:	2100      	movs	r1, #0
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fad2 	bl	80074f0 <USBH_CtlReq>
 8006f4c:	4603      	mov	r3, r0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	789b      	ldrb	r3, [r3, #2]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d10f      	bne.n	8006f8a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 faae 	bl	80074f0 <USBH_CtlReq>
 8006f94:	4603      	mov	r3, r0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b085      	sub	sp, #20
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
 8006fa6:	60b9      	str	r1, [r7, #8]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	781a      	ldrb	r2, [r3, #0]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	785a      	ldrb	r2, [r3, #1]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	3302      	adds	r3, #2
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3303      	adds	r3, #3
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	791a      	ldrb	r2, [r3, #4]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	795a      	ldrb	r2, [r3, #5]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	799a      	ldrb	r2, [r3, #6]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	79da      	ldrb	r2, [r3, #7]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	79db      	ldrb	r3, [r3, #7]
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	dc11      	bgt.n	8007024 <USBH_ParseDevDesc+0x86>
 8007000:	2b08      	cmp	r3, #8
 8007002:	db16      	blt.n	8007032 <USBH_ParseDevDesc+0x94>
 8007004:	3b08      	subs	r3, #8
 8007006:	2201      	movs	r2, #1
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007014:	2b00      	cmp	r3, #0
 8007016:	bf14      	ite	ne
 8007018:	2301      	movne	r3, #1
 800701a:	2300      	moveq	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <USBH_ParseDevDesc+0x8a>
 8007022:	e006      	b.n	8007032 <USBH_ParseDevDesc+0x94>
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d104      	bne.n	8007032 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	79da      	ldrb	r2, [r3, #7]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	71da      	strb	r2, [r3, #7]
      break;
 8007030:	e003      	b.n	800703a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2240      	movs	r2, #64	; 0x40
 8007036:	71da      	strb	r2, [r3, #7]
      break;
 8007038:	bf00      	nop
  }

  if (length > 8U)
 800703a:	88fb      	ldrh	r3, [r7, #6]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d939      	bls.n	80070b4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	3308      	adds	r3, #8
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	b29a      	uxth	r2, r3
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	3309      	adds	r3, #9
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	021b      	lsls	r3, r3, #8
 8007052:	b29b      	uxth	r3, r3
 8007054:	4313      	orrs	r3, r2
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	330a      	adds	r3, #10
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b29a      	uxth	r2, r3
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	330b      	adds	r3, #11
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b29b      	uxth	r3, r3
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	b29b      	uxth	r3, r3
 8007070:	4313      	orrs	r3, r2
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	330c      	adds	r3, #12
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	b29a      	uxth	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	330d      	adds	r3, #13
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	b29b      	uxth	r3, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	7b9a      	ldrb	r2, [r3, #14]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	7bda      	ldrb	r2, [r3, #15]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	7c1a      	ldrb	r2, [r3, #16]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	7c5a      	ldrb	r2, [r3, #17]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	745a      	strb	r2, [r3, #17]
  }
}
 80070b4:	bf00      	nop
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08c      	sub	sp, #48	; 0x30
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80070d4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80070d6:	2300      	movs	r3, #0
 80070d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	785a      	ldrb	r2, [r3, #1]
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	3302      	adds	r3, #2
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b29a      	uxth	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	3303      	adds	r3, #3
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	b29b      	uxth	r3, r3
 8007110:	021b      	lsls	r3, r3, #8
 8007112:	b29b      	uxth	r3, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	b29b      	uxth	r3, r3
 8007118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800711c:	bf28      	it	cs
 800711e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007122:	b29a      	uxth	r2, r3
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	791a      	ldrb	r2, [r3, #4]
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	795a      	ldrb	r2, [r3, #5]
 8007134:	6a3b      	ldr	r3, [r7, #32]
 8007136:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	799a      	ldrb	r2, [r3, #6]
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	79da      	ldrb	r2, [r3, #7]
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	7a1a      	ldrb	r2, [r3, #8]
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b09      	cmp	r3, #9
 8007156:	d002      	beq.n	800715e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	2209      	movs	r2, #9
 800715c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	2b09      	cmp	r3, #9
 8007162:	f240 809d 	bls.w	80072a0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007166:	2309      	movs	r3, #9
 8007168:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800716e:	e081      	b.n	8007274 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007170:	f107 0316 	add.w	r3, r7, #22
 8007174:	4619      	mov	r1, r3
 8007176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007178:	f000 f99f 	bl	80074ba <USBH_GetNextDesc>
 800717c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	2b04      	cmp	r3, #4
 8007184:	d176      	bne.n	8007274 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b09      	cmp	r3, #9
 800718c:	d002      	beq.n	8007194 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	2209      	movs	r2, #9
 8007192:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007198:	221a      	movs	r2, #26
 800719a:	fb02 f303 	mul.w	r3, r2, r3
 800719e:	3308      	adds	r3, #8
 80071a0:	6a3a      	ldr	r2, [r7, #32]
 80071a2:	4413      	add	r3, r2
 80071a4:	3302      	adds	r3, #2
 80071a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80071a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071aa:	69f8      	ldr	r0, [r7, #28]
 80071ac:	f000 f87e 	bl	80072ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80071ba:	e043      	b.n	8007244 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80071bc:	f107 0316 	add.w	r3, r7, #22
 80071c0:	4619      	mov	r1, r3
 80071c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071c4:	f000 f979 	bl	80074ba <USBH_GetNextDesc>
 80071c8:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b05      	cmp	r3, #5
 80071d0:	d138      	bne.n	8007244 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	795b      	ldrb	r3, [r3, #5]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d10f      	bne.n	80071fa <USBH_ParseCfgDesc+0x13a>
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	799b      	ldrb	r3, [r3, #6]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d10b      	bne.n	80071fa <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	79db      	ldrb	r3, [r3, #7]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10f      	bne.n	800720a <USBH_ParseCfgDesc+0x14a>
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b09      	cmp	r3, #9
 80071f0:	d00b      	beq.n	800720a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	2209      	movs	r2, #9
 80071f6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80071f8:	e007      	b.n	800720a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b07      	cmp	r3, #7
 8007200:	d004      	beq.n	800720c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007204:	2207      	movs	r2, #7
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	e000      	b.n	800720c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800720a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800720c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007210:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007214:	3201      	adds	r2, #1
 8007216:	00d2      	lsls	r2, r2, #3
 8007218:	211a      	movs	r1, #26
 800721a:	fb01 f303 	mul.w	r3, r1, r3
 800721e:	4413      	add	r3, r2
 8007220:	3308      	adds	r3, #8
 8007222:	6a3a      	ldr	r2, [r7, #32]
 8007224:	4413      	add	r3, r2
 8007226:	3304      	adds	r3, #4
 8007228:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800722a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800722c:	69b9      	ldr	r1, [r7, #24]
 800722e:	68f8      	ldr	r0, [r7, #12]
 8007230:	f000 f86b 	bl	800730a <USBH_ParseEPDesc>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800723a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800723e:	3301      	adds	r3, #1
 8007240:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	791b      	ldrb	r3, [r3, #4]
 8007248:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800724c:	429a      	cmp	r2, r3
 800724e:	d204      	bcs.n	800725a <USBH_ParseCfgDesc+0x19a>
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	885a      	ldrh	r2, [r3, #2]
 8007254:	8afb      	ldrh	r3, [r7, #22]
 8007256:	429a      	cmp	r2, r3
 8007258:	d8b0      	bhi.n	80071bc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	791b      	ldrb	r3, [r3, #4]
 800725e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007262:	429a      	cmp	r2, r3
 8007264:	d201      	bcs.n	800726a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007266:	2303      	movs	r3, #3
 8007268:	e01c      	b.n	80072a4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800726a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800726e:	3301      	adds	r3, #1
 8007270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007278:	2b01      	cmp	r3, #1
 800727a:	d805      	bhi.n	8007288 <USBH_ParseCfgDesc+0x1c8>
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	885a      	ldrh	r2, [r3, #2]
 8007280:	8afb      	ldrh	r3, [r7, #22]
 8007282:	429a      	cmp	r2, r3
 8007284:	f63f af74 	bhi.w	8007170 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007288:	6a3b      	ldr	r3, [r7, #32]
 800728a:	791b      	ldrb	r3, [r3, #4]
 800728c:	2b02      	cmp	r3, #2
 800728e:	bf28      	it	cs
 8007290:	2302      	movcs	r3, #2
 8007292:	b2db      	uxtb	r3, r3
 8007294:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007298:	429a      	cmp	r2, r3
 800729a:	d201      	bcs.n	80072a0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800729c:	2303      	movs	r3, #3
 800729e:	e001      	b.n	80072a4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80072a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3730      	adds	r7, #48	; 0x30
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	785a      	ldrb	r2, [r3, #1]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	789a      	ldrb	r2, [r3, #2]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	78da      	ldrb	r2, [r3, #3]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	791a      	ldrb	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	795a      	ldrb	r2, [r3, #5]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	799a      	ldrb	r2, [r3, #6]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	79da      	ldrb	r2, [r3, #7]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	7a1a      	ldrb	r2, [r3, #8]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	721a      	strb	r2, [r3, #8]
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800730a:	b480      	push	{r7}
 800730c:	b087      	sub	sp, #28
 800730e:	af00      	add	r7, sp, #0
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	781a      	ldrb	r2, [r3, #0]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	785a      	ldrb	r2, [r3, #1]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	789a      	ldrb	r2, [r3, #2]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	78da      	ldrb	r2, [r3, #3]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3304      	adds	r3, #4
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	b29a      	uxth	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3305      	adds	r3, #5
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	b29b      	uxth	r3, r3
 800734a:	021b      	lsls	r3, r3, #8
 800734c:	b29b      	uxth	r3, r3
 800734e:	4313      	orrs	r3, r2
 8007350:	b29a      	uxth	r2, r3
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	799a      	ldrb	r2, [r3, #6]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	889b      	ldrh	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d102      	bne.n	800736c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007366:	2303      	movs	r3, #3
 8007368:	75fb      	strb	r3, [r7, #23]
 800736a:	e033      	b.n	80073d4 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	889b      	ldrh	r3, [r3, #4]
 8007370:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007374:	f023 0307 	bic.w	r3, r3, #7
 8007378:	b29a      	uxth	r2, r3
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	889b      	ldrh	r3, [r3, #4]
 8007382:	b21a      	sxth	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	b299      	uxth	r1, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3305      	adds	r3, #5
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	b29b      	uxth	r3, r3
 8007398:	430b      	orrs	r3, r1
 800739a:	b29b      	uxth	r3, r3
 800739c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d110      	bne.n	80073c6 <USBH_ParseEPDesc+0xbc>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3304      	adds	r3, #4
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	b299      	uxth	r1, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3305      	adds	r3, #5
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	430b      	orrs	r3, r1
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	b21b      	sxth	r3, r3
 80073be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073c2:	b21b      	sxth	r3, r3
 80073c4:	e001      	b.n	80073ca <USBH_ParseEPDesc+0xc0>
 80073c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ca:	4313      	orrs	r3, r2
 80073cc:	b21b      	sxth	r3, r3
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d116      	bne.n	800740c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	78db      	ldrb	r3, [r3, #3]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d005      	beq.n	80073f6 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	78db      	ldrb	r3, [r3, #3]
 80073ee:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d127      	bne.n	8007446 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	799b      	ldrb	r3, [r3, #6]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d003      	beq.n	8007406 <USBH_ParseEPDesc+0xfc>
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	799b      	ldrb	r3, [r3, #6]
 8007402:	2b10      	cmp	r3, #16
 8007404:	d91f      	bls.n	8007446 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007406:	2303      	movs	r3, #3
 8007408:	75fb      	strb	r3, [r7, #23]
 800740a:	e01c      	b.n	8007446 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	78db      	ldrb	r3, [r3, #3]
 8007410:	f003 0303 	and.w	r3, r3, #3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d10a      	bne.n	800742e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	799b      	ldrb	r3, [r3, #6]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <USBH_ParseEPDesc+0x11e>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	799b      	ldrb	r3, [r3, #6]
 8007424:	2b10      	cmp	r3, #16
 8007426:	d90e      	bls.n	8007446 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007428:	2303      	movs	r3, #3
 800742a:	75fb      	strb	r3, [r7, #23]
 800742c:	e00b      	b.n	8007446 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	78db      	ldrb	r3, [r3, #3]
 8007432:	f003 0303 	and.w	r3, r3, #3
 8007436:	2b03      	cmp	r3, #3
 8007438:	d105      	bne.n	8007446 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	799b      	ldrb	r3, [r3, #6]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d101      	bne.n	8007446 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007442:	2303      	movs	r3, #3
 8007444:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
}
 8007448:	4618      	mov	r0, r3
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	4613      	mov	r3, r2
 8007460:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b03      	cmp	r3, #3
 800746a:	d120      	bne.n	80074ae <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	1e9a      	subs	r2, r3, #2
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	4293      	cmp	r3, r2
 8007476:	bf28      	it	cs
 8007478:	4613      	movcs	r3, r2
 800747a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3302      	adds	r3, #2
 8007480:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007482:	2300      	movs	r3, #0
 8007484:	82fb      	strh	r3, [r7, #22]
 8007486:	e00b      	b.n	80074a0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007488:	8afb      	ldrh	r3, [r7, #22]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	781a      	ldrb	r2, [r3, #0]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	3301      	adds	r3, #1
 8007498:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800749a:	8afb      	ldrh	r3, [r7, #22]
 800749c:	3302      	adds	r3, #2
 800749e:	82fb      	strh	r3, [r7, #22]
 80074a0:	8afa      	ldrh	r2, [r7, #22]
 80074a2:	8abb      	ldrh	r3, [r7, #20]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d3ef      	bcc.n	8007488 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2200      	movs	r2, #0
 80074ac:	701a      	strb	r2, [r3, #0]
  }
}
 80074ae:	bf00      	nop
 80074b0:	371c      	adds	r7, #28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	881a      	ldrh	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	4413      	add	r3, r2
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4413      	add	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80074e2:	68fb      	ldr	r3, [r7, #12]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	4613      	mov	r3, r2
 80074fc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80074fe:	2301      	movs	r3, #1
 8007500:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	789b      	ldrb	r3, [r3, #2]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d002      	beq.n	8007510 <USBH_CtlReq+0x20>
 800750a:	2b02      	cmp	r3, #2
 800750c:	d00f      	beq.n	800752e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800750e:	e027      	b.n	8007560 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2201      	movs	r2, #1
 8007520:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2202      	movs	r2, #2
 8007526:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007528:	2301      	movs	r3, #1
 800752a:	75fb      	strb	r3, [r7, #23]
      break;
 800752c:	e018      	b.n	8007560 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 f81c 	bl	800756c <USBH_HandleControl>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <USBH_CtlReq+0x54>
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	2b03      	cmp	r3, #3
 8007542:	d106      	bne.n	8007552 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2201      	movs	r2, #1
 8007548:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	761a      	strb	r2, [r3, #24]
      break;
 8007550:	e005      	b.n	800755e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007552:	7dfb      	ldrb	r3, [r7, #23]
 8007554:	2b02      	cmp	r3, #2
 8007556:	d102      	bne.n	800755e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	709a      	strb	r2, [r3, #2]
      break;
 800755e:	bf00      	nop
  }
  return status;
 8007560:	7dfb      	ldrb	r3, [r7, #23]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b086      	sub	sp, #24
 8007570:	af02      	add	r7, sp, #8
 8007572:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007574:	2301      	movs	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007578:	2300      	movs	r3, #0
 800757a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	7e1b      	ldrb	r3, [r3, #24]
 8007580:	3b01      	subs	r3, #1
 8007582:	2b0a      	cmp	r3, #10
 8007584:	f200 8156 	bhi.w	8007834 <USBH_HandleControl+0x2c8>
 8007588:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <USBH_HandleControl+0x24>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	080075bd 	.word	0x080075bd
 8007594:	080075d7 	.word	0x080075d7
 8007598:	08007641 	.word	0x08007641
 800759c:	08007667 	.word	0x08007667
 80075a0:	0800769f 	.word	0x0800769f
 80075a4:	080076c9 	.word	0x080076c9
 80075a8:	0800771b 	.word	0x0800771b
 80075ac:	0800773d 	.word	0x0800773d
 80075b0:	08007779 	.word	0x08007779
 80075b4:	0800779f 	.word	0x0800779f
 80075b8:	080077dd 	.word	0x080077dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f103 0110 	add.w	r1, r3, #16
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	795b      	ldrb	r3, [r3, #5]
 80075c6:	461a      	mov	r2, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f943 	bl	8007854 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2202      	movs	r2, #2
 80075d2:	761a      	strb	r2, [r3, #24]
      break;
 80075d4:	e139      	b.n	800784a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	795b      	ldrb	r3, [r3, #5]
 80075da:	4619      	mov	r1, r3
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fcc5 	bl	8007f6c <USBH_LL_GetURBState>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d11e      	bne.n	800762a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7c1b      	ldrb	r3, [r3, #16]
 80075f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8adb      	ldrh	r3, [r3, #22]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80075fe:	7b7b      	ldrb	r3, [r7, #13]
 8007600:	2b80      	cmp	r3, #128	; 0x80
 8007602:	d103      	bne.n	800760c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2203      	movs	r2, #3
 8007608:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800760a:	e115      	b.n	8007838 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2205      	movs	r2, #5
 8007610:	761a      	strb	r2, [r3, #24]
      break;
 8007612:	e111      	b.n	8007838 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007614:	7b7b      	ldrb	r3, [r7, #13]
 8007616:	2b80      	cmp	r3, #128	; 0x80
 8007618:	d103      	bne.n	8007622 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2209      	movs	r2, #9
 800761e:	761a      	strb	r2, [r3, #24]
      break;
 8007620:	e10a      	b.n	8007838 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2207      	movs	r2, #7
 8007626:	761a      	strb	r2, [r3, #24]
      break;
 8007628:	e106      	b.n	8007838 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800762a:	7bbb      	ldrb	r3, [r7, #14]
 800762c:	2b04      	cmp	r3, #4
 800762e:	d003      	beq.n	8007638 <USBH_HandleControl+0xcc>
 8007630:	7bbb      	ldrb	r3, [r7, #14]
 8007632:	2b02      	cmp	r3, #2
 8007634:	f040 8100 	bne.w	8007838 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	220b      	movs	r2, #11
 800763c:	761a      	strb	r2, [r3, #24]
      break;
 800763e:	e0fb      	b.n	8007838 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6899      	ldr	r1, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	899a      	ldrh	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	791b      	ldrb	r3, [r3, #4]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 f93a 	bl	80078d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2204      	movs	r2, #4
 8007662:	761a      	strb	r2, [r3, #24]
      break;
 8007664:	e0f1      	b.n	800784a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	791b      	ldrb	r3, [r3, #4]
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fc7d 	bl	8007f6c <USBH_LL_GetURBState>
 8007672:	4603      	mov	r3, r0
 8007674:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d102      	bne.n	8007682 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2209      	movs	r2, #9
 8007680:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b05      	cmp	r3, #5
 8007686:	d102      	bne.n	800768e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007688:	2303      	movs	r3, #3
 800768a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800768c:	e0d6      	b.n	800783c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	2b04      	cmp	r3, #4
 8007692:	f040 80d3 	bne.w	800783c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	220b      	movs	r2, #11
 800769a:	761a      	strb	r2, [r3, #24]
      break;
 800769c:	e0ce      	b.n	800783c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6899      	ldr	r1, [r3, #8]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	899a      	ldrh	r2, [r3, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	795b      	ldrb	r3, [r3, #5]
 80076aa:	2001      	movs	r0, #1
 80076ac:	9000      	str	r0, [sp, #0]
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f8ea 	bl	8007888 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2206      	movs	r2, #6
 80076c4:	761a      	strb	r2, [r3, #24]
      break;
 80076c6:	e0c0      	b.n	800784a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	795b      	ldrb	r3, [r3, #5]
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fc4c 	bl	8007f6c <USBH_LL_GetURBState>
 80076d4:	4603      	mov	r3, r0
 80076d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d103      	bne.n	80076e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2207      	movs	r2, #7
 80076e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80076e4:	e0ac      	b.n	8007840 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80076e6:	7bbb      	ldrb	r3, [r7, #14]
 80076e8:	2b05      	cmp	r3, #5
 80076ea:	d105      	bne.n	80076f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	220c      	movs	r2, #12
 80076f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80076f2:	2303      	movs	r3, #3
 80076f4:	73fb      	strb	r3, [r7, #15]
      break;
 80076f6:	e0a3      	b.n	8007840 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d103      	bne.n	8007706 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2205      	movs	r2, #5
 8007702:	761a      	strb	r2, [r3, #24]
      break;
 8007704:	e09c      	b.n	8007840 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	2b04      	cmp	r3, #4
 800770a:	f040 8099 	bne.w	8007840 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	220b      	movs	r2, #11
 8007712:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007714:	2302      	movs	r3, #2
 8007716:	73fb      	strb	r3, [r7, #15]
      break;
 8007718:	e092      	b.n	8007840 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	2100      	movs	r1, #0
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f8d5 	bl	80078d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800772e:	b29a      	uxth	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2208      	movs	r2, #8
 8007738:	761a      	strb	r2, [r3, #24]

      break;
 800773a:	e086      	b.n	800784a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	791b      	ldrb	r3, [r3, #4]
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fc12 	bl	8007f6c <USBH_LL_GetURBState>
 8007748:	4603      	mov	r3, r0
 800774a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d105      	bne.n	800775e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	220d      	movs	r2, #13
 8007756:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800775c:	e072      	b.n	8007844 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b04      	cmp	r3, #4
 8007762:	d103      	bne.n	800776c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	220b      	movs	r2, #11
 8007768:	761a      	strb	r2, [r3, #24]
      break;
 800776a:	e06b      	b.n	8007844 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	2b05      	cmp	r3, #5
 8007770:	d168      	bne.n	8007844 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007772:	2303      	movs	r3, #3
 8007774:	73fb      	strb	r3, [r7, #15]
      break;
 8007776:	e065      	b.n	8007844 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	795b      	ldrb	r3, [r3, #5]
 800777c:	2201      	movs	r2, #1
 800777e:	9200      	str	r2, [sp, #0]
 8007780:	2200      	movs	r2, #0
 8007782:	2100      	movs	r1, #0
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f87f 	bl	8007888 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007790:	b29a      	uxth	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	220a      	movs	r2, #10
 800779a:	761a      	strb	r2, [r3, #24]
      break;
 800779c:	e055      	b.n	800784a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	795b      	ldrb	r3, [r3, #5]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fbe1 	bl	8007f6c <USBH_LL_GetURBState>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d105      	bne.n	80077c0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	220d      	movs	r2, #13
 80077bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077be:	e043      	b.n	8007848 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d103      	bne.n	80077ce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2209      	movs	r2, #9
 80077ca:	761a      	strb	r2, [r3, #24]
      break;
 80077cc:	e03c      	b.n	8007848 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d139      	bne.n	8007848 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	220b      	movs	r2, #11
 80077d8:	761a      	strb	r2, [r3, #24]
      break;
 80077da:	e035      	b.n	8007848 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	7e5b      	ldrb	r3, [r3, #25]
 80077e0:	3301      	adds	r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	765a      	strb	r2, [r3, #25]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	7e5b      	ldrb	r3, [r3, #25]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d806      	bhi.n	80077fe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80077fc:	e025      	b.n	800784a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007804:	2106      	movs	r1, #6
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	795b      	ldrb	r3, [r3, #5]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f90c 	bl	8007a34 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	791b      	ldrb	r3, [r3, #4]
 8007820:	4619      	mov	r1, r3
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f906 	bl	8007a34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800782e:	2302      	movs	r3, #2
 8007830:	73fb      	strb	r3, [r7, #15]
      break;
 8007832:	e00a      	b.n	800784a <USBH_HandleControl+0x2de>

    default:
      break;
 8007834:	bf00      	nop
 8007836:	e008      	b.n	800784a <USBH_HandleControl+0x2de>
      break;
 8007838:	bf00      	nop
 800783a:	e006      	b.n	800784a <USBH_HandleControl+0x2de>
      break;
 800783c:	bf00      	nop
 800783e:	e004      	b.n	800784a <USBH_HandleControl+0x2de>
      break;
 8007840:	bf00      	nop
 8007842:	e002      	b.n	800784a <USBH_HandleControl+0x2de>
      break;
 8007844:	bf00      	nop
 8007846:	e000      	b.n	800784a <USBH_HandleControl+0x2de>
      break;
 8007848:	bf00      	nop
  }

  return status;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3710      	adds	r7, #16
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af04      	add	r7, sp, #16
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007862:	79f9      	ldrb	r1, [r7, #7]
 8007864:	2300      	movs	r3, #0
 8007866:	9303      	str	r3, [sp, #12]
 8007868:	2308      	movs	r3, #8
 800786a:	9302      	str	r3, [sp, #8]
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	2300      	movs	r3, #0
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	2300      	movs	r3, #0
 8007876:	2200      	movs	r2, #0
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 fb46 	bl	8007f0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af04      	add	r7, sp, #16
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	4611      	mov	r1, r2
 8007894:	461a      	mov	r2, r3
 8007896:	460b      	mov	r3, r1
 8007898:	80fb      	strh	r3, [r7, #6]
 800789a:	4613      	mov	r3, r2
 800789c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078ac:	7979      	ldrb	r1, [r7, #5]
 80078ae:	7e3b      	ldrb	r3, [r7, #24]
 80078b0:	9303      	str	r3, [sp, #12]
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	9302      	str	r3, [sp, #8]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	2301      	movs	r3, #1
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	2300      	movs	r3, #0
 80078c0:	2200      	movs	r2, #0
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f000 fb21 	bl	8007f0a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b088      	sub	sp, #32
 80078d6:	af04      	add	r7, sp, #16
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	4611      	mov	r1, r2
 80078de:	461a      	mov	r2, r3
 80078e0:	460b      	mov	r3, r1
 80078e2:	80fb      	strh	r3, [r7, #6]
 80078e4:	4613      	mov	r3, r2
 80078e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80078e8:	7979      	ldrb	r1, [r7, #5]
 80078ea:	2300      	movs	r3, #0
 80078ec:	9303      	str	r3, [sp, #12]
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	9302      	str	r3, [sp, #8]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	2301      	movs	r3, #1
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	2300      	movs	r3, #0
 80078fc:	2201      	movs	r2, #1
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fb03 	bl	8007f0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007904:	2300      	movs	r3, #0

}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b088      	sub	sp, #32
 8007912:	af04      	add	r7, sp, #16
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	4611      	mov	r1, r2
 800791a:	461a      	mov	r2, r3
 800791c:	460b      	mov	r3, r1
 800791e:	80fb      	strh	r3, [r7, #6]
 8007920:	4613      	mov	r3, r2
 8007922:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007932:	7979      	ldrb	r1, [r7, #5]
 8007934:	7e3b      	ldrb	r3, [r7, #24]
 8007936:	9303      	str	r3, [sp, #12]
 8007938:	88fb      	ldrh	r3, [r7, #6]
 800793a:	9302      	str	r3, [sp, #8]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	2301      	movs	r3, #1
 8007942:	9300      	str	r3, [sp, #0]
 8007944:	2302      	movs	r3, #2
 8007946:	2200      	movs	r2, #0
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f000 fade 	bl	8007f0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af04      	add	r7, sp, #16
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4611      	mov	r1, r2
 8007964:	461a      	mov	r2, r3
 8007966:	460b      	mov	r3, r1
 8007968:	80fb      	strh	r3, [r7, #6]
 800796a:	4613      	mov	r3, r2
 800796c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800796e:	7979      	ldrb	r1, [r7, #5]
 8007970:	2300      	movs	r3, #0
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	88fb      	ldrh	r3, [r7, #6]
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	2301      	movs	r3, #1
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2302      	movs	r3, #2
 8007982:	2201      	movs	r2, #1
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fac0 	bl	8007f0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af04      	add	r7, sp, #16
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	4608      	mov	r0, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	461a      	mov	r2, r3
 80079a2:	4603      	mov	r3, r0
 80079a4:	70fb      	strb	r3, [r7, #3]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70bb      	strb	r3, [r7, #2]
 80079aa:	4613      	mov	r3, r2
 80079ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80079ae:	7878      	ldrb	r0, [r7, #1]
 80079b0:	78ba      	ldrb	r2, [r7, #2]
 80079b2:	78f9      	ldrb	r1, [r7, #3]
 80079b4:	8b3b      	ldrh	r3, [r7, #24]
 80079b6:	9302      	str	r3, [sp, #8]
 80079b8:	7d3b      	ldrb	r3, [r7, #20]
 80079ba:	9301      	str	r3, [sp, #4]
 80079bc:	7c3b      	ldrb	r3, [r7, #16]
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	4603      	mov	r3, r0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa53 	bl	8007e6e <USBH_LL_OpenPipe>

  return USBH_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa72 	bl	8007ecc <USBH_LL_ClosePipe>

  return USBH_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	460b      	mov	r3, r1
 80079fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f836 	bl	8007a70 <USBH_GetFreePipe>
 8007a04:	4603      	mov	r3, r0
 8007a06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007a08:	89fb      	ldrh	r3, [r7, #14]
 8007a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00a      	beq.n	8007a28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007a12:	78fa      	ldrb	r2, [r7, #3]
 8007a14:	89fb      	ldrh	r3, [r7, #14]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	33e0      	adds	r3, #224	; 0xe0
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007a28:	89fb      	ldrh	r3, [r7, #14]
 8007a2a:	b2db      	uxtb	r3, r3
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	2b0f      	cmp	r3, #15
 8007a44:	d80d      	bhi.n	8007a62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007a46:	78fb      	ldrb	r3, [r7, #3]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	33e0      	adds	r3, #224	; 0xe0
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4413      	add	r3, r2
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	33e0      	adds	r3, #224	; 0xe0
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	440b      	add	r3, r1
 8007a60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
 8007a80:	e00f      	b.n	8007aa2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	33e0      	adds	r3, #224	; 0xe0
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d102      	bne.n	8007a9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	e007      	b.n	8007aac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	73fb      	strb	r3, [r7, #15]
 8007aa2:	7bfb      	ldrb	r3, [r7, #15]
 8007aa4:	2b0f      	cmp	r3, #15
 8007aa6:	d9ec      	bls.n	8007a82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007abc:	2201      	movs	r2, #1
 8007abe:	490e      	ldr	r1, [pc, #56]	; (8007af8 <MX_USB_HOST_Init+0x40>)
 8007ac0:	480e      	ldr	r0, [pc, #56]	; (8007afc <MX_USB_HOST_Init+0x44>)
 8007ac2:	f7fe fba7 	bl	8006214 <USBH_Init>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007acc:	f7f8 febe 	bl	800084c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007ad0:	490b      	ldr	r1, [pc, #44]	; (8007b00 <MX_USB_HOST_Init+0x48>)
 8007ad2:	480a      	ldr	r0, [pc, #40]	; (8007afc <MX_USB_HOST_Init+0x44>)
 8007ad4:	f7fe fc2c 	bl	8006330 <USBH_RegisterClass>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007ade:	f7f8 feb5 	bl	800084c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007ae2:	4806      	ldr	r0, [pc, #24]	; (8007afc <MX_USB_HOST_Init+0x44>)
 8007ae4:	f7fe fcb0 	bl	8006448 <USBH_Start>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007aee:	f7f8 fead 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007af2:	bf00      	nop
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	08007b19 	.word	0x08007b19
 8007afc:	20000180 	.word	0x20000180
 8007b00:	20000038 	.word	0x20000038

08007b04 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007b08:	4802      	ldr	r0, [pc, #8]	; (8007b14 <MX_USB_HOST_Process+0x10>)
 8007b0a:	f7fe fcad 	bl	8006468 <USBH_Process>
}
 8007b0e:	bf00      	nop
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000180 	.word	0x20000180

08007b18 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	3b01      	subs	r3, #1
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d819      	bhi.n	8007b60 <USBH_UserProcess+0x48>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <USBH_UserProcess+0x1c>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b61 	.word	0x08007b61
 8007b38:	08007b51 	.word	0x08007b51
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b59 	.word	0x08007b59
 8007b44:	08007b49 	.word	0x08007b49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007b48:	4b09      	ldr	r3, [pc, #36]	; (8007b70 <USBH_UserProcess+0x58>)
 8007b4a:	2203      	movs	r2, #3
 8007b4c:	701a      	strb	r2, [r3, #0]
  break;
 8007b4e:	e008      	b.n	8007b62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <USBH_UserProcess+0x58>)
 8007b52:	2202      	movs	r2, #2
 8007b54:	701a      	strb	r2, [r3, #0]
  break;
 8007b56:	e004      	b.n	8007b62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007b58:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <USBH_UserProcess+0x58>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	701a      	strb	r2, [r3, #0]
  break;
 8007b5e:	e000      	b.n	8007b62 <USBH_UserProcess+0x4a>

  default:
  break;
 8007b60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007b62:	bf00      	nop
 8007b64:	370c      	adds	r7, #12
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20000558 	.word	0x20000558

08007b74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08a      	sub	sp, #40	; 0x28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b7c:	f107 0314 	add.w	r3, r7, #20
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	609a      	str	r2, [r3, #8]
 8007b88:	60da      	str	r2, [r3, #12]
 8007b8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b94:	d147      	bne.n	8007c26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b96:	2300      	movs	r3, #0
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	4b25      	ldr	r3, [pc, #148]	; (8007c30 <HAL_HCD_MspInit+0xbc>)
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9e:	4a24      	ldr	r2, [pc, #144]	; (8007c30 <HAL_HCD_MspInit+0xbc>)
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ba6:	4b22      	ldr	r3, [pc, #136]	; (8007c30 <HAL_HCD_MspInit+0xbc>)
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007baa:	f003 0301 	and.w	r3, r3, #1
 8007bae:	613b      	str	r3, [r7, #16]
 8007bb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007bc0:	f107 0314 	add.w	r3, r7, #20
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	481b      	ldr	r0, [pc, #108]	; (8007c34 <HAL_HCD_MspInit+0xc0>)
 8007bc8:	f7f9 ff16 	bl	80019f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007bcc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bd2:	2302      	movs	r3, #2
 8007bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007bde:	230a      	movs	r3, #10
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007be2:	f107 0314 	add.w	r3, r7, #20
 8007be6:	4619      	mov	r1, r3
 8007be8:	4812      	ldr	r0, [pc, #72]	; (8007c34 <HAL_HCD_MspInit+0xc0>)
 8007bea:	f7f9 ff05 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <HAL_HCD_MspInit+0xbc>)
 8007bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf2:	4a0f      	ldr	r2, [pc, #60]	; (8007c30 <HAL_HCD_MspInit+0xbc>)
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf8:	6353      	str	r3, [r2, #52]	; 0x34
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
 8007bfe:	4b0c      	ldr	r3, [pc, #48]	; (8007c30 <HAL_HCD_MspInit+0xbc>)
 8007c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c02:	4a0b      	ldr	r2, [pc, #44]	; (8007c30 <HAL_HCD_MspInit+0xbc>)
 8007c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c08:	6453      	str	r3, [r2, #68]	; 0x44
 8007c0a:	4b09      	ldr	r3, [pc, #36]	; (8007c30 <HAL_HCD_MspInit+0xbc>)
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c12:	60fb      	str	r3, [r7, #12]
 8007c14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c16:	2200      	movs	r2, #0
 8007c18:	2100      	movs	r1, #0
 8007c1a:	2043      	movs	r0, #67	; 0x43
 8007c1c:	f7f9 feb5 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c20:	2043      	movs	r0, #67	; 0x43
 8007c22:	f7f9 fece 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c26:	bf00      	nop
 8007c28:	3728      	adds	r7, #40	; 0x28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40023800 	.word	0x40023800
 8007c34:	40020000 	.word	0x40020000

08007c38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe ffed 	bl	8006c26 <USBH_LL_IncTimer>
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff f825 	bl	8006cb2 <USBH_LL_Connect>
}
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff f82e 	bl	8006ce0 <USBH_LL_Disconnect>
}
 8007c84:	bf00      	nop
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	70fb      	strb	r3, [r7, #3]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe ffdf 	bl	8006c7a <USBH_LL_PortEnabled>
}
 8007cbc:	bf00      	nop
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fe ffdf 	bl	8006c96 <USBH_LL_PortDisabled>
}
 8007cd8:	bf00      	nop
 8007cda:	3708      	adds	r7, #8
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d12a      	bne.n	8007d48 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007cf2:	4a18      	ldr	r2, [pc, #96]	; (8007d54 <USBH_LL_Init+0x74>)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a15      	ldr	r2, [pc, #84]	; (8007d54 <USBH_LL_Init+0x74>)
 8007cfe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d02:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <USBH_LL_Init+0x74>)
 8007d04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007d0a:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <USBH_LL_Init+0x74>)
 8007d0c:	2208      	movs	r2, #8
 8007d0e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007d10:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <USBH_LL_Init+0x74>)
 8007d12:	2201      	movs	r2, #1
 8007d14:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d16:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <USBH_LL_Init+0x74>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007d1c:	4b0d      	ldr	r3, [pc, #52]	; (8007d54 <USBH_LL_Init+0x74>)
 8007d1e:	2202      	movs	r2, #2
 8007d20:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d22:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <USBH_LL_Init+0x74>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007d28:	480a      	ldr	r0, [pc, #40]	; (8007d54 <USBH_LL_Init+0x74>)
 8007d2a:	f7fa f81a 	bl	8001d62 <HAL_HCD_Init>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007d34:	f7f8 fd8a 	bl	800084c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007d38:	4806      	ldr	r0, [pc, #24]	; (8007d54 <USBH_LL_Init+0x74>)
 8007d3a:	f7fa fbfe 	bl	800253a <HAL_HCD_GetCurrentFrame>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fe ff60 	bl	8006c08 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000055c 	.word	0x2000055c

08007d58 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fa fb6d 	bl	800244e <HAL_HCD_Start>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 f95c 	bl	8008038 <USBH_Get_USB_Status>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7fa fb75 	bl	8002494 <HAL_HCD_Stop>
 8007daa:	4603      	mov	r3, r0
 8007dac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 f941 	bl	8008038 <USBH_Get_USB_Status>
 8007db6:	4603      	mov	r3, r0
 8007db8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dba:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fa fbbd 	bl	8002556 <HAL_HCD_GetCurrentSpeed>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d00c      	beq.n	8007dfc <USBH_LL_GetSpeed+0x38>
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d80d      	bhi.n	8007e02 <USBH_LL_GetSpeed+0x3e>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <USBH_LL_GetSpeed+0x2c>
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d003      	beq.n	8007df6 <USBH_LL_GetSpeed+0x32>
 8007dee:	e008      	b.n	8007e02 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73fb      	strb	r3, [r7, #15]
    break;
 8007df4:	e008      	b.n	8007e08 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007df6:	2301      	movs	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]
    break;
 8007dfa:	e005      	b.n	8007e08 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007dfc:	2302      	movs	r3, #2
 8007dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8007e00:	e002      	b.n	8007e08 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007e02:	2301      	movs	r3, #1
 8007e04:	73fb      	strb	r3, [r7, #15]
    break;
 8007e06:	bf00      	nop
  }
  return  speed;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fa fb50 	bl	80024ce <HAL_HCD_ResetPort>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 f8ff 	bl	8008038 <USBH_Get_USB_Status>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3710      	adds	r7, #16
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	4611      	mov	r1, r2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fa fb57 	bl	8002512 <HAL_HCD_HC_GetXferCount>
 8007e64:	4603      	mov	r3, r0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e6e:	b590      	push	{r4, r7, lr}
 8007e70:	b089      	sub	sp, #36	; 0x24
 8007e72:	af04      	add	r7, sp, #16
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	4608      	mov	r0, r1
 8007e78:	4611      	mov	r1, r2
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	70fb      	strb	r3, [r7, #3]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70bb      	strb	r3, [r7, #2]
 8007e84:	4613      	mov	r3, r2
 8007e86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007e96:	787c      	ldrb	r4, [r7, #1]
 8007e98:	78ba      	ldrb	r2, [r7, #2]
 8007e9a:	78f9      	ldrb	r1, [r7, #3]
 8007e9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e9e:	9302      	str	r3, [sp, #8]
 8007ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	4623      	mov	r3, r4
 8007eae:	f7f9 ffba 	bl	8001e26 <HAL_HCD_HC_Init>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 f8bd 	bl	8008038 <USBH_Get_USB_Status>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd90      	pop	{r4, r7, pc}

08007ecc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ee6:	78fa      	ldrb	r2, [r7, #3]
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fa f82a 	bl	8001f44 <HAL_HCD_HC_Halt>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f89e 	bl	8008038 <USBH_Get_USB_Status>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007f0a:	b590      	push	{r4, r7, lr}
 8007f0c:	b089      	sub	sp, #36	; 0x24
 8007f0e:	af04      	add	r7, sp, #16
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	4608      	mov	r0, r1
 8007f14:	4611      	mov	r1, r2
 8007f16:	461a      	mov	r2, r3
 8007f18:	4603      	mov	r3, r0
 8007f1a:	70fb      	strb	r3, [r7, #3]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70bb      	strb	r3, [r7, #2]
 8007f20:	4613      	mov	r3, r2
 8007f22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007f32:	787c      	ldrb	r4, [r7, #1]
 8007f34:	78ba      	ldrb	r2, [r7, #2]
 8007f36:	78f9      	ldrb	r1, [r7, #3]
 8007f38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007f3c:	9303      	str	r3, [sp, #12]
 8007f3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f40:	9302      	str	r3, [sp, #8]
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	4623      	mov	r3, r4
 8007f4e:	f7fa f81d 	bl	8001f8c <HAL_HCD_HC_SubmitRequest>
 8007f52:	4603      	mov	r3, r0
 8007f54:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 f86d 	bl	8008038 <USBH_Get_USB_Status>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd90      	pop	{r4, r7, pc}

08007f6c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f7e:	78fa      	ldrb	r2, [r7, #3]
 8007f80:	4611      	mov	r1, r2
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fa fab1 	bl	80024ea <HAL_HCD_HC_GetURBState>
 8007f88:	4603      	mov	r3, r0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}

08007f92 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b082      	sub	sp, #8
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d103      	bne.n	8007fb0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 f870 	bl	8008090 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007fb0:	20c8      	movs	r0, #200	; 0xc8
 8007fb2:	f7f9 fbeb 	bl	800178c <HAL_Delay>
  return USBH_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	460b      	mov	r3, r1
 8007fca:	70fb      	strb	r3, [r7, #3]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fd6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007fd8:	78fb      	ldrb	r3, [r7, #3]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	212c      	movs	r1, #44	; 0x2c
 8007fde:	fb01 f303 	mul.w	r3, r1, r3
 8007fe2:	4413      	add	r3, r2
 8007fe4:	333b      	adds	r3, #59	; 0x3b
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d009      	beq.n	8008000 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	212c      	movs	r1, #44	; 0x2c
 8007ff2:	fb01 f303 	mul.w	r3, r1, r3
 8007ff6:	4413      	add	r3, r2
 8007ff8:	3354      	adds	r3, #84	; 0x54
 8007ffa:	78ba      	ldrb	r2, [r7, #2]
 8007ffc:	701a      	strb	r2, [r3, #0]
 8007ffe:	e008      	b.n	8008012 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	212c      	movs	r1, #44	; 0x2c
 8008006:	fb01 f303 	mul.w	r3, r1, r3
 800800a:	4413      	add	r3, r2
 800800c:	3355      	adds	r3, #85	; 0x55
 800800e:	78ba      	ldrb	r2, [r7, #2]
 8008010:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7f9 fbaf 	bl	800178c <HAL_Delay>
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008046:	79fb      	ldrb	r3, [r7, #7]
 8008048:	2b03      	cmp	r3, #3
 800804a:	d817      	bhi.n	800807c <USBH_Get_USB_Status+0x44>
 800804c:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <USBH_Get_USB_Status+0x1c>)
 800804e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008052:	bf00      	nop
 8008054:	08008065 	.word	0x08008065
 8008058:	0800806b 	.word	0x0800806b
 800805c:	08008071 	.word	0x08008071
 8008060:	08008077 	.word	0x08008077
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73fb      	strb	r3, [r7, #15]
    break;
 8008068:	e00b      	b.n	8008082 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800806a:	2302      	movs	r3, #2
 800806c:	73fb      	strb	r3, [r7, #15]
    break;
 800806e:	e008      	b.n	8008082 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
    break;
 8008074:	e005      	b.n	8008082 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008076:	2302      	movs	r3, #2
 8008078:	73fb      	strb	r3, [r7, #15]
    break;
 800807a:	e002      	b.n	8008082 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800807c:	2302      	movs	r3, #2
 800807e:	73fb      	strb	r3, [r7, #15]
    break;
 8008080:	bf00      	nop
  }
  return usb_status;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
 80080a8:	e001      	b.n	80080ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	461a      	mov	r2, r3
 80080b2:	2101      	movs	r1, #1
 80080b4:	4803      	ldr	r0, [pc, #12]	; (80080c4 <MX_DriverVbusFS+0x34>)
 80080b6:	f7f9 fe3b 	bl	8001d30 <HAL_GPIO_WritePin>
}
 80080ba:	bf00      	nop
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	40020800 	.word	0x40020800

080080c8 <__errno>:
 80080c8:	4b01      	ldr	r3, [pc, #4]	; (80080d0 <__errno+0x8>)
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20000058 	.word	0x20000058

080080d4 <__libc_init_array>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4d0d      	ldr	r5, [pc, #52]	; (800810c <__libc_init_array+0x38>)
 80080d8:	4c0d      	ldr	r4, [pc, #52]	; (8008110 <__libc_init_array+0x3c>)
 80080da:	1b64      	subs	r4, r4, r5
 80080dc:	10a4      	asrs	r4, r4, #2
 80080de:	2600      	movs	r6, #0
 80080e0:	42a6      	cmp	r6, r4
 80080e2:	d109      	bne.n	80080f8 <__libc_init_array+0x24>
 80080e4:	4d0b      	ldr	r5, [pc, #44]	; (8008114 <__libc_init_array+0x40>)
 80080e6:	4c0c      	ldr	r4, [pc, #48]	; (8008118 <__libc_init_array+0x44>)
 80080e8:	f000 fd2e 	bl	8008b48 <_init>
 80080ec:	1b64      	subs	r4, r4, r5
 80080ee:	10a4      	asrs	r4, r4, #2
 80080f0:	2600      	movs	r6, #0
 80080f2:	42a6      	cmp	r6, r4
 80080f4:	d105      	bne.n	8008102 <__libc_init_array+0x2e>
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fc:	4798      	blx	r3
 80080fe:	3601      	adds	r6, #1
 8008100:	e7ee      	b.n	80080e0 <__libc_init_array+0xc>
 8008102:	f855 3b04 	ldr.w	r3, [r5], #4
 8008106:	4798      	blx	r3
 8008108:	3601      	adds	r6, #1
 800810a:	e7f2      	b.n	80080f2 <__libc_init_array+0x1e>
 800810c:	08008c2c 	.word	0x08008c2c
 8008110:	08008c2c 	.word	0x08008c2c
 8008114:	08008c2c 	.word	0x08008c2c
 8008118:	08008c30 	.word	0x08008c30

0800811c <malloc>:
 800811c:	4b02      	ldr	r3, [pc, #8]	; (8008128 <malloc+0xc>)
 800811e:	4601      	mov	r1, r0
 8008120:	6818      	ldr	r0, [r3, #0]
 8008122:	f000 b87f 	b.w	8008224 <_malloc_r>
 8008126:	bf00      	nop
 8008128:	20000058 	.word	0x20000058

0800812c <free>:
 800812c:	4b02      	ldr	r3, [pc, #8]	; (8008138 <free+0xc>)
 800812e:	4601      	mov	r1, r0
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	f000 b80b 	b.w	800814c <_free_r>
 8008136:	bf00      	nop
 8008138:	20000058 	.word	0x20000058

0800813c <memset>:
 800813c:	4402      	add	r2, r0
 800813e:	4603      	mov	r3, r0
 8008140:	4293      	cmp	r3, r2
 8008142:	d100      	bne.n	8008146 <memset+0xa>
 8008144:	4770      	bx	lr
 8008146:	f803 1b01 	strb.w	r1, [r3], #1
 800814a:	e7f9      	b.n	8008140 <memset+0x4>

0800814c <_free_r>:
 800814c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800814e:	2900      	cmp	r1, #0
 8008150:	d044      	beq.n	80081dc <_free_r+0x90>
 8008152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008156:	9001      	str	r0, [sp, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	f1a1 0404 	sub.w	r4, r1, #4
 800815e:	bfb8      	it	lt
 8008160:	18e4      	addlt	r4, r4, r3
 8008162:	f000 fc39 	bl	80089d8 <__malloc_lock>
 8008166:	4a1e      	ldr	r2, [pc, #120]	; (80081e0 <_free_r+0x94>)
 8008168:	9801      	ldr	r0, [sp, #4]
 800816a:	6813      	ldr	r3, [r2, #0]
 800816c:	b933      	cbnz	r3, 800817c <_free_r+0x30>
 800816e:	6063      	str	r3, [r4, #4]
 8008170:	6014      	str	r4, [r2, #0]
 8008172:	b003      	add	sp, #12
 8008174:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008178:	f000 bc34 	b.w	80089e4 <__malloc_unlock>
 800817c:	42a3      	cmp	r3, r4
 800817e:	d908      	bls.n	8008192 <_free_r+0x46>
 8008180:	6825      	ldr	r5, [r4, #0]
 8008182:	1961      	adds	r1, r4, r5
 8008184:	428b      	cmp	r3, r1
 8008186:	bf01      	itttt	eq
 8008188:	6819      	ldreq	r1, [r3, #0]
 800818a:	685b      	ldreq	r3, [r3, #4]
 800818c:	1949      	addeq	r1, r1, r5
 800818e:	6021      	streq	r1, [r4, #0]
 8008190:	e7ed      	b.n	800816e <_free_r+0x22>
 8008192:	461a      	mov	r2, r3
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	b10b      	cbz	r3, 800819c <_free_r+0x50>
 8008198:	42a3      	cmp	r3, r4
 800819a:	d9fa      	bls.n	8008192 <_free_r+0x46>
 800819c:	6811      	ldr	r1, [r2, #0]
 800819e:	1855      	adds	r5, r2, r1
 80081a0:	42a5      	cmp	r5, r4
 80081a2:	d10b      	bne.n	80081bc <_free_r+0x70>
 80081a4:	6824      	ldr	r4, [r4, #0]
 80081a6:	4421      	add	r1, r4
 80081a8:	1854      	adds	r4, r2, r1
 80081aa:	42a3      	cmp	r3, r4
 80081ac:	6011      	str	r1, [r2, #0]
 80081ae:	d1e0      	bne.n	8008172 <_free_r+0x26>
 80081b0:	681c      	ldr	r4, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	6053      	str	r3, [r2, #4]
 80081b6:	4421      	add	r1, r4
 80081b8:	6011      	str	r1, [r2, #0]
 80081ba:	e7da      	b.n	8008172 <_free_r+0x26>
 80081bc:	d902      	bls.n	80081c4 <_free_r+0x78>
 80081be:	230c      	movs	r3, #12
 80081c0:	6003      	str	r3, [r0, #0]
 80081c2:	e7d6      	b.n	8008172 <_free_r+0x26>
 80081c4:	6825      	ldr	r5, [r4, #0]
 80081c6:	1961      	adds	r1, r4, r5
 80081c8:	428b      	cmp	r3, r1
 80081ca:	bf04      	itt	eq
 80081cc:	6819      	ldreq	r1, [r3, #0]
 80081ce:	685b      	ldreq	r3, [r3, #4]
 80081d0:	6063      	str	r3, [r4, #4]
 80081d2:	bf04      	itt	eq
 80081d4:	1949      	addeq	r1, r1, r5
 80081d6:	6021      	streq	r1, [r4, #0]
 80081d8:	6054      	str	r4, [r2, #4]
 80081da:	e7ca      	b.n	8008172 <_free_r+0x26>
 80081dc:	b003      	add	sp, #12
 80081de:	bd30      	pop	{r4, r5, pc}
 80081e0:	20000860 	.word	0x20000860

080081e4 <sbrk_aligned>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	4e0e      	ldr	r6, [pc, #56]	; (8008220 <sbrk_aligned+0x3c>)
 80081e8:	460c      	mov	r4, r1
 80081ea:	6831      	ldr	r1, [r6, #0]
 80081ec:	4605      	mov	r5, r0
 80081ee:	b911      	cbnz	r1, 80081f6 <sbrk_aligned+0x12>
 80081f0:	f000 f902 	bl	80083f8 <_sbrk_r>
 80081f4:	6030      	str	r0, [r6, #0]
 80081f6:	4621      	mov	r1, r4
 80081f8:	4628      	mov	r0, r5
 80081fa:	f000 f8fd 	bl	80083f8 <_sbrk_r>
 80081fe:	1c43      	adds	r3, r0, #1
 8008200:	d00a      	beq.n	8008218 <sbrk_aligned+0x34>
 8008202:	1cc4      	adds	r4, r0, #3
 8008204:	f024 0403 	bic.w	r4, r4, #3
 8008208:	42a0      	cmp	r0, r4
 800820a:	d007      	beq.n	800821c <sbrk_aligned+0x38>
 800820c:	1a21      	subs	r1, r4, r0
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f8f2 	bl	80083f8 <_sbrk_r>
 8008214:	3001      	adds	r0, #1
 8008216:	d101      	bne.n	800821c <sbrk_aligned+0x38>
 8008218:	f04f 34ff 	mov.w	r4, #4294967295
 800821c:	4620      	mov	r0, r4
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	20000864 	.word	0x20000864

08008224 <_malloc_r>:
 8008224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008228:	1ccd      	adds	r5, r1, #3
 800822a:	f025 0503 	bic.w	r5, r5, #3
 800822e:	3508      	adds	r5, #8
 8008230:	2d0c      	cmp	r5, #12
 8008232:	bf38      	it	cc
 8008234:	250c      	movcc	r5, #12
 8008236:	2d00      	cmp	r5, #0
 8008238:	4607      	mov	r7, r0
 800823a:	db01      	blt.n	8008240 <_malloc_r+0x1c>
 800823c:	42a9      	cmp	r1, r5
 800823e:	d905      	bls.n	800824c <_malloc_r+0x28>
 8008240:	230c      	movs	r3, #12
 8008242:	603b      	str	r3, [r7, #0]
 8008244:	2600      	movs	r6, #0
 8008246:	4630      	mov	r0, r6
 8008248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800824c:	4e2e      	ldr	r6, [pc, #184]	; (8008308 <_malloc_r+0xe4>)
 800824e:	f000 fbc3 	bl	80089d8 <__malloc_lock>
 8008252:	6833      	ldr	r3, [r6, #0]
 8008254:	461c      	mov	r4, r3
 8008256:	bb34      	cbnz	r4, 80082a6 <_malloc_r+0x82>
 8008258:	4629      	mov	r1, r5
 800825a:	4638      	mov	r0, r7
 800825c:	f7ff ffc2 	bl	80081e4 <sbrk_aligned>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	4604      	mov	r4, r0
 8008264:	d14d      	bne.n	8008302 <_malloc_r+0xde>
 8008266:	6834      	ldr	r4, [r6, #0]
 8008268:	4626      	mov	r6, r4
 800826a:	2e00      	cmp	r6, #0
 800826c:	d140      	bne.n	80082f0 <_malloc_r+0xcc>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	4631      	mov	r1, r6
 8008272:	4638      	mov	r0, r7
 8008274:	eb04 0803 	add.w	r8, r4, r3
 8008278:	f000 f8be 	bl	80083f8 <_sbrk_r>
 800827c:	4580      	cmp	r8, r0
 800827e:	d13a      	bne.n	80082f6 <_malloc_r+0xd2>
 8008280:	6821      	ldr	r1, [r4, #0]
 8008282:	3503      	adds	r5, #3
 8008284:	1a6d      	subs	r5, r5, r1
 8008286:	f025 0503 	bic.w	r5, r5, #3
 800828a:	3508      	adds	r5, #8
 800828c:	2d0c      	cmp	r5, #12
 800828e:	bf38      	it	cc
 8008290:	250c      	movcc	r5, #12
 8008292:	4629      	mov	r1, r5
 8008294:	4638      	mov	r0, r7
 8008296:	f7ff ffa5 	bl	80081e4 <sbrk_aligned>
 800829a:	3001      	adds	r0, #1
 800829c:	d02b      	beq.n	80082f6 <_malloc_r+0xd2>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	442b      	add	r3, r5
 80082a2:	6023      	str	r3, [r4, #0]
 80082a4:	e00e      	b.n	80082c4 <_malloc_r+0xa0>
 80082a6:	6822      	ldr	r2, [r4, #0]
 80082a8:	1b52      	subs	r2, r2, r5
 80082aa:	d41e      	bmi.n	80082ea <_malloc_r+0xc6>
 80082ac:	2a0b      	cmp	r2, #11
 80082ae:	d916      	bls.n	80082de <_malloc_r+0xba>
 80082b0:	1961      	adds	r1, r4, r5
 80082b2:	42a3      	cmp	r3, r4
 80082b4:	6025      	str	r5, [r4, #0]
 80082b6:	bf18      	it	ne
 80082b8:	6059      	strne	r1, [r3, #4]
 80082ba:	6863      	ldr	r3, [r4, #4]
 80082bc:	bf08      	it	eq
 80082be:	6031      	streq	r1, [r6, #0]
 80082c0:	5162      	str	r2, [r4, r5]
 80082c2:	604b      	str	r3, [r1, #4]
 80082c4:	4638      	mov	r0, r7
 80082c6:	f104 060b 	add.w	r6, r4, #11
 80082ca:	f000 fb8b 	bl	80089e4 <__malloc_unlock>
 80082ce:	f026 0607 	bic.w	r6, r6, #7
 80082d2:	1d23      	adds	r3, r4, #4
 80082d4:	1af2      	subs	r2, r6, r3
 80082d6:	d0b6      	beq.n	8008246 <_malloc_r+0x22>
 80082d8:	1b9b      	subs	r3, r3, r6
 80082da:	50a3      	str	r3, [r4, r2]
 80082dc:	e7b3      	b.n	8008246 <_malloc_r+0x22>
 80082de:	6862      	ldr	r2, [r4, #4]
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	bf0c      	ite	eq
 80082e4:	6032      	streq	r2, [r6, #0]
 80082e6:	605a      	strne	r2, [r3, #4]
 80082e8:	e7ec      	b.n	80082c4 <_malloc_r+0xa0>
 80082ea:	4623      	mov	r3, r4
 80082ec:	6864      	ldr	r4, [r4, #4]
 80082ee:	e7b2      	b.n	8008256 <_malloc_r+0x32>
 80082f0:	4634      	mov	r4, r6
 80082f2:	6876      	ldr	r6, [r6, #4]
 80082f4:	e7b9      	b.n	800826a <_malloc_r+0x46>
 80082f6:	230c      	movs	r3, #12
 80082f8:	603b      	str	r3, [r7, #0]
 80082fa:	4638      	mov	r0, r7
 80082fc:	f000 fb72 	bl	80089e4 <__malloc_unlock>
 8008300:	e7a1      	b.n	8008246 <_malloc_r+0x22>
 8008302:	6025      	str	r5, [r4, #0]
 8008304:	e7de      	b.n	80082c4 <_malloc_r+0xa0>
 8008306:	bf00      	nop
 8008308:	20000860 	.word	0x20000860

0800830c <_puts_r>:
 800830c:	b570      	push	{r4, r5, r6, lr}
 800830e:	460e      	mov	r6, r1
 8008310:	4605      	mov	r5, r0
 8008312:	b118      	cbz	r0, 800831c <_puts_r+0x10>
 8008314:	6983      	ldr	r3, [r0, #24]
 8008316:	b90b      	cbnz	r3, 800831c <_puts_r+0x10>
 8008318:	f000 fa58 	bl	80087cc <__sinit>
 800831c:	69ab      	ldr	r3, [r5, #24]
 800831e:	68ac      	ldr	r4, [r5, #8]
 8008320:	b913      	cbnz	r3, 8008328 <_puts_r+0x1c>
 8008322:	4628      	mov	r0, r5
 8008324:	f000 fa52 	bl	80087cc <__sinit>
 8008328:	4b2c      	ldr	r3, [pc, #176]	; (80083dc <_puts_r+0xd0>)
 800832a:	429c      	cmp	r4, r3
 800832c:	d120      	bne.n	8008370 <_puts_r+0x64>
 800832e:	686c      	ldr	r4, [r5, #4]
 8008330:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008332:	07db      	lsls	r3, r3, #31
 8008334:	d405      	bmi.n	8008342 <_puts_r+0x36>
 8008336:	89a3      	ldrh	r3, [r4, #12]
 8008338:	0598      	lsls	r0, r3, #22
 800833a:	d402      	bmi.n	8008342 <_puts_r+0x36>
 800833c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800833e:	f000 fae3 	bl	8008908 <__retarget_lock_acquire_recursive>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	0719      	lsls	r1, r3, #28
 8008346:	d51d      	bpl.n	8008384 <_puts_r+0x78>
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	b1db      	cbz	r3, 8008384 <_puts_r+0x78>
 800834c:	3e01      	subs	r6, #1
 800834e:	68a3      	ldr	r3, [r4, #8]
 8008350:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008354:	3b01      	subs	r3, #1
 8008356:	60a3      	str	r3, [r4, #8]
 8008358:	bb39      	cbnz	r1, 80083aa <_puts_r+0x9e>
 800835a:	2b00      	cmp	r3, #0
 800835c:	da38      	bge.n	80083d0 <_puts_r+0xc4>
 800835e:	4622      	mov	r2, r4
 8008360:	210a      	movs	r1, #10
 8008362:	4628      	mov	r0, r5
 8008364:	f000 f858 	bl	8008418 <__swbuf_r>
 8008368:	3001      	adds	r0, #1
 800836a:	d011      	beq.n	8008390 <_puts_r+0x84>
 800836c:	250a      	movs	r5, #10
 800836e:	e011      	b.n	8008394 <_puts_r+0x88>
 8008370:	4b1b      	ldr	r3, [pc, #108]	; (80083e0 <_puts_r+0xd4>)
 8008372:	429c      	cmp	r4, r3
 8008374:	d101      	bne.n	800837a <_puts_r+0x6e>
 8008376:	68ac      	ldr	r4, [r5, #8]
 8008378:	e7da      	b.n	8008330 <_puts_r+0x24>
 800837a:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <_puts_r+0xd8>)
 800837c:	429c      	cmp	r4, r3
 800837e:	bf08      	it	eq
 8008380:	68ec      	ldreq	r4, [r5, #12]
 8008382:	e7d5      	b.n	8008330 <_puts_r+0x24>
 8008384:	4621      	mov	r1, r4
 8008386:	4628      	mov	r0, r5
 8008388:	f000 f898 	bl	80084bc <__swsetup_r>
 800838c:	2800      	cmp	r0, #0
 800838e:	d0dd      	beq.n	800834c <_puts_r+0x40>
 8008390:	f04f 35ff 	mov.w	r5, #4294967295
 8008394:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008396:	07da      	lsls	r2, r3, #31
 8008398:	d405      	bmi.n	80083a6 <_puts_r+0x9a>
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	059b      	lsls	r3, r3, #22
 800839e:	d402      	bmi.n	80083a6 <_puts_r+0x9a>
 80083a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083a2:	f000 fab2 	bl	800890a <__retarget_lock_release_recursive>
 80083a6:	4628      	mov	r0, r5
 80083a8:	bd70      	pop	{r4, r5, r6, pc}
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da04      	bge.n	80083b8 <_puts_r+0xac>
 80083ae:	69a2      	ldr	r2, [r4, #24]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	dc06      	bgt.n	80083c2 <_puts_r+0xb6>
 80083b4:	290a      	cmp	r1, #10
 80083b6:	d004      	beq.n	80083c2 <_puts_r+0xb6>
 80083b8:	6823      	ldr	r3, [r4, #0]
 80083ba:	1c5a      	adds	r2, r3, #1
 80083bc:	6022      	str	r2, [r4, #0]
 80083be:	7019      	strb	r1, [r3, #0]
 80083c0:	e7c5      	b.n	800834e <_puts_r+0x42>
 80083c2:	4622      	mov	r2, r4
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 f827 	bl	8008418 <__swbuf_r>
 80083ca:	3001      	adds	r0, #1
 80083cc:	d1bf      	bne.n	800834e <_puts_r+0x42>
 80083ce:	e7df      	b.n	8008390 <_puts_r+0x84>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	250a      	movs	r5, #10
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	6022      	str	r2, [r4, #0]
 80083d8:	701d      	strb	r5, [r3, #0]
 80083da:	e7db      	b.n	8008394 <_puts_r+0x88>
 80083dc:	08008be4 	.word	0x08008be4
 80083e0:	08008c04 	.word	0x08008c04
 80083e4:	08008bc4 	.word	0x08008bc4

080083e8 <puts>:
 80083e8:	4b02      	ldr	r3, [pc, #8]	; (80083f4 <puts+0xc>)
 80083ea:	4601      	mov	r1, r0
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	f7ff bf8d 	b.w	800830c <_puts_r>
 80083f2:	bf00      	nop
 80083f4:	20000058 	.word	0x20000058

080083f8 <_sbrk_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d06      	ldr	r5, [pc, #24]	; (8008414 <_sbrk_r+0x1c>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f7f8 fbba 	bl	8000b7c <_sbrk>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_sbrk_r+0x1a>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_sbrk_r+0x1a>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	2000086c 	.word	0x2000086c

08008418 <__swbuf_r>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	460e      	mov	r6, r1
 800841c:	4614      	mov	r4, r2
 800841e:	4605      	mov	r5, r0
 8008420:	b118      	cbz	r0, 800842a <__swbuf_r+0x12>
 8008422:	6983      	ldr	r3, [r0, #24]
 8008424:	b90b      	cbnz	r3, 800842a <__swbuf_r+0x12>
 8008426:	f000 f9d1 	bl	80087cc <__sinit>
 800842a:	4b21      	ldr	r3, [pc, #132]	; (80084b0 <__swbuf_r+0x98>)
 800842c:	429c      	cmp	r4, r3
 800842e:	d12b      	bne.n	8008488 <__swbuf_r+0x70>
 8008430:	686c      	ldr	r4, [r5, #4]
 8008432:	69a3      	ldr	r3, [r4, #24]
 8008434:	60a3      	str	r3, [r4, #8]
 8008436:	89a3      	ldrh	r3, [r4, #12]
 8008438:	071a      	lsls	r2, r3, #28
 800843a:	d52f      	bpl.n	800849c <__swbuf_r+0x84>
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	b36b      	cbz	r3, 800849c <__swbuf_r+0x84>
 8008440:	6923      	ldr	r3, [r4, #16]
 8008442:	6820      	ldr	r0, [r4, #0]
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	6963      	ldr	r3, [r4, #20]
 8008448:	b2f6      	uxtb	r6, r6
 800844a:	4283      	cmp	r3, r0
 800844c:	4637      	mov	r7, r6
 800844e:	dc04      	bgt.n	800845a <__swbuf_r+0x42>
 8008450:	4621      	mov	r1, r4
 8008452:	4628      	mov	r0, r5
 8008454:	f000 f926 	bl	80086a4 <_fflush_r>
 8008458:	bb30      	cbnz	r0, 80084a8 <__swbuf_r+0x90>
 800845a:	68a3      	ldr	r3, [r4, #8]
 800845c:	3b01      	subs	r3, #1
 800845e:	60a3      	str	r3, [r4, #8]
 8008460:	6823      	ldr	r3, [r4, #0]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	6022      	str	r2, [r4, #0]
 8008466:	701e      	strb	r6, [r3, #0]
 8008468:	6963      	ldr	r3, [r4, #20]
 800846a:	3001      	adds	r0, #1
 800846c:	4283      	cmp	r3, r0
 800846e:	d004      	beq.n	800847a <__swbuf_r+0x62>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	07db      	lsls	r3, r3, #31
 8008474:	d506      	bpl.n	8008484 <__swbuf_r+0x6c>
 8008476:	2e0a      	cmp	r6, #10
 8008478:	d104      	bne.n	8008484 <__swbuf_r+0x6c>
 800847a:	4621      	mov	r1, r4
 800847c:	4628      	mov	r0, r5
 800847e:	f000 f911 	bl	80086a4 <_fflush_r>
 8008482:	b988      	cbnz	r0, 80084a8 <__swbuf_r+0x90>
 8008484:	4638      	mov	r0, r7
 8008486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008488:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <__swbuf_r+0x9c>)
 800848a:	429c      	cmp	r4, r3
 800848c:	d101      	bne.n	8008492 <__swbuf_r+0x7a>
 800848e:	68ac      	ldr	r4, [r5, #8]
 8008490:	e7cf      	b.n	8008432 <__swbuf_r+0x1a>
 8008492:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <__swbuf_r+0xa0>)
 8008494:	429c      	cmp	r4, r3
 8008496:	bf08      	it	eq
 8008498:	68ec      	ldreq	r4, [r5, #12]
 800849a:	e7ca      	b.n	8008432 <__swbuf_r+0x1a>
 800849c:	4621      	mov	r1, r4
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 f80c 	bl	80084bc <__swsetup_r>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d0cb      	beq.n	8008440 <__swbuf_r+0x28>
 80084a8:	f04f 37ff 	mov.w	r7, #4294967295
 80084ac:	e7ea      	b.n	8008484 <__swbuf_r+0x6c>
 80084ae:	bf00      	nop
 80084b0:	08008be4 	.word	0x08008be4
 80084b4:	08008c04 	.word	0x08008c04
 80084b8:	08008bc4 	.word	0x08008bc4

080084bc <__swsetup_r>:
 80084bc:	4b32      	ldr	r3, [pc, #200]	; (8008588 <__swsetup_r+0xcc>)
 80084be:	b570      	push	{r4, r5, r6, lr}
 80084c0:	681d      	ldr	r5, [r3, #0]
 80084c2:	4606      	mov	r6, r0
 80084c4:	460c      	mov	r4, r1
 80084c6:	b125      	cbz	r5, 80084d2 <__swsetup_r+0x16>
 80084c8:	69ab      	ldr	r3, [r5, #24]
 80084ca:	b913      	cbnz	r3, 80084d2 <__swsetup_r+0x16>
 80084cc:	4628      	mov	r0, r5
 80084ce:	f000 f97d 	bl	80087cc <__sinit>
 80084d2:	4b2e      	ldr	r3, [pc, #184]	; (800858c <__swsetup_r+0xd0>)
 80084d4:	429c      	cmp	r4, r3
 80084d6:	d10f      	bne.n	80084f8 <__swsetup_r+0x3c>
 80084d8:	686c      	ldr	r4, [r5, #4]
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084e0:	0719      	lsls	r1, r3, #28
 80084e2:	d42c      	bmi.n	800853e <__swsetup_r+0x82>
 80084e4:	06dd      	lsls	r5, r3, #27
 80084e6:	d411      	bmi.n	800850c <__swsetup_r+0x50>
 80084e8:	2309      	movs	r3, #9
 80084ea:	6033      	str	r3, [r6, #0]
 80084ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084f0:	81a3      	strh	r3, [r4, #12]
 80084f2:	f04f 30ff 	mov.w	r0, #4294967295
 80084f6:	e03e      	b.n	8008576 <__swsetup_r+0xba>
 80084f8:	4b25      	ldr	r3, [pc, #148]	; (8008590 <__swsetup_r+0xd4>)
 80084fa:	429c      	cmp	r4, r3
 80084fc:	d101      	bne.n	8008502 <__swsetup_r+0x46>
 80084fe:	68ac      	ldr	r4, [r5, #8]
 8008500:	e7eb      	b.n	80084da <__swsetup_r+0x1e>
 8008502:	4b24      	ldr	r3, [pc, #144]	; (8008594 <__swsetup_r+0xd8>)
 8008504:	429c      	cmp	r4, r3
 8008506:	bf08      	it	eq
 8008508:	68ec      	ldreq	r4, [r5, #12]
 800850a:	e7e6      	b.n	80084da <__swsetup_r+0x1e>
 800850c:	0758      	lsls	r0, r3, #29
 800850e:	d512      	bpl.n	8008536 <__swsetup_r+0x7a>
 8008510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008512:	b141      	cbz	r1, 8008526 <__swsetup_r+0x6a>
 8008514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008518:	4299      	cmp	r1, r3
 800851a:	d002      	beq.n	8008522 <__swsetup_r+0x66>
 800851c:	4630      	mov	r0, r6
 800851e:	f7ff fe15 	bl	800814c <_free_r>
 8008522:	2300      	movs	r3, #0
 8008524:	6363      	str	r3, [r4, #52]	; 0x34
 8008526:	89a3      	ldrh	r3, [r4, #12]
 8008528:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800852c:	81a3      	strh	r3, [r4, #12]
 800852e:	2300      	movs	r3, #0
 8008530:	6063      	str	r3, [r4, #4]
 8008532:	6923      	ldr	r3, [r4, #16]
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	f043 0308 	orr.w	r3, r3, #8
 800853c:	81a3      	strh	r3, [r4, #12]
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	b94b      	cbnz	r3, 8008556 <__swsetup_r+0x9a>
 8008542:	89a3      	ldrh	r3, [r4, #12]
 8008544:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800854c:	d003      	beq.n	8008556 <__swsetup_r+0x9a>
 800854e:	4621      	mov	r1, r4
 8008550:	4630      	mov	r0, r6
 8008552:	f000 fa01 	bl	8008958 <__smakebuf_r>
 8008556:	89a0      	ldrh	r0, [r4, #12]
 8008558:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800855c:	f010 0301 	ands.w	r3, r0, #1
 8008560:	d00a      	beq.n	8008578 <__swsetup_r+0xbc>
 8008562:	2300      	movs	r3, #0
 8008564:	60a3      	str	r3, [r4, #8]
 8008566:	6963      	ldr	r3, [r4, #20]
 8008568:	425b      	negs	r3, r3
 800856a:	61a3      	str	r3, [r4, #24]
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	b943      	cbnz	r3, 8008582 <__swsetup_r+0xc6>
 8008570:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008574:	d1ba      	bne.n	80084ec <__swsetup_r+0x30>
 8008576:	bd70      	pop	{r4, r5, r6, pc}
 8008578:	0781      	lsls	r1, r0, #30
 800857a:	bf58      	it	pl
 800857c:	6963      	ldrpl	r3, [r4, #20]
 800857e:	60a3      	str	r3, [r4, #8]
 8008580:	e7f4      	b.n	800856c <__swsetup_r+0xb0>
 8008582:	2000      	movs	r0, #0
 8008584:	e7f7      	b.n	8008576 <__swsetup_r+0xba>
 8008586:	bf00      	nop
 8008588:	20000058 	.word	0x20000058
 800858c:	08008be4 	.word	0x08008be4
 8008590:	08008c04 	.word	0x08008c04
 8008594:	08008bc4 	.word	0x08008bc4

08008598 <__sflush_r>:
 8008598:	898a      	ldrh	r2, [r1, #12]
 800859a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859e:	4605      	mov	r5, r0
 80085a0:	0710      	lsls	r0, r2, #28
 80085a2:	460c      	mov	r4, r1
 80085a4:	d458      	bmi.n	8008658 <__sflush_r+0xc0>
 80085a6:	684b      	ldr	r3, [r1, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	dc05      	bgt.n	80085b8 <__sflush_r+0x20>
 80085ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dc02      	bgt.n	80085b8 <__sflush_r+0x20>
 80085b2:	2000      	movs	r0, #0
 80085b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085ba:	2e00      	cmp	r6, #0
 80085bc:	d0f9      	beq.n	80085b2 <__sflush_r+0x1a>
 80085be:	2300      	movs	r3, #0
 80085c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80085c4:	682f      	ldr	r7, [r5, #0]
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	d032      	beq.n	8008630 <__sflush_r+0x98>
 80085ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	075a      	lsls	r2, r3, #29
 80085d0:	d505      	bpl.n	80085de <__sflush_r+0x46>
 80085d2:	6863      	ldr	r3, [r4, #4]
 80085d4:	1ac0      	subs	r0, r0, r3
 80085d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80085d8:	b10b      	cbz	r3, 80085de <__sflush_r+0x46>
 80085da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085dc:	1ac0      	subs	r0, r0, r3
 80085de:	2300      	movs	r3, #0
 80085e0:	4602      	mov	r2, r0
 80085e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80085e4:	6a21      	ldr	r1, [r4, #32]
 80085e6:	4628      	mov	r0, r5
 80085e8:	47b0      	blx	r6
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	89a3      	ldrh	r3, [r4, #12]
 80085ee:	d106      	bne.n	80085fe <__sflush_r+0x66>
 80085f0:	6829      	ldr	r1, [r5, #0]
 80085f2:	291d      	cmp	r1, #29
 80085f4:	d82c      	bhi.n	8008650 <__sflush_r+0xb8>
 80085f6:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <__sflush_r+0x108>)
 80085f8:	40ca      	lsrs	r2, r1
 80085fa:	07d6      	lsls	r6, r2, #31
 80085fc:	d528      	bpl.n	8008650 <__sflush_r+0xb8>
 80085fe:	2200      	movs	r2, #0
 8008600:	6062      	str	r2, [r4, #4]
 8008602:	04d9      	lsls	r1, r3, #19
 8008604:	6922      	ldr	r2, [r4, #16]
 8008606:	6022      	str	r2, [r4, #0]
 8008608:	d504      	bpl.n	8008614 <__sflush_r+0x7c>
 800860a:	1c42      	adds	r2, r0, #1
 800860c:	d101      	bne.n	8008612 <__sflush_r+0x7a>
 800860e:	682b      	ldr	r3, [r5, #0]
 8008610:	b903      	cbnz	r3, 8008614 <__sflush_r+0x7c>
 8008612:	6560      	str	r0, [r4, #84]	; 0x54
 8008614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008616:	602f      	str	r7, [r5, #0]
 8008618:	2900      	cmp	r1, #0
 800861a:	d0ca      	beq.n	80085b2 <__sflush_r+0x1a>
 800861c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008620:	4299      	cmp	r1, r3
 8008622:	d002      	beq.n	800862a <__sflush_r+0x92>
 8008624:	4628      	mov	r0, r5
 8008626:	f7ff fd91 	bl	800814c <_free_r>
 800862a:	2000      	movs	r0, #0
 800862c:	6360      	str	r0, [r4, #52]	; 0x34
 800862e:	e7c1      	b.n	80085b4 <__sflush_r+0x1c>
 8008630:	6a21      	ldr	r1, [r4, #32]
 8008632:	2301      	movs	r3, #1
 8008634:	4628      	mov	r0, r5
 8008636:	47b0      	blx	r6
 8008638:	1c41      	adds	r1, r0, #1
 800863a:	d1c7      	bne.n	80085cc <__sflush_r+0x34>
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0c4      	beq.n	80085cc <__sflush_r+0x34>
 8008642:	2b1d      	cmp	r3, #29
 8008644:	d001      	beq.n	800864a <__sflush_r+0xb2>
 8008646:	2b16      	cmp	r3, #22
 8008648:	d101      	bne.n	800864e <__sflush_r+0xb6>
 800864a:	602f      	str	r7, [r5, #0]
 800864c:	e7b1      	b.n	80085b2 <__sflush_r+0x1a>
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	e7ad      	b.n	80085b4 <__sflush_r+0x1c>
 8008658:	690f      	ldr	r7, [r1, #16]
 800865a:	2f00      	cmp	r7, #0
 800865c:	d0a9      	beq.n	80085b2 <__sflush_r+0x1a>
 800865e:	0793      	lsls	r3, r2, #30
 8008660:	680e      	ldr	r6, [r1, #0]
 8008662:	bf08      	it	eq
 8008664:	694b      	ldreq	r3, [r1, #20]
 8008666:	600f      	str	r7, [r1, #0]
 8008668:	bf18      	it	ne
 800866a:	2300      	movne	r3, #0
 800866c:	eba6 0807 	sub.w	r8, r6, r7
 8008670:	608b      	str	r3, [r1, #8]
 8008672:	f1b8 0f00 	cmp.w	r8, #0
 8008676:	dd9c      	ble.n	80085b2 <__sflush_r+0x1a>
 8008678:	6a21      	ldr	r1, [r4, #32]
 800867a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800867c:	4643      	mov	r3, r8
 800867e:	463a      	mov	r2, r7
 8008680:	4628      	mov	r0, r5
 8008682:	47b0      	blx	r6
 8008684:	2800      	cmp	r0, #0
 8008686:	dc06      	bgt.n	8008696 <__sflush_r+0xfe>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868e:	81a3      	strh	r3, [r4, #12]
 8008690:	f04f 30ff 	mov.w	r0, #4294967295
 8008694:	e78e      	b.n	80085b4 <__sflush_r+0x1c>
 8008696:	4407      	add	r7, r0
 8008698:	eba8 0800 	sub.w	r8, r8, r0
 800869c:	e7e9      	b.n	8008672 <__sflush_r+0xda>
 800869e:	bf00      	nop
 80086a0:	20400001 	.word	0x20400001

080086a4 <_fflush_r>:
 80086a4:	b538      	push	{r3, r4, r5, lr}
 80086a6:	690b      	ldr	r3, [r1, #16]
 80086a8:	4605      	mov	r5, r0
 80086aa:	460c      	mov	r4, r1
 80086ac:	b913      	cbnz	r3, 80086b4 <_fflush_r+0x10>
 80086ae:	2500      	movs	r5, #0
 80086b0:	4628      	mov	r0, r5
 80086b2:	bd38      	pop	{r3, r4, r5, pc}
 80086b4:	b118      	cbz	r0, 80086be <_fflush_r+0x1a>
 80086b6:	6983      	ldr	r3, [r0, #24]
 80086b8:	b90b      	cbnz	r3, 80086be <_fflush_r+0x1a>
 80086ba:	f000 f887 	bl	80087cc <__sinit>
 80086be:	4b14      	ldr	r3, [pc, #80]	; (8008710 <_fflush_r+0x6c>)
 80086c0:	429c      	cmp	r4, r3
 80086c2:	d11b      	bne.n	80086fc <_fflush_r+0x58>
 80086c4:	686c      	ldr	r4, [r5, #4]
 80086c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0ef      	beq.n	80086ae <_fflush_r+0xa>
 80086ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80086d0:	07d0      	lsls	r0, r2, #31
 80086d2:	d404      	bmi.n	80086de <_fflush_r+0x3a>
 80086d4:	0599      	lsls	r1, r3, #22
 80086d6:	d402      	bmi.n	80086de <_fflush_r+0x3a>
 80086d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086da:	f000 f915 	bl	8008908 <__retarget_lock_acquire_recursive>
 80086de:	4628      	mov	r0, r5
 80086e0:	4621      	mov	r1, r4
 80086e2:	f7ff ff59 	bl	8008598 <__sflush_r>
 80086e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086e8:	07da      	lsls	r2, r3, #31
 80086ea:	4605      	mov	r5, r0
 80086ec:	d4e0      	bmi.n	80086b0 <_fflush_r+0xc>
 80086ee:	89a3      	ldrh	r3, [r4, #12]
 80086f0:	059b      	lsls	r3, r3, #22
 80086f2:	d4dd      	bmi.n	80086b0 <_fflush_r+0xc>
 80086f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086f6:	f000 f908 	bl	800890a <__retarget_lock_release_recursive>
 80086fa:	e7d9      	b.n	80086b0 <_fflush_r+0xc>
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <_fflush_r+0x70>)
 80086fe:	429c      	cmp	r4, r3
 8008700:	d101      	bne.n	8008706 <_fflush_r+0x62>
 8008702:	68ac      	ldr	r4, [r5, #8]
 8008704:	e7df      	b.n	80086c6 <_fflush_r+0x22>
 8008706:	4b04      	ldr	r3, [pc, #16]	; (8008718 <_fflush_r+0x74>)
 8008708:	429c      	cmp	r4, r3
 800870a:	bf08      	it	eq
 800870c:	68ec      	ldreq	r4, [r5, #12]
 800870e:	e7da      	b.n	80086c6 <_fflush_r+0x22>
 8008710:	08008be4 	.word	0x08008be4
 8008714:	08008c04 	.word	0x08008c04
 8008718:	08008bc4 	.word	0x08008bc4

0800871c <std>:
 800871c:	2300      	movs	r3, #0
 800871e:	b510      	push	{r4, lr}
 8008720:	4604      	mov	r4, r0
 8008722:	e9c0 3300 	strd	r3, r3, [r0]
 8008726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800872a:	6083      	str	r3, [r0, #8]
 800872c:	8181      	strh	r1, [r0, #12]
 800872e:	6643      	str	r3, [r0, #100]	; 0x64
 8008730:	81c2      	strh	r2, [r0, #14]
 8008732:	6183      	str	r3, [r0, #24]
 8008734:	4619      	mov	r1, r3
 8008736:	2208      	movs	r2, #8
 8008738:	305c      	adds	r0, #92	; 0x5c
 800873a:	f7ff fcff 	bl	800813c <memset>
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <std+0x38>)
 8008740:	6263      	str	r3, [r4, #36]	; 0x24
 8008742:	4b05      	ldr	r3, [pc, #20]	; (8008758 <std+0x3c>)
 8008744:	62a3      	str	r3, [r4, #40]	; 0x28
 8008746:	4b05      	ldr	r3, [pc, #20]	; (800875c <std+0x40>)
 8008748:	62e3      	str	r3, [r4, #44]	; 0x2c
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <std+0x44>)
 800874c:	6224      	str	r4, [r4, #32]
 800874e:	6323      	str	r3, [r4, #48]	; 0x30
 8008750:	bd10      	pop	{r4, pc}
 8008752:	bf00      	nop
 8008754:	080089f1 	.word	0x080089f1
 8008758:	08008a13 	.word	0x08008a13
 800875c:	08008a4b 	.word	0x08008a4b
 8008760:	08008a6f 	.word	0x08008a6f

08008764 <_cleanup_r>:
 8008764:	4901      	ldr	r1, [pc, #4]	; (800876c <_cleanup_r+0x8>)
 8008766:	f000 b8af 	b.w	80088c8 <_fwalk_reent>
 800876a:	bf00      	nop
 800876c:	080086a5 	.word	0x080086a5

08008770 <__sfmoreglue>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	2268      	movs	r2, #104	; 0x68
 8008774:	1e4d      	subs	r5, r1, #1
 8008776:	4355      	muls	r5, r2
 8008778:	460e      	mov	r6, r1
 800877a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800877e:	f7ff fd51 	bl	8008224 <_malloc_r>
 8008782:	4604      	mov	r4, r0
 8008784:	b140      	cbz	r0, 8008798 <__sfmoreglue+0x28>
 8008786:	2100      	movs	r1, #0
 8008788:	e9c0 1600 	strd	r1, r6, [r0]
 800878c:	300c      	adds	r0, #12
 800878e:	60a0      	str	r0, [r4, #8]
 8008790:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008794:	f7ff fcd2 	bl	800813c <memset>
 8008798:	4620      	mov	r0, r4
 800879a:	bd70      	pop	{r4, r5, r6, pc}

0800879c <__sfp_lock_acquire>:
 800879c:	4801      	ldr	r0, [pc, #4]	; (80087a4 <__sfp_lock_acquire+0x8>)
 800879e:	f000 b8b3 	b.w	8008908 <__retarget_lock_acquire_recursive>
 80087a2:	bf00      	nop
 80087a4:	20000869 	.word	0x20000869

080087a8 <__sfp_lock_release>:
 80087a8:	4801      	ldr	r0, [pc, #4]	; (80087b0 <__sfp_lock_release+0x8>)
 80087aa:	f000 b8ae 	b.w	800890a <__retarget_lock_release_recursive>
 80087ae:	bf00      	nop
 80087b0:	20000869 	.word	0x20000869

080087b4 <__sinit_lock_acquire>:
 80087b4:	4801      	ldr	r0, [pc, #4]	; (80087bc <__sinit_lock_acquire+0x8>)
 80087b6:	f000 b8a7 	b.w	8008908 <__retarget_lock_acquire_recursive>
 80087ba:	bf00      	nop
 80087bc:	2000086a 	.word	0x2000086a

080087c0 <__sinit_lock_release>:
 80087c0:	4801      	ldr	r0, [pc, #4]	; (80087c8 <__sinit_lock_release+0x8>)
 80087c2:	f000 b8a2 	b.w	800890a <__retarget_lock_release_recursive>
 80087c6:	bf00      	nop
 80087c8:	2000086a 	.word	0x2000086a

080087cc <__sinit>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	4604      	mov	r4, r0
 80087d0:	f7ff fff0 	bl	80087b4 <__sinit_lock_acquire>
 80087d4:	69a3      	ldr	r3, [r4, #24]
 80087d6:	b11b      	cbz	r3, 80087e0 <__sinit+0x14>
 80087d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087dc:	f7ff bff0 	b.w	80087c0 <__sinit_lock_release>
 80087e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087e4:	6523      	str	r3, [r4, #80]	; 0x50
 80087e6:	4b13      	ldr	r3, [pc, #76]	; (8008834 <__sinit+0x68>)
 80087e8:	4a13      	ldr	r2, [pc, #76]	; (8008838 <__sinit+0x6c>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80087ee:	42a3      	cmp	r3, r4
 80087f0:	bf04      	itt	eq
 80087f2:	2301      	moveq	r3, #1
 80087f4:	61a3      	streq	r3, [r4, #24]
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 f820 	bl	800883c <__sfp>
 80087fc:	6060      	str	r0, [r4, #4]
 80087fe:	4620      	mov	r0, r4
 8008800:	f000 f81c 	bl	800883c <__sfp>
 8008804:	60a0      	str	r0, [r4, #8]
 8008806:	4620      	mov	r0, r4
 8008808:	f000 f818 	bl	800883c <__sfp>
 800880c:	2200      	movs	r2, #0
 800880e:	60e0      	str	r0, [r4, #12]
 8008810:	2104      	movs	r1, #4
 8008812:	6860      	ldr	r0, [r4, #4]
 8008814:	f7ff ff82 	bl	800871c <std>
 8008818:	68a0      	ldr	r0, [r4, #8]
 800881a:	2201      	movs	r2, #1
 800881c:	2109      	movs	r1, #9
 800881e:	f7ff ff7d 	bl	800871c <std>
 8008822:	68e0      	ldr	r0, [r4, #12]
 8008824:	2202      	movs	r2, #2
 8008826:	2112      	movs	r1, #18
 8008828:	f7ff ff78 	bl	800871c <std>
 800882c:	2301      	movs	r3, #1
 800882e:	61a3      	str	r3, [r4, #24]
 8008830:	e7d2      	b.n	80087d8 <__sinit+0xc>
 8008832:	bf00      	nop
 8008834:	08008bc0 	.word	0x08008bc0
 8008838:	08008765 	.word	0x08008765

0800883c <__sfp>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	4607      	mov	r7, r0
 8008840:	f7ff ffac 	bl	800879c <__sfp_lock_acquire>
 8008844:	4b1e      	ldr	r3, [pc, #120]	; (80088c0 <__sfp+0x84>)
 8008846:	681e      	ldr	r6, [r3, #0]
 8008848:	69b3      	ldr	r3, [r6, #24]
 800884a:	b913      	cbnz	r3, 8008852 <__sfp+0x16>
 800884c:	4630      	mov	r0, r6
 800884e:	f7ff ffbd 	bl	80087cc <__sinit>
 8008852:	3648      	adds	r6, #72	; 0x48
 8008854:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008858:	3b01      	subs	r3, #1
 800885a:	d503      	bpl.n	8008864 <__sfp+0x28>
 800885c:	6833      	ldr	r3, [r6, #0]
 800885e:	b30b      	cbz	r3, 80088a4 <__sfp+0x68>
 8008860:	6836      	ldr	r6, [r6, #0]
 8008862:	e7f7      	b.n	8008854 <__sfp+0x18>
 8008864:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008868:	b9d5      	cbnz	r5, 80088a0 <__sfp+0x64>
 800886a:	4b16      	ldr	r3, [pc, #88]	; (80088c4 <__sfp+0x88>)
 800886c:	60e3      	str	r3, [r4, #12]
 800886e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008872:	6665      	str	r5, [r4, #100]	; 0x64
 8008874:	f000 f847 	bl	8008906 <__retarget_lock_init_recursive>
 8008878:	f7ff ff96 	bl	80087a8 <__sfp_lock_release>
 800887c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008880:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008884:	6025      	str	r5, [r4, #0]
 8008886:	61a5      	str	r5, [r4, #24]
 8008888:	2208      	movs	r2, #8
 800888a:	4629      	mov	r1, r5
 800888c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008890:	f7ff fc54 	bl	800813c <memset>
 8008894:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008898:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800889c:	4620      	mov	r0, r4
 800889e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a0:	3468      	adds	r4, #104	; 0x68
 80088a2:	e7d9      	b.n	8008858 <__sfp+0x1c>
 80088a4:	2104      	movs	r1, #4
 80088a6:	4638      	mov	r0, r7
 80088a8:	f7ff ff62 	bl	8008770 <__sfmoreglue>
 80088ac:	4604      	mov	r4, r0
 80088ae:	6030      	str	r0, [r6, #0]
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d1d5      	bne.n	8008860 <__sfp+0x24>
 80088b4:	f7ff ff78 	bl	80087a8 <__sfp_lock_release>
 80088b8:	230c      	movs	r3, #12
 80088ba:	603b      	str	r3, [r7, #0]
 80088bc:	e7ee      	b.n	800889c <__sfp+0x60>
 80088be:	bf00      	nop
 80088c0:	08008bc0 	.word	0x08008bc0
 80088c4:	ffff0001 	.word	0xffff0001

080088c8 <_fwalk_reent>:
 80088c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088cc:	4606      	mov	r6, r0
 80088ce:	4688      	mov	r8, r1
 80088d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088d4:	2700      	movs	r7, #0
 80088d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088da:	f1b9 0901 	subs.w	r9, r9, #1
 80088de:	d505      	bpl.n	80088ec <_fwalk_reent+0x24>
 80088e0:	6824      	ldr	r4, [r4, #0]
 80088e2:	2c00      	cmp	r4, #0
 80088e4:	d1f7      	bne.n	80088d6 <_fwalk_reent+0xe>
 80088e6:	4638      	mov	r0, r7
 80088e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ec:	89ab      	ldrh	r3, [r5, #12]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d907      	bls.n	8008902 <_fwalk_reent+0x3a>
 80088f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f6:	3301      	adds	r3, #1
 80088f8:	d003      	beq.n	8008902 <_fwalk_reent+0x3a>
 80088fa:	4629      	mov	r1, r5
 80088fc:	4630      	mov	r0, r6
 80088fe:	47c0      	blx	r8
 8008900:	4307      	orrs	r7, r0
 8008902:	3568      	adds	r5, #104	; 0x68
 8008904:	e7e9      	b.n	80088da <_fwalk_reent+0x12>

08008906 <__retarget_lock_init_recursive>:
 8008906:	4770      	bx	lr

08008908 <__retarget_lock_acquire_recursive>:
 8008908:	4770      	bx	lr

0800890a <__retarget_lock_release_recursive>:
 800890a:	4770      	bx	lr

0800890c <__swhatbuf_r>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	460e      	mov	r6, r1
 8008910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008914:	2900      	cmp	r1, #0
 8008916:	b096      	sub	sp, #88	; 0x58
 8008918:	4614      	mov	r4, r2
 800891a:	461d      	mov	r5, r3
 800891c:	da08      	bge.n	8008930 <__swhatbuf_r+0x24>
 800891e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	602a      	str	r2, [r5, #0]
 8008926:	061a      	lsls	r2, r3, #24
 8008928:	d410      	bmi.n	800894c <__swhatbuf_r+0x40>
 800892a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800892e:	e00e      	b.n	800894e <__swhatbuf_r+0x42>
 8008930:	466a      	mov	r2, sp
 8008932:	f000 f8c3 	bl	8008abc <_fstat_r>
 8008936:	2800      	cmp	r0, #0
 8008938:	dbf1      	blt.n	800891e <__swhatbuf_r+0x12>
 800893a:	9a01      	ldr	r2, [sp, #4]
 800893c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008940:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008944:	425a      	negs	r2, r3
 8008946:	415a      	adcs	r2, r3
 8008948:	602a      	str	r2, [r5, #0]
 800894a:	e7ee      	b.n	800892a <__swhatbuf_r+0x1e>
 800894c:	2340      	movs	r3, #64	; 0x40
 800894e:	2000      	movs	r0, #0
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	b016      	add	sp, #88	; 0x58
 8008954:	bd70      	pop	{r4, r5, r6, pc}
	...

08008958 <__smakebuf_r>:
 8008958:	898b      	ldrh	r3, [r1, #12]
 800895a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800895c:	079d      	lsls	r5, r3, #30
 800895e:	4606      	mov	r6, r0
 8008960:	460c      	mov	r4, r1
 8008962:	d507      	bpl.n	8008974 <__smakebuf_r+0x1c>
 8008964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	2301      	movs	r3, #1
 800896e:	6163      	str	r3, [r4, #20]
 8008970:	b002      	add	sp, #8
 8008972:	bd70      	pop	{r4, r5, r6, pc}
 8008974:	ab01      	add	r3, sp, #4
 8008976:	466a      	mov	r2, sp
 8008978:	f7ff ffc8 	bl	800890c <__swhatbuf_r>
 800897c:	9900      	ldr	r1, [sp, #0]
 800897e:	4605      	mov	r5, r0
 8008980:	4630      	mov	r0, r6
 8008982:	f7ff fc4f 	bl	8008224 <_malloc_r>
 8008986:	b948      	cbnz	r0, 800899c <__smakebuf_r+0x44>
 8008988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898c:	059a      	lsls	r2, r3, #22
 800898e:	d4ef      	bmi.n	8008970 <__smakebuf_r+0x18>
 8008990:	f023 0303 	bic.w	r3, r3, #3
 8008994:	f043 0302 	orr.w	r3, r3, #2
 8008998:	81a3      	strh	r3, [r4, #12]
 800899a:	e7e3      	b.n	8008964 <__smakebuf_r+0xc>
 800899c:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <__smakebuf_r+0x7c>)
 800899e:	62b3      	str	r3, [r6, #40]	; 0x28
 80089a0:	89a3      	ldrh	r3, [r4, #12]
 80089a2:	6020      	str	r0, [r4, #0]
 80089a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	9b00      	ldr	r3, [sp, #0]
 80089ac:	6163      	str	r3, [r4, #20]
 80089ae:	9b01      	ldr	r3, [sp, #4]
 80089b0:	6120      	str	r0, [r4, #16]
 80089b2:	b15b      	cbz	r3, 80089cc <__smakebuf_r+0x74>
 80089b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089b8:	4630      	mov	r0, r6
 80089ba:	f000 f891 	bl	8008ae0 <_isatty_r>
 80089be:	b128      	cbz	r0, 80089cc <__smakebuf_r+0x74>
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	f023 0303 	bic.w	r3, r3, #3
 80089c6:	f043 0301 	orr.w	r3, r3, #1
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	89a0      	ldrh	r0, [r4, #12]
 80089ce:	4305      	orrs	r5, r0
 80089d0:	81a5      	strh	r5, [r4, #12]
 80089d2:	e7cd      	b.n	8008970 <__smakebuf_r+0x18>
 80089d4:	08008765 	.word	0x08008765

080089d8 <__malloc_lock>:
 80089d8:	4801      	ldr	r0, [pc, #4]	; (80089e0 <__malloc_lock+0x8>)
 80089da:	f7ff bf95 	b.w	8008908 <__retarget_lock_acquire_recursive>
 80089de:	bf00      	nop
 80089e0:	20000868 	.word	0x20000868

080089e4 <__malloc_unlock>:
 80089e4:	4801      	ldr	r0, [pc, #4]	; (80089ec <__malloc_unlock+0x8>)
 80089e6:	f7ff bf90 	b.w	800890a <__retarget_lock_release_recursive>
 80089ea:	bf00      	nop
 80089ec:	20000868 	.word	0x20000868

080089f0 <__sread>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	460c      	mov	r4, r1
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	f000 f894 	bl	8008b24 <_read_r>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	bfab      	itete	ge
 8008a00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a02:	89a3      	ldrhlt	r3, [r4, #12]
 8008a04:	181b      	addge	r3, r3, r0
 8008a06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a0a:	bfac      	ite	ge
 8008a0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a0e:	81a3      	strhlt	r3, [r4, #12]
 8008a10:	bd10      	pop	{r4, pc}

08008a12 <__swrite>:
 8008a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a16:	461f      	mov	r7, r3
 8008a18:	898b      	ldrh	r3, [r1, #12]
 8008a1a:	05db      	lsls	r3, r3, #23
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4616      	mov	r6, r2
 8008a22:	d505      	bpl.n	8008a30 <__swrite+0x1e>
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	2302      	movs	r3, #2
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f000 f868 	bl	8008b00 <_lseek_r>
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a3a:	81a3      	strh	r3, [r4, #12]
 8008a3c:	4632      	mov	r2, r6
 8008a3e:	463b      	mov	r3, r7
 8008a40:	4628      	mov	r0, r5
 8008a42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a46:	f000 b817 	b.w	8008a78 <_write_r>

08008a4a <__sseek>:
 8008a4a:	b510      	push	{r4, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a52:	f000 f855 	bl	8008b00 <_lseek_r>
 8008a56:	1c43      	adds	r3, r0, #1
 8008a58:	89a3      	ldrh	r3, [r4, #12]
 8008a5a:	bf15      	itete	ne
 8008a5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a66:	81a3      	strheq	r3, [r4, #12]
 8008a68:	bf18      	it	ne
 8008a6a:	81a3      	strhne	r3, [r4, #12]
 8008a6c:	bd10      	pop	{r4, pc}

08008a6e <__sclose>:
 8008a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a72:	f000 b813 	b.w	8008a9c <_close_r>
	...

08008a78 <_write_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d07      	ldr	r5, [pc, #28]	; (8008a98 <_write_r+0x20>)
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	4608      	mov	r0, r1
 8008a80:	4611      	mov	r1, r2
 8008a82:	2200      	movs	r2, #0
 8008a84:	602a      	str	r2, [r5, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	f7f8 f827 	bl	8000ada <_write>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_write_r+0x1e>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_write_r+0x1e>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	2000086c 	.word	0x2000086c

08008a9c <_close_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	; (8008ab8 <_close_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f8 f833 	bl	8000b12 <_close>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_close_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_close_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	2000086c 	.word	0x2000086c

08008abc <_fstat_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	; (8008adc <_fstat_r+0x20>)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4608      	mov	r0, r1
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	602b      	str	r3, [r5, #0]
 8008aca:	f7f8 f82e 	bl	8000b2a <_fstat>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d102      	bne.n	8008ad8 <_fstat_r+0x1c>
 8008ad2:	682b      	ldr	r3, [r5, #0]
 8008ad4:	b103      	cbz	r3, 8008ad8 <_fstat_r+0x1c>
 8008ad6:	6023      	str	r3, [r4, #0]
 8008ad8:	bd38      	pop	{r3, r4, r5, pc}
 8008ada:	bf00      	nop
 8008adc:	2000086c 	.word	0x2000086c

08008ae0 <_isatty_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d06      	ldr	r5, [pc, #24]	; (8008afc <_isatty_r+0x1c>)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	4608      	mov	r0, r1
 8008aea:	602b      	str	r3, [r5, #0]
 8008aec:	f7f8 f82d 	bl	8000b4a <_isatty>
 8008af0:	1c43      	adds	r3, r0, #1
 8008af2:	d102      	bne.n	8008afa <_isatty_r+0x1a>
 8008af4:	682b      	ldr	r3, [r5, #0]
 8008af6:	b103      	cbz	r3, 8008afa <_isatty_r+0x1a>
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	bd38      	pop	{r3, r4, r5, pc}
 8008afc:	2000086c 	.word	0x2000086c

08008b00 <_lseek_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	4d07      	ldr	r5, [pc, #28]	; (8008b20 <_lseek_r+0x20>)
 8008b04:	4604      	mov	r4, r0
 8008b06:	4608      	mov	r0, r1
 8008b08:	4611      	mov	r1, r2
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	602a      	str	r2, [r5, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	f7f8 f826 	bl	8000b60 <_lseek>
 8008b14:	1c43      	adds	r3, r0, #1
 8008b16:	d102      	bne.n	8008b1e <_lseek_r+0x1e>
 8008b18:	682b      	ldr	r3, [r5, #0]
 8008b1a:	b103      	cbz	r3, 8008b1e <_lseek_r+0x1e>
 8008b1c:	6023      	str	r3, [r4, #0]
 8008b1e:	bd38      	pop	{r3, r4, r5, pc}
 8008b20:	2000086c 	.word	0x2000086c

08008b24 <_read_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d07      	ldr	r5, [pc, #28]	; (8008b44 <_read_r+0x20>)
 8008b28:	4604      	mov	r4, r0
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	602a      	str	r2, [r5, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f7f7 ffb4 	bl	8000aa0 <_read>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_read_r+0x1e>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_read_r+0x1e>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	2000086c 	.word	0x2000086c

08008b48 <_init>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr

08008b54 <_fini>:
 8008b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b56:	bf00      	nop
 8008b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b5a:	bc08      	pop	{r3}
 8008b5c:	469e      	mov	lr, r3
 8008b5e:	4770      	bx	lr
